<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<head>
<title>Egg Crasher Video Game</title>
<link href="css/style.css" rel="stylesheet" type="text/css">
<style type="text/css">
<!--
.STYLE7 {font-size: 12px}
.STYLE8 {font-family: Calibri}
-->
</style>
</head>

<body>
<table align="center" width="1003" border="0" cellspacing="0" cellpadding="0" height="30" class="ke-zeroborder">
	<tbody>
		<tr>
			<td align="center" valign="middle" class="style01">&nbsp;
				
			</td>
		</tr>
	</tbody>
</table>
<table align="center" width="1003" border="0" cellspacing="0" cellpadding="0" height="50" class="ke-zeroborder">
	<tbody>
		<tr>
			<td align="center" valign="middle" class="style0">
				Egg Crasher Video Game
			</td>
		</tr>
	</tbody>
</table>
<table align="center" width="1003" border="0" cellspacing="0" cellpadding="0" height="30" class="ke-zeroborder">
	<tbody>
		<tr>
			<td align="center" valign="middle" class="style01">&nbsp;
				
			</td>
		</tr>
	</tbody>
</table>
<table align="center" width="1003" border="0" cellspacing="0" cellpadding="0" height="30" class="ke-zeroborder">
	<tbody>
		<tr>
			<td align="center" valign="middle" class="style01">
				ECE 5760
			</td>
		</tr>
	</tbody>
</table>
<table align="center" width="1003" border="0" cellspacing="0" cellpadding="0" height="30" class="ke-zeroborder">
	<tbody>
		<tr>
			<td align="center" valign="middle" class="style01">
				Spring 2014
			</td>
		</tr>
	</tbody>
</table>

<table align="center" width="1003" border="0" cellspacing="0" cellpadding="0" height="30" class="ke-zeroborder">
	<tbody>
		<tr>
			<td align="center" valign="middle" class="style01">&nbsp;
				
			</td>
		</tr>
	</tbody>
</table>
<!--
<table align="center" width="1003" border="0" cellspacing="0" cellpadding="0" height="30" class="ke-zeroborder">
	<tbody>
		<tr>
			<td align="center" valign="middle" class="style01">
				
			</td>
		</tr>
	</tbody>
</table>

<table width="1003" height="30" border="0" align="center" cellpadding="0" cellspacing="0" class="ke-zeroborder">
	<tbody>
		<tr>
			<td align="center" valign="middle" class="style02">
				<img src="images/0.JPG" width="800" height="600" /> 
			</td>
		</tr>
	</tbody>
</table>
-->
<table width="1003" height="30" border="0" align="center" cellpadding="0" cellspacing="0" class="ke-zeroborder">
	<tbody>
		<tr>
			<td align="center" valign="middle" class="style02">
				Team Member: Zhenxuan Qiu, Jiachen Hu, Jianglu Xu(Georald)
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" border="0" align="center" cellpadding="0" cellspacing="0" class="ke-zeroborder">
	<tbody>
		<tr>
			<td align="center" valign="middle" class="style02">
				<p>
				Project Video: </p>
				<p><iframe width="560" height="315" src="../../../../../../../../www.youtube.com/embed/RnmUTEWmkOM@list=PL2E0D05BEC0140F13" frameborder="0" allowfullscreen></iframe>
			  </p>
			</td>
		</tr>
	</tbody>
</table>
<table align="center" width="1003" height="25" border="0" cellpadding="0" cellspacing="0" class="ke-zeroborder">
	<tbody>
		<tr>
			<td class="style03">
				Contents
			</td>
		</tr>
	</tbody>
</table>
<table width="995" height="900" border="0" cellpadding="0" cellspacing="0" align="center" class="style1 ke-zeroborder">
	<tbody>
		<tr>
			<td width="41" align="center" valign="middle" class="style1">
				<strong>1</strong> 
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" align="left" valign="middle" class="style1">
				<strong><a href="#1">Introduction</a></strong> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				1.1
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<a href="#11">Brief  Summary</a> 
			</td>
		</tr>
		<tr>
			<td width="41" align="center" valign="middle" class="style1">
				<strong>2</strong> 
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" align="left" valign="middle" class="style1">
				<strong><a href="#2">High Level Design</a></strong> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				2.1
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<a href="#21"><span>Project Idea and Game&nbsp;</span><span>Rationale</span></a> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				2.2
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<a href="#22">Logic Structure</a><span id="__kindeditor_bookmark_end_125__"></span> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				2.3
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<a href="#23"><span>Choice of Programming Method</span></a> 
			</td>
		</tr>
		<tr>
			<td width="41" align="center" valign="middle" class="style1">
				<div align="center">
					<strong>3</strong> 
				</div>
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" align="left" valign="middle" class="style1">
				<strong><a href="#3">Hardware Design</a></strong> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				3.1
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<a href="#31">M4K</a> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				3.2
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" align="left" valign="middle" class="style1 style1 style1">
				<a href="#32">VGA controller&nbsp;</a> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				3.3
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<a href="#33">Camera Input</a> 
			</td>
		</tr>
		<tr>
			<td width="41" align="center" valign="middle" class="style1">
				<strong>4</strong> 
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" align="left" valign="middle" class="style1">
				<strong><a href="#4">Program  Design</a></strong> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				4.1
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<a href="#41">State Machine</a><span id="__kindeditor_bookmark_end_675__"></span> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				4.2
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" align="left" valign="middle" class="style1 style1">
				<a href="#42">Pen Detection</a><a href="../../../../../ece4760/FinalProjects/f2013/zh239_ec488_jx236/zh239_ec488_jx236/zh239_ec488_jx236/index.html#42"> </a> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				4.3
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<a href="#43">Draw Tracking</a><a href="../../../../../ece4760/FinalProjects/f2013/zh239_ec488_jx236/zh239_ec488_jx236/zh239_ec488_jx236/index.html#43"> </a> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				4.4
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<a href="#44">Circle Accuracy Detection</a><a href="../../../../../ece4760/FinalProjects/f2013/zh239_ec488_jx236/zh239_ec488_jx236/zh239_ec488_jx236/index.html#44"> </a> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				4.5
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<a href="#45">Object Falling Motion and Hit Detection</a><a href="../../../../../ece4760/FinalProjects/f2013/zh239_ec488_jx236/zh239_ec488_jx236/zh239_ec488_jx236/index.html#45"> </a> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				4.6
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" align="left" valign="middle" class="style1 style1">
				<a href="#46">Other Programming Details</a> 
			</td>
		</tr>
		<tr>
			<td width="41" align="center" valign="middle" class="style1">
				<strong>5</strong> 
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" align="left" valign="middle" class="style1">
				<strong><a href="#5">Results of Design</a><a href="../../../../../ece4760/FinalProjects/f2013/zh239_ec488_jx236/zh239_ec488_jx236/zh239_ec488_jx236/index.html#5"> </a></strong> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				5.1
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<span><a href="#51">Game Outcome</a></span><a href="../../../../../ece4760/FinalProjects/f2013/zh239_ec488_jx236/zh239_ec488_jx236/zh239_ec488_jx236/index.html#51"> </a> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				5.2
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<a href="#52"><span>Speed of Executio</span><span>n</span></a> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				5.3
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<u><a href="#53">Problems</a></u> 
			</td>
		</tr>
		<tr>
			<td width="41" align="center" valign="middle" class="style1">
				<strong>6</strong> 
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" align="left" valign="middle" class="style1">
				<strong><a href="#6">Conclusions</a></strong> 
			</td>
		</tr>
		<tr>
			<td width="41" align="center" valign="middle" class="style1">
				<strong>7</strong> 
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" align="left" valign="middle" class="style1">
				<strong><a href="#7">Appendix</a></strong> 
			</td>
		</tr>
		<tr>
			<td width="41" class="style1" align="right" valign="middle">
				7.1
			</td>
			<td width="13">&nbsp;
				
			</td>
			<td width="949" class="style1" align="left" valign="middle">
				<a href="#71">Commented Program Listing</a><a href="../../../../../ece4760/FinalProjects/f2013/zh239_ec488_jx236/zh239_ec488_jx236/zh239_ec488_jx236/index.html#75"> </a> 
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="">&nbsp;
				
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center" style="line-height:1.5;">
	<tbody>
		<tr>
			<td width="30" class="zwbt">
				1
			</td>
			<td width="973" class="zwbt">
				<a name="1"></a>Introduction
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center" style="line-height:1.5;">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				1.1
			</td>
			<td width="973" class="wz1">
				<a name="11"></a><span>Brief Summary</span> 
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="20">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">Our
project is to do an “egg crasher” video game. It is a single-player video game
based on real-time edge and color detection. The design is built on a Cyclone
II FPGA on an Altera DE2 development board, and the game is displayed on a VGA
monitor. The system detects the motion of the player’s hand in the vertical
direction through an HTC 231x CCD camera. </span><span style="line-height:1.5;">T</span><span style="line-height:1.5;">he </span><span style="line-height:1.5;">game requires the player to draw
a circle in front of the camera. It will then detect whether the circle is
round or not. The circle is given a damage according to the player’s drawing,
then the game drops this circle to hit a virtual egg in the bottom of the display. The better the
circle is, the higher the score player get as well as the extent that the egg is smashed.</span> 
				</p>
			</td>
		</tr>
	</tbody>
</table>
&nbsp;
<table width="1003" height="30" align="center" style="line-height:1.5;">
	<tbody>
		<tr>
			<td width="30" class="zwbt">
				2
			</td>
			<td width="973" class="zwbt">
				<a name="2"></a>High Level Design
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center" style="line-height:1.5;">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				2.1
			</td>
			<td width="973" class="wz1">
				<a name="21"></a><span>Project Idea and Game&nbsp;<span>Rationale</span></span> 
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">Our
idea came from a touch sensing cellphone game. In that game the player needs to
draw several graphs on the screen to form the player’s own army, so that the
player is able to fight against the </span><span style="line-height:1.5;">PC’s army. &nbsp;We think the detection of graph is very useful
in many cases and it is also very interesting, so we decided to design the
video game of “egg crasher” to smash the egg by player-defined circles.&nbsp;</span> 
				</p>
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<div align="center">
					<p>
						<img src="images/1.png" width="500"/> 
					</p>
				</div>
			</td>
		</tr>
	</tbody>
</table>
<table width="1002" height="30" align="center" class="wz">
	<tbody>
		<tr>
			<td height="30" style="text-align:center;">
				<strong>Figure 1: High
Level Hardware Block Diagram</strong><strong></strong> 
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">In
our game, the player needs to draw a circle as well as he can to smash the egg
on the screen. Whether the circle is drawn well enough is directly related to
its damage to the egg – the better the circle is, more damage it has to the
egg. To implement such a game we need a video camera to detect the player’s
finger or a pen, and we need to code a control program on the FPGA to conduct
the whole game and a VGA screen to display the game. The high-level hardware
block diagram is shown in Figure 1.&nbsp;</span> 
				</p>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				2.2
			</td>
			<td width="973" class="wz1">
				<a name="22"></a>Logic
Structure
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">The logic structure of our game is described as follows. First the player needs to draw a circle which is detected by FPGA program in several seconds, and a count-down timer will remind the player of the time. At the same time the drawn circle will be recorded and displayed on the screen as the “egg crasher”. After that the drawn circle will be checked by the program whether it is a good circle, then its damage will be decided according to the check result. The checking process is done quickly, and then the circle should fall down. In our game not every circle will hit the only egg on the screen – the circle will fall down from the place it is drawn so the player had better to carefully draw at the right place. &nbsp;If the circle fall down and hit the egg in the end, the egg may or may not be broken based on the damage of the circle. The degree of the egg falling apart is dependent on the damage, too.</span> 
				</p>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				2.3
			</td>
			<td width="973" class="wz1">
				<a name="23"></a>Choice of Programming Method
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">We
decided to use Verilog HDL hardware programing for this video game. Software
coding based on NIOS system is easier to implement and requires little effort
on memory clock handling, but it is slower than hardware programming. In the
opposite way, hardware programming of this game requires us to carefully handle
clock signals of memory and other hardware modules, yet the whole game will
speed up compared to a software game. Since we value processing speed more than
the ease of implementation, we chose to implement our game design purely by
Verilog HDL.</span>&nbsp;
				</p>
			</td>
		</tr>
	</tbody>
</table>
&nbsp;
<table width="1003" height="30" align="center" style="line-height:1.5;">
	<tbody>
		<tr>
			<td width="30" class="zwbt">
				3
			</td>
			<td width="973" class="zwbt">
				<a name="3"></a>Hardware Design
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center" style="line-height:1.5;">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				3.1
			</td>
			<td width="973" class="wz1">
				<a name="31"></a><span>M4</span><span>K</span> 
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">The
dual port M4K is implemented in the module called VGA_Buffer.v which
instantiated the module called altsyncram. It is a parameterizable
IP(intellectual property) block provided by Altera. By configuring the
parameter operation_mode to "BIDIR_DUAL_PORT" and ram_block_type
parameter to “M4K”, we instantiate a dual-port M4K block.&nbsp;The
address is 19bits long and each address only stores one bit, which is the state
for each pixel. The address is the combination of the X coordinate and Y
coordinate of the pixel on the screen, {Coord_X[9:0],Coord_Y[8:0]}.&nbsp;&nbsp;</span> 
				</p>
				<p>
					<span style="line-height:1.5;">Port
A is used to update memory for VGA display. The data and address comes from the
state machine. Port B only receives the read data request that comes from the
VGA controller and send the state bit for display.&nbsp;</span> 
				</p>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				3.2
			</td>
			<td width="973" class="wz1">
				<a name="32"></a>VGA controller<i>&nbsp;</i> 
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="50" align="center" class="wz">
	<tbody>
		<tr>
			<td>
				<span style="line-height:1.5;">The
code for VGA controller is provided by Professor Bruce Land. It is slightly
changed from the DE2 default design example. We directly connect it to our M4K memory
to get the data after providing the 19bits address of the memory as display. A
reset delay module is used to make sure each time the VGA is reset, all the
data can be cleared. A PLL module is also instantiated to generate
VGA_CTRL_CLK, AUD_CTRL_CLK and VGA_CLK which are used to drive VGA control
module, audio codec chip, and VGA separately to eliminate the possible phase
shift to make the display more stable.</span> 
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				3.3
			</td>
			<td width="973" class="wz1">
				<a name="33"></a>Camera Input
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">The
code for camera input module is also provided by Professor Bruce Land. The
video input controller provides a simple interface to the video decoder chip
present on the DE2 board. The video decoder chip, as connected on the DE2
board, accepts the composite video input through the Video-In jack on the DE2
board. The controller handles the data transmission and processing which is
necessary to obtain the picture data in a simple format. The chip configuration
is handled by the separate configuration module, which must be instantiated
when using the video input controller.</span> 
				</p>
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">For our project, the clock used for video input is
27MHz. We also modify the color space converter module to convert the color
from YUV 4:2:2 to YUV 4:4:4 and also from YCbCr 8-bit to RGB-10 bit. Since we
don’t need mirror effect for our display, we need to comment out the Mirror_Col
module in the code. Below (Figure 2) is the diagram showing the video signal
path in our camera input module.</span> 
				</p>
				<p class="MsoNormal">
					<table width="1003" align="center">
						<tbody>
							<tr>
								<td style="text-align:center;">
									<img src="images/2.png" /> 
								</td>
							</tr>
						</tbody>
					</table>
					<table class="wz" align="center" width="1003" height="50">
						<tbody>
							<tr>
								<td style="text-align:center;">
									<strong>Figure 2: Video Camera Input Module&nbsp;Signal&nbsp;Path</strong> 
								</td>
							</tr>
						</tbody>
					</table>
				</p>
			</td>
		</tr>
	</tbody>
</table>
&nbsp;
<table width="1003" height="30" align="center" style="line-height:1.5;">
	<tbody>
		<tr>
			<td width="30" class="zwbt">
				4
			</td>
			<td width="973" class="zwbt">
				<a name="4"></a>Program&nbsp;Design
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center" style="line-height:1.5;">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				4.1
			</td>
			<td width="973" class="wz1">
				<a name="41"></a>State Machine
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">There
are two state machines used in our game. One is the main state machine that
implements the detection, memory writing and tracking, circle accuracy check
and object falling function. Another state machine is a game logic FSM that
implements the game procedure functions, i.e. count-down timer for game
preparation and circle drawing, damage calculation, egg life calculation, and
ending game logic. These states together form a basic game engine for our
project. Two
FSM are shown in Figure 3 and Figure 4 respectively.</span>
				</p>
				<p>
					<span style="line-height:1.5;">The program details of our game can be organized in four main
logic parts: color detection, circle drawing, circle accuracy detection, and
object falling motion programming. Each part follows the design for test idea
during the implementation. We fully tested each logic parts by using LED lights
and timing diagrams, and then we put all of them together to form the whole
game. Those four parts are described in detail one by one.</span> 
				</p>
				<p class="MsoNormal">
					<table class="wz" align="center" width="1003" height="50">
						<tbody>
							<tr>
								<td>
									<div align="center">
										<p>
											<img src="images/3.png" /> 
										</p>
									</div>
								</td>
							</tr>
						</tbody>
					</table>
					<table width="1002" height="30" align="center" class="wz">
						<tbody>
							<tr>
								<td height="30" style="text-align:center;">
									<strong><span style="line-height:1.5;">Figure 3: Main
FSM of the “Egg Crasher” Video Game</span></strong> 
								</td>
							</tr>
						</tbody>
					</table>
				</p>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				<span style="line-height:1.5;">4.2</span>
			</td>
			<td width="973" class="wz1">
				<a name="42"></a><span style="line-height:1.5;">Pen Detection</span>
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">Object detection and tracking is
the most basic but one of the most important parts in our game implementation. We
used color detection because we think color detection is an easy and reliable
way to detect the player’s drawing. Although its detection result may not be as
reliable as motion detection result, it is much easier than motion detection
processing in terms of implementation, and the reliability of color detection
is good enough for our video game. It is a more efficient implementation method
in our video game case.</span>
				</p>
				<p>
					<span style="line-height:1.5;">For
color detection, we can detect the YUV values or detect the RGB values. In
order to make our detection more reliable we chose to detect the YUV values,
which are recorded and converted by the video camera hardware modules. Since
the green color is the easiest color that can be detected, we designed a draw
pen on top of which a small piece of green paper is fixed.</span>
				</p>
				<p>
					<span style="line-height:1.5;">First we set a threshold to
distinguish the green color from other colors. If the detected value is in our
defined threshold range, it is the wanted green color. The threshold value
range is not fixed, because different video cameras record the world in
slightly different data values. So each time we use a different video camera,
we should adjust the threshold slightly to make the green-color detection
reliable.&nbsp;</span>
				</p>
				<table class="wz" align="center" width="1003" height="50">
					<tbody>
						<tr>
							<td>
								<div align="center">
									<p>
										<img src="images/4.png" /> 
									</p>
								</div>
							</td>
						</tr>
					</tbody>
				</table>
				<table width="1002" height="30" align="center" class="wz">
					<tbody>
						<tr>
							<td height="30" style="text-align:center;">
								<strong><span style="line-height:1.5;">Figure 4:&nbsp;Game Procedure Logic FSM</span></strong> 
							</td>
						</tr>
					</tbody>
				</table>
				<p>
					<span style="line-height:1.5;">We only want to detect the piece of
green paper on the pen and ignore other green objects in the environment, so we
moved every green objects out of the sight of video game. However the video
camera is still able to detect the green colors from the environment due to several
light effects, so we designed a way to filter unwanted green colors when doing
color detection. When detecting green colors, we would check whether the green
area detected is large enough. Since the only green color thing is the draw pen
top, we detect the draw pen by checking whether the detected consecutive
green-color area is the large enough. Apart from that, we did not detect the
screen boundaries in a 20-pixel width in order to filter the boundary detection
failures. In this way any small green noise detected can be filtered and the
reliability of our color detection is enhanced. After the green area is
detected, the center of the green area is found to by green area boundary
coordinate plus the green area radius. The detection of the center is used to
draw the circle on the screen.&nbsp;</span>
				</p>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				<span style="line-height:1.5;">4.3</span>
			</td>
			<td width="973" class="wz1">
				<a name="43"></a><span style="line-height:1.5;">Draw Tracking</span>
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">In
order to draw something on the screen we also need to track the motion path of
the pen. The tracking is done by periodically check and detect the green top of
the pen (detect every 0.01 second). Each time the center of the detected green
area is recorded for drawing.</span>
				</p>
				<p>
					<span style="line-height:1.5;">After
the pen is detected and tracked, we can draw on the screen by writing a
specific color to pixels on the track of the drawing pen. We used the red color
in our game to distinguish the drawings with the environment. Whenever the VGA
pixel changes and it is on the track of the drawing, we write the red color
value to the corresponding address of the memory, so that the VGA screen can
periodically read the data from the memory for display.&nbsp;</span>
				</p>
				<p>
					<span style="line-height:1.5;">The
start of the drawing and the end of the drawing is set by the count-down timer.
At the beginning of the game the player will be given 3 seconds to prepare for
drawing. At the moment the timer counts down to zero second, our game program
starts writing the red color on the track of the player’s drawing. The drawing
process was designed to last for 5 seconds, because we think 5 seconds are
enough for the player to draw something, and it is also challenging for player to
draw a very good circle. When 5 seconds passes, i.e. the timer counts down to
zero second again, we stop writing red color values on the screen. Due to the
video camera reason the clock frequency is 27MHz, so we programmed a counter to
counts up whenever the clock changes. In this case every 27x10</span><sup><span style="line-height:1.5;">6</span></sup><span style="line-height:1.5;"> counts equals 1 second. After drawing a finish signal is given to the circle
accuracy detection part to start other process.&nbsp;</span>
				</p>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				<span style="line-height:1.5;">4.4</span>
			</td>
			<td width="973" class="wz1">
				<a name="44"></a><span style="line-height:1.5;">Circle Accuracy Detection</span>
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">Another
important part of our game is to check whether the circle drawn by the player
is good enough. There are many circle detection method, and we came up with a
boundary detection method that is easy to implement and reliable to use. When
the signal of finish drawing is received, all the pixels on the track are
checked to find out the top, bottom, left and right boundaries of the drawing
staff. Specifically, the top point, bottom point, left most point and right
most point are found and recorded. The coordinates of those points are used to
calculate the center of the drawings. Assume (X</span><sub><span style="line-height:1.5;">top</span></sub><span style="line-height:1.5;">, Y</span><sub><span style="line-height:1.5;">top</span></sub><span style="line-height:1.5;">)
and (X</span><sub><span style="line-height:1.5;">bottom</span></sub><span style="line-height:1.5;">, Y</span><sub><span style="line-height:1.5;">bottom</span></sub><span style="line-height:1.5;">) are the coordinates of the top and
bottom points, and (X</span><sub><span style="line-height:1.5;">left</span></sub><span style="line-height:1.5;">, Y</span><sub><span style="line-height:1.5;">left</span></sub><span style="line-height:1.5;">) and (X</span><sub><span style="line-height:1.5;">right</span></sub><span style="line-height:1.5;">,
Y</span><sub><span style="line-height:1.5;">right</span></sub><span style="line-height:1.5;">) are the coordinates of the left most and right most point. In
this way the coordinates of the center can be expressed as</span>
				</p>
				<p class="MsoNormal" align="center" style="text-align:center;">
					<span style="line-height:1.5;">(X</span><sub><span style="line-height:1.5;">center</span></sub><span style="line-height:1.5;">,
Y</span><sub><span style="line-height:1.5;">center</span></sub><span style="line-height:1.5;">) = ((X</span><sub><span style="line-height:1.5;">c_top&amp;bottom </span></sub><span style="line-height:1.5;">+ X</span><sub><span style="line-height:1.5;">c_left&amp;right</span></sub><span style="line-height:1.5;">)
/ 2, (Y</span><sub><span style="line-height:1.5;">c_top&amp;bottom </span></sub><span style="line-height:1.5;">+ Y</span><sub><span style="line-height:1.5;">c_left&amp;right</span></sub><span style="line-height:1.5;">) / 2),</span>
				</p>
<span style="line-height:1.5;">where</span>
				<p class="MsoNormal" align="center" style="text-align:center;">
					<span style="line-height:1.5;">(X</span><sub><span style="line-height:1.5;">c_top&amp;bottom</span></sub><span style="line-height:1.5;">,
Y</span><sub><span style="line-height:1.5;">c_top&amp;bottom</span></sub><span style="line-height:1.5;">) = ( min{X</span><sub><span style="line-height:1.5;">top</span></sub><span style="line-height:1.5;">, X</span><sub><span style="line-height:1.5;">bottom</span></sub><span style="line-height:1.5;">} + ΔX</span><sub><span style="line-height:1.5;">top&amp;bottom</span></sub><span style="line-height:1.5;">,
Y</span><sub><span style="line-height:1.5;">top</span></sub><span style="line-height:1.5;"> + ΔY</span><sub><span style="line-height:1.5;">top&amp;bottom</span></sub><span style="line-height:1.5;"> ),</span>
				</p>
				<p class="MsoNormal">
					<span style="line-height:1.5;">and</span>
				</p>
				<p class="MsoNormal" align="center" style="text-align:center;">
					<span style="line-height:1.5;">(X</span><sub><span style="line-height:1.5;">c_left&amp;right</span></sub><span style="line-height:1.5;">,
Y</span><sub><span style="line-height:1.5;">c_left&amp;right</span></sub><span style="line-height:1.5;">) = ( min{X</span><sub><span style="line-height:1.5;">left</span></sub><span style="line-height:1.5;">, X</span><sub><span style="line-height:1.5;">right</span></sub><span style="line-height:1.5;">} + ΔX</span><sub><span style="line-height:1.5;">left&amp;right</span></sub><span style="line-height:1.5;">,
Y</span><sub><span style="line-height:1.5;">left</span></sub><span style="line-height:1.5;"> + ΔY</span><sub><span style="line-height:1.5;">left&amp;right</span></sub><span style="line-height:1.5;"> ).</span>
				</p>
<span style="line-height:1.5;">Note
that (X</span><sub><span style="line-height:1.5;">c_top&amp;bottom</span></sub><span style="line-height:1.5;">, Y</span><sub><span style="line-height:1.5;">c_top&amp;bottom</span></sub><span style="line-height:1.5;">) is the center
calculated by top and bottom points, and (X</span><sub><span style="line-height:1.5;">c_left&amp;right</span></sub><span style="line-height:1.5;">, Y</span><sub><span style="line-height:1.5;">c_left&amp;right</span></sub><span style="line-height:1.5;">)
is the center calculated by left most and right most points. Also note that ΔX</span><sub><span style="line-height:1.5;">top&amp;bottom</span></sub><span style="line-height:1.5;"> is the distance of top and bottom points in terms of x coordinates, ΔX</span><sub><span style="line-height:1.5;">left&amp;right</span></sub><span style="line-height:1.5;"> is the distance of left and right points in terms of x coordinates, ΔY</span><sub><span style="line-height:1.5;">top&amp;bottom</span></sub><span style="line-height:1.5;"> is the distance of top and bottom points in terms of y coordinates, and ΔY</span><sub><span style="line-height:1.5;">left&amp;right</span></sub><span style="line-height:1.5;"> is the distance of left and right points in terms of y coordinates.</span>
				<p>
					<span style="line-height:1.5;">This
method does not result in the exact center; it is an estimate center of the player’s
drawings. But it is quite accurate and reliable, and this method has already
been tested by us via comparing the result of the above method and that of our
own calculations.&nbsp;</span> 
				</p>
				<p>
					<span style="line-height:1.5;">After the center is
calculated, we checked every point on the track again to calculate the distance
from every point to the center. Then the maximum distance and minimum distance
are found to calculate the accuracy of the circle. The accuracy of the circle
is designed to be related to the ratio of the maximum distance and the minimum
distance. Due to the complexity of division implementation in Verilog, we built
an efficient look-up table to estimate the division computation. The ratio now
becomes the maximum distance right shifted by several number of times. The
number of times shifted is equal to the bit location of the most significant
1-value bit. In order to relate the ratio (i.e. the accuracy of the circle) to
the damage, another lookup table was built to scale the ratio into a damage
range from 0 to 20. The life of the egg is also 20, so that if the circle is
drawn very well, the egg can be crashed totally.</span> 
				</p>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				<span style="line-height:1.5;">4.5</span>
			</td>
			<td width="973" class="wz1">
				<a name="45"></a><span style="line-height:1.5;">Object Falling Motion and Hit Detection</span>
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">The
falling part is done by using a line buffer. Each time the lower lines of
values are buffered into the line buffer, and the original buffered values
(upper line) are written into the m4k blocks for VGA display. In this way the
two lines (upper and lower lines) are exchanged with each other, so that on the
screen the object is able to fall down. In order to prevent the object
“falling” from the bottom of the screen to the top of the screen, the y
coordinate counter is checked whether it is zero (i.e. whether it is at the
top). When the counter is zero, the falling stops.&nbsp;</span>
				</p>
				<p>
					<span style="line-height:1.5;">To
check the hit of the drawing staff to the egg, we found and record the middle
bottom point of the player’s drawing. It is because we found out that the
middle bottom point always hit the egg first when the circle fall down to the
egg. If that point hit the egg, the egg’s life is decreased by the damage
value. There is no life decreasing when the point does not hit the egg. &nbsp;&nbsp;</span>
				</p>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				<span style="line-height:1.5;">4.6</span>
			</td>
			<td width="973" class="wz1">
				<a name="46"></a><span style="line-height:1.5;">Other Programming Details</span>
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">The
above four parts are main parts of out game design and implementation. Apart
from those parts we also draw different broken eggs onto the VGA screen. All of
those eggs are drawn by us into several MIF file beforehand, and they were
stored in M4K blocks to form a lookup table. Which one to choose depends on the
stage of the game and the left life value of the egg. At the beginning of the
game, when the circle is not drawn on the screen, a full egg is displayed on
the ground on the screen.&nbsp;</span>
				</p>
				<p>
					<span style="line-height:1.5;">We
set the ground to be where y coordinate equals 400. Whenever the circle falls
down and hit the egg, other egg figures will be chosen according to the damage.
This game is also designed to give player several chances to fully smash the
egg – if the egg is not totally broken, the player can press KEY[3] on the DE
II board to keep drawing to smash the egg. Different from reset button after
pressing which all things are reset to initial values, the current egg figure
will be kept as it is when pressing KEY[3]. In this way the player is able to
enjoy the game more. &nbsp;</span>
				</p>
			</td>
		</tr>
	</tbody>
</table>
&nbsp;
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="zwbt">
				<span style="line-height:1.5;">5</span>
			</td>
			<td width="973" class="zwbt">
				<a name="5"></a><span style="line-height:1.5;">Results of Design</span>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				<span style="line-height:1.5;">5.1</span>
			</td>
			<td width="973" class="wz1">
				<a name="51"></a><span style="line-height:1.5;">Game Outcome</span>
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">Despite
the fact that “win” and count down display on the screen cannot be implemented
due to not enough FPGA resources, the results of the game meet our expectation
very well. The green color track goes well, the player is only able to draw the
circle within the 5-second time, and the egg can be broken in different degree
according to the quality of the circle. All of those game operations are what
we planned to do at the beginning. The resultant game can be shown in Figures 5
to Figure 9.</span>
				</p>
				<p>
					<table class="wz" align="center" width="1003" height="50">
						<tbody>
							<tr>
								<td>
									<div align="center">
										<p>
											<img src="images/5.jpg" width="640"/> 
										</p>
									</div>
								</td>
							</tr>
						</tbody>
					</table>
					<table width="1002" height="30" align="center" class="wz">
						<tbody>
							<tr>
								<td height="30" style="text-align:center;">
									<strong><span style="line-height:1.5;">Figure 5:&nbsp;Resultant
game – the scenario of drawing circle to smash egg</span></strong> 
								</td>
							</tr>
						</tbody>
					</table>
					<table class="wz" align="center" width="1003" height="50">
						<tbody>
							<tr>
								<td>
									<div align="center">
										<p>
											<img src="images/6.jpg" width="640"/> 
										</p>
									</div>
								</td>
							</tr>
						</tbody>
					</table>
					<table width="1002" height="30" align="center" class="wz">
						<tbody>
							<tr>
								<td height="30" style="text-align:center;">
									<strong><span style="line-height:1.5;">Figure 6:&nbsp;Resultant
game – the scenario of breaking egg slightly</span></strong> 
								</td>
							</tr>
						</tbody>
					</table>
					<table class="wz" align="center" width="1003" height="50">
						<tbody>
							<tr>
								<td>
									<div align="center">
										<p>
											<img src="images/7.jpg" width="640"/> 
										</p>
									</div>
								</td>
							</tr>
						</tbody>
					</table>
					<table width="1002" height="30" align="center" class="wz">
						<tbody>
							<tr>
								<td height="30" style="text-align:center;">
									<strong><span style="line-height:1.5;">Figure 7:&nbsp;Resultant
game – the scenario of breaking egg even more</span></strong> 
								</td>
							</tr>
						</tbody>
					</table>
					<table class="wz" align="center" width="1003" height="50">
						<tbody>
							<tr>
								<td>
									<div align="center">
										<p>
											<img src="images/8.jpg" width="640"/> 
										</p>
									</div>
								</td>
							</tr>
						</tbody>
					</table>
					<table width="1002" height="30" align="center" class="wz">
						<tbody>
							<tr>
								<td height="30" style="text-align:center;">
									<strong><span style="line-height:1.5;">Figure 8:&nbsp;Resultant
game – the scenario of breaking egg into two parts</span></strong> 
								</td>
							</tr>
						</tbody>
					</table>
					<table class="wz" align="center" width="1003" height="50">
						<tbody>
							<tr>
								<td>
									<div align="center">
										<p>
											<img src="images/9.jpg" width="640"/> 
										</p>
									</div>
								</td>
							</tr>
						</tbody>
					</table>
					<table width="1002" height="30" align="center" class="wz">
						<tbody>
							<tr>
								<td height="30" style="text-align:center;">
									<strong><span style="line-height:1.5;">Figure 9:&nbsp;Resultant
game – the scenario of breaking egg totally into pieces</span></strong> 
								</td>
							</tr>
						</tbody>
					</table>
				</p>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				<span style="line-height:1.5;">5.2</span>
			</td>
			<td width="973" class="wz1">
				<a name="52"></a><span style="line-height:1.5;">Speed of Executio</span><span style="line-height:1.5;">n</span> 
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">The
speed of our hardware program calculating the damage is very fast. We recorded
the time from the game starting to check the quality of the circle to working
out the damage value. The recorded time is always 90.74 ms, which means that every
time the player plays draws a circle, it will take our game about 90.74 ms to
calculate out its damage. It is very fast, and people feel very fluent and
natural playing this game. The reason that the time is always the same is due
to the fact that the boundary check and radius finding always need to check the
whole 640x480 screen for two times. Considering the fix time of other states,
the total calculating time is always fixed. This time is much faster than using
C coding, since C coding can be synthesized into much more complex HDLs than
direct hardware programming. Such complex HDL generated by C codes obviously
cost much more delay.&nbsp;</span>
				</p>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				<span style="line-height:1.5;">5.3</span>
			</td>
			<td width="973" class="wz1">
				<a name="53"></a><span style="line-height:1.5;">Problems</span>
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p class="MsoNormal">
					<span style="line-height:1.5;">Although it is a successful game design, there has something
that can be improved to make the game more reliable and interesting. For noise
filtering, currently we just detect the wanted green part by checking its area.
However in some cases, such as when using a poor video camera or the light of
the environment is poor, there can be large area of green-color noises that
interfere our detection. So two methods can be implemented to further enhance
the reliability. One method is to check the step size of the moving green
point. Considering the fact that the player can only draw consecutive things,
the step size should not be very large. So we can add the filtering logic that
if the step size is unexpectedly large, it is a noise to be filtered. Another
filtering method can be time filter, with which can check the color value of
the same point in consecutive time cycles to filter any unexpected change.</span>
				</p>
				<p>
					<span style="line-height:1.5;">The
result also turns out that the player cannot wear green clothes to play the
game. This restricts the players’ wearing, which is not very user friendly. In
order to solve this issue, color detection should be changed into other
detection methods such as motion detection. But at the same time the detection
logic would become more complex, leading to larger game processing latency. So
this is a trade-off we need to carefully handle.&nbsp;</span>
				</p>
			</td>
		</tr>
	</tbody>
</table>
&nbsp;
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="zwbt">
				<span style="line-height:1.5;">6</span>
			</td>
			<td width="973" class="zwbt">
				<a name="6"></a><span style="line-height:1.5;">Conclusions</span>
			</td>
		</tr>
	</tbody>
</table>
<table class="wz" align="center" width="1003" height="50">
	<tbody>
		<tr>
			<td>
				<p>
					<span style="line-height:1.5;">In
the final project we designed the “egg crasher” video game which asks players
to draw a good circle to smash the egg on the screen. We used a video camera, an
Altera DE II board and a VGA screen to implement the game, and we choose to
code it by Verilog HDL to make the game running fast. Altera’s m4k blocks were
used to store necessary data, and the video camera Verilog module provided by
Professor Bruce Land was used to setup the video camera. We coded the game by
several logic parts, full tested each of them, and then put them together to
form an interesting video game. The result turned out to be as good as we had
expected. All functionalities went well, and the speed of game calculating the
damage value is as fast as 90 ms. To make the game more reliable and player
friendly, more color noise filter techniques can be used, and maybe the whole
program can be optimized in terms of resource usage to allow timer display and
fancy figures added.</span>
				</p>
			</td>
		</tr>
	</tbody>
</table>
&nbsp;
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="zwbt">
				<span style="line-height:1.5;">7</span>
			</td>
			<td width="973" class="zwbt">
				<a name="7"></a><span style="line-height:1.5;">Appendix</span>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="wz1">
				<span style="line-height:1.5;">7.1</span>
			</td>
			<td width="973" class="wz1">
				<a name="71"></a><span style="line-height:1.5;">Commented Program Listing</span>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="38" align="center" class="wz">
	<tbody>
		<tr>
			<td>
				<a href="DE2_TV.v"><span style="line-height:1.5;">Top-Level Verilog Code</span></a> <br />
			</td>
		</tr>
		<tr>
			<td>
				<a href="cam_to_vga.zip"><span style="line-height:1.5;">Complete Quartus II Project</span></a> 
			</td>
		</tr>
	</tbody>
</table>
&nbsp;
<table width="1003" height="30" align="center">
	<tbody>
		<tr>
			<td width="30" class="zwbt">
				<span style="line-height:1.5;">8</span>
			</td>
			<td width="973" class="zwbt">
				<a name="8"></a><span style="line-height:1.5;">References</span>
			</td>
		</tr>
	</tbody>
</table>
<table width="1003" height="38" align="center" class="wz">
	<tbody>
		<tr>
			<td>
				<a href="../../../../default.htm"><span style="line-height:1.5;">http://people.ece.cornell.edu/land/courses/ece5760/</span></a> <br />
			</td>
		</tr>
	</tbody>
</table>
</body></html>