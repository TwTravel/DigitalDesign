; Shared memory video/character/mutex test
; sram video -- read/write 8 bits/pixel 
; shared memory -- read/write 16 bits
; mutex -- test-and-set, clear, read
; ==================================

constant ; named constants
	; ports
 	switches 0 ; in port 0
	sram_data 1  ; in port 1
	sync 2     ; in port 2
	cpu_id 3   ; in port 3
	rom_data 4 ; in port 4
	rom_addr 4 ; out port 4
	LEDred 3   ; output port 3
	
	; video address format:
	;--9 bits of Y in top bits
	;--9 bits of X in low bits -- excludes bit 0 of X
	vga_addr 0  ; out port 0
	sram_addr 0
	mutex_addr 0
	;8 bits color intensity
	vga_data 1  ; out port 1
	sram_data 1

	; vga_cntl:
	; bit 0 low => we
	; bit 1 low => write low byte
	; bit 1 high=> write high byte
	; bit 2 high => request sram access
	; bit 3 high => full word read/write
	; bit 4 high => mutex test and set
	; bit 5 high => mutex read
	; bit 6 high => mutex clear
	vga_cntl 2  ; out port 2
	sram_cntl 2  ; out port 2
	mutex_cntl 2 ; out 2
	
	; vga color codes
	white 255
	black 0
	gray1 21
	gray2 42
	gray3 63
	gray4	 170
	gray5 213
	gray6 234
	red 240
	yellow 252
	green 204
	cyan 207

	forever 1 ; for endless loop 
	
	; particle number
	N 1200
	
	; sram read/write locations
	; neg numbers imply high-mem locations
	not_done -1
	shared_count -2
	shared_count_no -3 ; no lock protection
	
	; mutex to protect read/modify/write
	mem_lock 7
	; mutexs to sync three processors for printing
	cpu2_lock 2
	cpu3_lock 3

	zero 48 ; ascii zero
	a 97 ; ascii lower case 'a'

; ==================================

variable ;data in memory 
	; adding a number allocates an array
	count  ; point index
	; the point coordinates
	x 1200
	y 1200
	rand   ; low order random
	rand2  ; high order random
	temp
	neighbor ; count of neighbors
	agg_count ; number in aggregate
	ymax ; highest agg point
	color ; color

	; putstr state
	vga_putstr_count
	vga_putstr_x
	vga_putstr_y
	vga_putstr_color

	; puthex state
	vga_puthex_x
	vga_puthex_y
	vga_puthex_color
	vga_puthex_value
	vga_puthex_count
	vga_puthex_shift
; ==================================

inline vga_point; x in stack-top, y in next, color in 3rd
   ; stack: color ycoord xcoord (top)
   ; store lower bit of x in 4
   ; and store shifted x to 5
   dup
   1 band pop.4 ; low order bit
   1 shr pop.5 ; 9 high bits
   ; y on stack, shift it 9 left
   9 shl
	; then OR with 9 bits of x
   push.5 bor out[vga_addr]
   ; color is top of stack
   ; if low bit of x is set, shift color to high byte
   if push.4 then 8 shl endif
   out[vga_data] 
   ; now zero we with low x-bit in bit-1
	push.4 1 shl 
	; ask for access (and set up write bits)
	4 bor out[vga_cntl] 
	; now wait for access
   while in[sync] not do endwhile 
   ;clear access and turn off write-bit (0)
   1 out[vga_cntl]
endinline

inline vga_read ; x in stack-top, y in next
   ; input stack: ycoord xcoord (top)
	; output: color
   ; store lower bit of x in 4
   ; and store shifted x to 5
   dup
   1 band pop.4 ; low order bit
   1 shr pop.5 ; 9 high bits
   ; y on stack, shift it 9 left
   9 shl
	; then OR with 9 bits of x
   push.5 bor out[vga_addr]
	; set up control
	; with write-enable high (bit 0)
   ; bit 2 is request for memory
	5 out[vga_cntl] 
 	; now wait for access
	while in[sync] not do endwhile 
	in[sram_data]
	; clear access bit 2
	1 out[vga_cntl] 
   ; if low bit of x is set, shift color to low byte
   if push.4 then 8 shr endif
   ; color is now on stack
endinline

inline sram_read ; 16 bits
; stack: addr (top)
; output: 16 bit value
	out[sram_addr]
	5 out[sram_cntl] ; access (bit 2) + read (bit 0)
	while in[sync] not do endwhile 
	in[sram_data]
   ;clear access and turn off write-bit (0)
   1 out[vga_cntl]
endinline

inline sram_write ; 16 bits
	; stack: data addr (top)
	out[sram_addr]
	out[sram_data]
	12 out[sram_cntl] ; access (bit 2) + full word (bit 3)
	; now wait for access
   while in[sync] not do endwhile 
   ;clear access and turn off write-bit (0)
   1 out[vga_cntl]
	nop. ; needed for timing to next event
endinline

inline mutex_test_set
	; input stack: mutex#
	; output: value
	out[sram_addr]
	17 out[sram_cntl] ; test-and-set (bit 4) + bit 0
	; now wait for access
   while in[sync] not do endwhile 
	in[sram_data]
   ;clear test-and-set and turn off write-bit (0)
   1 out[vga_cntl]
endinline

inline mutex_clear
	out[sram_addr]
	65 out[sram_cntl] ; test-and-set (bit 6) + bit 0
	; now wait for access
   while in[sync] not do endwhile 
   ;clear "clear" and turn off write-bit (0)
   1 out[vga_cntl]
endinline

inline mutex_read
	; input stack: mutex#
	; output: value
	out[sram_addr]
	33 out[sram_cntl] ; test-and-set (bit 4) + bit 0
	; now wait for access
   while in[sync] not do endwhile 
	in[sram_data]
   ;clear test-and-set and turn off write-bit (0)
   1 out[vga_cntl]
endinline

; ===================================
function
	rand_bit
	vga_putchar
	vga_putstr
	vga_puthex
	
; ===================================
 
program      ;   particle animation

main:	
; at reset: write zeros to the whole screen in hardware
; clear write controls
1 out[vga_cntl]

; draw a white line at the bottom of the screen
100 =count
while count 540 lt
do
	white 475 count vga_point
	count 1 add =count	
endwhile

;init the aggregate count
0 dup =agg_count out[LEDred] 
; init the shared count
; --three cpus can touch this location
0 shared_count sram_write
0 shared_count_no sram_write

;init the random number gen
in[switches] in[cpu_id] add =rand

; init the colors for each processor
; and the mutex for 2 and 3
; the mutex for 2 and 3 is read by cpu 1
; to guarantee that they are finished before
; a final aggregate count is printed
if in[cpu_id] 1 eq 
then 
	cyan =color 
endif

if in[cpu_id] 2 eq 
then 
	green =color 
	cpu2_lock mutex_test_set
endif

if in[cpu_id] 3 eq 
then 
	red =color
	cpu3_lock mutex_test_set
endif

; write a message
if in[cpu_id] 1 eq 
then 
	"Cornell yellow 5 20 vga_putstr 
	"ece5760 yellow 5 84 vga_putstr
	"count green 26 20 vga_putstr
	"count_low red 26 80 vga_putstr
endif

; init the flag which all cpus use to signal complete
; -- all three cpus can touch this value
1 not_done sram_write

;init the height of the highest white point
;460 in[cpu_id] 10 mul sub =ymax
450 =ymax
; init the initial particles
0 =count
while count N lt
do  
	count 1 shr =x[count]
	ymax =y[count]
	count 1 add =count	
endwhile

; main animation loop
; terminates when any cpu reaches top of screen   	
while not_done sram_read 
do 
	0 =count
	; update all points
	while count N lt
	do 	
		
		; === erase point ===
		black y[count] x[count] vga_point
			
		; === update positions ===
		;update x positions
		rand_bit x[count] add =x[count]

		;update y positions
		rand_bit y[count] add =y[count]

		; screen boundary checks for x
		if x[count] 635 gt then
			; and put back inside the box
			633 =x[count]
		endif

		if x[count] 5 le then
			7 =x[count]
		endif

		; screen boundary check for y
		if y[count] 475 gt then
			470 =y[count]
		endif

		if y[count] 5 le then
			7 =y[count]
		endif

		; === write point ===
		color y[count] x[count] vga_point

		; === check for frozen neighbors (in sram) ===
		; === need to check 8 neighbors ===
		0 =neighbor
		if y[count] 1 add x[count] 1 add vga_read white eq 
		then neighbor 1 add =neighbor endif

		if y[count] 1 add x[count] 1 sub vga_read white eq 
		then neighbor 1 add =neighbor endif

		if y[count] 1 sub x[count] 1 add vga_read white eq 
		then neighbor 1 add =neighbor endif

		if y[count] 1 sub x[count] 1 sub vga_read white eq 
		then neighbor 1 add =neighbor endif

		if y[count] x[count] 1 add vga_read white eq 
		then neighbor 1 add =neighbor endif

		if y[count] x[count] 1 sub vga_read white eq 
		then neighbor 1 add =neighbor endif

		if y[count] 1 sub x[count] vga_read white eq 
		then neighbor 1 add =neighbor endif

		if y[count] 1 add x[count] vga_read white eq 
		then neighbor 1 add =neighbor endif
		
		if neighbor 0 gt ; freeze the point and gen a new pt
		then
			white y[count] x[count] vga_point
			; update local count
			agg_count 1 add dup =agg_count out[LEDred]
			
			; -- shared count with NO lock protection
			shared_count_no sram_read 1 add 	
					shared_count_no sram_write
			;share the count
			; --now the protected count
			; wait for memory lock
			while mem_lock mutex_test_set do endwhile
			; do the read, add, write
			shared_count sram_read 1 add shared_count sram_write
			; release the lock
			mem_lock mutex_clear
			
			;
			; gen a new diffusor
			; make y position adaptive to stay above highest point
			if y[count] ymax lt then y[count] 20 sub =ymax endif
			; randomize x 
			count rand_bit 127 mul add 
			rand_bit 63 mul add 
			rand_bit 31 mul add 
			511 band 60 add =x[count] 
			ymax =y[count]

			; set shared end of execution flag
			if ymax 10 lt then 0 not_done sram_write endif

			; shared count to screen
			if in[cpu_id] 1 eq
			then 
				shared_count sram_read green 42 20 vga_puthex 
			endif
		endif ; new neighbor

		count 1 add =count
	endwhile ; particle update loop
	
endwhile ; reached top of screen

; indicate that cpu 2 has finished
if in[cpu_id] 2 eq
then 
	cpu2_lock mutex_clear
endif

; indicate that cpu 3 has finished
if in[cpu_id] 3 eq
then 
	cpu3_lock mutex_clear
endif

; wait until both cpu 2 and 3 are done, then
; print shared aggregate count
if in[cpu_id] 1 eq
then 
	while cpu2_lock mutex_read do endwhile
	while cpu3_lock mutex_read do endwhile
	shared_count sram_read green 42 20 vga_puthex 
	shared_count_no sram_read red 42 80 vga_puthex 
endif

; re-write header message
if in[cpu_id] 1 eq 
then 
	"Cornell white 5 20 vga_putstr 
	"ece5760 white 5 84 vga_putstr
	"count green 26 20 vga_putstr
	"count_low red 26 80 vga_putstr
endif

;halt	
while forever do endwhile

;===============================
; VGA put hex number
;===============================

; enters with an 18-bit value on the stack
; to print to VGA
; stack: value color y x (top)
vga_puthex:
	=vga_puthex_x
	=vga_puthex_y
	=vga_puthex_color
	=vga_puthex_value
	
	5 =vga_puthex_count ; number of digits to print
	16 =vga_puthex_shift ; shift factor
	while vga_puthex_count 0 gt
	do
	   vga_puthex_value vga_puthex_shift shr 15 band
	   if dup 10 lt
	   then zero add 
	   else 10 sub a add
	   endif
	   vga_puthex_color vga_puthex_y vga_puthex_x 
		vga_putchar
		; update counter and shift for next digit
	   vga_puthex_count 1 sub =vga_puthex_count 
	   vga_puthex_shift 4 sub =vga_puthex_shift 
		vga_puthex_x 8 add =vga_puthex_x 
	endwhile
return
;===============================
; VGA put string
;===============================
; enters with stack:
; nchars n color y x (top)
; count n on the stack 
; followed by n characters on the stack
vga_putstr:
	=vga_putstr_x
	=vga_putstr_y
	=vga_putstr_color
	=vga_putstr_count
	while vga_putstr_count 0 gt
	do
	   vga_putstr_color vga_putstr_y vga_putstr_x 
		vga_putchar
		vga_putstr_x 8 add =vga_putstr_x 
	   vga_putstr_count 1 sub =vga_putstr_count
	endwhile
return
;===============================
; VGA put character
;===============================
; enters with a 8-bit character
; x coordinate and y coordinate
; and color
; stack: char color y x (top)
vga_putchar: 
	pop.8 ; store x
	pop.9 ; store y
	pop.6 ; store color
	4 shl pop.7 ; store char*16
	0 pop.11 ; init y counter
	while push.11 16 lt
	do
		push.7 push.11 add out[rom_addr] ; line of char in rom
		0 pop.10 ; init bit counter (x)
		while push.10 8 lt
		do
			; get the line and shift it so always
			; check high bit of byte and set color
			if in[rom_data] push.10 shl 128 band 
			then push.6 else black endif
			; form y
			push.9 push.11 add
			; form x
			push.8 push.10 add
			vga_point ; write the point
			; x position update
			push.10 1 add pop.10
		endwhile
		; y position update
		push.11 1 add pop.11
	endwhile	
return

;===============================
; random number generator
;===============================
; from "Art of Electronics" page 657
; entry: uses nothing on stack
; exit: +1 or -1 on stack
; 36-bit shift reg:
; shift left one bit
; bits 36 and 25 XORed (2nd reg bit 17 and 6)
; and stored to bit 0
rand_bit: 
    ; get high order rand register and copy for xor
    ; shift left to align bits 17 and 6
    ; bitwise xor
    ; move bit 17 to bit 0
    ; save xor bit for later
    rand2 dup 11 shl bxor 17 shr =temp

    ; modify rand2 by shifting in the high
    ; order bit from rand --
    ; get rand and shift right 17
    ; get rand2 shl 1-bit and OR with
    ; bit from rand
    rand 17 shr rand2 1 shl bor =rand2

    ; modify rand
    ; shift left to open up 0 bit  
    ; get the stored xor bit (in temp)
    ; OR to form new final rand
    ; dup to store and for output
    rand 1 shl temp bor dup =rand

    ; construct +/-1 output
    ; band with 1 to isolate bit 0
    ; mult by 2 and subtract 1
    ; so that final output is +1 or -1    
    1 band 1 shl 1 sub
return
;===========================================
;== end of code ============================
;===========================================
