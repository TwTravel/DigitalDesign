// Computer_System_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.0 145

`timescale 1 ps / 1 ps
module Computer_System_mm_interconnect_2 (
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_awid,                                        //                                       ARM_A9_HPS_h2f_lw_axi_master.awid
		input  wire [20:0] ARM_A9_HPS_h2f_lw_axi_master_awaddr,                                      //                                                                   .awaddr
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_awlen,                                       //                                                                   .awlen
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_awsize,                                      //                                                                   .awsize
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_awburst,                                     //                                                                   .awburst
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_awlock,                                      //                                                                   .awlock
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_awcache,                                     //                                                                   .awcache
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_awprot,                                      //                                                                   .awprot
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_awvalid,                                     //                                                                   .awvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_awready,                                     //                                                                   .awready
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_wid,                                         //                                                                   .wid
		input  wire [31:0] ARM_A9_HPS_h2f_lw_axi_master_wdata,                                       //                                                                   .wdata
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_wstrb,                                       //                                                                   .wstrb
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_wlast,                                       //                                                                   .wlast
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_wvalid,                                      //                                                                   .wvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_wready,                                      //                                                                   .wready
		output wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_bid,                                         //                                                                   .bid
		output wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_bresp,                                       //                                                                   .bresp
		output wire        ARM_A9_HPS_h2f_lw_axi_master_bvalid,                                      //                                                                   .bvalid
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_bready,                                      //                                                                   .bready
		input  wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_arid,                                        //                                                                   .arid
		input  wire [20:0] ARM_A9_HPS_h2f_lw_axi_master_araddr,                                      //                                                                   .araddr
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_arlen,                                       //                                                                   .arlen
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_arsize,                                      //                                                                   .arsize
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_arburst,                                     //                                                                   .arburst
		input  wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_arlock,                                      //                                                                   .arlock
		input  wire [3:0]  ARM_A9_HPS_h2f_lw_axi_master_arcache,                                     //                                                                   .arcache
		input  wire [2:0]  ARM_A9_HPS_h2f_lw_axi_master_arprot,                                      //                                                                   .arprot
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_arvalid,                                     //                                                                   .arvalid
		output wire        ARM_A9_HPS_h2f_lw_axi_master_arready,                                     //                                                                   .arready
		output wire [11:0] ARM_A9_HPS_h2f_lw_axi_master_rid,                                         //                                                                   .rid
		output wire [31:0] ARM_A9_HPS_h2f_lw_axi_master_rdata,                                       //                                                                   .rdata
		output wire [1:0]  ARM_A9_HPS_h2f_lw_axi_master_rresp,                                       //                                                                   .rresp
		output wire        ARM_A9_HPS_h2f_lw_axi_master_rlast,                                       //                                                                   .rlast
		output wire        ARM_A9_HPS_h2f_lw_axi_master_rvalid,                                      //                                                                   .rvalid
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_rready,                                      //                                                                   .rready
		input  wire        System_PLL_sys_clk_clk,                                                   //                                                 System_PLL_sys_clk.clk
		input  wire        ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire        Audio_Subsystem_sys_reset_reset_bridge_in_reset_reset,                    //                    Audio_Subsystem_sys_reset_reset_bridge_in_reset.reset
		input  wire        AV_Config_reset_reset_bridge_in_reset_reset,                              //                              AV_Config_reset_reset_bridge_in_reset.reset
		output wire [1:0]  Audio_Subsystem_audio_slave_address,                                      //                                        Audio_Subsystem_audio_slave.address
		output wire        Audio_Subsystem_audio_slave_write,                                        //                                                                   .write
		output wire        Audio_Subsystem_audio_slave_read,                                         //                                                                   .read
		input  wire [31:0] Audio_Subsystem_audio_slave_readdata,                                     //                                                                   .readdata
		output wire [31:0] Audio_Subsystem_audio_slave_writedata,                                    //                                                                   .writedata
		output wire        Audio_Subsystem_audio_slave_chipselect,                                   //                                                                   .chipselect
		output wire [1:0]  AV_Config_avalon_av_config_slave_address,                                 //                                   AV_Config_avalon_av_config_slave.address
		output wire        AV_Config_avalon_av_config_slave_write,                                   //                                                                   .write
		output wire        AV_Config_avalon_av_config_slave_read,                                    //                                                                   .read
		input  wire [31:0] AV_Config_avalon_av_config_slave_readdata,                                //                                                                   .readdata
		output wire [31:0] AV_Config_avalon_av_config_slave_writedata,                               //                                                                   .writedata
		output wire [3:0]  AV_Config_avalon_av_config_slave_byteenable,                              //                                                                   .byteenable
		input  wire        AV_Config_avalon_av_config_slave_waitrequest,                             //                                                                   .waitrequest
		output wire [1:0]  HEX3_HEX0_s1_address,                                                     //                                                       HEX3_HEX0_s1.address
		output wire        HEX3_HEX0_s1_write,                                                       //                                                                   .write
		input  wire [31:0] HEX3_HEX0_s1_readdata,                                                    //                                                                   .readdata
		output wire [31:0] HEX3_HEX0_s1_writedata,                                                   //                                                                   .writedata
		output wire        HEX3_HEX0_s1_chipselect,                                                  //                                                                   .chipselect
		output wire [1:0]  LEDs_s1_address,                                                          //                                                            LEDs_s1.address
		output wire        LEDs_s1_write,                                                            //                                                                   .write
		input  wire [31:0] LEDs_s1_readdata,                                                         //                                                                   .readdata
		output wire [31:0] LEDs_s1_writedata,                                                        //                                                                   .writedata
		output wire        LEDs_s1_chipselect,                                                       //                                                                   .chipselect
		output wire [1:0]  Pixel_DMA_Addr_Translation_slave_address,                                 //                                   Pixel_DMA_Addr_Translation_slave.address
		output wire        Pixel_DMA_Addr_Translation_slave_write,                                   //                                                                   .write
		output wire        Pixel_DMA_Addr_Translation_slave_read,                                    //                                                                   .read
		input  wire [31:0] Pixel_DMA_Addr_Translation_slave_readdata,                                //                                                                   .readdata
		output wire [31:0] Pixel_DMA_Addr_Translation_slave_writedata,                               //                                                                   .writedata
		output wire [3:0]  Pixel_DMA_Addr_Translation_slave_byteenable,                              //                                                                   .byteenable
		input  wire        Pixel_DMA_Addr_Translation_slave_waitrequest,                             //                                                                   .waitrequest
		output wire [1:0]  Pushbuttons_s1_address,                                                   //                                                     Pushbuttons_s1.address
		output wire        Pushbuttons_s1_write,                                                     //                                                                   .write
		input  wire [31:0] Pushbuttons_s1_readdata,                                                  //                                                                   .readdata
		output wire [31:0] Pushbuttons_s1_writedata,                                                 //                                                                   .writedata
		output wire        Pushbuttons_s1_chipselect,                                                //                                                                   .chipselect
		output wire [1:0]  Slider_Switches_s1_address,                                               //                                                 Slider_Switches_s1.address
		input  wire [31:0] Slider_Switches_s1_readdata,                                              //                                                                   .readdata
		output wire [0:0]  SysID_control_slave_address,                                              //                                                SysID_control_slave.address
		input  wire [31:0] SysID_control_slave_readdata,                                             //                                                                   .readdata
		output wire [0:0]  VGA_Subsystem_char_buffer_control_slave_address,                          //                            VGA_Subsystem_char_buffer_control_slave.address
		output wire        VGA_Subsystem_char_buffer_control_slave_write,                            //                                                                   .write
		output wire        VGA_Subsystem_char_buffer_control_slave_read,                             //                                                                   .read
		input  wire [31:0] VGA_Subsystem_char_buffer_control_slave_readdata,                         //                                                                   .readdata
		output wire [31:0] VGA_Subsystem_char_buffer_control_slave_writedata,                        //                                                                   .writedata
		output wire [3:0]  VGA_Subsystem_char_buffer_control_slave_byteenable,                       //                                                                   .byteenable
		output wire        VGA_Subsystem_char_buffer_control_slave_chipselect,                       //                                                                   .chipselect
		output wire [1:0]  Video_In_DMA_Addr_Translation_slave_address,                              //                                Video_In_DMA_Addr_Translation_slave.address
		output wire        Video_In_DMA_Addr_Translation_slave_write,                                //                                                                   .write
		output wire        Video_In_DMA_Addr_Translation_slave_read,                                 //                                                                   .read
		input  wire [31:0] Video_In_DMA_Addr_Translation_slave_readdata,                             //                                                                   .readdata
		output wire [31:0] Video_In_DMA_Addr_Translation_slave_writedata,                            //                                                                   .writedata
		output wire [3:0]  Video_In_DMA_Addr_Translation_slave_byteenable,                           //                                                                   .byteenable
		input  wire        Video_In_DMA_Addr_Translation_slave_waitrequest,                          //                                                                   .waitrequest
		output wire [1:0]  Video_In_Subsystem_edge_detection_control_slave_address,                  //                    Video_In_Subsystem_edge_detection_control_slave.address
		output wire        Video_In_Subsystem_edge_detection_control_slave_write,                    //                                                                   .write
		input  wire [31:0] Video_In_Subsystem_edge_detection_control_slave_readdata,                 //                                                                   .readdata
		output wire [31:0] Video_In_Subsystem_edge_detection_control_slave_writedata,                //                                                                   .writedata
		output wire        Video_In_Subsystem_edge_detection_control_slave_chipselect                //                                                                   .chipselect
	);

	wire   [31:0] audio_subsystem_audio_slave_agent_m0_readdata;                                       // Audio_Subsystem_audio_slave_translator:uav_readdata -> Audio_Subsystem_audio_slave_agent:m0_readdata
	wire          audio_subsystem_audio_slave_agent_m0_waitrequest;                                    // Audio_Subsystem_audio_slave_translator:uav_waitrequest -> Audio_Subsystem_audio_slave_agent:m0_waitrequest
	wire          audio_subsystem_audio_slave_agent_m0_debugaccess;                                    // Audio_Subsystem_audio_slave_agent:m0_debugaccess -> Audio_Subsystem_audio_slave_translator:uav_debugaccess
	wire   [20:0] audio_subsystem_audio_slave_agent_m0_address;                                        // Audio_Subsystem_audio_slave_agent:m0_address -> Audio_Subsystem_audio_slave_translator:uav_address
	wire    [3:0] audio_subsystem_audio_slave_agent_m0_byteenable;                                     // Audio_Subsystem_audio_slave_agent:m0_byteenable -> Audio_Subsystem_audio_slave_translator:uav_byteenable
	wire          audio_subsystem_audio_slave_agent_m0_read;                                           // Audio_Subsystem_audio_slave_agent:m0_read -> Audio_Subsystem_audio_slave_translator:uav_read
	wire          audio_subsystem_audio_slave_agent_m0_readdatavalid;                                  // Audio_Subsystem_audio_slave_translator:uav_readdatavalid -> Audio_Subsystem_audio_slave_agent:m0_readdatavalid
	wire          audio_subsystem_audio_slave_agent_m0_lock;                                           // Audio_Subsystem_audio_slave_agent:m0_lock -> Audio_Subsystem_audio_slave_translator:uav_lock
	wire   [31:0] audio_subsystem_audio_slave_agent_m0_writedata;                                      // Audio_Subsystem_audio_slave_agent:m0_writedata -> Audio_Subsystem_audio_slave_translator:uav_writedata
	wire          audio_subsystem_audio_slave_agent_m0_write;                                          // Audio_Subsystem_audio_slave_agent:m0_write -> Audio_Subsystem_audio_slave_translator:uav_write
	wire    [2:0] audio_subsystem_audio_slave_agent_m0_burstcount;                                     // Audio_Subsystem_audio_slave_agent:m0_burstcount -> Audio_Subsystem_audio_slave_translator:uav_burstcount
	wire          audio_subsystem_audio_slave_agent_rf_source_valid;                                   // Audio_Subsystem_audio_slave_agent:rf_source_valid -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_valid
	wire  [118:0] audio_subsystem_audio_slave_agent_rf_source_data;                                    // Audio_Subsystem_audio_slave_agent:rf_source_data -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_data
	wire          audio_subsystem_audio_slave_agent_rf_source_ready;                                   // Audio_Subsystem_audio_slave_agent_rsp_fifo:in_ready -> Audio_Subsystem_audio_slave_agent:rf_source_ready
	wire          audio_subsystem_audio_slave_agent_rf_source_startofpacket;                           // Audio_Subsystem_audio_slave_agent:rf_source_startofpacket -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_startofpacket
	wire          audio_subsystem_audio_slave_agent_rf_source_endofpacket;                             // Audio_Subsystem_audio_slave_agent:rf_source_endofpacket -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_endofpacket
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_valid;                                // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_valid -> Audio_Subsystem_audio_slave_agent:rf_sink_valid
	wire  [118:0] audio_subsystem_audio_slave_agent_rsp_fifo_out_data;                                 // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_data -> Audio_Subsystem_audio_slave_agent:rf_sink_data
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_ready;                                // Audio_Subsystem_audio_slave_agent:rf_sink_ready -> Audio_Subsystem_audio_slave_agent_rsp_fifo:out_ready
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_startofpacket;                        // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_startofpacket -> Audio_Subsystem_audio_slave_agent:rf_sink_startofpacket
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_endofpacket;                          // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_endofpacket -> Audio_Subsystem_audio_slave_agent:rf_sink_endofpacket
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_src_valid;                              // Audio_Subsystem_audio_slave_agent:rdata_fifo_src_valid -> Audio_Subsystem_audio_slave_agent_rdata_fifo:in_valid
	wire   [33:0] audio_subsystem_audio_slave_agent_rdata_fifo_src_data;                               // Audio_Subsystem_audio_slave_agent:rdata_fifo_src_data -> Audio_Subsystem_audio_slave_agent_rdata_fifo:in_data
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_src_ready;                              // Audio_Subsystem_audio_slave_agent_rdata_fifo:in_ready -> Audio_Subsystem_audio_slave_agent:rdata_fifo_src_ready
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_readdata;                                  // AV_Config_avalon_av_config_slave_translator:uav_readdata -> AV_Config_avalon_av_config_slave_agent:m0_readdata
	wire          av_config_avalon_av_config_slave_agent_m0_waitrequest;                               // AV_Config_avalon_av_config_slave_translator:uav_waitrequest -> AV_Config_avalon_av_config_slave_agent:m0_waitrequest
	wire          av_config_avalon_av_config_slave_agent_m0_debugaccess;                               // AV_Config_avalon_av_config_slave_agent:m0_debugaccess -> AV_Config_avalon_av_config_slave_translator:uav_debugaccess
	wire   [20:0] av_config_avalon_av_config_slave_agent_m0_address;                                   // AV_Config_avalon_av_config_slave_agent:m0_address -> AV_Config_avalon_av_config_slave_translator:uav_address
	wire    [3:0] av_config_avalon_av_config_slave_agent_m0_byteenable;                                // AV_Config_avalon_av_config_slave_agent:m0_byteenable -> AV_Config_avalon_av_config_slave_translator:uav_byteenable
	wire          av_config_avalon_av_config_slave_agent_m0_read;                                      // AV_Config_avalon_av_config_slave_agent:m0_read -> AV_Config_avalon_av_config_slave_translator:uav_read
	wire          av_config_avalon_av_config_slave_agent_m0_readdatavalid;                             // AV_Config_avalon_av_config_slave_translator:uav_readdatavalid -> AV_Config_avalon_av_config_slave_agent:m0_readdatavalid
	wire          av_config_avalon_av_config_slave_agent_m0_lock;                                      // AV_Config_avalon_av_config_slave_agent:m0_lock -> AV_Config_avalon_av_config_slave_translator:uav_lock
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_writedata;                                 // AV_Config_avalon_av_config_slave_agent:m0_writedata -> AV_Config_avalon_av_config_slave_translator:uav_writedata
	wire          av_config_avalon_av_config_slave_agent_m0_write;                                     // AV_Config_avalon_av_config_slave_agent:m0_write -> AV_Config_avalon_av_config_slave_translator:uav_write
	wire    [2:0] av_config_avalon_av_config_slave_agent_m0_burstcount;                                // AV_Config_avalon_av_config_slave_agent:m0_burstcount -> AV_Config_avalon_av_config_slave_translator:uav_burstcount
	wire          av_config_avalon_av_config_slave_agent_rf_source_valid;                              // AV_Config_avalon_av_config_slave_agent:rf_source_valid -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_valid
	wire  [118:0] av_config_avalon_av_config_slave_agent_rf_source_data;                               // AV_Config_avalon_av_config_slave_agent:rf_source_data -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_data
	wire          av_config_avalon_av_config_slave_agent_rf_source_ready;                              // AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_ready -> AV_Config_avalon_av_config_slave_agent:rf_source_ready
	wire          av_config_avalon_av_config_slave_agent_rf_source_startofpacket;                      // AV_Config_avalon_av_config_slave_agent:rf_source_startofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rf_source_endofpacket;                        // AV_Config_avalon_av_config_slave_agent:rf_source_endofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid;                           // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_valid -> AV_Config_avalon_av_config_slave_agent:rf_sink_valid
	wire  [118:0] av_config_avalon_av_config_slave_agent_rsp_fifo_out_data;                            // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_data -> AV_Config_avalon_av_config_slave_agent:rf_sink_data
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready;                           // AV_Config_avalon_av_config_slave_agent:rf_sink_ready -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_ready
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket;                   // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_startofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket;                     // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_endofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid;                         // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_valid -> AV_Config_avalon_av_config_slave_agent_rdata_fifo:in_valid
	wire   [33:0] av_config_avalon_av_config_slave_agent_rdata_fifo_src_data;                          // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_data -> AV_Config_avalon_av_config_slave_agent_rdata_fifo:in_data
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready;                         // AV_Config_avalon_av_config_slave_agent_rdata_fifo:in_ready -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_ready
	wire   [31:0] vga_subsystem_char_buffer_control_slave_agent_m0_readdata;                           // VGA_Subsystem_char_buffer_control_slave_translator:uav_readdata -> VGA_Subsystem_char_buffer_control_slave_agent:m0_readdata
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_waitrequest;                        // VGA_Subsystem_char_buffer_control_slave_translator:uav_waitrequest -> VGA_Subsystem_char_buffer_control_slave_agent:m0_waitrequest
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_debugaccess;                        // VGA_Subsystem_char_buffer_control_slave_agent:m0_debugaccess -> VGA_Subsystem_char_buffer_control_slave_translator:uav_debugaccess
	wire   [20:0] vga_subsystem_char_buffer_control_slave_agent_m0_address;                            // VGA_Subsystem_char_buffer_control_slave_agent:m0_address -> VGA_Subsystem_char_buffer_control_slave_translator:uav_address
	wire    [3:0] vga_subsystem_char_buffer_control_slave_agent_m0_byteenable;                         // VGA_Subsystem_char_buffer_control_slave_agent:m0_byteenable -> VGA_Subsystem_char_buffer_control_slave_translator:uav_byteenable
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_read;                               // VGA_Subsystem_char_buffer_control_slave_agent:m0_read -> VGA_Subsystem_char_buffer_control_slave_translator:uav_read
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_readdatavalid;                      // VGA_Subsystem_char_buffer_control_slave_translator:uav_readdatavalid -> VGA_Subsystem_char_buffer_control_slave_agent:m0_readdatavalid
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_lock;                               // VGA_Subsystem_char_buffer_control_slave_agent:m0_lock -> VGA_Subsystem_char_buffer_control_slave_translator:uav_lock
	wire   [31:0] vga_subsystem_char_buffer_control_slave_agent_m0_writedata;                          // VGA_Subsystem_char_buffer_control_slave_agent:m0_writedata -> VGA_Subsystem_char_buffer_control_slave_translator:uav_writedata
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_write;                              // VGA_Subsystem_char_buffer_control_slave_agent:m0_write -> VGA_Subsystem_char_buffer_control_slave_translator:uav_write
	wire    [2:0] vga_subsystem_char_buffer_control_slave_agent_m0_burstcount;                         // VGA_Subsystem_char_buffer_control_slave_agent:m0_burstcount -> VGA_Subsystem_char_buffer_control_slave_translator:uav_burstcount
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_valid;                       // VGA_Subsystem_char_buffer_control_slave_agent:rf_source_valid -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_valid
	wire  [118:0] vga_subsystem_char_buffer_control_slave_agent_rf_source_data;                        // VGA_Subsystem_char_buffer_control_slave_agent:rf_source_data -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_ready;                       // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_ready -> VGA_Subsystem_char_buffer_control_slave_agent:rf_source_ready
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_startofpacket;               // VGA_Subsystem_char_buffer_control_slave_agent:rf_source_startofpacket -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_endofpacket;                 // VGA_Subsystem_char_buffer_control_slave_agent:rf_source_endofpacket -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_valid;                    // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_valid -> VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_valid
	wire  [118:0] vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_data;                     // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_data -> VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_ready;                    // VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_ready -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_ready
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket;            // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_startofpacket -> VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket;              // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_endofpacket -> VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_valid;                  // VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_src_valid -> VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_data;                   // VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_src_data -> VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:in_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_ready;                  // VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:in_ready -> VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                               // SysID_control_slave_translator:uav_readdata -> SysID_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                            // SysID_control_slave_translator:uav_waitrequest -> SysID_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                            // SysID_control_slave_agent:m0_debugaccess -> SysID_control_slave_translator:uav_debugaccess
	wire   [20:0] sysid_control_slave_agent_m0_address;                                                // SysID_control_slave_agent:m0_address -> SysID_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                             // SysID_control_slave_agent:m0_byteenable -> SysID_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                                   // SysID_control_slave_agent:m0_read -> SysID_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                          // SysID_control_slave_translator:uav_readdatavalid -> SysID_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                                   // SysID_control_slave_agent:m0_lock -> SysID_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                              // SysID_control_slave_agent:m0_writedata -> SysID_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                                  // SysID_control_slave_agent:m0_write -> SysID_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                             // SysID_control_slave_agent:m0_burstcount -> SysID_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                           // SysID_control_slave_agent:rf_source_valid -> SysID_control_slave_agent_rsp_fifo:in_valid
	wire  [118:0] sysid_control_slave_agent_rf_source_data;                                            // SysID_control_slave_agent:rf_source_data -> SysID_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                           // SysID_control_slave_agent_rsp_fifo:in_ready -> SysID_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                                   // SysID_control_slave_agent:rf_source_startofpacket -> SysID_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                     // SysID_control_slave_agent:rf_source_endofpacket -> SysID_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                        // SysID_control_slave_agent_rsp_fifo:out_valid -> SysID_control_slave_agent:rf_sink_valid
	wire  [118:0] sysid_control_slave_agent_rsp_fifo_out_data;                                         // SysID_control_slave_agent_rsp_fifo:out_data -> SysID_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                        // SysID_control_slave_agent:rf_sink_ready -> SysID_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                                // SysID_control_slave_agent_rsp_fifo:out_startofpacket -> SysID_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                                  // SysID_control_slave_agent_rsp_fifo:out_endofpacket -> SysID_control_slave_agent:rf_sink_endofpacket
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                      // SysID_control_slave_agent:rdata_fifo_src_valid -> SysID_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                       // SysID_control_slave_agent:rdata_fifo_src_data -> SysID_control_slave_agent_rdata_fifo:in_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                      // SysID_control_slave_agent_rdata_fifo:in_ready -> SysID_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] video_in_subsystem_edge_detection_control_slave_agent_m0_readdata;                   // Video_In_Subsystem_edge_detection_control_slave_translator:uav_readdata -> Video_In_Subsystem_edge_detection_control_slave_agent:m0_readdata
	wire          video_in_subsystem_edge_detection_control_slave_agent_m0_waitrequest;                // Video_In_Subsystem_edge_detection_control_slave_translator:uav_waitrequest -> Video_In_Subsystem_edge_detection_control_slave_agent:m0_waitrequest
	wire          video_in_subsystem_edge_detection_control_slave_agent_m0_debugaccess;                // Video_In_Subsystem_edge_detection_control_slave_agent:m0_debugaccess -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_debugaccess
	wire   [20:0] video_in_subsystem_edge_detection_control_slave_agent_m0_address;                    // Video_In_Subsystem_edge_detection_control_slave_agent:m0_address -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_address
	wire    [3:0] video_in_subsystem_edge_detection_control_slave_agent_m0_byteenable;                 // Video_In_Subsystem_edge_detection_control_slave_agent:m0_byteenable -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_byteenable
	wire          video_in_subsystem_edge_detection_control_slave_agent_m0_read;                       // Video_In_Subsystem_edge_detection_control_slave_agent:m0_read -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_read
	wire          video_in_subsystem_edge_detection_control_slave_agent_m0_readdatavalid;              // Video_In_Subsystem_edge_detection_control_slave_translator:uav_readdatavalid -> Video_In_Subsystem_edge_detection_control_slave_agent:m0_readdatavalid
	wire          video_in_subsystem_edge_detection_control_slave_agent_m0_lock;                       // Video_In_Subsystem_edge_detection_control_slave_agent:m0_lock -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_lock
	wire   [31:0] video_in_subsystem_edge_detection_control_slave_agent_m0_writedata;                  // Video_In_Subsystem_edge_detection_control_slave_agent:m0_writedata -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_writedata
	wire          video_in_subsystem_edge_detection_control_slave_agent_m0_write;                      // Video_In_Subsystem_edge_detection_control_slave_agent:m0_write -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_write
	wire    [2:0] video_in_subsystem_edge_detection_control_slave_agent_m0_burstcount;                 // Video_In_Subsystem_edge_detection_control_slave_agent:m0_burstcount -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_burstcount
	wire          video_in_subsystem_edge_detection_control_slave_agent_rf_source_valid;               // Video_In_Subsystem_edge_detection_control_slave_agent:rf_source_valid -> Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:in_valid
	wire  [118:0] video_in_subsystem_edge_detection_control_slave_agent_rf_source_data;                // Video_In_Subsystem_edge_detection_control_slave_agent:rf_source_data -> Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:in_data
	wire          video_in_subsystem_edge_detection_control_slave_agent_rf_source_ready;               // Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:in_ready -> Video_In_Subsystem_edge_detection_control_slave_agent:rf_source_ready
	wire          video_in_subsystem_edge_detection_control_slave_agent_rf_source_startofpacket;       // Video_In_Subsystem_edge_detection_control_slave_agent:rf_source_startofpacket -> Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:in_startofpacket
	wire          video_in_subsystem_edge_detection_control_slave_agent_rf_source_endofpacket;         // Video_In_Subsystem_edge_detection_control_slave_agent:rf_source_endofpacket -> Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:in_endofpacket
	wire          video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_valid;            // Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:out_valid -> Video_In_Subsystem_edge_detection_control_slave_agent:rf_sink_valid
	wire  [118:0] video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_data;             // Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:out_data -> Video_In_Subsystem_edge_detection_control_slave_agent:rf_sink_data
	wire          video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_ready;            // Video_In_Subsystem_edge_detection_control_slave_agent:rf_sink_ready -> Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:out_ready
	wire          video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_startofpacket;    // Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:out_startofpacket -> Video_In_Subsystem_edge_detection_control_slave_agent:rf_sink_startofpacket
	wire          video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_endofpacket;      // Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:out_endofpacket -> Video_In_Subsystem_edge_detection_control_slave_agent:rf_sink_endofpacket
	wire          video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_valid;          // Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_src_valid -> Video_In_Subsystem_edge_detection_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_data;           // Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_src_data -> Video_In_Subsystem_edge_detection_control_slave_agent_rdata_fifo:in_data
	wire          video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_ready;          // Video_In_Subsystem_edge_detection_control_slave_agent_rdata_fifo:in_ready -> Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] leds_s1_agent_m0_readdata;                                                           // LEDs_s1_translator:uav_readdata -> LEDs_s1_agent:m0_readdata
	wire          leds_s1_agent_m0_waitrequest;                                                        // LEDs_s1_translator:uav_waitrequest -> LEDs_s1_agent:m0_waitrequest
	wire          leds_s1_agent_m0_debugaccess;                                                        // LEDs_s1_agent:m0_debugaccess -> LEDs_s1_translator:uav_debugaccess
	wire   [20:0] leds_s1_agent_m0_address;                                                            // LEDs_s1_agent:m0_address -> LEDs_s1_translator:uav_address
	wire    [3:0] leds_s1_agent_m0_byteenable;                                                         // LEDs_s1_agent:m0_byteenable -> LEDs_s1_translator:uav_byteenable
	wire          leds_s1_agent_m0_read;                                                               // LEDs_s1_agent:m0_read -> LEDs_s1_translator:uav_read
	wire          leds_s1_agent_m0_readdatavalid;                                                      // LEDs_s1_translator:uav_readdatavalid -> LEDs_s1_agent:m0_readdatavalid
	wire          leds_s1_agent_m0_lock;                                                               // LEDs_s1_agent:m0_lock -> LEDs_s1_translator:uav_lock
	wire   [31:0] leds_s1_agent_m0_writedata;                                                          // LEDs_s1_agent:m0_writedata -> LEDs_s1_translator:uav_writedata
	wire          leds_s1_agent_m0_write;                                                              // LEDs_s1_agent:m0_write -> LEDs_s1_translator:uav_write
	wire    [2:0] leds_s1_agent_m0_burstcount;                                                         // LEDs_s1_agent:m0_burstcount -> LEDs_s1_translator:uav_burstcount
	wire          leds_s1_agent_rf_source_valid;                                                       // LEDs_s1_agent:rf_source_valid -> LEDs_s1_agent_rsp_fifo:in_valid
	wire  [118:0] leds_s1_agent_rf_source_data;                                                        // LEDs_s1_agent:rf_source_data -> LEDs_s1_agent_rsp_fifo:in_data
	wire          leds_s1_agent_rf_source_ready;                                                       // LEDs_s1_agent_rsp_fifo:in_ready -> LEDs_s1_agent:rf_source_ready
	wire          leds_s1_agent_rf_source_startofpacket;                                               // LEDs_s1_agent:rf_source_startofpacket -> LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire          leds_s1_agent_rf_source_endofpacket;                                                 // LEDs_s1_agent:rf_source_endofpacket -> LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire          leds_s1_agent_rsp_fifo_out_valid;                                                    // LEDs_s1_agent_rsp_fifo:out_valid -> LEDs_s1_agent:rf_sink_valid
	wire  [118:0] leds_s1_agent_rsp_fifo_out_data;                                                     // LEDs_s1_agent_rsp_fifo:out_data -> LEDs_s1_agent:rf_sink_data
	wire          leds_s1_agent_rsp_fifo_out_ready;                                                    // LEDs_s1_agent:rf_sink_ready -> LEDs_s1_agent_rsp_fifo:out_ready
	wire          leds_s1_agent_rsp_fifo_out_startofpacket;                                            // LEDs_s1_agent_rsp_fifo:out_startofpacket -> LEDs_s1_agent:rf_sink_startofpacket
	wire          leds_s1_agent_rsp_fifo_out_endofpacket;                                              // LEDs_s1_agent_rsp_fifo:out_endofpacket -> LEDs_s1_agent:rf_sink_endofpacket
	wire          leds_s1_agent_rdata_fifo_src_valid;                                                  // LEDs_s1_agent:rdata_fifo_src_valid -> LEDs_s1_agent_rdata_fifo:in_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_src_data;                                                   // LEDs_s1_agent:rdata_fifo_src_data -> LEDs_s1_agent_rdata_fifo:in_data
	wire          leds_s1_agent_rdata_fifo_src_ready;                                                  // LEDs_s1_agent_rdata_fifo:in_ready -> LEDs_s1_agent:rdata_fifo_src_ready
	wire   [31:0] hex3_hex0_s1_agent_m0_readdata;                                                      // HEX3_HEX0_s1_translator:uav_readdata -> HEX3_HEX0_s1_agent:m0_readdata
	wire          hex3_hex0_s1_agent_m0_waitrequest;                                                   // HEX3_HEX0_s1_translator:uav_waitrequest -> HEX3_HEX0_s1_agent:m0_waitrequest
	wire          hex3_hex0_s1_agent_m0_debugaccess;                                                   // HEX3_HEX0_s1_agent:m0_debugaccess -> HEX3_HEX0_s1_translator:uav_debugaccess
	wire   [20:0] hex3_hex0_s1_agent_m0_address;                                                       // HEX3_HEX0_s1_agent:m0_address -> HEX3_HEX0_s1_translator:uav_address
	wire    [3:0] hex3_hex0_s1_agent_m0_byteenable;                                                    // HEX3_HEX0_s1_agent:m0_byteenable -> HEX3_HEX0_s1_translator:uav_byteenable
	wire          hex3_hex0_s1_agent_m0_read;                                                          // HEX3_HEX0_s1_agent:m0_read -> HEX3_HEX0_s1_translator:uav_read
	wire          hex3_hex0_s1_agent_m0_readdatavalid;                                                 // HEX3_HEX0_s1_translator:uav_readdatavalid -> HEX3_HEX0_s1_agent:m0_readdatavalid
	wire          hex3_hex0_s1_agent_m0_lock;                                                          // HEX3_HEX0_s1_agent:m0_lock -> HEX3_HEX0_s1_translator:uav_lock
	wire   [31:0] hex3_hex0_s1_agent_m0_writedata;                                                     // HEX3_HEX0_s1_agent:m0_writedata -> HEX3_HEX0_s1_translator:uav_writedata
	wire          hex3_hex0_s1_agent_m0_write;                                                         // HEX3_HEX0_s1_agent:m0_write -> HEX3_HEX0_s1_translator:uav_write
	wire    [2:0] hex3_hex0_s1_agent_m0_burstcount;                                                    // HEX3_HEX0_s1_agent:m0_burstcount -> HEX3_HEX0_s1_translator:uav_burstcount
	wire          hex3_hex0_s1_agent_rf_source_valid;                                                  // HEX3_HEX0_s1_agent:rf_source_valid -> HEX3_HEX0_s1_agent_rsp_fifo:in_valid
	wire  [118:0] hex3_hex0_s1_agent_rf_source_data;                                                   // HEX3_HEX0_s1_agent:rf_source_data -> HEX3_HEX0_s1_agent_rsp_fifo:in_data
	wire          hex3_hex0_s1_agent_rf_source_ready;                                                  // HEX3_HEX0_s1_agent_rsp_fifo:in_ready -> HEX3_HEX0_s1_agent:rf_source_ready
	wire          hex3_hex0_s1_agent_rf_source_startofpacket;                                          // HEX3_HEX0_s1_agent:rf_source_startofpacket -> HEX3_HEX0_s1_agent_rsp_fifo:in_startofpacket
	wire          hex3_hex0_s1_agent_rf_source_endofpacket;                                            // HEX3_HEX0_s1_agent:rf_source_endofpacket -> HEX3_HEX0_s1_agent_rsp_fifo:in_endofpacket
	wire          hex3_hex0_s1_agent_rsp_fifo_out_valid;                                               // HEX3_HEX0_s1_agent_rsp_fifo:out_valid -> HEX3_HEX0_s1_agent:rf_sink_valid
	wire  [118:0] hex3_hex0_s1_agent_rsp_fifo_out_data;                                                // HEX3_HEX0_s1_agent_rsp_fifo:out_data -> HEX3_HEX0_s1_agent:rf_sink_data
	wire          hex3_hex0_s1_agent_rsp_fifo_out_ready;                                               // HEX3_HEX0_s1_agent:rf_sink_ready -> HEX3_HEX0_s1_agent_rsp_fifo:out_ready
	wire          hex3_hex0_s1_agent_rsp_fifo_out_startofpacket;                                       // HEX3_HEX0_s1_agent_rsp_fifo:out_startofpacket -> HEX3_HEX0_s1_agent:rf_sink_startofpacket
	wire          hex3_hex0_s1_agent_rsp_fifo_out_endofpacket;                                         // HEX3_HEX0_s1_agent_rsp_fifo:out_endofpacket -> HEX3_HEX0_s1_agent:rf_sink_endofpacket
	wire          hex3_hex0_s1_agent_rdata_fifo_src_valid;                                             // HEX3_HEX0_s1_agent:rdata_fifo_src_valid -> HEX3_HEX0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] hex3_hex0_s1_agent_rdata_fifo_src_data;                                              // HEX3_HEX0_s1_agent:rdata_fifo_src_data -> HEX3_HEX0_s1_agent_rdata_fifo:in_data
	wire          hex3_hex0_s1_agent_rdata_fifo_src_ready;                                             // HEX3_HEX0_s1_agent_rdata_fifo:in_ready -> HEX3_HEX0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] slider_switches_s1_agent_m0_readdata;                                                // Slider_Switches_s1_translator:uav_readdata -> Slider_Switches_s1_agent:m0_readdata
	wire          slider_switches_s1_agent_m0_waitrequest;                                             // Slider_Switches_s1_translator:uav_waitrequest -> Slider_Switches_s1_agent:m0_waitrequest
	wire          slider_switches_s1_agent_m0_debugaccess;                                             // Slider_Switches_s1_agent:m0_debugaccess -> Slider_Switches_s1_translator:uav_debugaccess
	wire   [20:0] slider_switches_s1_agent_m0_address;                                                 // Slider_Switches_s1_agent:m0_address -> Slider_Switches_s1_translator:uav_address
	wire    [3:0] slider_switches_s1_agent_m0_byteenable;                                              // Slider_Switches_s1_agent:m0_byteenable -> Slider_Switches_s1_translator:uav_byteenable
	wire          slider_switches_s1_agent_m0_read;                                                    // Slider_Switches_s1_agent:m0_read -> Slider_Switches_s1_translator:uav_read
	wire          slider_switches_s1_agent_m0_readdatavalid;                                           // Slider_Switches_s1_translator:uav_readdatavalid -> Slider_Switches_s1_agent:m0_readdatavalid
	wire          slider_switches_s1_agent_m0_lock;                                                    // Slider_Switches_s1_agent:m0_lock -> Slider_Switches_s1_translator:uav_lock
	wire   [31:0] slider_switches_s1_agent_m0_writedata;                                               // Slider_Switches_s1_agent:m0_writedata -> Slider_Switches_s1_translator:uav_writedata
	wire          slider_switches_s1_agent_m0_write;                                                   // Slider_Switches_s1_agent:m0_write -> Slider_Switches_s1_translator:uav_write
	wire    [2:0] slider_switches_s1_agent_m0_burstcount;                                              // Slider_Switches_s1_agent:m0_burstcount -> Slider_Switches_s1_translator:uav_burstcount
	wire          slider_switches_s1_agent_rf_source_valid;                                            // Slider_Switches_s1_agent:rf_source_valid -> Slider_Switches_s1_agent_rsp_fifo:in_valid
	wire  [118:0] slider_switches_s1_agent_rf_source_data;                                             // Slider_Switches_s1_agent:rf_source_data -> Slider_Switches_s1_agent_rsp_fifo:in_data
	wire          slider_switches_s1_agent_rf_source_ready;                                            // Slider_Switches_s1_agent_rsp_fifo:in_ready -> Slider_Switches_s1_agent:rf_source_ready
	wire          slider_switches_s1_agent_rf_source_startofpacket;                                    // Slider_Switches_s1_agent:rf_source_startofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_startofpacket
	wire          slider_switches_s1_agent_rf_source_endofpacket;                                      // Slider_Switches_s1_agent:rf_source_endofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_endofpacket
	wire          slider_switches_s1_agent_rsp_fifo_out_valid;                                         // Slider_Switches_s1_agent_rsp_fifo:out_valid -> Slider_Switches_s1_agent:rf_sink_valid
	wire  [118:0] slider_switches_s1_agent_rsp_fifo_out_data;                                          // Slider_Switches_s1_agent_rsp_fifo:out_data -> Slider_Switches_s1_agent:rf_sink_data
	wire          slider_switches_s1_agent_rsp_fifo_out_ready;                                         // Slider_Switches_s1_agent:rf_sink_ready -> Slider_Switches_s1_agent_rsp_fifo:out_ready
	wire          slider_switches_s1_agent_rsp_fifo_out_startofpacket;                                 // Slider_Switches_s1_agent_rsp_fifo:out_startofpacket -> Slider_Switches_s1_agent:rf_sink_startofpacket
	wire          slider_switches_s1_agent_rsp_fifo_out_endofpacket;                                   // Slider_Switches_s1_agent_rsp_fifo:out_endofpacket -> Slider_Switches_s1_agent:rf_sink_endofpacket
	wire          slider_switches_s1_agent_rdata_fifo_src_valid;                                       // Slider_Switches_s1_agent:rdata_fifo_src_valid -> Slider_Switches_s1_agent_rdata_fifo:in_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_src_data;                                        // Slider_Switches_s1_agent:rdata_fifo_src_data -> Slider_Switches_s1_agent_rdata_fifo:in_data
	wire          slider_switches_s1_agent_rdata_fifo_src_ready;                                       // Slider_Switches_s1_agent_rdata_fifo:in_ready -> Slider_Switches_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pushbuttons_s1_agent_m0_readdata;                                                    // Pushbuttons_s1_translator:uav_readdata -> Pushbuttons_s1_agent:m0_readdata
	wire          pushbuttons_s1_agent_m0_waitrequest;                                                 // Pushbuttons_s1_translator:uav_waitrequest -> Pushbuttons_s1_agent:m0_waitrequest
	wire          pushbuttons_s1_agent_m0_debugaccess;                                                 // Pushbuttons_s1_agent:m0_debugaccess -> Pushbuttons_s1_translator:uav_debugaccess
	wire   [20:0] pushbuttons_s1_agent_m0_address;                                                     // Pushbuttons_s1_agent:m0_address -> Pushbuttons_s1_translator:uav_address
	wire    [3:0] pushbuttons_s1_agent_m0_byteenable;                                                  // Pushbuttons_s1_agent:m0_byteenable -> Pushbuttons_s1_translator:uav_byteenable
	wire          pushbuttons_s1_agent_m0_read;                                                        // Pushbuttons_s1_agent:m0_read -> Pushbuttons_s1_translator:uav_read
	wire          pushbuttons_s1_agent_m0_readdatavalid;                                               // Pushbuttons_s1_translator:uav_readdatavalid -> Pushbuttons_s1_agent:m0_readdatavalid
	wire          pushbuttons_s1_agent_m0_lock;                                                        // Pushbuttons_s1_agent:m0_lock -> Pushbuttons_s1_translator:uav_lock
	wire   [31:0] pushbuttons_s1_agent_m0_writedata;                                                   // Pushbuttons_s1_agent:m0_writedata -> Pushbuttons_s1_translator:uav_writedata
	wire          pushbuttons_s1_agent_m0_write;                                                       // Pushbuttons_s1_agent:m0_write -> Pushbuttons_s1_translator:uav_write
	wire    [2:0] pushbuttons_s1_agent_m0_burstcount;                                                  // Pushbuttons_s1_agent:m0_burstcount -> Pushbuttons_s1_translator:uav_burstcount
	wire          pushbuttons_s1_agent_rf_source_valid;                                                // Pushbuttons_s1_agent:rf_source_valid -> Pushbuttons_s1_agent_rsp_fifo:in_valid
	wire  [118:0] pushbuttons_s1_agent_rf_source_data;                                                 // Pushbuttons_s1_agent:rf_source_data -> Pushbuttons_s1_agent_rsp_fifo:in_data
	wire          pushbuttons_s1_agent_rf_source_ready;                                                // Pushbuttons_s1_agent_rsp_fifo:in_ready -> Pushbuttons_s1_agent:rf_source_ready
	wire          pushbuttons_s1_agent_rf_source_startofpacket;                                        // Pushbuttons_s1_agent:rf_source_startofpacket -> Pushbuttons_s1_agent_rsp_fifo:in_startofpacket
	wire          pushbuttons_s1_agent_rf_source_endofpacket;                                          // Pushbuttons_s1_agent:rf_source_endofpacket -> Pushbuttons_s1_agent_rsp_fifo:in_endofpacket
	wire          pushbuttons_s1_agent_rsp_fifo_out_valid;                                             // Pushbuttons_s1_agent_rsp_fifo:out_valid -> Pushbuttons_s1_agent:rf_sink_valid
	wire  [118:0] pushbuttons_s1_agent_rsp_fifo_out_data;                                              // Pushbuttons_s1_agent_rsp_fifo:out_data -> Pushbuttons_s1_agent:rf_sink_data
	wire          pushbuttons_s1_agent_rsp_fifo_out_ready;                                             // Pushbuttons_s1_agent:rf_sink_ready -> Pushbuttons_s1_agent_rsp_fifo:out_ready
	wire          pushbuttons_s1_agent_rsp_fifo_out_startofpacket;                                     // Pushbuttons_s1_agent_rsp_fifo:out_startofpacket -> Pushbuttons_s1_agent:rf_sink_startofpacket
	wire          pushbuttons_s1_agent_rsp_fifo_out_endofpacket;                                       // Pushbuttons_s1_agent_rsp_fifo:out_endofpacket -> Pushbuttons_s1_agent:rf_sink_endofpacket
	wire          pushbuttons_s1_agent_rdata_fifo_src_valid;                                           // Pushbuttons_s1_agent:rdata_fifo_src_valid -> Pushbuttons_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pushbuttons_s1_agent_rdata_fifo_src_data;                                            // Pushbuttons_s1_agent:rdata_fifo_src_data -> Pushbuttons_s1_agent_rdata_fifo:in_data
	wire          pushbuttons_s1_agent_rdata_fifo_src_ready;                                           // Pushbuttons_s1_agent_rdata_fifo:in_ready -> Pushbuttons_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pixel_dma_addr_translation_slave_agent_m0_readdata;                                  // Pixel_DMA_Addr_Translation_slave_translator:uav_readdata -> Pixel_DMA_Addr_Translation_slave_agent:m0_readdata
	wire          pixel_dma_addr_translation_slave_agent_m0_waitrequest;                               // Pixel_DMA_Addr_Translation_slave_translator:uav_waitrequest -> Pixel_DMA_Addr_Translation_slave_agent:m0_waitrequest
	wire          pixel_dma_addr_translation_slave_agent_m0_debugaccess;                               // Pixel_DMA_Addr_Translation_slave_agent:m0_debugaccess -> Pixel_DMA_Addr_Translation_slave_translator:uav_debugaccess
	wire   [20:0] pixel_dma_addr_translation_slave_agent_m0_address;                                   // Pixel_DMA_Addr_Translation_slave_agent:m0_address -> Pixel_DMA_Addr_Translation_slave_translator:uav_address
	wire    [3:0] pixel_dma_addr_translation_slave_agent_m0_byteenable;                                // Pixel_DMA_Addr_Translation_slave_agent:m0_byteenable -> Pixel_DMA_Addr_Translation_slave_translator:uav_byteenable
	wire          pixel_dma_addr_translation_slave_agent_m0_read;                                      // Pixel_DMA_Addr_Translation_slave_agent:m0_read -> Pixel_DMA_Addr_Translation_slave_translator:uav_read
	wire          pixel_dma_addr_translation_slave_agent_m0_readdatavalid;                             // Pixel_DMA_Addr_Translation_slave_translator:uav_readdatavalid -> Pixel_DMA_Addr_Translation_slave_agent:m0_readdatavalid
	wire          pixel_dma_addr_translation_slave_agent_m0_lock;                                      // Pixel_DMA_Addr_Translation_slave_agent:m0_lock -> Pixel_DMA_Addr_Translation_slave_translator:uav_lock
	wire   [31:0] pixel_dma_addr_translation_slave_agent_m0_writedata;                                 // Pixel_DMA_Addr_Translation_slave_agent:m0_writedata -> Pixel_DMA_Addr_Translation_slave_translator:uav_writedata
	wire          pixel_dma_addr_translation_slave_agent_m0_write;                                     // Pixel_DMA_Addr_Translation_slave_agent:m0_write -> Pixel_DMA_Addr_Translation_slave_translator:uav_write
	wire    [2:0] pixel_dma_addr_translation_slave_agent_m0_burstcount;                                // Pixel_DMA_Addr_Translation_slave_agent:m0_burstcount -> Pixel_DMA_Addr_Translation_slave_translator:uav_burstcount
	wire          pixel_dma_addr_translation_slave_agent_rf_source_valid;                              // Pixel_DMA_Addr_Translation_slave_agent:rf_source_valid -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_valid
	wire  [118:0] pixel_dma_addr_translation_slave_agent_rf_source_data;                               // Pixel_DMA_Addr_Translation_slave_agent:rf_source_data -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_data
	wire          pixel_dma_addr_translation_slave_agent_rf_source_ready;                              // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_ready -> Pixel_DMA_Addr_Translation_slave_agent:rf_source_ready
	wire          pixel_dma_addr_translation_slave_agent_rf_source_startofpacket;                      // Pixel_DMA_Addr_Translation_slave_agent:rf_source_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_startofpacket
	wire          pixel_dma_addr_translation_slave_agent_rf_source_endofpacket;                        // Pixel_DMA_Addr_Translation_slave_agent:rf_source_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_endofpacket
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid;                           // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_valid -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_valid
	wire  [118:0] pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data;                            // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_data -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_data
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready;                           // Pixel_DMA_Addr_Translation_slave_agent:rf_sink_ready -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_ready
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket;                   // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_startofpacket
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket;                     // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_endofpacket
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid;                         // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_valid -> Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:in_valid
	wire   [33:0] pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data;                          // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_data -> Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:in_data
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready;                         // Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:in_ready -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_ready
	wire   [31:0] video_in_dma_addr_translation_slave_agent_m0_readdata;                               // Video_In_DMA_Addr_Translation_slave_translator:uav_readdata -> Video_In_DMA_Addr_Translation_slave_agent:m0_readdata
	wire          video_in_dma_addr_translation_slave_agent_m0_waitrequest;                            // Video_In_DMA_Addr_Translation_slave_translator:uav_waitrequest -> Video_In_DMA_Addr_Translation_slave_agent:m0_waitrequest
	wire          video_in_dma_addr_translation_slave_agent_m0_debugaccess;                            // Video_In_DMA_Addr_Translation_slave_agent:m0_debugaccess -> Video_In_DMA_Addr_Translation_slave_translator:uav_debugaccess
	wire   [20:0] video_in_dma_addr_translation_slave_agent_m0_address;                                // Video_In_DMA_Addr_Translation_slave_agent:m0_address -> Video_In_DMA_Addr_Translation_slave_translator:uav_address
	wire    [3:0] video_in_dma_addr_translation_slave_agent_m0_byteenable;                             // Video_In_DMA_Addr_Translation_slave_agent:m0_byteenable -> Video_In_DMA_Addr_Translation_slave_translator:uav_byteenable
	wire          video_in_dma_addr_translation_slave_agent_m0_read;                                   // Video_In_DMA_Addr_Translation_slave_agent:m0_read -> Video_In_DMA_Addr_Translation_slave_translator:uav_read
	wire          video_in_dma_addr_translation_slave_agent_m0_readdatavalid;                          // Video_In_DMA_Addr_Translation_slave_translator:uav_readdatavalid -> Video_In_DMA_Addr_Translation_slave_agent:m0_readdatavalid
	wire          video_in_dma_addr_translation_slave_agent_m0_lock;                                   // Video_In_DMA_Addr_Translation_slave_agent:m0_lock -> Video_In_DMA_Addr_Translation_slave_translator:uav_lock
	wire   [31:0] video_in_dma_addr_translation_slave_agent_m0_writedata;                              // Video_In_DMA_Addr_Translation_slave_agent:m0_writedata -> Video_In_DMA_Addr_Translation_slave_translator:uav_writedata
	wire          video_in_dma_addr_translation_slave_agent_m0_write;                                  // Video_In_DMA_Addr_Translation_slave_agent:m0_write -> Video_In_DMA_Addr_Translation_slave_translator:uav_write
	wire    [2:0] video_in_dma_addr_translation_slave_agent_m0_burstcount;                             // Video_In_DMA_Addr_Translation_slave_agent:m0_burstcount -> Video_In_DMA_Addr_Translation_slave_translator:uav_burstcount
	wire          video_in_dma_addr_translation_slave_agent_rf_source_valid;                           // Video_In_DMA_Addr_Translation_slave_agent:rf_source_valid -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_valid
	wire  [118:0] video_in_dma_addr_translation_slave_agent_rf_source_data;                            // Video_In_DMA_Addr_Translation_slave_agent:rf_source_data -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_data
	wire          video_in_dma_addr_translation_slave_agent_rf_source_ready;                           // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_ready -> Video_In_DMA_Addr_Translation_slave_agent:rf_source_ready
	wire          video_in_dma_addr_translation_slave_agent_rf_source_startofpacket;                   // Video_In_DMA_Addr_Translation_slave_agent:rf_source_startofpacket -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_startofpacket
	wire          video_in_dma_addr_translation_slave_agent_rf_source_endofpacket;                     // Video_In_DMA_Addr_Translation_slave_agent:rf_source_endofpacket -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_endofpacket
	wire          video_in_dma_addr_translation_slave_agent_rsp_fifo_out_valid;                        // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_valid -> Video_In_DMA_Addr_Translation_slave_agent:rf_sink_valid
	wire  [118:0] video_in_dma_addr_translation_slave_agent_rsp_fifo_out_data;                         // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_data -> Video_In_DMA_Addr_Translation_slave_agent:rf_sink_data
	wire          video_in_dma_addr_translation_slave_agent_rsp_fifo_out_ready;                        // Video_In_DMA_Addr_Translation_slave_agent:rf_sink_ready -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_ready
	wire          video_in_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket;                // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_startofpacket -> Video_In_DMA_Addr_Translation_slave_agent:rf_sink_startofpacket
	wire          video_in_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket;                  // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_endofpacket -> Video_In_DMA_Addr_Translation_slave_agent:rf_sink_endofpacket
	wire          video_in_dma_addr_translation_slave_agent_rdata_fifo_src_valid;                      // Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_src_valid -> Video_In_DMA_Addr_Translation_slave_agent_rdata_fifo:in_valid
	wire   [33:0] video_in_dma_addr_translation_slave_agent_rdata_fifo_src_data;                       // Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_src_data -> Video_In_DMA_Addr_Translation_slave_agent_rdata_fifo:in_data
	wire          video_in_dma_addr_translation_slave_agent_rdata_fifo_src_ready;                      // Video_In_DMA_Addr_Translation_slave_agent_rdata_fifo:in_ready -> Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_src_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid;                                   // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [117:0] arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data;                                    // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready;                                   // router:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket;                           // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket;                             // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid;                                    // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [117:0] arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data;                                     // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready;                                    // router_001:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket;                            // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket;                              // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          audio_subsystem_audio_slave_agent_rp_valid;                                          // Audio_Subsystem_audio_slave_agent:rp_valid -> router_002:sink_valid
	wire  [117:0] audio_subsystem_audio_slave_agent_rp_data;                                           // Audio_Subsystem_audio_slave_agent:rp_data -> router_002:sink_data
	wire          audio_subsystem_audio_slave_agent_rp_ready;                                          // router_002:sink_ready -> Audio_Subsystem_audio_slave_agent:rp_ready
	wire          audio_subsystem_audio_slave_agent_rp_startofpacket;                                  // Audio_Subsystem_audio_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire          audio_subsystem_audio_slave_agent_rp_endofpacket;                                    // Audio_Subsystem_audio_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                // router_002:src_valid -> rsp_demux:sink_valid
	wire  [117:0] router_002_src_data;                                                                 // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                                // rsp_demux:sink_ready -> router_002:src_ready
	wire   [10:0] router_002_src_channel;                                                              // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                        // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                          // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rp_valid;                                     // AV_Config_avalon_av_config_slave_agent:rp_valid -> router_003:sink_valid
	wire  [117:0] av_config_avalon_av_config_slave_agent_rp_data;                                      // AV_Config_avalon_av_config_slave_agent:rp_data -> router_003:sink_data
	wire          av_config_avalon_av_config_slave_agent_rp_ready;                                     // router_003:sink_ready -> AV_Config_avalon_av_config_slave_agent:rp_ready
	wire          av_config_avalon_av_config_slave_agent_rp_startofpacket;                             // AV_Config_avalon_av_config_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rp_endofpacket;                               // AV_Config_avalon_av_config_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [117:0] router_003_src_data;                                                                 // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                                // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [10:0] router_003_src_channel;                                                              // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                        // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                          // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_valid;                              // VGA_Subsystem_char_buffer_control_slave_agent:rp_valid -> router_004:sink_valid
	wire  [117:0] vga_subsystem_char_buffer_control_slave_agent_rp_data;                               // VGA_Subsystem_char_buffer_control_slave_agent:rp_data -> router_004:sink_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_ready;                              // router_004:sink_ready -> VGA_Subsystem_char_buffer_control_slave_agent:rp_ready
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_startofpacket;                      // VGA_Subsystem_char_buffer_control_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_endofpacket;                        // VGA_Subsystem_char_buffer_control_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [117:0] router_004_src_data;                                                                 // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                                // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [10:0] router_004_src_channel;                                                              // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                        // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                          // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                                  // SysID_control_slave_agent:rp_valid -> router_005:sink_valid
	wire  [117:0] sysid_control_slave_agent_rp_data;                                                   // SysID_control_slave_agent:rp_data -> router_005:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                                  // router_005:sink_ready -> SysID_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                          // SysID_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                            // SysID_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [117:0] router_005_src_data;                                                                 // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                                // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [10:0] router_005_src_channel;                                                              // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                        // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                          // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          video_in_subsystem_edge_detection_control_slave_agent_rp_valid;                      // Video_In_Subsystem_edge_detection_control_slave_agent:rp_valid -> router_006:sink_valid
	wire  [117:0] video_in_subsystem_edge_detection_control_slave_agent_rp_data;                       // Video_In_Subsystem_edge_detection_control_slave_agent:rp_data -> router_006:sink_data
	wire          video_in_subsystem_edge_detection_control_slave_agent_rp_ready;                      // router_006:sink_ready -> Video_In_Subsystem_edge_detection_control_slave_agent:rp_ready
	wire          video_in_subsystem_edge_detection_control_slave_agent_rp_startofpacket;              // Video_In_Subsystem_edge_detection_control_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          video_in_subsystem_edge_detection_control_slave_agent_rp_endofpacket;                // Video_In_Subsystem_edge_detection_control_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [117:0] router_006_src_data;                                                                 // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                                // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [10:0] router_006_src_channel;                                                              // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                        // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                          // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          leds_s1_agent_rp_valid;                                                              // LEDs_s1_agent:rp_valid -> router_007:sink_valid
	wire  [117:0] leds_s1_agent_rp_data;                                                               // LEDs_s1_agent:rp_data -> router_007:sink_data
	wire          leds_s1_agent_rp_ready;                                                              // router_007:sink_ready -> LEDs_s1_agent:rp_ready
	wire          leds_s1_agent_rp_startofpacket;                                                      // LEDs_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          leds_s1_agent_rp_endofpacket;                                                        // LEDs_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [117:0] router_007_src_data;                                                                 // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                                // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [10:0] router_007_src_channel;                                                              // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                        // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                          // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          hex3_hex0_s1_agent_rp_valid;                                                         // HEX3_HEX0_s1_agent:rp_valid -> router_008:sink_valid
	wire  [117:0] hex3_hex0_s1_agent_rp_data;                                                          // HEX3_HEX0_s1_agent:rp_data -> router_008:sink_data
	wire          hex3_hex0_s1_agent_rp_ready;                                                         // router_008:sink_ready -> HEX3_HEX0_s1_agent:rp_ready
	wire          hex3_hex0_s1_agent_rp_startofpacket;                                                 // HEX3_HEX0_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          hex3_hex0_s1_agent_rp_endofpacket;                                                   // HEX3_HEX0_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [117:0] router_008_src_data;                                                                 // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                                // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [10:0] router_008_src_channel;                                                              // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                        // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                          // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          slider_switches_s1_agent_rp_valid;                                                   // Slider_Switches_s1_agent:rp_valid -> router_009:sink_valid
	wire  [117:0] slider_switches_s1_agent_rp_data;                                                    // Slider_Switches_s1_agent:rp_data -> router_009:sink_data
	wire          slider_switches_s1_agent_rp_ready;                                                   // router_009:sink_ready -> Slider_Switches_s1_agent:rp_ready
	wire          slider_switches_s1_agent_rp_startofpacket;                                           // Slider_Switches_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          slider_switches_s1_agent_rp_endofpacket;                                             // Slider_Switches_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [117:0] router_009_src_data;                                                                 // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                                // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [10:0] router_009_src_channel;                                                              // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                        // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                          // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          pushbuttons_s1_agent_rp_valid;                                                       // Pushbuttons_s1_agent:rp_valid -> router_010:sink_valid
	wire  [117:0] pushbuttons_s1_agent_rp_data;                                                        // Pushbuttons_s1_agent:rp_data -> router_010:sink_data
	wire          pushbuttons_s1_agent_rp_ready;                                                       // router_010:sink_ready -> Pushbuttons_s1_agent:rp_ready
	wire          pushbuttons_s1_agent_rp_startofpacket;                                               // Pushbuttons_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          pushbuttons_s1_agent_rp_endofpacket;                                                 // Pushbuttons_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [117:0] router_010_src_data;                                                                 // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                                // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [10:0] router_010_src_channel;                                                              // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                        // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                          // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          pixel_dma_addr_translation_slave_agent_rp_valid;                                     // Pixel_DMA_Addr_Translation_slave_agent:rp_valid -> router_011:sink_valid
	wire  [117:0] pixel_dma_addr_translation_slave_agent_rp_data;                                      // Pixel_DMA_Addr_Translation_slave_agent:rp_data -> router_011:sink_data
	wire          pixel_dma_addr_translation_slave_agent_rp_ready;                                     // router_011:sink_ready -> Pixel_DMA_Addr_Translation_slave_agent:rp_ready
	wire          pixel_dma_addr_translation_slave_agent_rp_startofpacket;                             // Pixel_DMA_Addr_Translation_slave_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          pixel_dma_addr_translation_slave_agent_rp_endofpacket;                               // Pixel_DMA_Addr_Translation_slave_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [117:0] router_011_src_data;                                                                 // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                                // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [10:0] router_011_src_channel;                                                              // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                        // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                          // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          video_in_dma_addr_translation_slave_agent_rp_valid;                                  // Video_In_DMA_Addr_Translation_slave_agent:rp_valid -> router_012:sink_valid
	wire  [117:0] video_in_dma_addr_translation_slave_agent_rp_data;                                   // Video_In_DMA_Addr_Translation_slave_agent:rp_data -> router_012:sink_data
	wire          video_in_dma_addr_translation_slave_agent_rp_ready;                                  // router_012:sink_ready -> Video_In_DMA_Addr_Translation_slave_agent:rp_ready
	wire          video_in_dma_addr_translation_slave_agent_rp_startofpacket;                          // Video_In_DMA_Addr_Translation_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          video_in_dma_addr_translation_slave_agent_rp_endofpacket;                            // Video_In_DMA_Addr_Translation_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                // router_012:src_valid -> rsp_demux_010:sink_valid
	wire  [117:0] router_012_src_data;                                                                 // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                                // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [10:0] router_012_src_channel;                                                              // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                        // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                          // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_src_valid;                                                                    // router:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [117:0] router_src_data;                                                                     // router:src_data -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                                    // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [10:0] router_src_channel;                                                                  // router:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                            // router:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                              // router:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [117:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;                                // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                               // cmd_demux:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [10:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                             // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                       // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                         // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                   // rsp_mux:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_src_data;                                                                    // rsp_mux:src_data -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                   // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [10:0] rsp_mux_src_channel;                                                                 // rsp_mux:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                           // rsp_mux:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                             // rsp_mux:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                               // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_valid
	wire  [117:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;                                // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_data -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                               // ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_ready -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [10:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                             // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                       // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                         // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                                // router_001:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [117:0] router_001_src_data;                                                                 // router_001:src_data -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [10:0] router_001_src_channel;                                                              // router_001:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                        // router_001:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                          // router_001:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [117:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;                                // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                               // cmd_demux_001:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [10:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                             // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                       // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                         // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                               // rsp_mux_001:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [117:0] rsp_mux_001_src_data;                                                                // rsp_mux_001:src_data -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                               // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [10:0] rsp_mux_001_src_channel;                                                             // rsp_mux_001:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                       // rsp_mux_001:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                         // rsp_mux_001:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                               // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_valid
	wire  [117:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;                                // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_data -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                               // ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_ready -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [10:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                             // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                       // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                         // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                                   // cmd_mux:src_valid -> Audio_Subsystem_audio_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_src_data;                                                                    // cmd_mux:src_data -> Audio_Subsystem_audio_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                   // Audio_Subsystem_audio_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [10:0] cmd_mux_src_channel;                                                                 // cmd_mux:src_channel -> Audio_Subsystem_audio_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                           // cmd_mux:src_startofpacket -> Audio_Subsystem_audio_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                             // cmd_mux:src_endofpacket -> Audio_Subsystem_audio_slave_burst_adapter:sink0_endofpacket
	wire          audio_subsystem_audio_slave_burst_adapter_source0_valid;                             // Audio_Subsystem_audio_slave_burst_adapter:source0_valid -> Audio_Subsystem_audio_slave_agent:cp_valid
	wire  [117:0] audio_subsystem_audio_slave_burst_adapter_source0_data;                              // Audio_Subsystem_audio_slave_burst_adapter:source0_data -> Audio_Subsystem_audio_slave_agent:cp_data
	wire          audio_subsystem_audio_slave_burst_adapter_source0_ready;                             // Audio_Subsystem_audio_slave_agent:cp_ready -> Audio_Subsystem_audio_slave_burst_adapter:source0_ready
	wire   [10:0] audio_subsystem_audio_slave_burst_adapter_source0_channel;                           // Audio_Subsystem_audio_slave_burst_adapter:source0_channel -> Audio_Subsystem_audio_slave_agent:cp_channel
	wire          audio_subsystem_audio_slave_burst_adapter_source0_startofpacket;                     // Audio_Subsystem_audio_slave_burst_adapter:source0_startofpacket -> Audio_Subsystem_audio_slave_agent:cp_startofpacket
	wire          audio_subsystem_audio_slave_burst_adapter_source0_endofpacket;                       // Audio_Subsystem_audio_slave_burst_adapter:source0_endofpacket -> Audio_Subsystem_audio_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                               // cmd_mux_001:src_valid -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_001_src_data;                                                                // cmd_mux_001:src_data -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                               // AV_Config_avalon_av_config_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [10:0] cmd_mux_001_src_channel;                                                             // cmd_mux_001:src_channel -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                       // cmd_mux_001:src_startofpacket -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                         // cmd_mux_001:src_endofpacket -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_endofpacket
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_valid;                        // AV_Config_avalon_av_config_slave_burst_adapter:source0_valid -> AV_Config_avalon_av_config_slave_agent:cp_valid
	wire  [117:0] av_config_avalon_av_config_slave_burst_adapter_source0_data;                         // AV_Config_avalon_av_config_slave_burst_adapter:source0_data -> AV_Config_avalon_av_config_slave_agent:cp_data
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_ready;                        // AV_Config_avalon_av_config_slave_agent:cp_ready -> AV_Config_avalon_av_config_slave_burst_adapter:source0_ready
	wire   [10:0] av_config_avalon_av_config_slave_burst_adapter_source0_channel;                      // AV_Config_avalon_av_config_slave_burst_adapter:source0_channel -> AV_Config_avalon_av_config_slave_agent:cp_channel
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_startofpacket;                // AV_Config_avalon_av_config_slave_burst_adapter:source0_startofpacket -> AV_Config_avalon_av_config_slave_agent:cp_startofpacket
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_endofpacket;                  // AV_Config_avalon_av_config_slave_burst_adapter:source0_endofpacket -> AV_Config_avalon_av_config_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                               // cmd_mux_002:src_valid -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_002_src_data;                                                                // cmd_mux_002:src_data -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                               // VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [10:0] cmd_mux_002_src_channel;                                                             // cmd_mux_002:src_channel -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                       // cmd_mux_002:src_startofpacket -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                         // cmd_mux_002:src_endofpacket -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_burst_adapter_source0_valid;                 // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_valid -> VGA_Subsystem_char_buffer_control_slave_agent:cp_valid
	wire  [117:0] vga_subsystem_char_buffer_control_slave_burst_adapter_source0_data;                  // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_data -> VGA_Subsystem_char_buffer_control_slave_agent:cp_data
	wire          vga_subsystem_char_buffer_control_slave_burst_adapter_source0_ready;                 // VGA_Subsystem_char_buffer_control_slave_agent:cp_ready -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_ready
	wire   [10:0] vga_subsystem_char_buffer_control_slave_burst_adapter_source0_channel;               // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_channel -> VGA_Subsystem_char_buffer_control_slave_agent:cp_channel
	wire          vga_subsystem_char_buffer_control_slave_burst_adapter_source0_startofpacket;         // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_startofpacket -> VGA_Subsystem_char_buffer_control_slave_agent:cp_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_burst_adapter_source0_endofpacket;           // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_endofpacket -> VGA_Subsystem_char_buffer_control_slave_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                               // cmd_mux_003:src_valid -> SysID_control_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_003_src_data;                                                                // cmd_mux_003:src_data -> SysID_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                               // SysID_control_slave_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [10:0] cmd_mux_003_src_channel;                                                             // cmd_mux_003:src_channel -> SysID_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                       // cmd_mux_003:src_startofpacket -> SysID_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                         // cmd_mux_003:src_endofpacket -> SysID_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_control_slave_burst_adapter_source0_valid;                                     // SysID_control_slave_burst_adapter:source0_valid -> SysID_control_slave_agent:cp_valid
	wire  [117:0] sysid_control_slave_burst_adapter_source0_data;                                      // SysID_control_slave_burst_adapter:source0_data -> SysID_control_slave_agent:cp_data
	wire          sysid_control_slave_burst_adapter_source0_ready;                                     // SysID_control_slave_agent:cp_ready -> SysID_control_slave_burst_adapter:source0_ready
	wire   [10:0] sysid_control_slave_burst_adapter_source0_channel;                                   // SysID_control_slave_burst_adapter:source0_channel -> SysID_control_slave_agent:cp_channel
	wire          sysid_control_slave_burst_adapter_source0_startofpacket;                             // SysID_control_slave_burst_adapter:source0_startofpacket -> SysID_control_slave_agent:cp_startofpacket
	wire          sysid_control_slave_burst_adapter_source0_endofpacket;                               // SysID_control_slave_burst_adapter:source0_endofpacket -> SysID_control_slave_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                               // cmd_mux_004:src_valid -> Video_In_Subsystem_edge_detection_control_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_004_src_data;                                                                // cmd_mux_004:src_data -> Video_In_Subsystem_edge_detection_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                               // Video_In_Subsystem_edge_detection_control_slave_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [10:0] cmd_mux_004_src_channel;                                                             // cmd_mux_004:src_channel -> Video_In_Subsystem_edge_detection_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                       // cmd_mux_004:src_startofpacket -> Video_In_Subsystem_edge_detection_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                         // cmd_mux_004:src_endofpacket -> Video_In_Subsystem_edge_detection_control_slave_burst_adapter:sink0_endofpacket
	wire          video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_valid;         // Video_In_Subsystem_edge_detection_control_slave_burst_adapter:source0_valid -> Video_In_Subsystem_edge_detection_control_slave_agent:cp_valid
	wire  [117:0] video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_data;          // Video_In_Subsystem_edge_detection_control_slave_burst_adapter:source0_data -> Video_In_Subsystem_edge_detection_control_slave_agent:cp_data
	wire          video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_ready;         // Video_In_Subsystem_edge_detection_control_slave_agent:cp_ready -> Video_In_Subsystem_edge_detection_control_slave_burst_adapter:source0_ready
	wire   [10:0] video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_channel;       // Video_In_Subsystem_edge_detection_control_slave_burst_adapter:source0_channel -> Video_In_Subsystem_edge_detection_control_slave_agent:cp_channel
	wire          video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_startofpacket; // Video_In_Subsystem_edge_detection_control_slave_burst_adapter:source0_startofpacket -> Video_In_Subsystem_edge_detection_control_slave_agent:cp_startofpacket
	wire          video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_endofpacket;   // Video_In_Subsystem_edge_detection_control_slave_burst_adapter:source0_endofpacket -> Video_In_Subsystem_edge_detection_control_slave_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                               // cmd_mux_005:src_valid -> LEDs_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_005_src_data;                                                                // cmd_mux_005:src_data -> LEDs_s1_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                               // LEDs_s1_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [10:0] cmd_mux_005_src_channel;                                                             // cmd_mux_005:src_channel -> LEDs_s1_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                       // cmd_mux_005:src_startofpacket -> LEDs_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                         // cmd_mux_005:src_endofpacket -> LEDs_s1_burst_adapter:sink0_endofpacket
	wire          leds_s1_burst_adapter_source0_valid;                                                 // LEDs_s1_burst_adapter:source0_valid -> LEDs_s1_agent:cp_valid
	wire  [117:0] leds_s1_burst_adapter_source0_data;                                                  // LEDs_s1_burst_adapter:source0_data -> LEDs_s1_agent:cp_data
	wire          leds_s1_burst_adapter_source0_ready;                                                 // LEDs_s1_agent:cp_ready -> LEDs_s1_burst_adapter:source0_ready
	wire   [10:0] leds_s1_burst_adapter_source0_channel;                                               // LEDs_s1_burst_adapter:source0_channel -> LEDs_s1_agent:cp_channel
	wire          leds_s1_burst_adapter_source0_startofpacket;                                         // LEDs_s1_burst_adapter:source0_startofpacket -> LEDs_s1_agent:cp_startofpacket
	wire          leds_s1_burst_adapter_source0_endofpacket;                                           // LEDs_s1_burst_adapter:source0_endofpacket -> LEDs_s1_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                               // cmd_mux_006:src_valid -> HEX3_HEX0_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_006_src_data;                                                                // cmd_mux_006:src_data -> HEX3_HEX0_s1_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                               // HEX3_HEX0_s1_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [10:0] cmd_mux_006_src_channel;                                                             // cmd_mux_006:src_channel -> HEX3_HEX0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                       // cmd_mux_006:src_startofpacket -> HEX3_HEX0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                         // cmd_mux_006:src_endofpacket -> HEX3_HEX0_s1_burst_adapter:sink0_endofpacket
	wire          hex3_hex0_s1_burst_adapter_source0_valid;                                            // HEX3_HEX0_s1_burst_adapter:source0_valid -> HEX3_HEX0_s1_agent:cp_valid
	wire  [117:0] hex3_hex0_s1_burst_adapter_source0_data;                                             // HEX3_HEX0_s1_burst_adapter:source0_data -> HEX3_HEX0_s1_agent:cp_data
	wire          hex3_hex0_s1_burst_adapter_source0_ready;                                            // HEX3_HEX0_s1_agent:cp_ready -> HEX3_HEX0_s1_burst_adapter:source0_ready
	wire   [10:0] hex3_hex0_s1_burst_adapter_source0_channel;                                          // HEX3_HEX0_s1_burst_adapter:source0_channel -> HEX3_HEX0_s1_agent:cp_channel
	wire          hex3_hex0_s1_burst_adapter_source0_startofpacket;                                    // HEX3_HEX0_s1_burst_adapter:source0_startofpacket -> HEX3_HEX0_s1_agent:cp_startofpacket
	wire          hex3_hex0_s1_burst_adapter_source0_endofpacket;                                      // HEX3_HEX0_s1_burst_adapter:source0_endofpacket -> HEX3_HEX0_s1_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                               // cmd_mux_007:src_valid -> Slider_Switches_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_007_src_data;                                                                // cmd_mux_007:src_data -> Slider_Switches_s1_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                               // Slider_Switches_s1_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [10:0] cmd_mux_007_src_channel;                                                             // cmd_mux_007:src_channel -> Slider_Switches_s1_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                       // cmd_mux_007:src_startofpacket -> Slider_Switches_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                         // cmd_mux_007:src_endofpacket -> Slider_Switches_s1_burst_adapter:sink0_endofpacket
	wire          slider_switches_s1_burst_adapter_source0_valid;                                      // Slider_Switches_s1_burst_adapter:source0_valid -> Slider_Switches_s1_agent:cp_valid
	wire  [117:0] slider_switches_s1_burst_adapter_source0_data;                                       // Slider_Switches_s1_burst_adapter:source0_data -> Slider_Switches_s1_agent:cp_data
	wire          slider_switches_s1_burst_adapter_source0_ready;                                      // Slider_Switches_s1_agent:cp_ready -> Slider_Switches_s1_burst_adapter:source0_ready
	wire   [10:0] slider_switches_s1_burst_adapter_source0_channel;                                    // Slider_Switches_s1_burst_adapter:source0_channel -> Slider_Switches_s1_agent:cp_channel
	wire          slider_switches_s1_burst_adapter_source0_startofpacket;                              // Slider_Switches_s1_burst_adapter:source0_startofpacket -> Slider_Switches_s1_agent:cp_startofpacket
	wire          slider_switches_s1_burst_adapter_source0_endofpacket;                                // Slider_Switches_s1_burst_adapter:source0_endofpacket -> Slider_Switches_s1_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                               // cmd_mux_008:src_valid -> Pushbuttons_s1_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_008_src_data;                                                                // cmd_mux_008:src_data -> Pushbuttons_s1_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                               // Pushbuttons_s1_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [10:0] cmd_mux_008_src_channel;                                                             // cmd_mux_008:src_channel -> Pushbuttons_s1_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                       // cmd_mux_008:src_startofpacket -> Pushbuttons_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                         // cmd_mux_008:src_endofpacket -> Pushbuttons_s1_burst_adapter:sink0_endofpacket
	wire          pushbuttons_s1_burst_adapter_source0_valid;                                          // Pushbuttons_s1_burst_adapter:source0_valid -> Pushbuttons_s1_agent:cp_valid
	wire  [117:0] pushbuttons_s1_burst_adapter_source0_data;                                           // Pushbuttons_s1_burst_adapter:source0_data -> Pushbuttons_s1_agent:cp_data
	wire          pushbuttons_s1_burst_adapter_source0_ready;                                          // Pushbuttons_s1_agent:cp_ready -> Pushbuttons_s1_burst_adapter:source0_ready
	wire   [10:0] pushbuttons_s1_burst_adapter_source0_channel;                                        // Pushbuttons_s1_burst_adapter:source0_channel -> Pushbuttons_s1_agent:cp_channel
	wire          pushbuttons_s1_burst_adapter_source0_startofpacket;                                  // Pushbuttons_s1_burst_adapter:source0_startofpacket -> Pushbuttons_s1_agent:cp_startofpacket
	wire          pushbuttons_s1_burst_adapter_source0_endofpacket;                                    // Pushbuttons_s1_burst_adapter:source0_endofpacket -> Pushbuttons_s1_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                               // cmd_mux_009:src_valid -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_009_src_data;                                                                // cmd_mux_009:src_data -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                               // Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [10:0] cmd_mux_009_src_channel;                                                             // cmd_mux_009:src_channel -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                                       // cmd_mux_009:src_startofpacket -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                         // cmd_mux_009:src_endofpacket -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_endofpacket
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_valid;                        // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_valid -> Pixel_DMA_Addr_Translation_slave_agent:cp_valid
	wire  [117:0] pixel_dma_addr_translation_slave_burst_adapter_source0_data;                         // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_data -> Pixel_DMA_Addr_Translation_slave_agent:cp_data
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_ready;                        // Pixel_DMA_Addr_Translation_slave_agent:cp_ready -> Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_ready
	wire   [10:0] pixel_dma_addr_translation_slave_burst_adapter_source0_channel;                      // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_channel -> Pixel_DMA_Addr_Translation_slave_agent:cp_channel
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_startofpacket;                // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent:cp_startofpacket
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_endofpacket;                  // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                               // cmd_mux_010:src_valid -> Video_In_DMA_Addr_Translation_slave_burst_adapter:sink0_valid
	wire  [117:0] cmd_mux_010_src_data;                                                                // cmd_mux_010:src_data -> Video_In_DMA_Addr_Translation_slave_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                               // Video_In_DMA_Addr_Translation_slave_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [10:0] cmd_mux_010_src_channel;                                                             // cmd_mux_010:src_channel -> Video_In_DMA_Addr_Translation_slave_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                                       // cmd_mux_010:src_startofpacket -> Video_In_DMA_Addr_Translation_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                         // cmd_mux_010:src_endofpacket -> Video_In_DMA_Addr_Translation_slave_burst_adapter:sink0_endofpacket
	wire          video_in_dma_addr_translation_slave_burst_adapter_source0_valid;                     // Video_In_DMA_Addr_Translation_slave_burst_adapter:source0_valid -> Video_In_DMA_Addr_Translation_slave_agent:cp_valid
	wire  [117:0] video_in_dma_addr_translation_slave_burst_adapter_source0_data;                      // Video_In_DMA_Addr_Translation_slave_burst_adapter:source0_data -> Video_In_DMA_Addr_Translation_slave_agent:cp_data
	wire          video_in_dma_addr_translation_slave_burst_adapter_source0_ready;                     // Video_In_DMA_Addr_Translation_slave_agent:cp_ready -> Video_In_DMA_Addr_Translation_slave_burst_adapter:source0_ready
	wire   [10:0] video_in_dma_addr_translation_slave_burst_adapter_source0_channel;                   // Video_In_DMA_Addr_Translation_slave_burst_adapter:source0_channel -> Video_In_DMA_Addr_Translation_slave_agent:cp_channel
	wire          video_in_dma_addr_translation_slave_burst_adapter_source0_startofpacket;             // Video_In_DMA_Addr_Translation_slave_burst_adapter:source0_startofpacket -> Video_In_DMA_Addr_Translation_slave_agent:cp_startofpacket
	wire          video_in_dma_addr_translation_slave_burst_adapter_source0_endofpacket;               // Video_In_DMA_Addr_Translation_slave_burst_adapter:source0_endofpacket -> Video_In_DMA_Addr_Translation_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [117:0] cmd_demux_src0_data;                                                                 // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [10:0] cmd_demux_src0_channel;                                                              // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                        // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                          // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [117:0] cmd_demux_src1_data;                                                                 // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [10:0] cmd_demux_src1_channel;                                                              // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                        // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                          // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [117:0] cmd_demux_src2_data;                                                                 // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [10:0] cmd_demux_src2_channel;                                                              // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                        // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                          // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [117:0] cmd_demux_src3_data;                                                                 // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [10:0] cmd_demux_src3_channel;                                                              // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                        // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                          // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [117:0] cmd_demux_src4_data;                                                                 // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [10:0] cmd_demux_src4_channel;                                                              // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                        // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                          // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [117:0] cmd_demux_src5_data;                                                                 // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [10:0] cmd_demux_src5_channel;                                                              // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                        // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                          // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [117:0] cmd_demux_src6_data;                                                                 // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [10:0] cmd_demux_src6_channel;                                                              // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                        // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                          // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [117:0] cmd_demux_src7_data;                                                                 // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [10:0] cmd_demux_src7_channel;                                                              // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                        // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                          // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [117:0] cmd_demux_src8_data;                                                                 // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [10:0] cmd_demux_src8_channel;                                                              // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                        // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                          // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [117:0] cmd_demux_src9_data;                                                                 // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [10:0] cmd_demux_src9_channel;                                                              // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                        // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                          // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                               // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [117:0] cmd_demux_src10_data;                                                                // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                               // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [10:0] cmd_demux_src10_channel;                                                             // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                       // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                         // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                            // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [117:0] cmd_demux_001_src0_data;                                                             // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                            // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [10:0] cmd_demux_001_src0_channel;                                                          // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                    // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                      // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                            // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [117:0] cmd_demux_001_src1_data;                                                             // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                            // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [10:0] cmd_demux_001_src1_channel;                                                          // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                    // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                      // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                            // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [117:0] cmd_demux_001_src2_data;                                                             // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                            // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire   [10:0] cmd_demux_001_src2_channel;                                                          // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                    // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                      // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                            // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [117:0] cmd_demux_001_src3_data;                                                             // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                                            // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire   [10:0] cmd_demux_001_src3_channel;                                                          // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                    // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                      // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                            // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [117:0] cmd_demux_001_src4_data;                                                             // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                                            // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire   [10:0] cmd_demux_001_src4_channel;                                                          // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                                    // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                      // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                            // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [117:0] cmd_demux_001_src5_data;                                                             // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                                            // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire   [10:0] cmd_demux_001_src5_channel;                                                          // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                                    // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                      // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                            // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [117:0] cmd_demux_001_src6_data;                                                             // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                                            // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire   [10:0] cmd_demux_001_src6_channel;                                                          // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                                    // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                      // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                            // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [117:0] cmd_demux_001_src7_data;                                                             // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                                            // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire   [10:0] cmd_demux_001_src7_channel;                                                          // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                                    // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                      // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                            // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [117:0] cmd_demux_001_src8_data;                                                             // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                                            // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire   [10:0] cmd_demux_001_src8_channel;                                                          // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                                    // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                      // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                                            // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [117:0] cmd_demux_001_src9_data;                                                             // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src9_ready;                                                            // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire   [10:0] cmd_demux_001_src9_channel;                                                          // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                                    // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                      // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                                           // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire  [117:0] cmd_demux_001_src10_data;                                                            // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src10_ready;                                                           // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire   [10:0] cmd_demux_001_src10_channel;                                                         // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                                                   // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                     // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                                // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [117:0] rsp_demux_src0_data;                                                                 // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [10:0] rsp_demux_src0_channel;                                                              // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                        // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                          // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [117:0] rsp_demux_src1_data;                                                                 // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [10:0] rsp_demux_src1_channel;                                                              // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                        // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                          // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                            // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [117:0] rsp_demux_001_src0_data;                                                             // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                            // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [10:0] rsp_demux_001_src0_channel;                                                          // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                    // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                      // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                            // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [117:0] rsp_demux_001_src1_data;                                                             // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                            // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [10:0] rsp_demux_001_src1_channel;                                                          // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                    // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                      // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                            // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [117:0] rsp_demux_002_src0_data;                                                             // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                            // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [10:0] rsp_demux_002_src0_channel;                                                          // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                    // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                      // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                            // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [117:0] rsp_demux_002_src1_data;                                                             // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                            // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire   [10:0] rsp_demux_002_src1_channel;                                                          // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                    // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                      // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                            // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [117:0] rsp_demux_003_src0_data;                                                             // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                            // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [10:0] rsp_demux_003_src0_channel;                                                          // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                    // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                      // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                            // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [117:0] rsp_demux_003_src1_data;                                                             // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                                            // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire   [10:0] rsp_demux_003_src1_channel;                                                          // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                                    // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                      // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                            // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [117:0] rsp_demux_004_src0_data;                                                             // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                            // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [10:0] rsp_demux_004_src0_channel;                                                          // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                    // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                      // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                            // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [117:0] rsp_demux_004_src1_data;                                                             // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                                            // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire   [10:0] rsp_demux_004_src1_channel;                                                          // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                                    // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                      // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                            // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [117:0] rsp_demux_005_src0_data;                                                             // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                            // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [10:0] rsp_demux_005_src0_channel;                                                          // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                    // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                      // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                            // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [117:0] rsp_demux_005_src1_data;                                                             // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                                            // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire   [10:0] rsp_demux_005_src1_channel;                                                          // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                                    // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                      // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                            // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [117:0] rsp_demux_006_src0_data;                                                             // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                            // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [10:0] rsp_demux_006_src0_channel;                                                          // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                    // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                      // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                            // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [117:0] rsp_demux_006_src1_data;                                                             // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                                            // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire   [10:0] rsp_demux_006_src1_channel;                                                          // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                                    // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                      // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                            // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [117:0] rsp_demux_007_src0_data;                                                             // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                            // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [10:0] rsp_demux_007_src0_channel;                                                          // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                    // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                      // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                            // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [117:0] rsp_demux_007_src1_data;                                                             // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                                            // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire   [10:0] rsp_demux_007_src1_channel;                                                          // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                                    // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                      // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                            // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [117:0] rsp_demux_008_src0_data;                                                             // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                            // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [10:0] rsp_demux_008_src0_channel;                                                          // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                    // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                      // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                            // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [117:0] rsp_demux_008_src1_data;                                                             // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                                            // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire   [10:0] rsp_demux_008_src1_channel;                                                          // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                                    // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                      // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                            // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [117:0] rsp_demux_009_src0_data;                                                             // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                            // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [10:0] rsp_demux_009_src0_channel;                                                          // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                    // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                      // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                            // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [117:0] rsp_demux_009_src1_data;                                                             // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src1_ready;                                                            // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire   [10:0] rsp_demux_009_src1_channel;                                                          // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                                                    // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                      // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                            // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [117:0] rsp_demux_010_src0_data;                                                             // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                            // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [10:0] rsp_demux_010_src0_channel;                                                          // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                    // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                      // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                            // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire  [117:0] rsp_demux_010_src1_data;                                                             // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src1_ready;                                                            // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire   [10:0] rsp_demux_010_src1_channel;                                                          // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                                                    // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                      // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire   [10:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                              // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [10:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                              // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_out_valid;                              // Audio_Subsystem_audio_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] audio_subsystem_audio_slave_agent_rdata_fifo_out_data;                               // Audio_Subsystem_audio_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_out_ready;                              // avalon_st_adapter:in_0_ready -> Audio_Subsystem_audio_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                       // avalon_st_adapter:out_0_valid -> Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                        // avalon_st_adapter:out_0_data -> Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                       // Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                       // avalon_st_adapter:out_0_error -> Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_error
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_out_valid;                         // AV_Config_avalon_av_config_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] av_config_avalon_av_config_slave_agent_rdata_fifo_out_data;                          // AV_Config_avalon_av_config_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_out_ready;                         // avalon_st_adapter_001:in_0_ready -> AV_Config_avalon_av_config_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                   // avalon_st_adapter_001:out_0_valid -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                    // avalon_st_adapter_001:out_0_data -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                   // AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                   // avalon_st_adapter_001:out_0_error -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_error
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_valid;                  // VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_data;                   // VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_ready;                  // avalon_st_adapter_002:in_0_ready -> VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                   // avalon_st_adapter_002:out_0_valid -> VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                    // avalon_st_adapter_002:out_0_data -> VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                   // VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                   // avalon_st_adapter_002:out_0_error -> VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_out_valid;                                      // SysID_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_out_data;                                       // SysID_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_003:in_0_ready -> SysID_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                   // avalon_st_adapter_003:out_0_valid -> SysID_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                    // avalon_st_adapter_003:out_0_data -> SysID_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                   // SysID_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                   // avalon_st_adapter_003:out_0_error -> SysID_control_slave_agent:rdata_fifo_sink_error
	wire          video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_valid;          // Video_In_Subsystem_edge_detection_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_data;           // Video_In_Subsystem_edge_detection_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_ready;          // avalon_st_adapter_004:in_0_ready -> Video_In_Subsystem_edge_detection_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                   // avalon_st_adapter_004:out_0_valid -> Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                    // avalon_st_adapter_004:out_0_data -> Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                   // Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                   // avalon_st_adapter_004:out_0_error -> Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_sink_error
	wire          leds_s1_agent_rdata_fifo_out_valid;                                                  // LEDs_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_out_data;                                                   // LEDs_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          leds_s1_agent_rdata_fifo_out_ready;                                                  // avalon_st_adapter_005:in_0_ready -> LEDs_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                   // avalon_st_adapter_005:out_0_valid -> LEDs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                    // avalon_st_adapter_005:out_0_data -> LEDs_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                   // LEDs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                   // avalon_st_adapter_005:out_0_error -> LEDs_s1_agent:rdata_fifo_sink_error
	wire          hex3_hex0_s1_agent_rdata_fifo_out_valid;                                             // HEX3_HEX0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] hex3_hex0_s1_agent_rdata_fifo_out_data;                                              // HEX3_HEX0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          hex3_hex0_s1_agent_rdata_fifo_out_ready;                                             // avalon_st_adapter_006:in_0_ready -> HEX3_HEX0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                   // avalon_st_adapter_006:out_0_valid -> HEX3_HEX0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                    // avalon_st_adapter_006:out_0_data -> HEX3_HEX0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                   // HEX3_HEX0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                   // avalon_st_adapter_006:out_0_error -> HEX3_HEX0_s1_agent:rdata_fifo_sink_error
	wire          slider_switches_s1_agent_rdata_fifo_out_valid;                                       // Slider_Switches_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_out_data;                                        // Slider_Switches_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          slider_switches_s1_agent_rdata_fifo_out_ready;                                       // avalon_st_adapter_007:in_0_ready -> Slider_Switches_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                   // avalon_st_adapter_007:out_0_valid -> Slider_Switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                    // avalon_st_adapter_007:out_0_data -> Slider_Switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                   // Slider_Switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                   // avalon_st_adapter_007:out_0_error -> Slider_Switches_s1_agent:rdata_fifo_sink_error
	wire          pushbuttons_s1_agent_rdata_fifo_out_valid;                                           // Pushbuttons_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] pushbuttons_s1_agent_rdata_fifo_out_data;                                            // Pushbuttons_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          pushbuttons_s1_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_008:in_0_ready -> Pushbuttons_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                   // avalon_st_adapter_008:out_0_valid -> Pushbuttons_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                    // avalon_st_adapter_008:out_0_data -> Pushbuttons_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                   // Pushbuttons_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                   // avalon_st_adapter_008:out_0_error -> Pushbuttons_s1_agent:rdata_fifo_sink_error
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_out_valid;                         // Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] pixel_dma_addr_translation_slave_agent_rdata_fifo_out_data;                          // Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_out_ready;                         // avalon_st_adapter_009:in_0_ready -> Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                   // avalon_st_adapter_009:out_0_valid -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                    // avalon_st_adapter_009:out_0_data -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                   // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                   // avalon_st_adapter_009:out_0_error -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_error
	wire          video_in_dma_addr_translation_slave_agent_rdata_fifo_out_valid;                      // Video_In_DMA_Addr_Translation_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] video_in_dma_addr_translation_slave_agent_rdata_fifo_out_data;                       // Video_In_DMA_Addr_Translation_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          video_in_dma_addr_translation_slave_agent_rdata_fifo_out_ready;                      // avalon_st_adapter_010:in_0_ready -> Video_In_DMA_Addr_Translation_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                   // avalon_st_adapter_010:out_0_valid -> Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                    // avalon_st_adapter_010:out_0_data -> Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                   // Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                   // avalon_st_adapter_010:out_0_error -> Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_error

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_subsystem_audio_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (audio_subsystem_audio_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (audio_subsystem_audio_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (audio_subsystem_audio_slave_agent_m0_read),          //                         .read
		.uav_write              (audio_subsystem_audio_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (audio_subsystem_audio_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (audio_subsystem_audio_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (audio_subsystem_audio_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (audio_subsystem_audio_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (audio_subsystem_audio_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (audio_subsystem_audio_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (audio_subsystem_audio_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Audio_Subsystem_audio_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Audio_Subsystem_audio_slave_write),                  //                         .write
		.av_read                (Audio_Subsystem_audio_slave_read),                   //                         .read
		.av_readdata            (Audio_Subsystem_audio_slave_readdata),               //                         .readdata
		.av_writedata           (Audio_Subsystem_audio_slave_writedata),              //                         .writedata
		.av_chipselect          (Audio_Subsystem_audio_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) av_config_avalon_av_config_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                  //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address            (av_config_avalon_av_config_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (av_config_avalon_av_config_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (av_config_avalon_av_config_slave_agent_m0_read),          //                         .read
		.uav_write              (av_config_avalon_av_config_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (av_config_avalon_av_config_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (av_config_avalon_av_config_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (av_config_avalon_av_config_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (av_config_avalon_av_config_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (av_config_avalon_av_config_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (av_config_avalon_av_config_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (av_config_avalon_av_config_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (AV_Config_avalon_av_config_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (AV_Config_avalon_av_config_slave_write),                  //                         .write
		.av_read                (AV_Config_avalon_av_config_slave_read),                   //                         .read
		.av_readdata            (AV_Config_avalon_av_config_slave_readdata),               //                         .readdata
		.av_writedata           (AV_Config_avalon_av_config_slave_writedata),              //                         .writedata
		.av_byteenable          (AV_Config_avalon_av_config_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (AV_Config_avalon_av_config_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_subsystem_char_buffer_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                         //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset),                    //                    reset.reset
		.uav_address            (vga_subsystem_char_buffer_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (vga_subsystem_char_buffer_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (vga_subsystem_char_buffer_control_slave_agent_m0_read),          //                         .read
		.uav_write              (vga_subsystem_char_buffer_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (vga_subsystem_char_buffer_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (vga_subsystem_char_buffer_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (vga_subsystem_char_buffer_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (vga_subsystem_char_buffer_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (vga_subsystem_char_buffer_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (vga_subsystem_char_buffer_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (vga_subsystem_char_buffer_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (VGA_Subsystem_char_buffer_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (VGA_Subsystem_char_buffer_control_slave_write),                  //                         .write
		.av_read                (VGA_Subsystem_char_buffer_control_slave_read),                   //                         .read
		.av_readdata            (VGA_Subsystem_char_buffer_control_slave_readdata),               //                         .readdata
		.av_writedata           (VGA_Subsystem_char_buffer_control_slave_writedata),              //                         .writedata
		.av_byteenable          (VGA_Subsystem_char_buffer_control_slave_byteenable),             //                         .byteenable
		.av_chipselect          (VGA_Subsystem_char_buffer_control_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                               //              (terminated)
		.av_beginbursttransfer  (),                                                               //              (terminated)
		.av_burstcount          (),                                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                                           //              (terminated)
		.av_waitrequest         (1'b0),                                                           //              (terminated)
		.av_writebyteenable     (),                                                               //              (terminated)
		.av_lock                (),                                                               //              (terminated)
		.av_clken               (),                                                               //              (terminated)
		.uav_clken              (1'b0),                                                           //              (terminated)
		.av_debugaccess         (),                                                               //              (terminated)
		.av_outputenable        (),                                                               //              (terminated)
		.uav_response           (),                                                               //              (terminated)
		.av_response            (2'b00),                                                          //              (terminated)
		.uav_writeresponsevalid (),                                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                      //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),           //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),          //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),      //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (SysID_control_slave_address),                 //      avalon_anti_slave_0.address
		.av_readdata            (SysID_control_slave_readdata),                //                         .readdata
		.av_write               (),                                            //              (terminated)
		.av_read                (),                                            //              (terminated)
		.av_writedata           (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_in_subsystem_edge_detection_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                 //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset),                            //                    reset.reset
		.uav_address            (video_in_subsystem_edge_detection_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_in_subsystem_edge_detection_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_in_subsystem_edge_detection_control_slave_agent_m0_read),          //                         .read
		.uav_write              (video_in_subsystem_edge_detection_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_in_subsystem_edge_detection_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_in_subsystem_edge_detection_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_in_subsystem_edge_detection_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_in_subsystem_edge_detection_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_in_subsystem_edge_detection_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_in_subsystem_edge_detection_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_in_subsystem_edge_detection_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Video_In_Subsystem_edge_detection_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Video_In_Subsystem_edge_detection_control_slave_write),                  //                         .write
		.av_readdata            (Video_In_Subsystem_edge_detection_control_slave_readdata),               //                         .readdata
		.av_writedata           (Video_In_Subsystem_edge_detection_control_slave_writedata),              //                         .writedata
		.av_chipselect          (Video_In_Subsystem_edge_detection_control_slave_chipselect),             //                         .chipselect
		.av_read                (),                                                                       //              (terminated)
		.av_begintransfer       (),                                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                                       //              (terminated)
		.av_burstcount          (),                                                                       //              (terminated)
		.av_byteenable          (),                                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                                   //              (terminated)
		.av_writebyteenable     (),                                                                       //              (terminated)
		.av_lock                (),                                                                       //              (terminated)
		.av_clken               (),                                                                       //              (terminated)
		.uav_clken              (1'b0),                                                                   //              (terminated)
		.av_debugaccess         (),                                                                       //              (terminated)
		.av_outputenable        (),                                                                       //              (terminated)
		.uav_response           (),                                                                       //              (terminated)
		.av_response            (2'b00),                                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                      //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (leds_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (leds_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (leds_s1_agent_m0_read),                       //                         .read
		.uav_write              (leds_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (leds_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (leds_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (leds_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (leds_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (leds_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (leds_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (leds_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (LEDs_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (LEDs_s1_write),                               //                         .write
		.av_readdata            (LEDs_s1_readdata),                            //                         .readdata
		.av_writedata           (LEDs_s1_writedata),                           //                         .writedata
		.av_chipselect          (LEDs_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex3_hex0_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                      //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex3_hex0_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (hex3_hex0_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (hex3_hex0_s1_agent_m0_read),                  //                         .read
		.uav_write              (hex3_hex0_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (hex3_hex0_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (hex3_hex0_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (hex3_hex0_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (hex3_hex0_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (hex3_hex0_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (hex3_hex0_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (hex3_hex0_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (HEX3_HEX0_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (HEX3_HEX0_s1_write),                          //                         .write
		.av_readdata            (HEX3_HEX0_s1_readdata),                       //                         .readdata
		.av_writedata           (HEX3_HEX0_s1_writedata),                      //                         .writedata
		.av_chipselect          (HEX3_HEX0_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) slider_switches_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                      //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (slider_switches_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (slider_switches_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (slider_switches_s1_agent_m0_read),            //                         .read
		.uav_write              (slider_switches_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (slider_switches_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (slider_switches_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (slider_switches_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (slider_switches_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (slider_switches_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (slider_switches_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (slider_switches_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (Slider_Switches_s1_address),                  //      avalon_anti_slave_0.address
		.av_readdata            (Slider_Switches_s1_readdata),                 //                         .readdata
		.av_write               (),                                            //              (terminated)
		.av_read                (),                                            //              (terminated)
		.av_writedata           (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_chipselect          (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pushbuttons_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                      //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pushbuttons_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (pushbuttons_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (pushbuttons_s1_agent_m0_read),                //                         .read
		.uav_write              (pushbuttons_s1_agent_m0_write),               //                         .write
		.uav_waitrequest        (pushbuttons_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (pushbuttons_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (pushbuttons_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (pushbuttons_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (pushbuttons_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock               (pushbuttons_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (pushbuttons_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (Pushbuttons_s1_address),                      //      avalon_anti_slave_0.address
		.av_write               (Pushbuttons_s1_write),                        //                         .write
		.av_readdata            (Pushbuttons_s1_readdata),                     //                         .readdata
		.av_writedata           (Pushbuttons_s1_writedata),                    //                         .writedata
		.av_chipselect          (Pushbuttons_s1_chipselect),                   //                         .chipselect
		.av_read                (),                                            //              (terminated)
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_waitrequest         (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_dma_addr_translation_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                  //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset),             //                    reset.reset
		.uav_address            (pixel_dma_addr_translation_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_dma_addr_translation_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (pixel_dma_addr_translation_slave_agent_m0_read),          //                         .read
		.uav_write              (pixel_dma_addr_translation_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (pixel_dma_addr_translation_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (pixel_dma_addr_translation_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (pixel_dma_addr_translation_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (pixel_dma_addr_translation_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (pixel_dma_addr_translation_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (pixel_dma_addr_translation_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (pixel_dma_addr_translation_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Pixel_DMA_Addr_Translation_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Pixel_DMA_Addr_Translation_slave_write),                  //                         .write
		.av_read                (Pixel_DMA_Addr_Translation_slave_read),                   //                         .read
		.av_readdata            (Pixel_DMA_Addr_Translation_slave_readdata),               //                         .readdata
		.av_writedata           (Pixel_DMA_Addr_Translation_slave_writedata),              //                         .writedata
		.av_byteenable          (Pixel_DMA_Addr_Translation_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Pixel_DMA_Addr_Translation_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_debugaccess         (),                                                        //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (21),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_in_dma_addr_translation_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                     //                      clk.clk
		.reset                  (AV_Config_reset_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address            (video_in_dma_addr_translation_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_in_dma_addr_translation_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_in_dma_addr_translation_slave_agent_m0_read),          //                         .read
		.uav_write              (video_in_dma_addr_translation_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_in_dma_addr_translation_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_in_dma_addr_translation_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_in_dma_addr_translation_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_in_dma_addr_translation_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_in_dma_addr_translation_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_in_dma_addr_translation_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_in_dma_addr_translation_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Video_In_DMA_Addr_Translation_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Video_In_DMA_Addr_Translation_slave_write),                  //                         .write
		.av_read                (Video_In_DMA_Addr_Translation_slave_read),                   //                         .read
		.av_readdata            (Video_In_DMA_Addr_Translation_slave_readdata),               //                         .readdata
		.av_writedata           (Video_In_DMA_Addr_Translation_slave_writedata),              //                         .writedata
		.av_byteenable          (Video_In_DMA_Addr_Translation_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Video_In_DMA_Addr_Translation_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                           //              (terminated)
		.av_beginbursttransfer  (),                                                           //              (terminated)
		.av_burstcount          (),                                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                                       //              (terminated)
		.av_writebyteenable     (),                                                           //              (terminated)
		.av_lock                (),                                                           //              (terminated)
		.av_chipselect          (),                                                           //              (terminated)
		.av_clken               (),                                                           //              (terminated)
		.uav_clken              (1'b0),                                                       //              (terminated)
		.av_debugaccess         (),                                                           //              (terminated)
		.av_outputenable        (),                                                           //              (terminated)
		.uav_response           (),                                                           //              (terminated)
		.av_response            (2'b00),                                                      //              (terminated)
		.uav_writeresponsevalid (),                                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                        //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (84),
		.PKT_CACHE_H               (112),
		.PKT_CACHE_L               (109),
		.PKT_ADDR_SIDEBAND_H       (82),
		.PKT_ADDR_SIDEBAND_L       (82),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (62),
		.PKT_TRANS_LOCK            (61),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_THREAD_ID_H           (105),
		.PKT_THREAD_ID_L           (94),
		.PKT_QOS_L                 (85),
		.PKT_QOS_H                 (85),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_DATA_SIDEBAND_H       (83),
		.PKT_DATA_SIDEBAND_L       (83),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.ID                        (0)
	) arm_a9_hps_h2f_lw_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                                    //              clk.clk
		.aresetn                (~ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (ARM_A9_HPS_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (ARM_A9_HPS_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (ARM_A9_HPS_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (ARM_A9_HPS_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (ARM_A9_HPS_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (ARM_A9_HPS_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (ARM_A9_HPS_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (ARM_A9_HPS_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (ARM_A9_HPS_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (ARM_A9_HPS_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (ARM_A9_HPS_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (ARM_A9_HPS_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (ARM_A9_HPS_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (ARM_A9_HPS_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (ARM_A9_HPS_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (ARM_A9_HPS_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (ARM_A9_HPS_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (ARM_A9_HPS_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (ARM_A9_HPS_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (ARM_A9_HPS_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (ARM_A9_HPS_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (ARM_A9_HPS_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (ARM_A9_HPS_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (ARM_A9_HPS_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (ARM_A9_HPS_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (ARM_A9_HPS_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (ARM_A9_HPS_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (ARM_A9_HPS_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (ARM_A9_HPS_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (ARM_A9_HPS_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (ARM_A9_HPS_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (ARM_A9_HPS_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (ARM_A9_HPS_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (ARM_A9_HPS_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (ARM_A9_HPS_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (ARM_A9_HPS_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                      //      (terminated)
		.aruser                 (1'b0),                                                                      //      (terminated)
		.awqos                  (4'b0000),                                                                   //      (terminated)
		.arqos                  (4'b0000),                                                                   //      (terminated)
		.awregion               (4'b0000),                                                                   //      (terminated)
		.arregion               (4'b0000),                                                                   //      (terminated)
		.wuser                  (1'b0),                                                                      //      (terminated)
		.ruser                  (),                                                                          //      (terminated)
		.buser                  ()                                                                           //      (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_subsystem_audio_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (audio_subsystem_audio_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (audio_subsystem_audio_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (audio_subsystem_audio_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (audio_subsystem_audio_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (audio_subsystem_audio_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (audio_subsystem_audio_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (audio_subsystem_audio_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (audio_subsystem_audio_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (audio_subsystem_audio_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (audio_subsystem_audio_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (audio_subsystem_audio_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (audio_subsystem_audio_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (audio_subsystem_audio_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (audio_subsystem_audio_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (audio_subsystem_audio_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (audio_subsystem_audio_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (audio_subsystem_audio_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (audio_subsystem_audio_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (audio_subsystem_audio_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (audio_subsystem_audio_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (audio_subsystem_audio_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (audio_subsystem_audio_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (audio_subsystem_audio_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (audio_subsystem_audio_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (audio_subsystem_audio_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (audio_subsystem_audio_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (audio_subsystem_audio_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (audio_subsystem_audio_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (audio_subsystem_audio_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (audio_subsystem_audio_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (audio_subsystem_audio_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (audio_subsystem_audio_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (audio_subsystem_audio_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_subsystem_audio_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (audio_subsystem_audio_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_subsystem_audio_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (audio_subsystem_audio_slave_agent_rf_source_data),             //        in.data
		.in_valid          (audio_subsystem_audio_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_subsystem_audio_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_subsystem_audio_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_subsystem_audio_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_subsystem_audio_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_subsystem_audio_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_subsystem_audio_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_subsystem_audio_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_subsystem_audio_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_subsystem_audio_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                 //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (audio_subsystem_audio_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (audio_subsystem_audio_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (audio_subsystem_audio_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (audio_subsystem_audio_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (audio_subsystem_audio_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (audio_subsystem_audio_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) av_config_avalon_av_config_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                               //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (av_config_avalon_av_config_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (av_config_avalon_av_config_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (av_config_avalon_av_config_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (av_config_avalon_av_config_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (av_config_avalon_av_config_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (av_config_avalon_av_config_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (av_config_avalon_av_config_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (av_config_avalon_av_config_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (av_config_avalon_av_config_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (av_config_avalon_av_config_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (av_config_avalon_av_config_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (av_config_avalon_av_config_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (av_config_avalon_av_config_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (av_config_avalon_av_config_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (av_config_avalon_av_config_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (av_config_avalon_av_config_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (av_config_avalon_av_config_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (av_config_avalon_av_config_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (av_config_avalon_av_config_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (av_config_avalon_av_config_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (av_config_avalon_av_config_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (av_config_avalon_av_config_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (av_config_avalon_av_config_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (av_config_avalon_av_config_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (av_config_avalon_av_config_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) av_config_avalon_av_config_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (av_config_avalon_av_config_slave_agent_rf_source_data),             //        in.data
		.in_valid          (av_config_avalon_av_config_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (av_config_avalon_av_config_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) av_config_avalon_av_config_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                      //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (av_config_avalon_av_config_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (av_config_avalon_av_config_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (av_config_avalon_av_config_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_subsystem_char_buffer_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                      //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset),                                 //       clk_reset.reset
		.m0_address              (vga_subsystem_char_buffer_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vga_subsystem_char_buffer_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vga_subsystem_char_buffer_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vga_subsystem_char_buffer_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vga_subsystem_char_buffer_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (vga_subsystem_char_buffer_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vga_subsystem_char_buffer_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vga_subsystem_char_buffer_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (vga_subsystem_char_buffer_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vga_subsystem_char_buffer_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (vga_subsystem_char_buffer_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (vga_subsystem_char_buffer_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vga_subsystem_char_buffer_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (vga_subsystem_char_buffer_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (vga_subsystem_char_buffer_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (vga_subsystem_char_buffer_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vga_subsystem_char_buffer_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vga_subsystem_char_buffer_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vga_subsystem_char_buffer_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vga_subsystem_char_buffer_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vga_subsystem_char_buffer_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                           //                .error
		.rdata_fifo_src_ready    (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buffer_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_data           (vga_subsystem_char_buffer_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_subsystem_char_buffer_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_subsystem_char_buffer_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_subsystem_char_buffer_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_subsystem_char_buffer_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buffer_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                             //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_startofpacket  (1'b0),                                                               // (terminated)
		.in_endofpacket    (1'b0),                                                               // (terminated)
		.out_startofpacket (),                                                                   // (terminated)
		.out_endofpacket   (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                  //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sysid_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sysid_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sysid_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sysid_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sysid_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sysid_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                               //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                         //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_in_subsystem_edge_detection_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                              //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset),                                         //       clk_reset.reset
		.m0_address              (video_in_subsystem_edge_detection_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_in_subsystem_edge_detection_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_in_subsystem_edge_detection_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_in_subsystem_edge_detection_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_in_subsystem_edge_detection_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_in_subsystem_edge_detection_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_in_subsystem_edge_detection_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_in_subsystem_edge_detection_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_in_subsystem_edge_detection_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_in_subsystem_edge_detection_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_in_subsystem_edge_detection_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_in_subsystem_edge_detection_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_in_subsystem_edge_detection_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (video_in_subsystem_edge_detection_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (video_in_subsystem_edge_detection_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_in_subsystem_edge_detection_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_in_subsystem_edge_detection_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_in_subsystem_edge_detection_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_in_subsystem_edge_detection_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_in_subsystem_edge_detection_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_in_subsystem_edge_detection_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                                   //                .error
		.rdata_fifo_src_ready    (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                           //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                                      // clk_reset.reset
		.in_data           (video_in_subsystem_edge_detection_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_in_subsystem_edge_detection_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_in_subsystem_edge_detection_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_in_subsystem_edge_detection_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_in_subsystem_edge_detection_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                            // (terminated)
		.csr_read          (1'b0),                                                                             // (terminated)
		.csr_write         (1'b0),                                                                             // (terminated)
		.csr_readdata      (),                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                             // (terminated)
		.almost_full_data  (),                                                                                 // (terminated)
		.almost_empty_data (),                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                             // (terminated)
		.out_empty         (),                                                                                 // (terminated)
		.in_error          (1'b0),                                                                             // (terminated)
		.out_error         (),                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                             // (terminated)
		.out_channel       ()                                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.in_data           (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                                       // (terminated)
		.out_startofpacket (),                                                                           // (terminated)
		.out_endofpacket   (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                      //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (leds_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (leds_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (leds_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (leds_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (leds_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (leds_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),           //                .error
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),                //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (leds_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (leds_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (leds_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (leds_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (leds_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex3_hex0_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                           //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (hex3_hex0_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (hex3_hex0_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (hex3_hex0_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (hex3_hex0_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (hex3_hex0_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (hex3_hex0_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (hex3_hex0_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (hex3_hex0_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (hex3_hex0_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (hex3_hex0_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (hex3_hex0_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (hex3_hex0_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (hex3_hex0_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (hex3_hex0_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (hex3_hex0_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (hex3_hex0_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (hex3_hex0_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (hex3_hex0_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (hex3_hex0_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (hex3_hex0_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (hex3_hex0_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (hex3_hex0_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (hex3_hex0_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (hex3_hex0_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (hex3_hex0_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (hex3_hex0_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (hex3_hex0_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (hex3_hex0_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (hex3_hex0_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (hex3_hex0_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (hex3_hex0_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (hex3_hex0_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                //                .error
		.rdata_fifo_src_ready    (hex3_hex0_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex3_hex0_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (hex3_hex0_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex3_hex0_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (hex3_hex0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (hex3_hex0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (hex3_hex0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex3_hex0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex3_hex0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex3_hex0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex3_hex0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex3_hex0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex3_hex0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex3_hex0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex3_hex0_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex3_hex0_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (hex3_hex0_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (hex3_hex0_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (hex3_hex0_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (hex3_hex0_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (hex3_hex0_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) slider_switches_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                 //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (slider_switches_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (slider_switches_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (slider_switches_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (slider_switches_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (slider_switches_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (slider_switches_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (slider_switches_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (slider_switches_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (slider_switches_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (slider_switches_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (slider_switches_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (slider_switches_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (slider_switches_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (slider_switches_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (slider_switches_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (slider_switches_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (slider_switches_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (slider_switches_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (slider_switches_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (slider_switches_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (slider_switches_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (slider_switches_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (slider_switches_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (slider_switches_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (slider_switches_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (slider_switches_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (slider_switches_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (slider_switches_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (slider_switches_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (slider_switches_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (slider_switches_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (slider_switches_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (slider_switches_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (slider_switches_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (slider_switches_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                              //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rf_source_data),             //        in.data
		.in_valid          (slider_switches_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (slider_switches_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (slider_switches_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (slider_switches_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (slider_switches_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (slider_switches_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (slider_switches_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (slider_switches_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (slider_switches_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                        //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (slider_switches_s1_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (slider_switches_s1_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (slider_switches_s1_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (slider_switches_s1_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (slider_switches_s1_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pushbuttons_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                             //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (pushbuttons_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pushbuttons_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pushbuttons_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pushbuttons_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pushbuttons_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (pushbuttons_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pushbuttons_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pushbuttons_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (pushbuttons_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pushbuttons_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (pushbuttons_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (pushbuttons_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pushbuttons_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (pushbuttons_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (pushbuttons_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (pushbuttons_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pushbuttons_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pushbuttons_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pushbuttons_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pushbuttons_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pushbuttons_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pushbuttons_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pushbuttons_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pushbuttons_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pushbuttons_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pushbuttons_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pushbuttons_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pushbuttons_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pushbuttons_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pushbuttons_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pushbuttons_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (pushbuttons_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pushbuttons_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pushbuttons_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (pushbuttons_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pushbuttons_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pushbuttons_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pushbuttons_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pushbuttons_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pushbuttons_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pushbuttons_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pushbuttons_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pushbuttons_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pushbuttons_s1_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (pushbuttons_s1_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (pushbuttons_s1_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (pushbuttons_s1_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (pushbuttons_s1_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (pushbuttons_s1_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_startofpacket  (1'b0),                                        // (terminated)
		.in_endofpacket    (1'b0),                                        // (terminated)
		.out_startofpacket (),                                            // (terminated)
		.out_endofpacket   (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_dma_addr_translation_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                               //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (pixel_dma_addr_translation_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pixel_dma_addr_translation_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pixel_dma_addr_translation_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pixel_dma_addr_translation_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pixel_dma_addr_translation_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (pixel_dma_addr_translation_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pixel_dma_addr_translation_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pixel_dma_addr_translation_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (pixel_dma_addr_translation_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pixel_dma_addr_translation_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (pixel_dma_addr_translation_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (pixel_dma_addr_translation_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pixel_dma_addr_translation_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (pixel_dma_addr_translation_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (pixel_dma_addr_translation_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (pixel_dma_addr_translation_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pixel_dma_addr_translation_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pixel_dma_addr_translation_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pixel_dma_addr_translation_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pixel_dma_addr_translation_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pixel_dma_addr_translation_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pixel_dma_addr_translation_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pixel_dma_addr_translation_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pixel_dma_addr_translation_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pixel_dma_addr_translation_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pixel_dma_addr_translation_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pixel_dma_addr_translation_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_dma_addr_translation_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_data           (pixel_dma_addr_translation_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_dma_addr_translation_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_dma_addr_translation_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_dma_addr_translation_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_dma_addr_translation_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_dma_addr_translation_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                      //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_startofpacket  (1'b0),                                                        // (terminated)
		.in_endofpacket    (1'b0),                                                        // (terminated)
		.out_startofpacket (),                                                            // (terminated)
		.out_endofpacket   (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (117),
		.PKT_ORI_BURST_SIZE_L      (115),
		.PKT_RESPONSE_STATUS_H     (114),
		.PKT_RESPONSE_STATUS_L     (113),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_TRANS_LOCK            (61),
		.PKT_BEGIN_BURST           (84),
		.PKT_PROTECTION_H          (108),
		.PKT_PROTECTION_L          (106),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (11),
		.ST_DATA_W                 (118),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_in_dma_addr_translation_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                  //             clk.clk
		.reset                   (AV_Config_reset_reset_bridge_in_reset_reset),                             //       clk_reset.reset
		.m0_address              (video_in_dma_addr_translation_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_in_dma_addr_translation_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_in_dma_addr_translation_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_in_dma_addr_translation_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_in_dma_addr_translation_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_in_dma_addr_translation_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_in_dma_addr_translation_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_in_dma_addr_translation_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_in_dma_addr_translation_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_in_dma_addr_translation_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_in_dma_addr_translation_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_in_dma_addr_translation_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_in_dma_addr_translation_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (video_in_dma_addr_translation_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (video_in_dma_addr_translation_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_in_dma_addr_translation_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_in_dma_addr_translation_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_in_dma_addr_translation_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_in_dma_addr_translation_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_in_dma_addr_translation_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_in_dma_addr_translation_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_in_dma_addr_translation_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_in_dma_addr_translation_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_in_dma_addr_translation_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_in_dma_addr_translation_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_in_dma_addr_translation_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_in_dma_addr_translation_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (119),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_in_dma_addr_translation_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                               //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (video_in_dma_addr_translation_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_in_dma_addr_translation_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_in_dma_addr_translation_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_in_dma_addr_translation_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_in_dma_addr_translation_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_in_dma_addr_translation_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                         //       clk.clk
		.reset             (AV_Config_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (video_in_dma_addr_translation_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (video_in_dma_addr_translation_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (video_in_dma_addr_translation_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_startofpacket  (1'b0),                                                           // (terminated)
		.in_endofpacket    (1'b0),                                                           // (terminated)
		.out_startofpacket (),                                                               // (terminated)
		.out_endofpacket   (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	Computer_System_mm_interconnect_2_router router (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                         //       src.ready
		.src_valid          (router_src_valid),                                                         //          .valid
		.src_data           (router_src_data),                                                          //          .data
		.src_channel        (router_src_channel),                                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                    //          .endofpacket
	);

	Computer_System_mm_interconnect_2_router router_001 (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                     //       src.ready
		.src_valid          (router_001_src_valid),                                                     //          .valid
		.src_data           (router_001_src_data),                                                      //          .data
		.src_channel        (router_001_src_channel),                                                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                //          .endofpacket
	);

	Computer_System_mm_interconnect_2_router_002 router_002 (
		.sink_ready         (audio_subsystem_audio_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (audio_subsystem_audio_slave_agent_rp_valid),         //          .valid
		.sink_data          (audio_subsystem_audio_slave_agent_rp_data),          //          .data
		.sink_startofpacket (audio_subsystem_audio_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (audio_subsystem_audio_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_002_src_ready),                               //       src.ready
		.src_valid          (router_002_src_valid),                               //          .valid
		.src_data           (router_002_src_data),                                //          .data
		.src_channel        (router_002_src_channel),                             //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_2_router_002 router_003 (
		.sink_ready         (av_config_avalon_av_config_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (av_config_avalon_av_config_slave_agent_rp_valid),         //          .valid
		.sink_data          (av_config_avalon_av_config_slave_agent_rp_data),          //          .data
		.sink_startofpacket (av_config_avalon_av_config_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (av_config_avalon_av_config_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                  //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_003_src_ready),                                    //       src.ready
		.src_valid          (router_003_src_valid),                                    //          .valid
		.src_data           (router_003_src_data),                                     //          .data
		.src_channel        (router_003_src_channel),                                  //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_router_002 router_004 (
		.sink_ready         (vga_subsystem_char_buffer_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (vga_subsystem_char_buffer_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (vga_subsystem_char_buffer_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (vga_subsystem_char_buffer_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_subsystem_char_buffer_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                         //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.src_ready          (router_004_src_ready),                                           //       src.ready
		.src_valid          (router_004_src_valid),                                           //          .valid
		.src_data           (router_004_src_data),                                            //          .data
		.src_channel        (router_004_src_channel),                                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                      //          .endofpacket
	);

	Computer_System_mm_interconnect_2_router_002 router_005 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),          //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),          //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),           //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),    //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                        //       src.ready
		.src_valid          (router_005_src_valid),                        //          .valid
		.src_data           (router_005_src_data),                         //          .data
		.src_channel        (router_005_src_channel),                      //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                   //          .endofpacket
	);

	Computer_System_mm_interconnect_2_router_002 router_006 (
		.sink_ready         (video_in_subsystem_edge_detection_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_in_subsystem_edge_detection_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_in_subsystem_edge_detection_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_in_subsystem_edge_detection_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_in_subsystem_edge_detection_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                 //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready          (router_006_src_ready),                                                   //       src.ready
		.src_valid          (router_006_src_valid),                                                   //          .valid
		.src_data           (router_006_src_data),                                                    //          .data
		.src_channel        (router_006_src_channel),                                                 //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                              //          .endofpacket
	);

	Computer_System_mm_interconnect_2_router_002 router_007 (
		.sink_ready         (leds_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                      //          .valid
		.sink_data          (leds_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                        //       src.ready
		.src_valid          (router_007_src_valid),                        //          .valid
		.src_data           (router_007_src_data),                         //          .data
		.src_channel        (router_007_src_channel),                      //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                   //          .endofpacket
	);

	Computer_System_mm_interconnect_2_router_002 router_008 (
		.sink_ready         (hex3_hex0_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (hex3_hex0_s1_agent_rp_valid),                 //          .valid
		.sink_data          (hex3_hex0_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (hex3_hex0_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (hex3_hex0_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                        //       src.ready
		.src_valid          (router_008_src_valid),                        //          .valid
		.src_data           (router_008_src_data),                         //          .data
		.src_channel        (router_008_src_channel),                      //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                   //          .endofpacket
	);

	Computer_System_mm_interconnect_2_router_002 router_009 (
		.sink_ready         (slider_switches_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (slider_switches_s1_agent_rp_valid),           //          .valid
		.sink_data          (slider_switches_s1_agent_rp_data),            //          .data
		.sink_startofpacket (slider_switches_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (slider_switches_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                        //       src.ready
		.src_valid          (router_009_src_valid),                        //          .valid
		.src_data           (router_009_src_data),                         //          .data
		.src_channel        (router_009_src_channel),                      //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                   //          .endofpacket
	);

	Computer_System_mm_interconnect_2_router_002 router_010 (
		.sink_ready         (pushbuttons_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (pushbuttons_s1_agent_rp_valid),               //          .valid
		.sink_data          (pushbuttons_s1_agent_rp_data),                //          .data
		.sink_startofpacket (pushbuttons_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (pushbuttons_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                        //       src.ready
		.src_valid          (router_010_src_valid),                        //          .valid
		.src_data           (router_010_src_data),                         //          .data
		.src_channel        (router_010_src_channel),                      //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                   //          .endofpacket
	);

	Computer_System_mm_interconnect_2_router_002 router_011 (
		.sink_ready         (pixel_dma_addr_translation_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pixel_dma_addr_translation_slave_agent_rp_valid),         //          .valid
		.sink_data          (pixel_dma_addr_translation_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pixel_dma_addr_translation_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pixel_dma_addr_translation_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                  //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.src_ready          (router_011_src_ready),                                    //       src.ready
		.src_valid          (router_011_src_valid),                                    //          .valid
		.src_data           (router_011_src_data),                                     //          .data
		.src_channel        (router_011_src_channel),                                  //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_router_002 router_012 (
		.sink_ready         (video_in_dma_addr_translation_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_in_dma_addr_translation_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_in_dma_addr_translation_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_in_dma_addr_translation_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_in_dma_addr_translation_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                     //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_012_src_ready),                                       //       src.ready
		.src_valid          (router_012_src_valid),                                       //          .valid
		.src_data           (router_012_src_data),                                        //          .data
		.src_channel        (router_012_src_channel),                                     //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                  //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                         //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                         //          .valid
		.cmd_sink_data          (router_src_data),                                                          //          .data
		.cmd_sink_channel       (router_src_channel),                                                       //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                                 //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                   //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                        //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                        //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                      //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                         //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (93),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (86),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (58),
		.PKT_TRANS_WRITE           (59),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.VALID_WIDTH               (11),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                     //          .valid
		.cmd_sink_data          (router_001_src_data),                                                      //          .data
		.cmd_sink_channel       (router_001_src_channel),                                                   //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                             //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                               //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                                    //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                                  //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) audio_subsystem_audio_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset),                     // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                               //          .ready
		.source0_valid         (audio_subsystem_audio_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (audio_subsystem_audio_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (audio_subsystem_audio_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (audio_subsystem_audio_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (audio_subsystem_audio_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (audio_subsystem_audio_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) av_config_avalon_av_config_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                               //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset),                          // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                                //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                                 //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                              //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                          //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                                //          .ready
		.source0_valid         (av_config_avalon_av_config_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (av_config_avalon_av_config_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (av_config_avalon_av_config_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (av_config_avalon_av_config_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (av_config_avalon_av_config_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (av_config_avalon_av_config_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) vga_subsystem_char_buffer_control_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                      //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset),                                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                                       //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                                        //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                                     //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                                 //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                                       //          .ready
		.source0_valid         (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_control_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                  //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                   //          .ready
		.source0_valid         (sysid_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_in_subsystem_edge_detection_control_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                              //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset),                                         // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                                               //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                                                //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                                             //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                                         //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                                               //          .ready
		.source0_valid         (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) leds_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                      //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                       //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                        //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                     //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                 //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                       //          .ready
		.source0_valid         (leds_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (leds_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (leds_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (leds_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (leds_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (leds_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hex3_hex0_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                           //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                            //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                             //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                          //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                    //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                      //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                            //          .ready
		.source0_valid         (hex3_hex0_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (hex3_hex0_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (hex3_hex0_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (hex3_hex0_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (hex3_hex0_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (hex3_hex0_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) slider_switches_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                 //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                  //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                   //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                                //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                          //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                            //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                  //          .ready
		.source0_valid         (slider_switches_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (slider_switches_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (slider_switches_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (slider_switches_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (slider_switches_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (slider_switches_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pushbuttons_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                             //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                              //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                               //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                            //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                        //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                              //          .ready
		.source0_valid         (pushbuttons_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pushbuttons_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (pushbuttons_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pushbuttons_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pushbuttons_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pushbuttons_s1_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pixel_dma_addr_translation_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                               //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset),                          // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                                                //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                                 //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                                              //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                                          //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                                                //          .ready
		.source0_valid         (pixel_dma_addr_translation_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pixel_dma_addr_translation_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (pixel_dma_addr_translation_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pixel_dma_addr_translation_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pixel_dma_addr_translation_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pixel_dma_addr_translation_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (56),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (84),
		.PKT_BYTE_CNT_H            (69),
		.PKT_BYTE_CNT_L            (63),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (79),
		.PKT_BURST_SIZE_L          (77),
		.PKT_BURST_TYPE_H          (81),
		.PKT_BURST_TYPE_L          (80),
		.PKT_BURSTWRAP_H           (76),
		.PKT_BURSTWRAP_L           (70),
		.PKT_TRANS_COMPRESSED_READ (57),
		.PKT_TRANS_WRITE           (59),
		.PKT_TRANS_READ            (60),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (118),
		.ST_CHANNEL_W              (11),
		.OUT_BYTE_CNT_H            (65),
		.OUT_BURSTWRAP_H           (76),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_in_dma_addr_translation_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                  //       cr0.clk
		.reset                 (AV_Config_reset_reset_bridge_in_reset_reset),                             // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                                                   //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                                                    //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                                                 //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                                             //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                                                   //          .ready
		.source0_valid         (video_in_dma_addr_translation_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_in_dma_addr_translation_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_in_dma_addr_translation_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_in_dma_addr_translation_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_in_dma_addr_translation_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_in_dma_addr_translation_slave_burst_adapter_source0_ready)          //          .ready
	);

	Computer_System_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                 (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                                     //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                                     //           .valid
		.src0_data           (cmd_demux_src0_data),                                                      //           .data
		.src0_channel        (cmd_demux_src0_channel),                                                   //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                             //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                               //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                                     //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                                     //           .valid
		.src1_data           (cmd_demux_src1_data),                                                      //           .data
		.src1_channel        (cmd_demux_src1_channel),                                                   //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                             //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                               //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                                     //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                                     //           .valid
		.src2_data           (cmd_demux_src2_data),                                                      //           .data
		.src2_channel        (cmd_demux_src2_channel),                                                   //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                             //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                               //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                                     //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                                     //           .valid
		.src3_data           (cmd_demux_src3_data),                                                      //           .data
		.src3_channel        (cmd_demux_src3_channel),                                                   //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                             //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                               //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                                     //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                                     //           .valid
		.src4_data           (cmd_demux_src4_data),                                                      //           .data
		.src4_channel        (cmd_demux_src4_channel),                                                   //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                             //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                               //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                                     //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                                     //           .valid
		.src5_data           (cmd_demux_src5_data),                                                      //           .data
		.src5_channel        (cmd_demux_src5_channel),                                                   //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                             //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                               //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                                     //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                                     //           .valid
		.src6_data           (cmd_demux_src6_data),                                                      //           .data
		.src6_channel        (cmd_demux_src6_channel),                                                   //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                             //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                               //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                                     //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                                     //           .valid
		.src7_data           (cmd_demux_src7_data),                                                      //           .data
		.src7_channel        (cmd_demux_src7_channel),                                                   //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                             //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                               //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                                     //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                                     //           .valid
		.src8_data           (cmd_demux_src8_data),                                                      //           .data
		.src8_channel        (cmd_demux_src8_channel),                                                   //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                             //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                               //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                                     //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                                     //           .valid
		.src9_data           (cmd_demux_src9_data),                                                      //           .data
		.src9_channel        (cmd_demux_src9_channel),                                                   //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                             //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                               //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                                    //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                                    //           .valid
		.src10_data          (cmd_demux_src10_data),                                                     //           .data
		.src10_channel       (cmd_demux_src10_channel),                                                  //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                            //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket)                                               //           .endofpacket
	);

	Computer_System_mm_interconnect_2_cmd_demux cmd_demux_001 (
		.clk                 (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                                 //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                                 //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                                  //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                               //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                                         //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                           //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                                 //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                                 //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                                  //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                               //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                                         //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                           //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                                 //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                                 //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                                  //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                               //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                                         //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                           //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                                 //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                                 //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                                  //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                               //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                                         //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                           //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                                 //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                                 //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                                  //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                               //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                                         //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                           //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                                 //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                                 //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                                  //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                               //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                                         //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                           //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                                 //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                                 //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                                  //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                               //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                                         //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                           //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                                 //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                                 //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                                  //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                               //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                                         //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                           //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                                 //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                                 //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                                  //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                               //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                                         //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                           //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                                 //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                                 //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                                  //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                               //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                                         //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                           //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                                //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                                //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                                 //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                              //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                                        //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket)                                           //           .endofpacket
	);

	Computer_System_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                           //          .valid
		.src_data            (cmd_mux_src_data),                            //          .data
		.src_channel         (cmd_mux_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                      //          .channel
		.sink0_data          (cmd_demux_src0_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_cmd_mux cmd_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                       //          .valid
		.src_data            (cmd_mux_001_src_data),                        //          .data
		.src_channel         (cmd_mux_001_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                      //          .channel
		.sink0_data          (cmd_demux_src1_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_cmd_mux cmd_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                       //          .valid
		.src_data            (cmd_mux_002_src_data),                        //          .data
		.src_channel         (cmd_mux_002_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                      //          .channel
		.sink0_data          (cmd_demux_src2_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_cmd_mux cmd_mux_003 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                       //          .valid
		.src_data            (cmd_mux_003_src_data),                        //          .data
		.src_channel         (cmd_mux_003_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                      //          .channel
		.sink0_data          (cmd_demux_src3_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_cmd_mux cmd_mux_004 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                       //          .valid
		.src_data            (cmd_mux_004_src_data),                        //          .data
		.src_channel         (cmd_mux_004_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                      //          .channel
		.sink0_data          (cmd_demux_src4_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_cmd_mux cmd_mux_005 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                       //          .valid
		.src_data            (cmd_mux_005_src_data),                        //          .data
		.src_channel         (cmd_mux_005_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                      //          .channel
		.sink0_data          (cmd_demux_src5_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_cmd_mux cmd_mux_006 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                       //          .valid
		.src_data            (cmd_mux_006_src_data),                        //          .data
		.src_channel         (cmd_mux_006_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                      //          .channel
		.sink0_data          (cmd_demux_src6_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_cmd_mux cmd_mux_007 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                       //          .valid
		.src_data            (cmd_mux_007_src_data),                        //          .data
		.src_channel         (cmd_mux_007_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                      //          .channel
		.sink0_data          (cmd_demux_src7_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_cmd_mux cmd_mux_008 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                       //          .valid
		.src_data            (cmd_mux_008_src_data),                        //          .data
		.src_channel         (cmd_mux_008_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                      //          .channel
		.sink0_data          (cmd_demux_src8_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_cmd_mux cmd_mux_009 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                       //          .valid
		.src_data            (cmd_mux_009_src_data),                        //          .data
		.src_channel         (cmd_mux_009_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                      //          .channel
		.sink0_data          (cmd_demux_src9_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                    //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                    //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                  //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                     //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_cmd_mux cmd_mux_010 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                       //          .valid
		.src_data            (cmd_mux_010_src_data),                        //          .data
		.src_channel         (cmd_mux_010_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                     //          .channel
		.sink0_data          (cmd_demux_src10_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                   //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                 //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                    //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket)              //          .endofpacket
	);

	Computer_System_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                        //      sink.ready
		.sink_channel       (router_002_src_channel),                      //          .channel
		.sink_data          (router_002_src_data),                         //          .data
		.sink_startofpacket (router_002_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_002_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_src0_data),                         //          .data
		.src0_channel       (rsp_demux_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                  //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                        //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                        //          .valid
		.src1_data          (rsp_demux_src1_data),                         //          .data
		.src1_channel       (rsp_demux_src1_channel),                      //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                   //          .endofpacket
	);

	Computer_System_mm_interconnect_2_rsp_demux rsp_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                        //      sink.ready
		.sink_channel       (router_003_src_channel),                      //          .channel
		.sink_data          (router_003_src_data),                         //          .data
		.sink_startofpacket (router_003_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_003_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_001_src0_data),                     //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_001_src1_data),                     //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_rsp_demux rsp_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                        //      sink.ready
		.sink_channel       (router_004_src_channel),                      //          .channel
		.sink_data          (router_004_src_data),                         //          .data
		.sink_startofpacket (router_004_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_004_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_002_src0_data),                     //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_002_src1_data),                     //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_rsp_demux rsp_demux_003 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                        //      sink.ready
		.sink_channel       (router_005_src_channel),                      //          .channel
		.sink_data          (router_005_src_data),                         //          .data
		.sink_startofpacket (router_005_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_005_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_003_src0_data),                     //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_003_src1_data),                     //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_rsp_demux rsp_demux_004 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                        //      sink.ready
		.sink_channel       (router_006_src_channel),                      //          .channel
		.sink_data          (router_006_src_data),                         //          .data
		.sink_startofpacket (router_006_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_006_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_004_src0_data),                     //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_004_src1_data),                     //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_rsp_demux rsp_demux_005 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                        //      sink.ready
		.sink_channel       (router_007_src_channel),                      //          .channel
		.sink_data          (router_007_src_data),                         //          .data
		.sink_startofpacket (router_007_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_007_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_005_src0_data),                     //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_005_src1_data),                     //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_rsp_demux rsp_demux_006 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                        //      sink.ready
		.sink_channel       (router_008_src_channel),                      //          .channel
		.sink_data          (router_008_src_data),                         //          .data
		.sink_startofpacket (router_008_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_008_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_006_src0_data),                     //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_006_src1_data),                     //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_rsp_demux rsp_demux_007 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                        //      sink.ready
		.sink_channel       (router_009_src_channel),                      //          .channel
		.sink_data          (router_009_src_data),                         //          .data
		.sink_startofpacket (router_009_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_009_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_007_src0_data),                     //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_007_src1_data),                     //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_rsp_demux rsp_demux_008 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                        //      sink.ready
		.sink_channel       (router_010_src_channel),                      //          .channel
		.sink_data          (router_010_src_data),                         //          .data
		.sink_startofpacket (router_010_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_010_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_008_src0_data),                     //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_008_src1_data),                     //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_rsp_demux rsp_demux_009 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                        //      sink.ready
		.sink_channel       (router_011_src_channel),                      //          .channel
		.sink_data          (router_011_src_data),                         //          .data
		.sink_startofpacket (router_011_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_011_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_009_src0_data),                     //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_009_src1_data),                     //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_rsp_demux rsp_demux_010 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (AV_Config_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                        //      sink.ready
		.sink_channel       (router_012_src_channel),                      //          .channel
		.sink_data          (router_012_src_data),                         //          .data
		.sink_startofpacket (router_012_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_012_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_010_src0_data),                     //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_010_src1_data),                     //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                        //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                        //          .valid
		.src_data             (rsp_mux_src_data),                                                         //          .data
		.src_channel          (rsp_mux_src_channel),                                                      //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                                     //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                                     //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                                   //          .channel
		.sink0_data           (rsp_demux_src0_data),                                                      //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                                 //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                               //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                                 //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                               //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                                 //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                               //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                               //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                               //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                 //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                               //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                 //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                               //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                                 //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                               //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                                 //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                               //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                                 //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                               //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                  //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_2_rsp_mux rsp_mux_001 (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                                    //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                                    //          .valid
		.src_data             (rsp_mux_001_src_data),                                                     //          .data
		.src_channel          (rsp_mux_001_src_channel),                                                  //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                                                     //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                                                     //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                                                   //          .channel
		.sink0_data           (rsp_demux_src1_data),                                                      //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                                               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                                                 //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                                               //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                                                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),                                           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                                                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                                                 //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                                               //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                                                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                                           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                                                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                                                 //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                                               //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                                                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                                           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                                               //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                                               //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                                           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                                                 //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                                               //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                                                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                                           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                                                 //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                                               //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                                                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                                           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                                                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                                                 //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                                               //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                                                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),                                         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                                           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                                                 //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                                               //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                                                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                                           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                                                 //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                                               //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                                                  //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (audio_subsystem_audio_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (audio_subsystem_audio_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (audio_subsystem_audio_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset),                 // in_rst_0.reset
		.in_0_data      (av_config_avalon_av_config_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (av_config_avalon_av_config_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (av_config_avalon_av_config_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                            //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset),                        // in_rst_0.reset
		.in_0_data      (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                  //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                  //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                   //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                                     // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset),                                // in_rst_0.reset
		.in_0_data      (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                                          //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                                          //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                                           //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                      // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (leds_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (leds_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (leds_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)            //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                      // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex3_hex0_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (hex3_hex0_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (hex3_hex0_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)            //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                        // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (slider_switches_s1_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (slider_switches_s1_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (slider_switches_s1_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)              //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                      // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pushbuttons_s1_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (pushbuttons_s1_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (pushbuttons_s1_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)            //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset),                 // in_rst_0.reset
		.in_0_data      (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                            //         .error
	);

	Computer_System_mm_interconnect_1_avalon_st_adapter_002 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (AV_Config_reset_reset_bridge_in_reset_reset),                    // in_rst_0.reset
		.in_0_data      (video_in_dma_addr_translation_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (video_in_dma_addr_translation_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (video_in_dma_addr_translation_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                               //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                              //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                              //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                               //         .error
	);

endmodule
