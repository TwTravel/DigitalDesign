// Computer_System_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module Computer_System_mm_interconnect_0 (
		input  wire [11:0]  ARM_A9_HPS_h2f_axi_master_awid,                                           //                                          ARM_A9_HPS_h2f_axi_master.awid
		input  wire [29:0]  ARM_A9_HPS_h2f_axi_master_awaddr,                                         //                                                                   .awaddr
		input  wire [3:0]   ARM_A9_HPS_h2f_axi_master_awlen,                                          //                                                                   .awlen
		input  wire [2:0]   ARM_A9_HPS_h2f_axi_master_awsize,                                         //                                                                   .awsize
		input  wire [1:0]   ARM_A9_HPS_h2f_axi_master_awburst,                                        //                                                                   .awburst
		input  wire [1:0]   ARM_A9_HPS_h2f_axi_master_awlock,                                         //                                                                   .awlock
		input  wire [3:0]   ARM_A9_HPS_h2f_axi_master_awcache,                                        //                                                                   .awcache
		input  wire [2:0]   ARM_A9_HPS_h2f_axi_master_awprot,                                         //                                                                   .awprot
		input  wire         ARM_A9_HPS_h2f_axi_master_awvalid,                                        //                                                                   .awvalid
		output wire         ARM_A9_HPS_h2f_axi_master_awready,                                        //                                                                   .awready
		input  wire [11:0]  ARM_A9_HPS_h2f_axi_master_wid,                                            //                                                                   .wid
		input  wire [127:0] ARM_A9_HPS_h2f_axi_master_wdata,                                          //                                                                   .wdata
		input  wire [15:0]  ARM_A9_HPS_h2f_axi_master_wstrb,                                          //                                                                   .wstrb
		input  wire         ARM_A9_HPS_h2f_axi_master_wlast,                                          //                                                                   .wlast
		input  wire         ARM_A9_HPS_h2f_axi_master_wvalid,                                         //                                                                   .wvalid
		output wire         ARM_A9_HPS_h2f_axi_master_wready,                                         //                                                                   .wready
		output wire [11:0]  ARM_A9_HPS_h2f_axi_master_bid,                                            //                                                                   .bid
		output wire [1:0]   ARM_A9_HPS_h2f_axi_master_bresp,                                          //                                                                   .bresp
		output wire         ARM_A9_HPS_h2f_axi_master_bvalid,                                         //                                                                   .bvalid
		input  wire         ARM_A9_HPS_h2f_axi_master_bready,                                         //                                                                   .bready
		input  wire [11:0]  ARM_A9_HPS_h2f_axi_master_arid,                                           //                                                                   .arid
		input  wire [29:0]  ARM_A9_HPS_h2f_axi_master_araddr,                                         //                                                                   .araddr
		input  wire [3:0]   ARM_A9_HPS_h2f_axi_master_arlen,                                          //                                                                   .arlen
		input  wire [2:0]   ARM_A9_HPS_h2f_axi_master_arsize,                                         //                                                                   .arsize
		input  wire [1:0]   ARM_A9_HPS_h2f_axi_master_arburst,                                        //                                                                   .arburst
		input  wire [1:0]   ARM_A9_HPS_h2f_axi_master_arlock,                                         //                                                                   .arlock
		input  wire [3:0]   ARM_A9_HPS_h2f_axi_master_arcache,                                        //                                                                   .arcache
		input  wire [2:0]   ARM_A9_HPS_h2f_axi_master_arprot,                                         //                                                                   .arprot
		input  wire         ARM_A9_HPS_h2f_axi_master_arvalid,                                        //                                                                   .arvalid
		output wire         ARM_A9_HPS_h2f_axi_master_arready,                                        //                                                                   .arready
		output wire [11:0]  ARM_A9_HPS_h2f_axi_master_rid,                                            //                                                                   .rid
		output wire [127:0] ARM_A9_HPS_h2f_axi_master_rdata,                                          //                                                                   .rdata
		output wire [1:0]   ARM_A9_HPS_h2f_axi_master_rresp,                                          //                                                                   .rresp
		output wire         ARM_A9_HPS_h2f_axi_master_rlast,                                          //                                                                   .rlast
		output wire         ARM_A9_HPS_h2f_axi_master_rvalid,                                         //                                                                   .rvalid
		input  wire         ARM_A9_HPS_h2f_axi_master_rready,                                         //                                                                   .rready
		input  wire [11:0]  ARM_A9_HPS_h2f_lw_axi_master_awid,                                        //                                       ARM_A9_HPS_h2f_lw_axi_master.awid
		input  wire [20:0]  ARM_A9_HPS_h2f_lw_axi_master_awaddr,                                      //                                                                   .awaddr
		input  wire [3:0]   ARM_A9_HPS_h2f_lw_axi_master_awlen,                                       //                                                                   .awlen
		input  wire [2:0]   ARM_A9_HPS_h2f_lw_axi_master_awsize,                                      //                                                                   .awsize
		input  wire [1:0]   ARM_A9_HPS_h2f_lw_axi_master_awburst,                                     //                                                                   .awburst
		input  wire [1:0]   ARM_A9_HPS_h2f_lw_axi_master_awlock,                                      //                                                                   .awlock
		input  wire [3:0]   ARM_A9_HPS_h2f_lw_axi_master_awcache,                                     //                                                                   .awcache
		input  wire [2:0]   ARM_A9_HPS_h2f_lw_axi_master_awprot,                                      //                                                                   .awprot
		input  wire         ARM_A9_HPS_h2f_lw_axi_master_awvalid,                                     //                                                                   .awvalid
		output wire         ARM_A9_HPS_h2f_lw_axi_master_awready,                                     //                                                                   .awready
		input  wire [11:0]  ARM_A9_HPS_h2f_lw_axi_master_wid,                                         //                                                                   .wid
		input  wire [31:0]  ARM_A9_HPS_h2f_lw_axi_master_wdata,                                       //                                                                   .wdata
		input  wire [3:0]   ARM_A9_HPS_h2f_lw_axi_master_wstrb,                                       //                                                                   .wstrb
		input  wire         ARM_A9_HPS_h2f_lw_axi_master_wlast,                                       //                                                                   .wlast
		input  wire         ARM_A9_HPS_h2f_lw_axi_master_wvalid,                                      //                                                                   .wvalid
		output wire         ARM_A9_HPS_h2f_lw_axi_master_wready,                                      //                                                                   .wready
		output wire [11:0]  ARM_A9_HPS_h2f_lw_axi_master_bid,                                         //                                                                   .bid
		output wire [1:0]   ARM_A9_HPS_h2f_lw_axi_master_bresp,                                       //                                                                   .bresp
		output wire         ARM_A9_HPS_h2f_lw_axi_master_bvalid,                                      //                                                                   .bvalid
		input  wire         ARM_A9_HPS_h2f_lw_axi_master_bready,                                      //                                                                   .bready
		input  wire [11:0]  ARM_A9_HPS_h2f_lw_axi_master_arid,                                        //                                                                   .arid
		input  wire [20:0]  ARM_A9_HPS_h2f_lw_axi_master_araddr,                                      //                                                                   .araddr
		input  wire [3:0]   ARM_A9_HPS_h2f_lw_axi_master_arlen,                                       //                                                                   .arlen
		input  wire [2:0]   ARM_A9_HPS_h2f_lw_axi_master_arsize,                                      //                                                                   .arsize
		input  wire [1:0]   ARM_A9_HPS_h2f_lw_axi_master_arburst,                                     //                                                                   .arburst
		input  wire [1:0]   ARM_A9_HPS_h2f_lw_axi_master_arlock,                                      //                                                                   .arlock
		input  wire [3:0]   ARM_A9_HPS_h2f_lw_axi_master_arcache,                                     //                                                                   .arcache
		input  wire [2:0]   ARM_A9_HPS_h2f_lw_axi_master_arprot,                                      //                                                                   .arprot
		input  wire         ARM_A9_HPS_h2f_lw_axi_master_arvalid,                                     //                                                                   .arvalid
		output wire         ARM_A9_HPS_h2f_lw_axi_master_arready,                                     //                                                                   .arready
		output wire [11:0]  ARM_A9_HPS_h2f_lw_axi_master_rid,                                         //                                                                   .rid
		output wire [31:0]  ARM_A9_HPS_h2f_lw_axi_master_rdata,                                       //                                                                   .rdata
		output wire [1:0]   ARM_A9_HPS_h2f_lw_axi_master_rresp,                                       //                                                                   .rresp
		output wire         ARM_A9_HPS_h2f_lw_axi_master_rlast,                                       //                                                                   .rlast
		output wire         ARM_A9_HPS_h2f_lw_axi_master_rvalid,                                      //                                                                   .rvalid
		input  wire         ARM_A9_HPS_h2f_lw_axi_master_rready,                                      //                                                                   .rready
		input  wire         System_PLL_sys_clk_clk,                                                   //                                                 System_PLL_sys_clk.clk
		input  wire         ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset, // ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset.reset
		input  wire         JTAG_to_FPGA_Bridge_clk_reset_reset_bridge_in_reset_reset,                //                JTAG_to_FPGA_Bridge_clk_reset_reset_bridge_in_reset.reset
		input  wire         JTAG_UART_reset_reset_bridge_in_reset_reset,                              //                              JTAG_UART_reset_reset_bridge_in_reset.reset
		input  wire         Nios2_2nd_Core_reset_reset_bridge_in_reset_reset,                         //                         Nios2_2nd_Core_reset_reset_bridge_in_reset.reset
		input  wire         Nios2_reset_reset_bridge_in_reset_reset,                                  //                                  Nios2_reset_reset_bridge_in_reset.reset
		input  wire         Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset,          //          Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset.reset
		input  wire [31:0]  JTAG_to_FPGA_Bridge_master_address,                                       //                                         JTAG_to_FPGA_Bridge_master.address
		output wire         JTAG_to_FPGA_Bridge_master_waitrequest,                                   //                                                                   .waitrequest
		input  wire [3:0]   JTAG_to_FPGA_Bridge_master_byteenable,                                    //                                                                   .byteenable
		input  wire         JTAG_to_FPGA_Bridge_master_read,                                          //                                                                   .read
		output wire [31:0]  JTAG_to_FPGA_Bridge_master_readdata,                                      //                                                                   .readdata
		output wire         JTAG_to_FPGA_Bridge_master_readdatavalid,                                 //                                                                   .readdatavalid
		input  wire         JTAG_to_FPGA_Bridge_master_write,                                         //                                                                   .write
		input  wire [31:0]  JTAG_to_FPGA_Bridge_master_writedata,                                     //                                                                   .writedata
		input  wire [31:0]  Nios2_data_master_address,                                                //                                                  Nios2_data_master.address
		output wire         Nios2_data_master_waitrequest,                                            //                                                                   .waitrequest
		input  wire [3:0]   Nios2_data_master_byteenable,                                             //                                                                   .byteenable
		input  wire         Nios2_data_master_read,                                                   //                                                                   .read
		output wire [31:0]  Nios2_data_master_readdata,                                               //                                                                   .readdata
		input  wire         Nios2_data_master_write,                                                  //                                                                   .write
		input  wire [31:0]  Nios2_data_master_writedata,                                              //                                                                   .writedata
		input  wire         Nios2_data_master_debugaccess,                                            //                                                                   .debugaccess
		input  wire [27:0]  Nios2_instruction_master_address,                                         //                                           Nios2_instruction_master.address
		output wire         Nios2_instruction_master_waitrequest,                                     //                                                                   .waitrequest
		input  wire         Nios2_instruction_master_read,                                            //                                                                   .read
		output wire [31:0]  Nios2_instruction_master_readdata,                                        //                                                                   .readdata
		output wire         Nios2_instruction_master_readdatavalid,                                   //                                                                   .readdatavalid
		input  wire [31:0]  Nios2_2nd_Core_data_master_address,                                       //                                         Nios2_2nd_Core_data_master.address
		output wire         Nios2_2nd_Core_data_master_waitrequest,                                   //                                                                   .waitrequest
		input  wire [3:0]   Nios2_2nd_Core_data_master_byteenable,                                    //                                                                   .byteenable
		input  wire         Nios2_2nd_Core_data_master_read,                                          //                                                                   .read
		output wire [31:0]  Nios2_2nd_Core_data_master_readdata,                                      //                                                                   .readdata
		input  wire         Nios2_2nd_Core_data_master_write,                                         //                                                                   .write
		input  wire [31:0]  Nios2_2nd_Core_data_master_writedata,                                     //                                                                   .writedata
		input  wire         Nios2_2nd_Core_data_master_debugaccess,                                   //                                                                   .debugaccess
		input  wire [27:0]  Nios2_2nd_Core_instruction_master_address,                                //                                  Nios2_2nd_Core_instruction_master.address
		output wire         Nios2_2nd_Core_instruction_master_waitrequest,                            //                                                                   .waitrequest
		input  wire         Nios2_2nd_Core_instruction_master_read,                                   //                                                                   .read
		output wire [31:0]  Nios2_2nd_Core_instruction_master_readdata,                               //                                                                   .readdata
		output wire         Nios2_2nd_Core_instruction_master_readdatavalid,                          //                                                                   .readdatavalid
		input  wire [1:0]   Pixel_DMA_Addr_Translation_master_address,                                //                                  Pixel_DMA_Addr_Translation_master.address
		output wire         Pixel_DMA_Addr_Translation_master_waitrequest,                            //                                                                   .waitrequest
		input  wire [3:0]   Pixel_DMA_Addr_Translation_master_byteenable,                             //                                                                   .byteenable
		input  wire         Pixel_DMA_Addr_Translation_master_read,                                   //                                                                   .read
		output wire [31:0]  Pixel_DMA_Addr_Translation_master_readdata,                               //                                                                   .readdata
		input  wire         Pixel_DMA_Addr_Translation_master_write,                                  //                                                                   .write
		input  wire [31:0]  Pixel_DMA_Addr_Translation_master_writedata,                              //                                                                   .writedata
		input  wire [31:0]  VGA_Subsystem_pixel_dma_master_address,                                   //                                     VGA_Subsystem_pixel_dma_master.address
		output wire         VGA_Subsystem_pixel_dma_master_waitrequest,                               //                                                                   .waitrequest
		input  wire         VGA_Subsystem_pixel_dma_master_read,                                      //                                                                   .read
		output wire [7:0]   VGA_Subsystem_pixel_dma_master_readdata,                                  //                                                                   .readdata
		output wire         VGA_Subsystem_pixel_dma_master_readdatavalid,                             //                                                                   .readdatavalid
		input  wire         VGA_Subsystem_pixel_dma_master_lock,                                      //                                                                   .lock
		input  wire [1:0]   Video_In_DMA_Addr_Translation_master_address,                             //                               Video_In_DMA_Addr_Translation_master.address
		output wire         Video_In_DMA_Addr_Translation_master_waitrequest,                         //                                                                   .waitrequest
		input  wire [3:0]   Video_In_DMA_Addr_Translation_master_byteenable,                          //                                                                   .byteenable
		input  wire         Video_In_DMA_Addr_Translation_master_read,                                //                                                                   .read
		output wire [31:0]  Video_In_DMA_Addr_Translation_master_readdata,                            //                                                                   .readdata
		input  wire         Video_In_DMA_Addr_Translation_master_write,                               //                                                                   .write
		input  wire [31:0]  Video_In_DMA_Addr_Translation_master_writedata,                           //                                                                   .writedata
		input  wire [31:0]  Video_In_Subsystem_video_in_dma_master_address,                           //                             Video_In_Subsystem_video_in_dma_master.address
		output wire         Video_In_Subsystem_video_in_dma_master_waitrequest,                       //                                                                   .waitrequest
		input  wire         Video_In_Subsystem_video_in_dma_master_write,                             //                                                                   .write
		input  wire [15:0]  Video_In_Subsystem_video_in_dma_master_writedata,                         //                                                                   .writedata
		output wire [2:0]   ADC_adc_slave_address,                                                    //                                                      ADC_adc_slave.address
		output wire         ADC_adc_slave_write,                                                      //                                                                   .write
		output wire         ADC_adc_slave_read,                                                       //                                                                   .read
		input  wire [31:0]  ADC_adc_slave_readdata,                                                   //                                                                   .readdata
		output wire [31:0]  ADC_adc_slave_writedata,                                                  //                                                                   .writedata
		input  wire         ADC_adc_slave_waitrequest,                                                //                                                                   .waitrequest
		output wire [1:0]   Audio_Subsystem_audio_slave_address,                                      //                                        Audio_Subsystem_audio_slave.address
		output wire         Audio_Subsystem_audio_slave_write,                                        //                                                                   .write
		output wire         Audio_Subsystem_audio_slave_read,                                         //                                                                   .read
		input  wire [31:0]  Audio_Subsystem_audio_slave_readdata,                                     //                                                                   .readdata
		output wire [31:0]  Audio_Subsystem_audio_slave_writedata,                                    //                                                                   .writedata
		output wire         Audio_Subsystem_audio_slave_chipselect,                                   //                                                                   .chipselect
		output wire [1:0]   AV_Config_avalon_av_config_slave_address,                                 //                                   AV_Config_avalon_av_config_slave.address
		output wire         AV_Config_avalon_av_config_slave_write,                                   //                                                                   .write
		output wire         AV_Config_avalon_av_config_slave_read,                                    //                                                                   .read
		input  wire [31:0]  AV_Config_avalon_av_config_slave_readdata,                                //                                                                   .readdata
		output wire [31:0]  AV_Config_avalon_av_config_slave_writedata,                               //                                                                   .writedata
		output wire [3:0]   AV_Config_avalon_av_config_slave_byteenable,                              //                                                                   .byteenable
		input  wire         AV_Config_avalon_av_config_slave_waitrequest,                             //                                                                   .waitrequest
		output wire [1:0]   Expansion_JP1_s1_address,                                                 //                                                   Expansion_JP1_s1.address
		output wire         Expansion_JP1_s1_write,                                                   //                                                                   .write
		input  wire [31:0]  Expansion_JP1_s1_readdata,                                                //                                                                   .readdata
		output wire [31:0]  Expansion_JP1_s1_writedata,                                               //                                                                   .writedata
		output wire         Expansion_JP1_s1_chipselect,                                              //                                                                   .chipselect
		output wire [1:0]   Expansion_JP2_s1_address,                                                 //                                                   Expansion_JP2_s1.address
		output wire         Expansion_JP2_s1_write,                                                   //                                                                   .write
		input  wire [31:0]  Expansion_JP2_s1_readdata,                                                //                                                                   .readdata
		output wire [31:0]  Expansion_JP2_s1_writedata,                                               //                                                                   .writedata
		output wire         Expansion_JP2_s1_chipselect,                                              //                                                                   .chipselect
		output wire [27:0]  F2H_Mem_Window_00000000_windowed_slave_address,                           //                             F2H_Mem_Window_00000000_windowed_slave.address
		output wire         F2H_Mem_Window_00000000_windowed_slave_write,                             //                                                                   .write
		output wire         F2H_Mem_Window_00000000_windowed_slave_read,                              //                                                                   .read
		input  wire [31:0]  F2H_Mem_Window_00000000_windowed_slave_readdata,                          //                                                                   .readdata
		output wire [31:0]  F2H_Mem_Window_00000000_windowed_slave_writedata,                         //                                                                   .writedata
		output wire [0:0]   F2H_Mem_Window_00000000_windowed_slave_burstcount,                        //                                                                   .burstcount
		output wire [3:0]   F2H_Mem_Window_00000000_windowed_slave_byteenable,                        //                                                                   .byteenable
		input  wire         F2H_Mem_Window_00000000_windowed_slave_readdatavalid,                     //                                                                   .readdatavalid
		input  wire         F2H_Mem_Window_00000000_windowed_slave_waitrequest,                       //                                                                   .waitrequest
		output wire [18:0]  F2H_Mem_Window_FF600000_windowed_slave_address,                           //                             F2H_Mem_Window_FF600000_windowed_slave.address
		output wire         F2H_Mem_Window_FF600000_windowed_slave_write,                             //                                                                   .write
		output wire         F2H_Mem_Window_FF600000_windowed_slave_read,                              //                                                                   .read
		input  wire [31:0]  F2H_Mem_Window_FF600000_windowed_slave_readdata,                          //                                                                   .readdata
		output wire [31:0]  F2H_Mem_Window_FF600000_windowed_slave_writedata,                         //                                                                   .writedata
		output wire [0:0]   F2H_Mem_Window_FF600000_windowed_slave_burstcount,                        //                                                                   .burstcount
		output wire [3:0]   F2H_Mem_Window_FF600000_windowed_slave_byteenable,                        //                                                                   .byteenable
		input  wire         F2H_Mem_Window_FF600000_windowed_slave_readdatavalid,                     //                                                                   .readdatavalid
		input  wire         F2H_Mem_Window_FF600000_windowed_slave_waitrequest,                       //                                                                   .waitrequest
		output wire [20:0]  F2H_Mem_Window_FF800000_windowed_slave_address,                           //                             F2H_Mem_Window_FF800000_windowed_slave.address
		output wire         F2H_Mem_Window_FF800000_windowed_slave_write,                             //                                                                   .write
		output wire         F2H_Mem_Window_FF800000_windowed_slave_read,                              //                                                                   .read
		input  wire [31:0]  F2H_Mem_Window_FF800000_windowed_slave_readdata,                          //                                                                   .readdata
		output wire [31:0]  F2H_Mem_Window_FF800000_windowed_slave_writedata,                         //                                                                   .writedata
		output wire [0:0]   F2H_Mem_Window_FF800000_windowed_slave_burstcount,                        //                                                                   .burstcount
		output wire [3:0]   F2H_Mem_Window_FF800000_windowed_slave_byteenable,                        //                                                                   .byteenable
		input  wire         F2H_Mem_Window_FF800000_windowed_slave_readdatavalid,                     //                                                                   .readdatavalid
		input  wire         F2H_Mem_Window_FF800000_windowed_slave_waitrequest,                       //                                                                   .waitrequest
		output wire [1:0]   HEX3_HEX0_s1_address,                                                     //                                                       HEX3_HEX0_s1.address
		output wire         HEX3_HEX0_s1_write,                                                       //                                                                   .write
		input  wire [31:0]  HEX3_HEX0_s1_readdata,                                                    //                                                                   .readdata
		output wire [31:0]  HEX3_HEX0_s1_writedata,                                                   //                                                                   .writedata
		output wire         HEX3_HEX0_s1_chipselect,                                                  //                                                                   .chipselect
		output wire [1:0]   HEX5_HEX4_s1_address,                                                     //                                                       HEX5_HEX4_s1.address
		output wire         HEX5_HEX4_s1_write,                                                       //                                                                   .write
		input  wire [31:0]  HEX5_HEX4_s1_readdata,                                                    //                                                                   .readdata
		output wire [31:0]  HEX5_HEX4_s1_writedata,                                                   //                                                                   .writedata
		output wire         HEX5_HEX4_s1_chipselect,                                                  //                                                                   .chipselect
		output wire [2:0]   Interval_Timer_s1_address,                                                //                                                  Interval_Timer_s1.address
		output wire         Interval_Timer_s1_write,                                                  //                                                                   .write
		input  wire [15:0]  Interval_Timer_s1_readdata,                                               //                                                                   .readdata
		output wire [15:0]  Interval_Timer_s1_writedata,                                              //                                                                   .writedata
		output wire         Interval_Timer_s1_chipselect,                                             //                                                                   .chipselect
		output wire [2:0]   Interval_Timer_2_s1_address,                                              //                                                Interval_Timer_2_s1.address
		output wire         Interval_Timer_2_s1_write,                                                //                                                                   .write
		input  wire [15:0]  Interval_Timer_2_s1_readdata,                                             //                                                                   .readdata
		output wire [15:0]  Interval_Timer_2_s1_writedata,                                            //                                                                   .writedata
		output wire         Interval_Timer_2_s1_chipselect,                                           //                                                                   .chipselect
		output wire [2:0]   Interval_Timer_2nd_Core_s1_address,                                       //                                         Interval_Timer_2nd_Core_s1.address
		output wire         Interval_Timer_2nd_Core_s1_write,                                         //                                                                   .write
		input  wire [15:0]  Interval_Timer_2nd_Core_s1_readdata,                                      //                                                                   .readdata
		output wire [15:0]  Interval_Timer_2nd_Core_s1_writedata,                                     //                                                                   .writedata
		output wire         Interval_Timer_2nd_Core_s1_chipselect,                                    //                                                                   .chipselect
		output wire [2:0]   Interval_Timer_2nd_Core_2_s1_address,                                     //                                       Interval_Timer_2nd_Core_2_s1.address
		output wire         Interval_Timer_2nd_Core_2_s1_write,                                       //                                                                   .write
		input  wire [15:0]  Interval_Timer_2nd_Core_2_s1_readdata,                                    //                                                                   .readdata
		output wire [15:0]  Interval_Timer_2nd_Core_2_s1_writedata,                                   //                                                                   .writedata
		output wire         Interval_Timer_2nd_Core_2_s1_chipselect,                                  //                                                                   .chipselect
		output wire [0:0]   IrDA_avalon_irda_slave_address,                                           //                                             IrDA_avalon_irda_slave.address
		output wire         IrDA_avalon_irda_slave_write,                                             //                                                                   .write
		output wire         IrDA_avalon_irda_slave_read,                                              //                                                                   .read
		input  wire [31:0]  IrDA_avalon_irda_slave_readdata,                                          //                                                                   .readdata
		output wire [31:0]  IrDA_avalon_irda_slave_writedata,                                         //                                                                   .writedata
		output wire [3:0]   IrDA_avalon_irda_slave_byteenable,                                        //                                                                   .byteenable
		output wire         IrDA_avalon_irda_slave_chipselect,                                        //                                                                   .chipselect
		output wire [0:0]   JTAG_UART_avalon_jtag_slave_address,                                      //                                        JTAG_UART_avalon_jtag_slave.address
		output wire         JTAG_UART_avalon_jtag_slave_write,                                        //                                                                   .write
		output wire         JTAG_UART_avalon_jtag_slave_read,                                         //                                                                   .read
		input  wire [31:0]  JTAG_UART_avalon_jtag_slave_readdata,                                     //                                                                   .readdata
		output wire [31:0]  JTAG_UART_avalon_jtag_slave_writedata,                                    //                                                                   .writedata
		input  wire         JTAG_UART_avalon_jtag_slave_waitrequest,                                  //                                                                   .waitrequest
		output wire         JTAG_UART_avalon_jtag_slave_chipselect,                                   //                                                                   .chipselect
		output wire [0:0]   JTAG_UART_2nd_Core_avalon_jtag_slave_address,                             //                               JTAG_UART_2nd_Core_avalon_jtag_slave.address
		output wire         JTAG_UART_2nd_Core_avalon_jtag_slave_write,                               //                                                                   .write
		output wire         JTAG_UART_2nd_Core_avalon_jtag_slave_read,                                //                                                                   .read
		input  wire [31:0]  JTAG_UART_2nd_Core_avalon_jtag_slave_readdata,                            //                                                                   .readdata
		output wire [31:0]  JTAG_UART_2nd_Core_avalon_jtag_slave_writedata,                           //                                                                   .writedata
		input  wire         JTAG_UART_2nd_Core_avalon_jtag_slave_waitrequest,                         //                                                                   .waitrequest
		output wire         JTAG_UART_2nd_Core_avalon_jtag_slave_chipselect,                          //                                                                   .chipselect
		output wire [0:0]   JTAG_UART_for_ARM_0_avalon_jtag_slave_address,                            //                              JTAG_UART_for_ARM_0_avalon_jtag_slave.address
		output wire         JTAG_UART_for_ARM_0_avalon_jtag_slave_write,                              //                                                                   .write
		output wire         JTAG_UART_for_ARM_0_avalon_jtag_slave_read,                               //                                                                   .read
		input  wire [31:0]  JTAG_UART_for_ARM_0_avalon_jtag_slave_readdata,                           //                                                                   .readdata
		output wire [31:0]  JTAG_UART_for_ARM_0_avalon_jtag_slave_writedata,                          //                                                                   .writedata
		input  wire         JTAG_UART_for_ARM_0_avalon_jtag_slave_waitrequest,                        //                                                                   .waitrequest
		output wire         JTAG_UART_for_ARM_0_avalon_jtag_slave_chipselect,                         //                                                                   .chipselect
		output wire [0:0]   JTAG_UART_for_ARM_1_avalon_jtag_slave_address,                            //                              JTAG_UART_for_ARM_1_avalon_jtag_slave.address
		output wire         JTAG_UART_for_ARM_1_avalon_jtag_slave_write,                              //                                                                   .write
		output wire         JTAG_UART_for_ARM_1_avalon_jtag_slave_read,                               //                                                                   .read
		input  wire [31:0]  JTAG_UART_for_ARM_1_avalon_jtag_slave_readdata,                           //                                                                   .readdata
		output wire [31:0]  JTAG_UART_for_ARM_1_avalon_jtag_slave_writedata,                          //                                                                   .writedata
		input  wire         JTAG_UART_for_ARM_1_avalon_jtag_slave_waitrequest,                        //                                                                   .waitrequest
		output wire         JTAG_UART_for_ARM_1_avalon_jtag_slave_chipselect,                         //                                                                   .chipselect
		output wire [1:0]   LEDs_s1_address,                                                          //                                                            LEDs_s1.address
		output wire         LEDs_s1_write,                                                            //                                                                   .write
		input  wire [31:0]  LEDs_s1_readdata,                                                         //                                                                   .readdata
		output wire [31:0]  LEDs_s1_writedata,                                                        //                                                                   .writedata
		output wire         LEDs_s1_chipselect,                                                       //                                                                   .chipselect
		output wire [8:0]   Nios2_debug_mem_slave_address,                                            //                                              Nios2_debug_mem_slave.address
		output wire         Nios2_debug_mem_slave_write,                                              //                                                                   .write
		output wire         Nios2_debug_mem_slave_read,                                               //                                                                   .read
		input  wire [31:0]  Nios2_debug_mem_slave_readdata,                                           //                                                                   .readdata
		output wire [31:0]  Nios2_debug_mem_slave_writedata,                                          //                                                                   .writedata
		output wire [3:0]   Nios2_debug_mem_slave_byteenable,                                         //                                                                   .byteenable
		input  wire         Nios2_debug_mem_slave_waitrequest,                                        //                                                                   .waitrequest
		output wire         Nios2_debug_mem_slave_debugaccess,                                        //                                                                   .debugaccess
		output wire [8:0]   Nios2_2nd_Core_debug_mem_slave_address,                                   //                                     Nios2_2nd_Core_debug_mem_slave.address
		output wire         Nios2_2nd_Core_debug_mem_slave_write,                                     //                                                                   .write
		output wire         Nios2_2nd_Core_debug_mem_slave_read,                                      //                                                                   .read
		input  wire [31:0]  Nios2_2nd_Core_debug_mem_slave_readdata,                                  //                                                                   .readdata
		output wire [31:0]  Nios2_2nd_Core_debug_mem_slave_writedata,                                 //                                                                   .writedata
		output wire [3:0]   Nios2_2nd_Core_debug_mem_slave_byteenable,                                //                                                                   .byteenable
		input  wire         Nios2_2nd_Core_debug_mem_slave_waitrequest,                               //                                                                   .waitrequest
		output wire         Nios2_2nd_Core_debug_mem_slave_debugaccess,                               //                                                                   .debugaccess
		output wire [15:0]  Onchip_SRAM_s1_address,                                                   //                                                     Onchip_SRAM_s1.address
		output wire         Onchip_SRAM_s1_write,                                                     //                                                                   .write
		input  wire [31:0]  Onchip_SRAM_s1_readdata,                                                  //                                                                   .readdata
		output wire [31:0]  Onchip_SRAM_s1_writedata,                                                 //                                                                   .writedata
		output wire [3:0]   Onchip_SRAM_s1_byteenable,                                                //                                                                   .byteenable
		output wire         Onchip_SRAM_s1_chipselect,                                                //                                                                   .chipselect
		output wire         Onchip_SRAM_s1_clken,                                                     //                                                                   .clken
		output wire [15:0]  Onchip_SRAM_s2_address,                                                   //                                                     Onchip_SRAM_s2.address
		output wire         Onchip_SRAM_s2_write,                                                     //                                                                   .write
		input  wire [31:0]  Onchip_SRAM_s2_readdata,                                                  //                                                                   .readdata
		output wire [31:0]  Onchip_SRAM_s2_writedata,                                                 //                                                                   .writedata
		output wire [3:0]   Onchip_SRAM_s2_byteenable,                                                //                                                                   .byteenable
		output wire         Onchip_SRAM_s2_chipselect,                                                //                                                                   .chipselect
		output wire         Onchip_SRAM_s2_clken,                                                     //                                                                   .clken
		output wire [1:0]   Pixel_DMA_Addr_Translation_slave_address,                                 //                                   Pixel_DMA_Addr_Translation_slave.address
		output wire         Pixel_DMA_Addr_Translation_slave_write,                                   //                                                                   .write
		output wire         Pixel_DMA_Addr_Translation_slave_read,                                    //                                                                   .read
		input  wire [31:0]  Pixel_DMA_Addr_Translation_slave_readdata,                                //                                                                   .readdata
		output wire [31:0]  Pixel_DMA_Addr_Translation_slave_writedata,                               //                                                                   .writedata
		output wire [3:0]   Pixel_DMA_Addr_Translation_slave_byteenable,                              //                                                                   .byteenable
		input  wire         Pixel_DMA_Addr_Translation_slave_waitrequest,                             //                                                                   .waitrequest
		output wire [0:0]   PS2_Port_avalon_ps2_slave_address,                                        //                                          PS2_Port_avalon_ps2_slave.address
		output wire         PS2_Port_avalon_ps2_slave_write,                                          //                                                                   .write
		output wire         PS2_Port_avalon_ps2_slave_read,                                           //                                                                   .read
		input  wire [31:0]  PS2_Port_avalon_ps2_slave_readdata,                                       //                                                                   .readdata
		output wire [31:0]  PS2_Port_avalon_ps2_slave_writedata,                                      //                                                                   .writedata
		output wire [3:0]   PS2_Port_avalon_ps2_slave_byteenable,                                     //                                                                   .byteenable
		input  wire         PS2_Port_avalon_ps2_slave_waitrequest,                                    //                                                                   .waitrequest
		output wire         PS2_Port_avalon_ps2_slave_chipselect,                                     //                                                                   .chipselect
		output wire [0:0]   PS2_Port_Dual_avalon_ps2_slave_address,                                   //                                     PS2_Port_Dual_avalon_ps2_slave.address
		output wire         PS2_Port_Dual_avalon_ps2_slave_write,                                     //                                                                   .write
		output wire         PS2_Port_Dual_avalon_ps2_slave_read,                                      //                                                                   .read
		input  wire [31:0]  PS2_Port_Dual_avalon_ps2_slave_readdata,                                  //                                                                   .readdata
		output wire [31:0]  PS2_Port_Dual_avalon_ps2_slave_writedata,                                 //                                                                   .writedata
		output wire [3:0]   PS2_Port_Dual_avalon_ps2_slave_byteenable,                                //                                                                   .byteenable
		input  wire         PS2_Port_Dual_avalon_ps2_slave_waitrequest,                               //                                                                   .waitrequest
		output wire         PS2_Port_Dual_avalon_ps2_slave_chipselect,                                //                                                                   .chipselect
		output wire [1:0]   Pushbuttons_s1_address,                                                   //                                                     Pushbuttons_s1.address
		output wire         Pushbuttons_s1_write,                                                     //                                                                   .write
		input  wire [31:0]  Pushbuttons_s1_readdata,                                                  //                                                                   .readdata
		output wire [31:0]  Pushbuttons_s1_writedata,                                                 //                                                                   .writedata
		output wire         Pushbuttons_s1_chipselect,                                                //                                                                   .chipselect
		output wire [24:0]  SDRAM_s1_address,                                                         //                                                           SDRAM_s1.address
		output wire         SDRAM_s1_write,                                                           //                                                                   .write
		output wire         SDRAM_s1_read,                                                            //                                                                   .read
		input  wire [15:0]  SDRAM_s1_readdata,                                                        //                                                                   .readdata
		output wire [15:0]  SDRAM_s1_writedata,                                                       //                                                                   .writedata
		output wire [1:0]   SDRAM_s1_byteenable,                                                      //                                                                   .byteenable
		input  wire         SDRAM_s1_readdatavalid,                                                   //                                                                   .readdatavalid
		input  wire         SDRAM_s1_waitrequest,                                                     //                                                                   .waitrequest
		output wire         SDRAM_s1_chipselect,                                                      //                                                                   .chipselect
		output wire [1:0]   Slider_Switches_s1_address,                                               //                                                 Slider_Switches_s1.address
		input  wire [31:0]  Slider_Switches_s1_readdata,                                              //                                                                   .readdata
		output wire [0:0]   SysID_control_slave_address,                                              //                                                SysID_control_slave.address
		input  wire [31:0]  SysID_control_slave_readdata,                                             //                                                                   .readdata
		output wire [0:0]   VGA_Subsystem_char_buffer_control_slave_address,                          //                            VGA_Subsystem_char_buffer_control_slave.address
		output wire         VGA_Subsystem_char_buffer_control_slave_write,                            //                                                                   .write
		output wire         VGA_Subsystem_char_buffer_control_slave_read,                             //                                                                   .read
		input  wire [31:0]  VGA_Subsystem_char_buffer_control_slave_readdata,                         //                                                                   .readdata
		output wire [31:0]  VGA_Subsystem_char_buffer_control_slave_writedata,                        //                                                                   .writedata
		output wire [3:0]   VGA_Subsystem_char_buffer_control_slave_byteenable,                       //                                                                   .byteenable
		output wire         VGA_Subsystem_char_buffer_control_slave_chipselect,                       //                                                                   .chipselect
		output wire [12:0]  VGA_Subsystem_char_buffer_slave_address,                                  //                                    VGA_Subsystem_char_buffer_slave.address
		output wire         VGA_Subsystem_char_buffer_slave_write,                                    //                                                                   .write
		output wire         VGA_Subsystem_char_buffer_slave_read,                                     //                                                                   .read
		input  wire [7:0]   VGA_Subsystem_char_buffer_slave_readdata,                                 //                                                                   .readdata
		output wire [7:0]   VGA_Subsystem_char_buffer_slave_writedata,                                //                                                                   .writedata
		output wire [0:0]   VGA_Subsystem_char_buffer_slave_byteenable,                               //                                                                   .byteenable
		input  wire         VGA_Subsystem_char_buffer_slave_waitrequest,                              //                                                                   .waitrequest
		output wire         VGA_Subsystem_char_buffer_slave_chipselect,                               //                                                                   .chipselect
		output wire [1:0]   VGA_Subsystem_pixel_dma_control_slave_address,                            //                              VGA_Subsystem_pixel_dma_control_slave.address
		output wire         VGA_Subsystem_pixel_dma_control_slave_write,                              //                                                                   .write
		output wire         VGA_Subsystem_pixel_dma_control_slave_read,                               //                                                                   .read
		input  wire [31:0]  VGA_Subsystem_pixel_dma_control_slave_readdata,                           //                                                                   .readdata
		output wire [31:0]  VGA_Subsystem_pixel_dma_control_slave_writedata,                          //                                                                   .writedata
		output wire [3:0]   VGA_Subsystem_pixel_dma_control_slave_byteenable,                         //                                                                   .byteenable
		output wire [1:0]   Video_In_DMA_Addr_Translation_slave_address,                              //                                Video_In_DMA_Addr_Translation_slave.address
		output wire         Video_In_DMA_Addr_Translation_slave_write,                                //                                                                   .write
		output wire         Video_In_DMA_Addr_Translation_slave_read,                                 //                                                                   .read
		input  wire [31:0]  Video_In_DMA_Addr_Translation_slave_readdata,                             //                                                                   .readdata
		output wire [31:0]  Video_In_DMA_Addr_Translation_slave_writedata,                            //                                                                   .writedata
		output wire [3:0]   Video_In_DMA_Addr_Translation_slave_byteenable,                           //                                                                   .byteenable
		input  wire         Video_In_DMA_Addr_Translation_slave_waitrequest,                          //                                                                   .waitrequest
		output wire [1:0]   Video_In_Subsystem_edge_detection_control_slave_address,                  //                    Video_In_Subsystem_edge_detection_control_slave.address
		output wire         Video_In_Subsystem_edge_detection_control_slave_write,                    //                                                                   .write
		input  wire [31:0]  Video_In_Subsystem_edge_detection_control_slave_readdata,                 //                                                                   .readdata
		output wire [31:0]  Video_In_Subsystem_edge_detection_control_slave_writedata,                //                                                                   .writedata
		output wire         Video_In_Subsystem_edge_detection_control_slave_chipselect,               //                                                                   .chipselect
		output wire [1:0]   Video_In_Subsystem_video_in_dma_control_slave_address,                    //                      Video_In_Subsystem_video_in_dma_control_slave.address
		output wire         Video_In_Subsystem_video_in_dma_control_slave_write,                      //                                                                   .write
		output wire         Video_In_Subsystem_video_in_dma_control_slave_read,                       //                                                                   .read
		input  wire [31:0]  Video_In_Subsystem_video_in_dma_control_slave_readdata,                   //                                                                   .readdata
		output wire [31:0]  Video_In_Subsystem_video_in_dma_control_slave_writedata,                  //                                                                   .writedata
		output wire [3:0]   Video_In_Subsystem_video_in_dma_control_slave_byteenable                  //                                                                   .byteenable
	);

	wire          nios2_data_master_translator_avalon_universal_master_0_waitrequest;                                  // Nios2_data_master_agent:av_waitrequest -> Nios2_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_readdata;                                     // Nios2_data_master_agent:av_readdata -> Nios2_data_master_translator:uav_readdata
	wire          nios2_data_master_translator_avalon_universal_master_0_debugaccess;                                  // Nios2_data_master_translator:uav_debugaccess -> Nios2_data_master_agent:av_debugaccess
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_address;                                      // Nios2_data_master_translator:uav_address -> Nios2_data_master_agent:av_address
	wire          nios2_data_master_translator_avalon_universal_master_0_read;                                         // Nios2_data_master_translator:uav_read -> Nios2_data_master_agent:av_read
	wire    [3:0] nios2_data_master_translator_avalon_universal_master_0_byteenable;                                   // Nios2_data_master_translator:uav_byteenable -> Nios2_data_master_agent:av_byteenable
	wire          nios2_data_master_translator_avalon_universal_master_0_readdatavalid;                                // Nios2_data_master_agent:av_readdatavalid -> Nios2_data_master_translator:uav_readdatavalid
	wire          nios2_data_master_translator_avalon_universal_master_0_lock;                                         // Nios2_data_master_translator:uav_lock -> Nios2_data_master_agent:av_lock
	wire          nios2_data_master_translator_avalon_universal_master_0_write;                                        // Nios2_data_master_translator:uav_write -> Nios2_data_master_agent:av_write
	wire   [31:0] nios2_data_master_translator_avalon_universal_master_0_writedata;                                    // Nios2_data_master_translator:uav_writedata -> Nios2_data_master_agent:av_writedata
	wire    [2:0] nios2_data_master_translator_avalon_universal_master_0_burstcount;                                   // Nios2_data_master_translator:uav_burstcount -> Nios2_data_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                               // rsp_mux_002:src_valid -> Nios2_data_master_agent:rp_valid
	wire  [136:0] rsp_mux_002_src_data;                                                                                // rsp_mux_002:src_data -> Nios2_data_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                               // Nios2_data_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [36:0] rsp_mux_002_src_channel;                                                                             // rsp_mux_002:src_channel -> Nios2_data_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                                       // rsp_mux_002:src_startofpacket -> Nios2_data_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                         // rsp_mux_002:src_endofpacket -> Nios2_data_master_agent:rp_endofpacket
	wire          nios2_2nd_core_data_master_translator_avalon_universal_master_0_waitrequest;                         // Nios2_2nd_Core_data_master_agent:av_waitrequest -> Nios2_2nd_Core_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_2nd_core_data_master_translator_avalon_universal_master_0_readdata;                            // Nios2_2nd_Core_data_master_agent:av_readdata -> Nios2_2nd_Core_data_master_translator:uav_readdata
	wire          nios2_2nd_core_data_master_translator_avalon_universal_master_0_debugaccess;                         // Nios2_2nd_Core_data_master_translator:uav_debugaccess -> Nios2_2nd_Core_data_master_agent:av_debugaccess
	wire   [31:0] nios2_2nd_core_data_master_translator_avalon_universal_master_0_address;                             // Nios2_2nd_Core_data_master_translator:uav_address -> Nios2_2nd_Core_data_master_agent:av_address
	wire          nios2_2nd_core_data_master_translator_avalon_universal_master_0_read;                                // Nios2_2nd_Core_data_master_translator:uav_read -> Nios2_2nd_Core_data_master_agent:av_read
	wire    [3:0] nios2_2nd_core_data_master_translator_avalon_universal_master_0_byteenable;                          // Nios2_2nd_Core_data_master_translator:uav_byteenable -> Nios2_2nd_Core_data_master_agent:av_byteenable
	wire          nios2_2nd_core_data_master_translator_avalon_universal_master_0_readdatavalid;                       // Nios2_2nd_Core_data_master_agent:av_readdatavalid -> Nios2_2nd_Core_data_master_translator:uav_readdatavalid
	wire          nios2_2nd_core_data_master_translator_avalon_universal_master_0_lock;                                // Nios2_2nd_Core_data_master_translator:uav_lock -> Nios2_2nd_Core_data_master_agent:av_lock
	wire          nios2_2nd_core_data_master_translator_avalon_universal_master_0_write;                               // Nios2_2nd_Core_data_master_translator:uav_write -> Nios2_2nd_Core_data_master_agent:av_write
	wire   [31:0] nios2_2nd_core_data_master_translator_avalon_universal_master_0_writedata;                           // Nios2_2nd_Core_data_master_translator:uav_writedata -> Nios2_2nd_Core_data_master_agent:av_writedata
	wire    [2:0] nios2_2nd_core_data_master_translator_avalon_universal_master_0_burstcount;                          // Nios2_2nd_Core_data_master_translator:uav_burstcount -> Nios2_2nd_Core_data_master_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                                               // rsp_mux_003:src_valid -> Nios2_2nd_Core_data_master_agent:rp_valid
	wire  [136:0] rsp_mux_003_src_data;                                                                                // rsp_mux_003:src_data -> Nios2_2nd_Core_data_master_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                                               // Nios2_2nd_Core_data_master_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [36:0] rsp_mux_003_src_channel;                                                                             // rsp_mux_003:src_channel -> Nios2_2nd_Core_data_master_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                                       // rsp_mux_003:src_startofpacket -> Nios2_2nd_Core_data_master_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                                         // rsp_mux_003:src_endofpacket -> Nios2_2nd_Core_data_master_agent:rp_endofpacket
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest;                         // JTAG_to_FPGA_Bridge_master_agent:av_waitrequest -> JTAG_to_FPGA_Bridge_master_translator:uav_waitrequest
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata;                            // JTAG_to_FPGA_Bridge_master_agent:av_readdata -> JTAG_to_FPGA_Bridge_master_translator:uav_readdata
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess;                         // JTAG_to_FPGA_Bridge_master_translator:uav_debugaccess -> JTAG_to_FPGA_Bridge_master_agent:av_debugaccess
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address;                             // JTAG_to_FPGA_Bridge_master_translator:uav_address -> JTAG_to_FPGA_Bridge_master_agent:av_address
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read;                                // JTAG_to_FPGA_Bridge_master_translator:uav_read -> JTAG_to_FPGA_Bridge_master_agent:av_read
	wire    [3:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable;                          // JTAG_to_FPGA_Bridge_master_translator:uav_byteenable -> JTAG_to_FPGA_Bridge_master_agent:av_byteenable
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid;                       // JTAG_to_FPGA_Bridge_master_agent:av_readdatavalid -> JTAG_to_FPGA_Bridge_master_translator:uav_readdatavalid
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock;                                // JTAG_to_FPGA_Bridge_master_translator:uav_lock -> JTAG_to_FPGA_Bridge_master_agent:av_lock
	wire          jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write;                               // JTAG_to_FPGA_Bridge_master_translator:uav_write -> JTAG_to_FPGA_Bridge_master_agent:av_write
	wire   [31:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata;                           // JTAG_to_FPGA_Bridge_master_translator:uav_writedata -> JTAG_to_FPGA_Bridge_master_agent:av_writedata
	wire    [2:0] jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount;                          // JTAG_to_FPGA_Bridge_master_translator:uav_burstcount -> JTAG_to_FPGA_Bridge_master_agent:av_burstcount
	wire          nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_waitrequest;                  // Nios2_2nd_Core_instruction_master_agent:av_waitrequest -> Nios2_2nd_Core_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_readdata;                     // Nios2_2nd_Core_instruction_master_agent:av_readdata -> Nios2_2nd_Core_instruction_master_translator:uav_readdata
	wire          nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_debugaccess;                  // Nios2_2nd_Core_instruction_master_translator:uav_debugaccess -> Nios2_2nd_Core_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_address;                      // Nios2_2nd_Core_instruction_master_translator:uav_address -> Nios2_2nd_Core_instruction_master_agent:av_address
	wire          nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_read;                         // Nios2_2nd_Core_instruction_master_translator:uav_read -> Nios2_2nd_Core_instruction_master_agent:av_read
	wire    [3:0] nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_byteenable;                   // Nios2_2nd_Core_instruction_master_translator:uav_byteenable -> Nios2_2nd_Core_instruction_master_agent:av_byteenable
	wire          nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_readdatavalid;                // Nios2_2nd_Core_instruction_master_agent:av_readdatavalid -> Nios2_2nd_Core_instruction_master_translator:uav_readdatavalid
	wire          nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_lock;                         // Nios2_2nd_Core_instruction_master_translator:uav_lock -> Nios2_2nd_Core_instruction_master_agent:av_lock
	wire          nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_write;                        // Nios2_2nd_Core_instruction_master_translator:uav_write -> Nios2_2nd_Core_instruction_master_agent:av_write
	wire   [31:0] nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_writedata;                    // Nios2_2nd_Core_instruction_master_translator:uav_writedata -> Nios2_2nd_Core_instruction_master_agent:av_writedata
	wire    [2:0] nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_burstcount;                   // Nios2_2nd_Core_instruction_master_translator:uav_burstcount -> Nios2_2nd_Core_instruction_master_agent:av_burstcount
	wire          nios2_instruction_master_translator_avalon_universal_master_0_waitrequest;                           // Nios2_instruction_master_agent:av_waitrequest -> Nios2_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_readdata;                              // Nios2_instruction_master_agent:av_readdata -> Nios2_instruction_master_translator:uav_readdata
	wire          nios2_instruction_master_translator_avalon_universal_master_0_debugaccess;                           // Nios2_instruction_master_translator:uav_debugaccess -> Nios2_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_address;                               // Nios2_instruction_master_translator:uav_address -> Nios2_instruction_master_agent:av_address
	wire          nios2_instruction_master_translator_avalon_universal_master_0_read;                                  // Nios2_instruction_master_translator:uav_read -> Nios2_instruction_master_agent:av_read
	wire    [3:0] nios2_instruction_master_translator_avalon_universal_master_0_byteenable;                            // Nios2_instruction_master_translator:uav_byteenable -> Nios2_instruction_master_agent:av_byteenable
	wire          nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid;                         // Nios2_instruction_master_agent:av_readdatavalid -> Nios2_instruction_master_translator:uav_readdatavalid
	wire          nios2_instruction_master_translator_avalon_universal_master_0_lock;                                  // Nios2_instruction_master_translator:uav_lock -> Nios2_instruction_master_agent:av_lock
	wire          nios2_instruction_master_translator_avalon_universal_master_0_write;                                 // Nios2_instruction_master_translator:uav_write -> Nios2_instruction_master_agent:av_write
	wire   [31:0] nios2_instruction_master_translator_avalon_universal_master_0_writedata;                             // Nios2_instruction_master_translator:uav_writedata -> Nios2_instruction_master_agent:av_writedata
	wire    [2:0] nios2_instruction_master_translator_avalon_universal_master_0_burstcount;                            // Nios2_instruction_master_translator:uav_burstcount -> Nios2_instruction_master_agent:av_burstcount
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_waitrequest;                     // VGA_Subsystem_pixel_dma_master_agent:av_waitrequest -> VGA_Subsystem_pixel_dma_master_translator:uav_waitrequest
	wire    [7:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdata;                        // VGA_Subsystem_pixel_dma_master_agent:av_readdata -> VGA_Subsystem_pixel_dma_master_translator:uav_readdata
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_debugaccess;                     // VGA_Subsystem_pixel_dma_master_translator:uav_debugaccess -> VGA_Subsystem_pixel_dma_master_agent:av_debugaccess
	wire   [31:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_address;                         // VGA_Subsystem_pixel_dma_master_translator:uav_address -> VGA_Subsystem_pixel_dma_master_agent:av_address
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_read;                            // VGA_Subsystem_pixel_dma_master_translator:uav_read -> VGA_Subsystem_pixel_dma_master_agent:av_read
	wire    [0:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_byteenable;                      // VGA_Subsystem_pixel_dma_master_translator:uav_byteenable -> VGA_Subsystem_pixel_dma_master_agent:av_byteenable
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid;                   // VGA_Subsystem_pixel_dma_master_agent:av_readdatavalid -> VGA_Subsystem_pixel_dma_master_translator:uav_readdatavalid
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_lock;                            // VGA_Subsystem_pixel_dma_master_translator:uav_lock -> VGA_Subsystem_pixel_dma_master_agent:av_lock
	wire          vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_write;                           // VGA_Subsystem_pixel_dma_master_translator:uav_write -> VGA_Subsystem_pixel_dma_master_agent:av_write
	wire    [7:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_writedata;                       // VGA_Subsystem_pixel_dma_master_translator:uav_writedata -> VGA_Subsystem_pixel_dma_master_agent:av_writedata
	wire    [0:0] vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_burstcount;                      // VGA_Subsystem_pixel_dma_master_translator:uav_burstcount -> VGA_Subsystem_pixel_dma_master_agent:av_burstcount
	wire          video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_waitrequest;             // Video_In_Subsystem_video_in_dma_master_agent:av_waitrequest -> Video_In_Subsystem_video_in_dma_master_translator:uav_waitrequest
	wire   [15:0] video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_readdata;                // Video_In_Subsystem_video_in_dma_master_agent:av_readdata -> Video_In_Subsystem_video_in_dma_master_translator:uav_readdata
	wire          video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_debugaccess;             // Video_In_Subsystem_video_in_dma_master_translator:uav_debugaccess -> Video_In_Subsystem_video_in_dma_master_agent:av_debugaccess
	wire   [31:0] video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_address;                 // Video_In_Subsystem_video_in_dma_master_translator:uav_address -> Video_In_Subsystem_video_in_dma_master_agent:av_address
	wire          video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_read;                    // Video_In_Subsystem_video_in_dma_master_translator:uav_read -> Video_In_Subsystem_video_in_dma_master_agent:av_read
	wire    [1:0] video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_byteenable;              // Video_In_Subsystem_video_in_dma_master_translator:uav_byteenable -> Video_In_Subsystem_video_in_dma_master_agent:av_byteenable
	wire          video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_readdatavalid;           // Video_In_Subsystem_video_in_dma_master_agent:av_readdatavalid -> Video_In_Subsystem_video_in_dma_master_translator:uav_readdatavalid
	wire          video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_lock;                    // Video_In_Subsystem_video_in_dma_master_translator:uav_lock -> Video_In_Subsystem_video_in_dma_master_agent:av_lock
	wire          video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_write;                   // Video_In_Subsystem_video_in_dma_master_translator:uav_write -> Video_In_Subsystem_video_in_dma_master_agent:av_write
	wire   [15:0] video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_writedata;               // Video_In_Subsystem_video_in_dma_master_translator:uav_writedata -> Video_In_Subsystem_video_in_dma_master_agent:av_writedata
	wire    [1:0] video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_burstcount;              // Video_In_Subsystem_video_in_dma_master_translator:uav_burstcount -> Video_In_Subsystem_video_in_dma_master_agent:av_burstcount
	wire          rsp_mux_010_src_valid;                                                                               // rsp_mux_010:src_valid -> Video_In_Subsystem_video_in_dma_master_agent:rp_valid
	wire  [118:0] rsp_mux_010_src_data;                                                                                // rsp_mux_010:src_data -> Video_In_Subsystem_video_in_dma_master_agent:rp_data
	wire          rsp_mux_010_src_ready;                                                                               // Video_In_Subsystem_video_in_dma_master_agent:rp_ready -> rsp_mux_010:src_ready
	wire   [36:0] rsp_mux_010_src_channel;                                                                             // rsp_mux_010:src_channel -> Video_In_Subsystem_video_in_dma_master_agent:rp_channel
	wire          rsp_mux_010_src_startofpacket;                                                                       // rsp_mux_010:src_startofpacket -> Video_In_Subsystem_video_in_dma_master_agent:rp_startofpacket
	wire          rsp_mux_010_src_endofpacket;                                                                         // rsp_mux_010:src_endofpacket -> Video_In_Subsystem_video_in_dma_master_agent:rp_endofpacket
	wire          video_in_dma_addr_translation_master_translator_avalon_universal_master_0_waitrequest;               // Video_In_DMA_Addr_Translation_master_agent:av_waitrequest -> Video_In_DMA_Addr_Translation_master_translator:uav_waitrequest
	wire   [31:0] video_in_dma_addr_translation_master_translator_avalon_universal_master_0_readdata;                  // Video_In_DMA_Addr_Translation_master_agent:av_readdata -> Video_In_DMA_Addr_Translation_master_translator:uav_readdata
	wire          video_in_dma_addr_translation_master_translator_avalon_universal_master_0_debugaccess;               // Video_In_DMA_Addr_Translation_master_translator:uav_debugaccess -> Video_In_DMA_Addr_Translation_master_agent:av_debugaccess
	wire   [31:0] video_in_dma_addr_translation_master_translator_avalon_universal_master_0_address;                   // Video_In_DMA_Addr_Translation_master_translator:uav_address -> Video_In_DMA_Addr_Translation_master_agent:av_address
	wire          video_in_dma_addr_translation_master_translator_avalon_universal_master_0_read;                      // Video_In_DMA_Addr_Translation_master_translator:uav_read -> Video_In_DMA_Addr_Translation_master_agent:av_read
	wire    [3:0] video_in_dma_addr_translation_master_translator_avalon_universal_master_0_byteenable;                // Video_In_DMA_Addr_Translation_master_translator:uav_byteenable -> Video_In_DMA_Addr_Translation_master_agent:av_byteenable
	wire          video_in_dma_addr_translation_master_translator_avalon_universal_master_0_readdatavalid;             // Video_In_DMA_Addr_Translation_master_agent:av_readdatavalid -> Video_In_DMA_Addr_Translation_master_translator:uav_readdatavalid
	wire          video_in_dma_addr_translation_master_translator_avalon_universal_master_0_lock;                      // Video_In_DMA_Addr_Translation_master_translator:uav_lock -> Video_In_DMA_Addr_Translation_master_agent:av_lock
	wire          video_in_dma_addr_translation_master_translator_avalon_universal_master_0_write;                     // Video_In_DMA_Addr_Translation_master_translator:uav_write -> Video_In_DMA_Addr_Translation_master_agent:av_write
	wire   [31:0] video_in_dma_addr_translation_master_translator_avalon_universal_master_0_writedata;                 // Video_In_DMA_Addr_Translation_master_translator:uav_writedata -> Video_In_DMA_Addr_Translation_master_agent:av_writedata
	wire    [2:0] video_in_dma_addr_translation_master_translator_avalon_universal_master_0_burstcount;                // Video_In_DMA_Addr_Translation_master_translator:uav_burstcount -> Video_In_DMA_Addr_Translation_master_agent:av_burstcount
	wire          rsp_mux_011_src_valid;                                                                               // rsp_mux_011:src_valid -> Video_In_DMA_Addr_Translation_master_agent:rp_valid
	wire  [136:0] rsp_mux_011_src_data;                                                                                // rsp_mux_011:src_data -> Video_In_DMA_Addr_Translation_master_agent:rp_data
	wire          rsp_mux_011_src_ready;                                                                               // Video_In_DMA_Addr_Translation_master_agent:rp_ready -> rsp_mux_011:src_ready
	wire   [36:0] rsp_mux_011_src_channel;                                                                             // rsp_mux_011:src_channel -> Video_In_DMA_Addr_Translation_master_agent:rp_channel
	wire          rsp_mux_011_src_startofpacket;                                                                       // rsp_mux_011:src_startofpacket -> Video_In_DMA_Addr_Translation_master_agent:rp_startofpacket
	wire          rsp_mux_011_src_endofpacket;                                                                         // rsp_mux_011:src_endofpacket -> Video_In_DMA_Addr_Translation_master_agent:rp_endofpacket
	wire          pixel_dma_addr_translation_master_translator_avalon_universal_master_0_waitrequest;                  // Pixel_DMA_Addr_Translation_master_agent:av_waitrequest -> Pixel_DMA_Addr_Translation_master_translator:uav_waitrequest
	wire   [31:0] pixel_dma_addr_translation_master_translator_avalon_universal_master_0_readdata;                     // Pixel_DMA_Addr_Translation_master_agent:av_readdata -> Pixel_DMA_Addr_Translation_master_translator:uav_readdata
	wire          pixel_dma_addr_translation_master_translator_avalon_universal_master_0_debugaccess;                  // Pixel_DMA_Addr_Translation_master_translator:uav_debugaccess -> Pixel_DMA_Addr_Translation_master_agent:av_debugaccess
	wire   [31:0] pixel_dma_addr_translation_master_translator_avalon_universal_master_0_address;                      // Pixel_DMA_Addr_Translation_master_translator:uav_address -> Pixel_DMA_Addr_Translation_master_agent:av_address
	wire          pixel_dma_addr_translation_master_translator_avalon_universal_master_0_read;                         // Pixel_DMA_Addr_Translation_master_translator:uav_read -> Pixel_DMA_Addr_Translation_master_agent:av_read
	wire    [3:0] pixel_dma_addr_translation_master_translator_avalon_universal_master_0_byteenable;                   // Pixel_DMA_Addr_Translation_master_translator:uav_byteenable -> Pixel_DMA_Addr_Translation_master_agent:av_byteenable
	wire          pixel_dma_addr_translation_master_translator_avalon_universal_master_0_readdatavalid;                // Pixel_DMA_Addr_Translation_master_agent:av_readdatavalid -> Pixel_DMA_Addr_Translation_master_translator:uav_readdatavalid
	wire          pixel_dma_addr_translation_master_translator_avalon_universal_master_0_lock;                         // Pixel_DMA_Addr_Translation_master_translator:uav_lock -> Pixel_DMA_Addr_Translation_master_agent:av_lock
	wire          pixel_dma_addr_translation_master_translator_avalon_universal_master_0_write;                        // Pixel_DMA_Addr_Translation_master_translator:uav_write -> Pixel_DMA_Addr_Translation_master_agent:av_write
	wire   [31:0] pixel_dma_addr_translation_master_translator_avalon_universal_master_0_writedata;                    // Pixel_DMA_Addr_Translation_master_translator:uav_writedata -> Pixel_DMA_Addr_Translation_master_agent:av_writedata
	wire    [2:0] pixel_dma_addr_translation_master_translator_avalon_universal_master_0_burstcount;                   // Pixel_DMA_Addr_Translation_master_translator:uav_burstcount -> Pixel_DMA_Addr_Translation_master_agent:av_burstcount
	wire          rsp_mux_012_src_valid;                                                                               // rsp_mux_012:src_valid -> Pixel_DMA_Addr_Translation_master_agent:rp_valid
	wire  [136:0] rsp_mux_012_src_data;                                                                                // rsp_mux_012:src_data -> Pixel_DMA_Addr_Translation_master_agent:rp_data
	wire          rsp_mux_012_src_ready;                                                                               // Pixel_DMA_Addr_Translation_master_agent:rp_ready -> rsp_mux_012:src_ready
	wire   [36:0] rsp_mux_012_src_channel;                                                                             // rsp_mux_012:src_channel -> Pixel_DMA_Addr_Translation_master_agent:rp_channel
	wire          rsp_mux_012_src_startofpacket;                                                                       // rsp_mux_012:src_startofpacket -> Pixel_DMA_Addr_Translation_master_agent:rp_startofpacket
	wire          rsp_mux_012_src_endofpacket;                                                                         // rsp_mux_012:src_endofpacket -> Pixel_DMA_Addr_Translation_master_agent:rp_endofpacket
	wire   [31:0] adc_adc_slave_agent_m0_readdata;                                                                     // ADC_adc_slave_translator:uav_readdata -> ADC_adc_slave_agent:m0_readdata
	wire          adc_adc_slave_agent_m0_waitrequest;                                                                  // ADC_adc_slave_translator:uav_waitrequest -> ADC_adc_slave_agent:m0_waitrequest
	wire          adc_adc_slave_agent_m0_debugaccess;                                                                  // ADC_adc_slave_agent:m0_debugaccess -> ADC_adc_slave_translator:uav_debugaccess
	wire   [31:0] adc_adc_slave_agent_m0_address;                                                                      // ADC_adc_slave_agent:m0_address -> ADC_adc_slave_translator:uav_address
	wire    [3:0] adc_adc_slave_agent_m0_byteenable;                                                                   // ADC_adc_slave_agent:m0_byteenable -> ADC_adc_slave_translator:uav_byteenable
	wire          adc_adc_slave_agent_m0_read;                                                                         // ADC_adc_slave_agent:m0_read -> ADC_adc_slave_translator:uav_read
	wire          adc_adc_slave_agent_m0_readdatavalid;                                                                // ADC_adc_slave_translator:uav_readdatavalid -> ADC_adc_slave_agent:m0_readdatavalid
	wire          adc_adc_slave_agent_m0_lock;                                                                         // ADC_adc_slave_agent:m0_lock -> ADC_adc_slave_translator:uav_lock
	wire   [31:0] adc_adc_slave_agent_m0_writedata;                                                                    // ADC_adc_slave_agent:m0_writedata -> ADC_adc_slave_translator:uav_writedata
	wire          adc_adc_slave_agent_m0_write;                                                                        // ADC_adc_slave_agent:m0_write -> ADC_adc_slave_translator:uav_write
	wire    [2:0] adc_adc_slave_agent_m0_burstcount;                                                                   // ADC_adc_slave_agent:m0_burstcount -> ADC_adc_slave_translator:uav_burstcount
	wire          adc_adc_slave_agent_rf_source_valid;                                                                 // ADC_adc_slave_agent:rf_source_valid -> ADC_adc_slave_agent_rsp_fifo:in_valid
	wire  [137:0] adc_adc_slave_agent_rf_source_data;                                                                  // ADC_adc_slave_agent:rf_source_data -> ADC_adc_slave_agent_rsp_fifo:in_data
	wire          adc_adc_slave_agent_rf_source_ready;                                                                 // ADC_adc_slave_agent_rsp_fifo:in_ready -> ADC_adc_slave_agent:rf_source_ready
	wire          adc_adc_slave_agent_rf_source_startofpacket;                                                         // ADC_adc_slave_agent:rf_source_startofpacket -> ADC_adc_slave_agent_rsp_fifo:in_startofpacket
	wire          adc_adc_slave_agent_rf_source_endofpacket;                                                           // ADC_adc_slave_agent:rf_source_endofpacket -> ADC_adc_slave_agent_rsp_fifo:in_endofpacket
	wire          adc_adc_slave_agent_rsp_fifo_out_valid;                                                              // ADC_adc_slave_agent_rsp_fifo:out_valid -> ADC_adc_slave_agent:rf_sink_valid
	wire  [137:0] adc_adc_slave_agent_rsp_fifo_out_data;                                                               // ADC_adc_slave_agent_rsp_fifo:out_data -> ADC_adc_slave_agent:rf_sink_data
	wire          adc_adc_slave_agent_rsp_fifo_out_ready;                                                              // ADC_adc_slave_agent:rf_sink_ready -> ADC_adc_slave_agent_rsp_fifo:out_ready
	wire          adc_adc_slave_agent_rsp_fifo_out_startofpacket;                                                      // ADC_adc_slave_agent_rsp_fifo:out_startofpacket -> ADC_adc_slave_agent:rf_sink_startofpacket
	wire          adc_adc_slave_agent_rsp_fifo_out_endofpacket;                                                        // ADC_adc_slave_agent_rsp_fifo:out_endofpacket -> ADC_adc_slave_agent:rf_sink_endofpacket
	wire          adc_adc_slave_agent_rdata_fifo_src_valid;                                                            // ADC_adc_slave_agent:rdata_fifo_src_valid -> ADC_adc_slave_agent_rdata_fifo:in_valid
	wire   [33:0] adc_adc_slave_agent_rdata_fifo_src_data;                                                             // ADC_adc_slave_agent:rdata_fifo_src_data -> ADC_adc_slave_agent_rdata_fifo:in_data
	wire          adc_adc_slave_agent_rdata_fifo_src_ready;                                                            // ADC_adc_slave_agent_rdata_fifo:in_ready -> ADC_adc_slave_agent:rdata_fifo_src_ready
	wire   [31:0] audio_subsystem_audio_slave_agent_m0_readdata;                                                       // Audio_Subsystem_audio_slave_translator:uav_readdata -> Audio_Subsystem_audio_slave_agent:m0_readdata
	wire          audio_subsystem_audio_slave_agent_m0_waitrequest;                                                    // Audio_Subsystem_audio_slave_translator:uav_waitrequest -> Audio_Subsystem_audio_slave_agent:m0_waitrequest
	wire          audio_subsystem_audio_slave_agent_m0_debugaccess;                                                    // Audio_Subsystem_audio_slave_agent:m0_debugaccess -> Audio_Subsystem_audio_slave_translator:uav_debugaccess
	wire   [31:0] audio_subsystem_audio_slave_agent_m0_address;                                                        // Audio_Subsystem_audio_slave_agent:m0_address -> Audio_Subsystem_audio_slave_translator:uav_address
	wire    [3:0] audio_subsystem_audio_slave_agent_m0_byteenable;                                                     // Audio_Subsystem_audio_slave_agent:m0_byteenable -> Audio_Subsystem_audio_slave_translator:uav_byteenable
	wire          audio_subsystem_audio_slave_agent_m0_read;                                                           // Audio_Subsystem_audio_slave_agent:m0_read -> Audio_Subsystem_audio_slave_translator:uav_read
	wire          audio_subsystem_audio_slave_agent_m0_readdatavalid;                                                  // Audio_Subsystem_audio_slave_translator:uav_readdatavalid -> Audio_Subsystem_audio_slave_agent:m0_readdatavalid
	wire          audio_subsystem_audio_slave_agent_m0_lock;                                                           // Audio_Subsystem_audio_slave_agent:m0_lock -> Audio_Subsystem_audio_slave_translator:uav_lock
	wire   [31:0] audio_subsystem_audio_slave_agent_m0_writedata;                                                      // Audio_Subsystem_audio_slave_agent:m0_writedata -> Audio_Subsystem_audio_slave_translator:uav_writedata
	wire          audio_subsystem_audio_slave_agent_m0_write;                                                          // Audio_Subsystem_audio_slave_agent:m0_write -> Audio_Subsystem_audio_slave_translator:uav_write
	wire    [2:0] audio_subsystem_audio_slave_agent_m0_burstcount;                                                     // Audio_Subsystem_audio_slave_agent:m0_burstcount -> Audio_Subsystem_audio_slave_translator:uav_burstcount
	wire          audio_subsystem_audio_slave_agent_rf_source_valid;                                                   // Audio_Subsystem_audio_slave_agent:rf_source_valid -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_valid
	wire  [137:0] audio_subsystem_audio_slave_agent_rf_source_data;                                                    // Audio_Subsystem_audio_slave_agent:rf_source_data -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_data
	wire          audio_subsystem_audio_slave_agent_rf_source_ready;                                                   // Audio_Subsystem_audio_slave_agent_rsp_fifo:in_ready -> Audio_Subsystem_audio_slave_agent:rf_source_ready
	wire          audio_subsystem_audio_slave_agent_rf_source_startofpacket;                                           // Audio_Subsystem_audio_slave_agent:rf_source_startofpacket -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_startofpacket
	wire          audio_subsystem_audio_slave_agent_rf_source_endofpacket;                                             // Audio_Subsystem_audio_slave_agent:rf_source_endofpacket -> Audio_Subsystem_audio_slave_agent_rsp_fifo:in_endofpacket
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_valid;                                                // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_valid -> Audio_Subsystem_audio_slave_agent:rf_sink_valid
	wire  [137:0] audio_subsystem_audio_slave_agent_rsp_fifo_out_data;                                                 // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_data -> Audio_Subsystem_audio_slave_agent:rf_sink_data
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_ready;                                                // Audio_Subsystem_audio_slave_agent:rf_sink_ready -> Audio_Subsystem_audio_slave_agent_rsp_fifo:out_ready
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_startofpacket;                                        // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_startofpacket -> Audio_Subsystem_audio_slave_agent:rf_sink_startofpacket
	wire          audio_subsystem_audio_slave_agent_rsp_fifo_out_endofpacket;                                          // Audio_Subsystem_audio_slave_agent_rsp_fifo:out_endofpacket -> Audio_Subsystem_audio_slave_agent:rf_sink_endofpacket
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_src_valid;                                              // Audio_Subsystem_audio_slave_agent:rdata_fifo_src_valid -> Audio_Subsystem_audio_slave_agent_rdata_fifo:in_valid
	wire   [33:0] audio_subsystem_audio_slave_agent_rdata_fifo_src_data;                                               // Audio_Subsystem_audio_slave_agent:rdata_fifo_src_data -> Audio_Subsystem_audio_slave_agent_rdata_fifo:in_data
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_src_ready;                                              // Audio_Subsystem_audio_slave_agent_rdata_fifo:in_ready -> Audio_Subsystem_audio_slave_agent:rdata_fifo_src_ready
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_readdata;                                                  // AV_Config_avalon_av_config_slave_translator:uav_readdata -> AV_Config_avalon_av_config_slave_agent:m0_readdata
	wire          av_config_avalon_av_config_slave_agent_m0_waitrequest;                                               // AV_Config_avalon_av_config_slave_translator:uav_waitrequest -> AV_Config_avalon_av_config_slave_agent:m0_waitrequest
	wire          av_config_avalon_av_config_slave_agent_m0_debugaccess;                                               // AV_Config_avalon_av_config_slave_agent:m0_debugaccess -> AV_Config_avalon_av_config_slave_translator:uav_debugaccess
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_address;                                                   // AV_Config_avalon_av_config_slave_agent:m0_address -> AV_Config_avalon_av_config_slave_translator:uav_address
	wire    [3:0] av_config_avalon_av_config_slave_agent_m0_byteenable;                                                // AV_Config_avalon_av_config_slave_agent:m0_byteenable -> AV_Config_avalon_av_config_slave_translator:uav_byteenable
	wire          av_config_avalon_av_config_slave_agent_m0_read;                                                      // AV_Config_avalon_av_config_slave_agent:m0_read -> AV_Config_avalon_av_config_slave_translator:uav_read
	wire          av_config_avalon_av_config_slave_agent_m0_readdatavalid;                                             // AV_Config_avalon_av_config_slave_translator:uav_readdatavalid -> AV_Config_avalon_av_config_slave_agent:m0_readdatavalid
	wire          av_config_avalon_av_config_slave_agent_m0_lock;                                                      // AV_Config_avalon_av_config_slave_agent:m0_lock -> AV_Config_avalon_av_config_slave_translator:uav_lock
	wire   [31:0] av_config_avalon_av_config_slave_agent_m0_writedata;                                                 // AV_Config_avalon_av_config_slave_agent:m0_writedata -> AV_Config_avalon_av_config_slave_translator:uav_writedata
	wire          av_config_avalon_av_config_slave_agent_m0_write;                                                     // AV_Config_avalon_av_config_slave_agent:m0_write -> AV_Config_avalon_av_config_slave_translator:uav_write
	wire    [2:0] av_config_avalon_av_config_slave_agent_m0_burstcount;                                                // AV_Config_avalon_av_config_slave_agent:m0_burstcount -> AV_Config_avalon_av_config_slave_translator:uav_burstcount
	wire          av_config_avalon_av_config_slave_agent_rf_source_valid;                                              // AV_Config_avalon_av_config_slave_agent:rf_source_valid -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_valid
	wire  [137:0] av_config_avalon_av_config_slave_agent_rf_source_data;                                               // AV_Config_avalon_av_config_slave_agent:rf_source_data -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_data
	wire          av_config_avalon_av_config_slave_agent_rf_source_ready;                                              // AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_ready -> AV_Config_avalon_av_config_slave_agent:rf_source_ready
	wire          av_config_avalon_av_config_slave_agent_rf_source_startofpacket;                                      // AV_Config_avalon_av_config_slave_agent:rf_source_startofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rf_source_endofpacket;                                        // AV_Config_avalon_av_config_slave_agent:rf_source_endofpacket -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid;                                           // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_valid -> AV_Config_avalon_av_config_slave_agent:rf_sink_valid
	wire  [137:0] av_config_avalon_av_config_slave_agent_rsp_fifo_out_data;                                            // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_data -> AV_Config_avalon_av_config_slave_agent:rf_sink_data
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready;                                           // AV_Config_avalon_av_config_slave_agent:rf_sink_ready -> AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_ready
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket;                                   // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_startofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket;                                     // AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_endofpacket -> AV_Config_avalon_av_config_slave_agent:rf_sink_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid;                                         // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_valid -> AV_Config_avalon_av_config_slave_agent_rdata_fifo:in_valid
	wire   [33:0] av_config_avalon_av_config_slave_agent_rdata_fifo_src_data;                                          // AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_data -> AV_Config_avalon_av_config_slave_agent_rdata_fifo:in_data
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready;                                         // AV_Config_avalon_av_config_slave_agent_rdata_fifo:in_ready -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_ready
	wire   [31:0] irda_avalon_irda_slave_agent_m0_readdata;                                                            // IrDA_avalon_irda_slave_translator:uav_readdata -> IrDA_avalon_irda_slave_agent:m0_readdata
	wire          irda_avalon_irda_slave_agent_m0_waitrequest;                                                         // IrDA_avalon_irda_slave_translator:uav_waitrequest -> IrDA_avalon_irda_slave_agent:m0_waitrequest
	wire          irda_avalon_irda_slave_agent_m0_debugaccess;                                                         // IrDA_avalon_irda_slave_agent:m0_debugaccess -> IrDA_avalon_irda_slave_translator:uav_debugaccess
	wire   [31:0] irda_avalon_irda_slave_agent_m0_address;                                                             // IrDA_avalon_irda_slave_agent:m0_address -> IrDA_avalon_irda_slave_translator:uav_address
	wire    [3:0] irda_avalon_irda_slave_agent_m0_byteenable;                                                          // IrDA_avalon_irda_slave_agent:m0_byteenable -> IrDA_avalon_irda_slave_translator:uav_byteenable
	wire          irda_avalon_irda_slave_agent_m0_read;                                                                // IrDA_avalon_irda_slave_agent:m0_read -> IrDA_avalon_irda_slave_translator:uav_read
	wire          irda_avalon_irda_slave_agent_m0_readdatavalid;                                                       // IrDA_avalon_irda_slave_translator:uav_readdatavalid -> IrDA_avalon_irda_slave_agent:m0_readdatavalid
	wire          irda_avalon_irda_slave_agent_m0_lock;                                                                // IrDA_avalon_irda_slave_agent:m0_lock -> IrDA_avalon_irda_slave_translator:uav_lock
	wire   [31:0] irda_avalon_irda_slave_agent_m0_writedata;                                                           // IrDA_avalon_irda_slave_agent:m0_writedata -> IrDA_avalon_irda_slave_translator:uav_writedata
	wire          irda_avalon_irda_slave_agent_m0_write;                                                               // IrDA_avalon_irda_slave_agent:m0_write -> IrDA_avalon_irda_slave_translator:uav_write
	wire    [2:0] irda_avalon_irda_slave_agent_m0_burstcount;                                                          // IrDA_avalon_irda_slave_agent:m0_burstcount -> IrDA_avalon_irda_slave_translator:uav_burstcount
	wire          irda_avalon_irda_slave_agent_rf_source_valid;                                                        // IrDA_avalon_irda_slave_agent:rf_source_valid -> IrDA_avalon_irda_slave_agent_rsp_fifo:in_valid
	wire  [137:0] irda_avalon_irda_slave_agent_rf_source_data;                                                         // IrDA_avalon_irda_slave_agent:rf_source_data -> IrDA_avalon_irda_slave_agent_rsp_fifo:in_data
	wire          irda_avalon_irda_slave_agent_rf_source_ready;                                                        // IrDA_avalon_irda_slave_agent_rsp_fifo:in_ready -> IrDA_avalon_irda_slave_agent:rf_source_ready
	wire          irda_avalon_irda_slave_agent_rf_source_startofpacket;                                                // IrDA_avalon_irda_slave_agent:rf_source_startofpacket -> IrDA_avalon_irda_slave_agent_rsp_fifo:in_startofpacket
	wire          irda_avalon_irda_slave_agent_rf_source_endofpacket;                                                  // IrDA_avalon_irda_slave_agent:rf_source_endofpacket -> IrDA_avalon_irda_slave_agent_rsp_fifo:in_endofpacket
	wire          irda_avalon_irda_slave_agent_rsp_fifo_out_valid;                                                     // IrDA_avalon_irda_slave_agent_rsp_fifo:out_valid -> IrDA_avalon_irda_slave_agent:rf_sink_valid
	wire  [137:0] irda_avalon_irda_slave_agent_rsp_fifo_out_data;                                                      // IrDA_avalon_irda_slave_agent_rsp_fifo:out_data -> IrDA_avalon_irda_slave_agent:rf_sink_data
	wire          irda_avalon_irda_slave_agent_rsp_fifo_out_ready;                                                     // IrDA_avalon_irda_slave_agent:rf_sink_ready -> IrDA_avalon_irda_slave_agent_rsp_fifo:out_ready
	wire          irda_avalon_irda_slave_agent_rsp_fifo_out_startofpacket;                                             // IrDA_avalon_irda_slave_agent_rsp_fifo:out_startofpacket -> IrDA_avalon_irda_slave_agent:rf_sink_startofpacket
	wire          irda_avalon_irda_slave_agent_rsp_fifo_out_endofpacket;                                               // IrDA_avalon_irda_slave_agent_rsp_fifo:out_endofpacket -> IrDA_avalon_irda_slave_agent:rf_sink_endofpacket
	wire          irda_avalon_irda_slave_agent_rdata_fifo_src_valid;                                                   // IrDA_avalon_irda_slave_agent:rdata_fifo_src_valid -> IrDA_avalon_irda_slave_agent_rdata_fifo:in_valid
	wire   [33:0] irda_avalon_irda_slave_agent_rdata_fifo_src_data;                                                    // IrDA_avalon_irda_slave_agent:rdata_fifo_src_data -> IrDA_avalon_irda_slave_agent_rdata_fifo:in_data
	wire          irda_avalon_irda_slave_agent_rdata_fifo_src_ready;                                                   // IrDA_avalon_irda_slave_agent_rdata_fifo:in_ready -> IrDA_avalon_irda_slave_agent:rdata_fifo_src_ready
	wire   [31:0] ps2_port_avalon_ps2_slave_agent_m0_readdata;                                                         // PS2_Port_avalon_ps2_slave_translator:uav_readdata -> PS2_Port_avalon_ps2_slave_agent:m0_readdata
	wire          ps2_port_avalon_ps2_slave_agent_m0_waitrequest;                                                      // PS2_Port_avalon_ps2_slave_translator:uav_waitrequest -> PS2_Port_avalon_ps2_slave_agent:m0_waitrequest
	wire          ps2_port_avalon_ps2_slave_agent_m0_debugaccess;                                                      // PS2_Port_avalon_ps2_slave_agent:m0_debugaccess -> PS2_Port_avalon_ps2_slave_translator:uav_debugaccess
	wire   [31:0] ps2_port_avalon_ps2_slave_agent_m0_address;                                                          // PS2_Port_avalon_ps2_slave_agent:m0_address -> PS2_Port_avalon_ps2_slave_translator:uav_address
	wire    [3:0] ps2_port_avalon_ps2_slave_agent_m0_byteenable;                                                       // PS2_Port_avalon_ps2_slave_agent:m0_byteenable -> PS2_Port_avalon_ps2_slave_translator:uav_byteenable
	wire          ps2_port_avalon_ps2_slave_agent_m0_read;                                                             // PS2_Port_avalon_ps2_slave_agent:m0_read -> PS2_Port_avalon_ps2_slave_translator:uav_read
	wire          ps2_port_avalon_ps2_slave_agent_m0_readdatavalid;                                                    // PS2_Port_avalon_ps2_slave_translator:uav_readdatavalid -> PS2_Port_avalon_ps2_slave_agent:m0_readdatavalid
	wire          ps2_port_avalon_ps2_slave_agent_m0_lock;                                                             // PS2_Port_avalon_ps2_slave_agent:m0_lock -> PS2_Port_avalon_ps2_slave_translator:uav_lock
	wire   [31:0] ps2_port_avalon_ps2_slave_agent_m0_writedata;                                                        // PS2_Port_avalon_ps2_slave_agent:m0_writedata -> PS2_Port_avalon_ps2_slave_translator:uav_writedata
	wire          ps2_port_avalon_ps2_slave_agent_m0_write;                                                            // PS2_Port_avalon_ps2_slave_agent:m0_write -> PS2_Port_avalon_ps2_slave_translator:uav_write
	wire    [2:0] ps2_port_avalon_ps2_slave_agent_m0_burstcount;                                                       // PS2_Port_avalon_ps2_slave_agent:m0_burstcount -> PS2_Port_avalon_ps2_slave_translator:uav_burstcount
	wire          ps2_port_avalon_ps2_slave_agent_rf_source_valid;                                                     // PS2_Port_avalon_ps2_slave_agent:rf_source_valid -> PS2_Port_avalon_ps2_slave_agent_rsp_fifo:in_valid
	wire  [137:0] ps2_port_avalon_ps2_slave_agent_rf_source_data;                                                      // PS2_Port_avalon_ps2_slave_agent:rf_source_data -> PS2_Port_avalon_ps2_slave_agent_rsp_fifo:in_data
	wire          ps2_port_avalon_ps2_slave_agent_rf_source_ready;                                                     // PS2_Port_avalon_ps2_slave_agent_rsp_fifo:in_ready -> PS2_Port_avalon_ps2_slave_agent:rf_source_ready
	wire          ps2_port_avalon_ps2_slave_agent_rf_source_startofpacket;                                             // PS2_Port_avalon_ps2_slave_agent:rf_source_startofpacket -> PS2_Port_avalon_ps2_slave_agent_rsp_fifo:in_startofpacket
	wire          ps2_port_avalon_ps2_slave_agent_rf_source_endofpacket;                                               // PS2_Port_avalon_ps2_slave_agent:rf_source_endofpacket -> PS2_Port_avalon_ps2_slave_agent_rsp_fifo:in_endofpacket
	wire          ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_valid;                                                  // PS2_Port_avalon_ps2_slave_agent_rsp_fifo:out_valid -> PS2_Port_avalon_ps2_slave_agent:rf_sink_valid
	wire  [137:0] ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_data;                                                   // PS2_Port_avalon_ps2_slave_agent_rsp_fifo:out_data -> PS2_Port_avalon_ps2_slave_agent:rf_sink_data
	wire          ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_ready;                                                  // PS2_Port_avalon_ps2_slave_agent:rf_sink_ready -> PS2_Port_avalon_ps2_slave_agent_rsp_fifo:out_ready
	wire          ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket;                                          // PS2_Port_avalon_ps2_slave_agent_rsp_fifo:out_startofpacket -> PS2_Port_avalon_ps2_slave_agent:rf_sink_startofpacket
	wire          ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket;                                            // PS2_Port_avalon_ps2_slave_agent_rsp_fifo:out_endofpacket -> PS2_Port_avalon_ps2_slave_agent:rf_sink_endofpacket
	wire          ps2_port_avalon_ps2_slave_agent_rdata_fifo_src_valid;                                                // PS2_Port_avalon_ps2_slave_agent:rdata_fifo_src_valid -> PS2_Port_avalon_ps2_slave_agent_rdata_fifo:in_valid
	wire   [33:0] ps2_port_avalon_ps2_slave_agent_rdata_fifo_src_data;                                                 // PS2_Port_avalon_ps2_slave_agent:rdata_fifo_src_data -> PS2_Port_avalon_ps2_slave_agent_rdata_fifo:in_data
	wire          ps2_port_avalon_ps2_slave_agent_rdata_fifo_src_ready;                                                // PS2_Port_avalon_ps2_slave_agent_rdata_fifo:in_ready -> PS2_Port_avalon_ps2_slave_agent:rdata_fifo_src_ready
	wire   [31:0] ps2_port_dual_avalon_ps2_slave_agent_m0_readdata;                                                    // PS2_Port_Dual_avalon_ps2_slave_translator:uav_readdata -> PS2_Port_Dual_avalon_ps2_slave_agent:m0_readdata
	wire          ps2_port_dual_avalon_ps2_slave_agent_m0_waitrequest;                                                 // PS2_Port_Dual_avalon_ps2_slave_translator:uav_waitrequest -> PS2_Port_Dual_avalon_ps2_slave_agent:m0_waitrequest
	wire          ps2_port_dual_avalon_ps2_slave_agent_m0_debugaccess;                                                 // PS2_Port_Dual_avalon_ps2_slave_agent:m0_debugaccess -> PS2_Port_Dual_avalon_ps2_slave_translator:uav_debugaccess
	wire   [31:0] ps2_port_dual_avalon_ps2_slave_agent_m0_address;                                                     // PS2_Port_Dual_avalon_ps2_slave_agent:m0_address -> PS2_Port_Dual_avalon_ps2_slave_translator:uav_address
	wire    [3:0] ps2_port_dual_avalon_ps2_slave_agent_m0_byteenable;                                                  // PS2_Port_Dual_avalon_ps2_slave_agent:m0_byteenable -> PS2_Port_Dual_avalon_ps2_slave_translator:uav_byteenable
	wire          ps2_port_dual_avalon_ps2_slave_agent_m0_read;                                                        // PS2_Port_Dual_avalon_ps2_slave_agent:m0_read -> PS2_Port_Dual_avalon_ps2_slave_translator:uav_read
	wire          ps2_port_dual_avalon_ps2_slave_agent_m0_readdatavalid;                                               // PS2_Port_Dual_avalon_ps2_slave_translator:uav_readdatavalid -> PS2_Port_Dual_avalon_ps2_slave_agent:m0_readdatavalid
	wire          ps2_port_dual_avalon_ps2_slave_agent_m0_lock;                                                        // PS2_Port_Dual_avalon_ps2_slave_agent:m0_lock -> PS2_Port_Dual_avalon_ps2_slave_translator:uav_lock
	wire   [31:0] ps2_port_dual_avalon_ps2_slave_agent_m0_writedata;                                                   // PS2_Port_Dual_avalon_ps2_slave_agent:m0_writedata -> PS2_Port_Dual_avalon_ps2_slave_translator:uav_writedata
	wire          ps2_port_dual_avalon_ps2_slave_agent_m0_write;                                                       // PS2_Port_Dual_avalon_ps2_slave_agent:m0_write -> PS2_Port_Dual_avalon_ps2_slave_translator:uav_write
	wire    [2:0] ps2_port_dual_avalon_ps2_slave_agent_m0_burstcount;                                                  // PS2_Port_Dual_avalon_ps2_slave_agent:m0_burstcount -> PS2_Port_Dual_avalon_ps2_slave_translator:uav_burstcount
	wire          ps2_port_dual_avalon_ps2_slave_agent_rf_source_valid;                                                // PS2_Port_Dual_avalon_ps2_slave_agent:rf_source_valid -> PS2_Port_Dual_avalon_ps2_slave_agent_rsp_fifo:in_valid
	wire  [137:0] ps2_port_dual_avalon_ps2_slave_agent_rf_source_data;                                                 // PS2_Port_Dual_avalon_ps2_slave_agent:rf_source_data -> PS2_Port_Dual_avalon_ps2_slave_agent_rsp_fifo:in_data
	wire          ps2_port_dual_avalon_ps2_slave_agent_rf_source_ready;                                                // PS2_Port_Dual_avalon_ps2_slave_agent_rsp_fifo:in_ready -> PS2_Port_Dual_avalon_ps2_slave_agent:rf_source_ready
	wire          ps2_port_dual_avalon_ps2_slave_agent_rf_source_startofpacket;                                        // PS2_Port_Dual_avalon_ps2_slave_agent:rf_source_startofpacket -> PS2_Port_Dual_avalon_ps2_slave_agent_rsp_fifo:in_startofpacket
	wire          ps2_port_dual_avalon_ps2_slave_agent_rf_source_endofpacket;                                          // PS2_Port_Dual_avalon_ps2_slave_agent:rf_source_endofpacket -> PS2_Port_Dual_avalon_ps2_slave_agent_rsp_fifo:in_endofpacket
	wire          ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_valid;                                             // PS2_Port_Dual_avalon_ps2_slave_agent_rsp_fifo:out_valid -> PS2_Port_Dual_avalon_ps2_slave_agent:rf_sink_valid
	wire  [137:0] ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_data;                                              // PS2_Port_Dual_avalon_ps2_slave_agent_rsp_fifo:out_data -> PS2_Port_Dual_avalon_ps2_slave_agent:rf_sink_data
	wire          ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_ready;                                             // PS2_Port_Dual_avalon_ps2_slave_agent:rf_sink_ready -> PS2_Port_Dual_avalon_ps2_slave_agent_rsp_fifo:out_ready
	wire          ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket;                                     // PS2_Port_Dual_avalon_ps2_slave_agent_rsp_fifo:out_startofpacket -> PS2_Port_Dual_avalon_ps2_slave_agent:rf_sink_startofpacket
	wire          ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket;                                       // PS2_Port_Dual_avalon_ps2_slave_agent_rsp_fifo:out_endofpacket -> PS2_Port_Dual_avalon_ps2_slave_agent:rf_sink_endofpacket
	wire          ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_src_valid;                                           // PS2_Port_Dual_avalon_ps2_slave_agent:rdata_fifo_src_valid -> PS2_Port_Dual_avalon_ps2_slave_agent_rdata_fifo:in_valid
	wire   [33:0] ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_src_data;                                            // PS2_Port_Dual_avalon_ps2_slave_agent:rdata_fifo_src_data -> PS2_Port_Dual_avalon_ps2_slave_agent_rdata_fifo:in_data
	wire          ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_src_ready;                                           // PS2_Port_Dual_avalon_ps2_slave_agent_rdata_fifo:in_ready -> PS2_Port_Dual_avalon_ps2_slave_agent:rdata_fifo_src_ready
	wire   [31:0] vga_subsystem_char_buffer_control_slave_agent_m0_readdata;                                           // VGA_Subsystem_char_buffer_control_slave_translator:uav_readdata -> VGA_Subsystem_char_buffer_control_slave_agent:m0_readdata
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_waitrequest;                                        // VGA_Subsystem_char_buffer_control_slave_translator:uav_waitrequest -> VGA_Subsystem_char_buffer_control_slave_agent:m0_waitrequest
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_debugaccess;                                        // VGA_Subsystem_char_buffer_control_slave_agent:m0_debugaccess -> VGA_Subsystem_char_buffer_control_slave_translator:uav_debugaccess
	wire   [31:0] vga_subsystem_char_buffer_control_slave_agent_m0_address;                                            // VGA_Subsystem_char_buffer_control_slave_agent:m0_address -> VGA_Subsystem_char_buffer_control_slave_translator:uav_address
	wire    [3:0] vga_subsystem_char_buffer_control_slave_agent_m0_byteenable;                                         // VGA_Subsystem_char_buffer_control_slave_agent:m0_byteenable -> VGA_Subsystem_char_buffer_control_slave_translator:uav_byteenable
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_read;                                               // VGA_Subsystem_char_buffer_control_slave_agent:m0_read -> VGA_Subsystem_char_buffer_control_slave_translator:uav_read
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_readdatavalid;                                      // VGA_Subsystem_char_buffer_control_slave_translator:uav_readdatavalid -> VGA_Subsystem_char_buffer_control_slave_agent:m0_readdatavalid
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_lock;                                               // VGA_Subsystem_char_buffer_control_slave_agent:m0_lock -> VGA_Subsystem_char_buffer_control_slave_translator:uav_lock
	wire   [31:0] vga_subsystem_char_buffer_control_slave_agent_m0_writedata;                                          // VGA_Subsystem_char_buffer_control_slave_agent:m0_writedata -> VGA_Subsystem_char_buffer_control_slave_translator:uav_writedata
	wire          vga_subsystem_char_buffer_control_slave_agent_m0_write;                                              // VGA_Subsystem_char_buffer_control_slave_agent:m0_write -> VGA_Subsystem_char_buffer_control_slave_translator:uav_write
	wire    [2:0] vga_subsystem_char_buffer_control_slave_agent_m0_burstcount;                                         // VGA_Subsystem_char_buffer_control_slave_agent:m0_burstcount -> VGA_Subsystem_char_buffer_control_slave_translator:uav_burstcount
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_valid;                                       // VGA_Subsystem_char_buffer_control_slave_agent:rf_source_valid -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_valid
	wire  [137:0] vga_subsystem_char_buffer_control_slave_agent_rf_source_data;                                        // VGA_Subsystem_char_buffer_control_slave_agent:rf_source_data -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_ready;                                       // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_ready -> VGA_Subsystem_char_buffer_control_slave_agent:rf_source_ready
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_startofpacket;                               // VGA_Subsystem_char_buffer_control_slave_agent:rf_source_startofpacket -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rf_source_endofpacket;                                 // VGA_Subsystem_char_buffer_control_slave_agent:rf_source_endofpacket -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_valid;                                    // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_valid -> VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_valid
	wire  [137:0] vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_data;                                     // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_data -> VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_ready;                                    // VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_ready -> VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_ready
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket;                            // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_startofpacket -> VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket;                              // VGA_Subsystem_char_buffer_control_slave_agent_rsp_fifo:out_endofpacket -> VGA_Subsystem_char_buffer_control_slave_agent:rf_sink_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_valid;                                  // VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_src_valid -> VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_data;                                   // VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_src_data -> VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:in_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_ready;                                  // VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:in_ready -> VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                                               // SysID_control_slave_translator:uav_readdata -> SysID_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                                            // SysID_control_slave_translator:uav_waitrequest -> SysID_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                                            // SysID_control_slave_agent:m0_debugaccess -> SysID_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_control_slave_agent_m0_address;                                                                // SysID_control_slave_agent:m0_address -> SysID_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                                             // SysID_control_slave_agent:m0_byteenable -> SysID_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                                                   // SysID_control_slave_agent:m0_read -> SysID_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                                          // SysID_control_slave_translator:uav_readdatavalid -> SysID_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                                                   // SysID_control_slave_agent:m0_lock -> SysID_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                                              // SysID_control_slave_agent:m0_writedata -> SysID_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                                                  // SysID_control_slave_agent:m0_write -> SysID_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                                             // SysID_control_slave_agent:m0_burstcount -> SysID_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                                           // SysID_control_slave_agent:rf_source_valid -> SysID_control_slave_agent_rsp_fifo:in_valid
	wire  [137:0] sysid_control_slave_agent_rf_source_data;                                                            // SysID_control_slave_agent:rf_source_data -> SysID_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                                           // SysID_control_slave_agent_rsp_fifo:in_ready -> SysID_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                                                   // SysID_control_slave_agent:rf_source_startofpacket -> SysID_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                                                     // SysID_control_slave_agent:rf_source_endofpacket -> SysID_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                                        // SysID_control_slave_agent_rsp_fifo:out_valid -> SysID_control_slave_agent:rf_sink_valid
	wire  [137:0] sysid_control_slave_agent_rsp_fifo_out_data;                                                         // SysID_control_slave_agent_rsp_fifo:out_data -> SysID_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                                        // SysID_control_slave_agent:rf_sink_ready -> SysID_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                                                // SysID_control_slave_agent_rsp_fifo:out_startofpacket -> SysID_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                                                  // SysID_control_slave_agent_rsp_fifo:out_endofpacket -> SysID_control_slave_agent:rf_sink_endofpacket
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                                                      // SysID_control_slave_agent:rdata_fifo_src_valid -> SysID_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                                                       // SysID_control_slave_agent:rdata_fifo_src_data -> SysID_control_slave_agent_rdata_fifo:in_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                                                      // SysID_control_slave_agent_rdata_fifo:in_ready -> SysID_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] video_in_subsystem_edge_detection_control_slave_agent_m0_readdata;                                   // Video_In_Subsystem_edge_detection_control_slave_translator:uav_readdata -> Video_In_Subsystem_edge_detection_control_slave_agent:m0_readdata
	wire          video_in_subsystem_edge_detection_control_slave_agent_m0_waitrequest;                                // Video_In_Subsystem_edge_detection_control_slave_translator:uav_waitrequest -> Video_In_Subsystem_edge_detection_control_slave_agent:m0_waitrequest
	wire          video_in_subsystem_edge_detection_control_slave_agent_m0_debugaccess;                                // Video_In_Subsystem_edge_detection_control_slave_agent:m0_debugaccess -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_debugaccess
	wire   [31:0] video_in_subsystem_edge_detection_control_slave_agent_m0_address;                                    // Video_In_Subsystem_edge_detection_control_slave_agent:m0_address -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_address
	wire    [3:0] video_in_subsystem_edge_detection_control_slave_agent_m0_byteenable;                                 // Video_In_Subsystem_edge_detection_control_slave_agent:m0_byteenable -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_byteenable
	wire          video_in_subsystem_edge_detection_control_slave_agent_m0_read;                                       // Video_In_Subsystem_edge_detection_control_slave_agent:m0_read -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_read
	wire          video_in_subsystem_edge_detection_control_slave_agent_m0_readdatavalid;                              // Video_In_Subsystem_edge_detection_control_slave_translator:uav_readdatavalid -> Video_In_Subsystem_edge_detection_control_slave_agent:m0_readdatavalid
	wire          video_in_subsystem_edge_detection_control_slave_agent_m0_lock;                                       // Video_In_Subsystem_edge_detection_control_slave_agent:m0_lock -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_lock
	wire   [31:0] video_in_subsystem_edge_detection_control_slave_agent_m0_writedata;                                  // Video_In_Subsystem_edge_detection_control_slave_agent:m0_writedata -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_writedata
	wire          video_in_subsystem_edge_detection_control_slave_agent_m0_write;                                      // Video_In_Subsystem_edge_detection_control_slave_agent:m0_write -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_write
	wire    [2:0] video_in_subsystem_edge_detection_control_slave_agent_m0_burstcount;                                 // Video_In_Subsystem_edge_detection_control_slave_agent:m0_burstcount -> Video_In_Subsystem_edge_detection_control_slave_translator:uav_burstcount
	wire          video_in_subsystem_edge_detection_control_slave_agent_rf_source_valid;                               // Video_In_Subsystem_edge_detection_control_slave_agent:rf_source_valid -> Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:in_valid
	wire  [137:0] video_in_subsystem_edge_detection_control_slave_agent_rf_source_data;                                // Video_In_Subsystem_edge_detection_control_slave_agent:rf_source_data -> Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:in_data
	wire          video_in_subsystem_edge_detection_control_slave_agent_rf_source_ready;                               // Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:in_ready -> Video_In_Subsystem_edge_detection_control_slave_agent:rf_source_ready
	wire          video_in_subsystem_edge_detection_control_slave_agent_rf_source_startofpacket;                       // Video_In_Subsystem_edge_detection_control_slave_agent:rf_source_startofpacket -> Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:in_startofpacket
	wire          video_in_subsystem_edge_detection_control_slave_agent_rf_source_endofpacket;                         // Video_In_Subsystem_edge_detection_control_slave_agent:rf_source_endofpacket -> Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:in_endofpacket
	wire          video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_valid;                            // Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:out_valid -> Video_In_Subsystem_edge_detection_control_slave_agent:rf_sink_valid
	wire  [137:0] video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_data;                             // Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:out_data -> Video_In_Subsystem_edge_detection_control_slave_agent:rf_sink_data
	wire          video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_ready;                            // Video_In_Subsystem_edge_detection_control_slave_agent:rf_sink_ready -> Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:out_ready
	wire          video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_startofpacket;                    // Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:out_startofpacket -> Video_In_Subsystem_edge_detection_control_slave_agent:rf_sink_startofpacket
	wire          video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_endofpacket;                      // Video_In_Subsystem_edge_detection_control_slave_agent_rsp_fifo:out_endofpacket -> Video_In_Subsystem_edge_detection_control_slave_agent:rf_sink_endofpacket
	wire          video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_valid;                          // Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_src_valid -> Video_In_Subsystem_edge_detection_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_data;                           // Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_src_data -> Video_In_Subsystem_edge_detection_control_slave_agent_rdata_fifo:in_data
	wire          video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_ready;                          // Video_In_Subsystem_edge_detection_control_slave_agent_rdata_fifo:in_ready -> Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] leds_s1_agent_m0_readdata;                                                                           // LEDs_s1_translator:uav_readdata -> LEDs_s1_agent:m0_readdata
	wire          leds_s1_agent_m0_waitrequest;                                                                        // LEDs_s1_translator:uav_waitrequest -> LEDs_s1_agent:m0_waitrequest
	wire          leds_s1_agent_m0_debugaccess;                                                                        // LEDs_s1_agent:m0_debugaccess -> LEDs_s1_translator:uav_debugaccess
	wire   [31:0] leds_s1_agent_m0_address;                                                                            // LEDs_s1_agent:m0_address -> LEDs_s1_translator:uav_address
	wire    [3:0] leds_s1_agent_m0_byteenable;                                                                         // LEDs_s1_agent:m0_byteenable -> LEDs_s1_translator:uav_byteenable
	wire          leds_s1_agent_m0_read;                                                                               // LEDs_s1_agent:m0_read -> LEDs_s1_translator:uav_read
	wire          leds_s1_agent_m0_readdatavalid;                                                                      // LEDs_s1_translator:uav_readdatavalid -> LEDs_s1_agent:m0_readdatavalid
	wire          leds_s1_agent_m0_lock;                                                                               // LEDs_s1_agent:m0_lock -> LEDs_s1_translator:uav_lock
	wire   [31:0] leds_s1_agent_m0_writedata;                                                                          // LEDs_s1_agent:m0_writedata -> LEDs_s1_translator:uav_writedata
	wire          leds_s1_agent_m0_write;                                                                              // LEDs_s1_agent:m0_write -> LEDs_s1_translator:uav_write
	wire    [2:0] leds_s1_agent_m0_burstcount;                                                                         // LEDs_s1_agent:m0_burstcount -> LEDs_s1_translator:uav_burstcount
	wire          leds_s1_agent_rf_source_valid;                                                                       // LEDs_s1_agent:rf_source_valid -> LEDs_s1_agent_rsp_fifo:in_valid
	wire  [137:0] leds_s1_agent_rf_source_data;                                                                        // LEDs_s1_agent:rf_source_data -> LEDs_s1_agent_rsp_fifo:in_data
	wire          leds_s1_agent_rf_source_ready;                                                                       // LEDs_s1_agent_rsp_fifo:in_ready -> LEDs_s1_agent:rf_source_ready
	wire          leds_s1_agent_rf_source_startofpacket;                                                               // LEDs_s1_agent:rf_source_startofpacket -> LEDs_s1_agent_rsp_fifo:in_startofpacket
	wire          leds_s1_agent_rf_source_endofpacket;                                                                 // LEDs_s1_agent:rf_source_endofpacket -> LEDs_s1_agent_rsp_fifo:in_endofpacket
	wire          leds_s1_agent_rsp_fifo_out_valid;                                                                    // LEDs_s1_agent_rsp_fifo:out_valid -> LEDs_s1_agent:rf_sink_valid
	wire  [137:0] leds_s1_agent_rsp_fifo_out_data;                                                                     // LEDs_s1_agent_rsp_fifo:out_data -> LEDs_s1_agent:rf_sink_data
	wire          leds_s1_agent_rsp_fifo_out_ready;                                                                    // LEDs_s1_agent:rf_sink_ready -> LEDs_s1_agent_rsp_fifo:out_ready
	wire          leds_s1_agent_rsp_fifo_out_startofpacket;                                                            // LEDs_s1_agent_rsp_fifo:out_startofpacket -> LEDs_s1_agent:rf_sink_startofpacket
	wire          leds_s1_agent_rsp_fifo_out_endofpacket;                                                              // LEDs_s1_agent_rsp_fifo:out_endofpacket -> LEDs_s1_agent:rf_sink_endofpacket
	wire          leds_s1_agent_rdata_fifo_src_valid;                                                                  // LEDs_s1_agent:rdata_fifo_src_valid -> LEDs_s1_agent_rdata_fifo:in_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_src_data;                                                                   // LEDs_s1_agent:rdata_fifo_src_data -> LEDs_s1_agent_rdata_fifo:in_data
	wire          leds_s1_agent_rdata_fifo_src_ready;                                                                  // LEDs_s1_agent_rdata_fifo:in_ready -> LEDs_s1_agent:rdata_fifo_src_ready
	wire   [31:0] hex3_hex0_s1_agent_m0_readdata;                                                                      // HEX3_HEX0_s1_translator:uav_readdata -> HEX3_HEX0_s1_agent:m0_readdata
	wire          hex3_hex0_s1_agent_m0_waitrequest;                                                                   // HEX3_HEX0_s1_translator:uav_waitrequest -> HEX3_HEX0_s1_agent:m0_waitrequest
	wire          hex3_hex0_s1_agent_m0_debugaccess;                                                                   // HEX3_HEX0_s1_agent:m0_debugaccess -> HEX3_HEX0_s1_translator:uav_debugaccess
	wire   [31:0] hex3_hex0_s1_agent_m0_address;                                                                       // HEX3_HEX0_s1_agent:m0_address -> HEX3_HEX0_s1_translator:uav_address
	wire    [3:0] hex3_hex0_s1_agent_m0_byteenable;                                                                    // HEX3_HEX0_s1_agent:m0_byteenable -> HEX3_HEX0_s1_translator:uav_byteenable
	wire          hex3_hex0_s1_agent_m0_read;                                                                          // HEX3_HEX0_s1_agent:m0_read -> HEX3_HEX0_s1_translator:uav_read
	wire          hex3_hex0_s1_agent_m0_readdatavalid;                                                                 // HEX3_HEX0_s1_translator:uav_readdatavalid -> HEX3_HEX0_s1_agent:m0_readdatavalid
	wire          hex3_hex0_s1_agent_m0_lock;                                                                          // HEX3_HEX0_s1_agent:m0_lock -> HEX3_HEX0_s1_translator:uav_lock
	wire   [31:0] hex3_hex0_s1_agent_m0_writedata;                                                                     // HEX3_HEX0_s1_agent:m0_writedata -> HEX3_HEX0_s1_translator:uav_writedata
	wire          hex3_hex0_s1_agent_m0_write;                                                                         // HEX3_HEX0_s1_agent:m0_write -> HEX3_HEX0_s1_translator:uav_write
	wire    [2:0] hex3_hex0_s1_agent_m0_burstcount;                                                                    // HEX3_HEX0_s1_agent:m0_burstcount -> HEX3_HEX0_s1_translator:uav_burstcount
	wire          hex3_hex0_s1_agent_rf_source_valid;                                                                  // HEX3_HEX0_s1_agent:rf_source_valid -> HEX3_HEX0_s1_agent_rsp_fifo:in_valid
	wire  [137:0] hex3_hex0_s1_agent_rf_source_data;                                                                   // HEX3_HEX0_s1_agent:rf_source_data -> HEX3_HEX0_s1_agent_rsp_fifo:in_data
	wire          hex3_hex0_s1_agent_rf_source_ready;                                                                  // HEX3_HEX0_s1_agent_rsp_fifo:in_ready -> HEX3_HEX0_s1_agent:rf_source_ready
	wire          hex3_hex0_s1_agent_rf_source_startofpacket;                                                          // HEX3_HEX0_s1_agent:rf_source_startofpacket -> HEX3_HEX0_s1_agent_rsp_fifo:in_startofpacket
	wire          hex3_hex0_s1_agent_rf_source_endofpacket;                                                            // HEX3_HEX0_s1_agent:rf_source_endofpacket -> HEX3_HEX0_s1_agent_rsp_fifo:in_endofpacket
	wire          hex3_hex0_s1_agent_rsp_fifo_out_valid;                                                               // HEX3_HEX0_s1_agent_rsp_fifo:out_valid -> HEX3_HEX0_s1_agent:rf_sink_valid
	wire  [137:0] hex3_hex0_s1_agent_rsp_fifo_out_data;                                                                // HEX3_HEX0_s1_agent_rsp_fifo:out_data -> HEX3_HEX0_s1_agent:rf_sink_data
	wire          hex3_hex0_s1_agent_rsp_fifo_out_ready;                                                               // HEX3_HEX0_s1_agent:rf_sink_ready -> HEX3_HEX0_s1_agent_rsp_fifo:out_ready
	wire          hex3_hex0_s1_agent_rsp_fifo_out_startofpacket;                                                       // HEX3_HEX0_s1_agent_rsp_fifo:out_startofpacket -> HEX3_HEX0_s1_agent:rf_sink_startofpacket
	wire          hex3_hex0_s1_agent_rsp_fifo_out_endofpacket;                                                         // HEX3_HEX0_s1_agent_rsp_fifo:out_endofpacket -> HEX3_HEX0_s1_agent:rf_sink_endofpacket
	wire          hex3_hex0_s1_agent_rdata_fifo_src_valid;                                                             // HEX3_HEX0_s1_agent:rdata_fifo_src_valid -> HEX3_HEX0_s1_agent_rdata_fifo:in_valid
	wire   [33:0] hex3_hex0_s1_agent_rdata_fifo_src_data;                                                              // HEX3_HEX0_s1_agent:rdata_fifo_src_data -> HEX3_HEX0_s1_agent_rdata_fifo:in_data
	wire          hex3_hex0_s1_agent_rdata_fifo_src_ready;                                                             // HEX3_HEX0_s1_agent_rdata_fifo:in_ready -> HEX3_HEX0_s1_agent:rdata_fifo_src_ready
	wire   [31:0] hex5_hex4_s1_agent_m0_readdata;                                                                      // HEX5_HEX4_s1_translator:uav_readdata -> HEX5_HEX4_s1_agent:m0_readdata
	wire          hex5_hex4_s1_agent_m0_waitrequest;                                                                   // HEX5_HEX4_s1_translator:uav_waitrequest -> HEX5_HEX4_s1_agent:m0_waitrequest
	wire          hex5_hex4_s1_agent_m0_debugaccess;                                                                   // HEX5_HEX4_s1_agent:m0_debugaccess -> HEX5_HEX4_s1_translator:uav_debugaccess
	wire   [31:0] hex5_hex4_s1_agent_m0_address;                                                                       // HEX5_HEX4_s1_agent:m0_address -> HEX5_HEX4_s1_translator:uav_address
	wire    [3:0] hex5_hex4_s1_agent_m0_byteenable;                                                                    // HEX5_HEX4_s1_agent:m0_byteenable -> HEX5_HEX4_s1_translator:uav_byteenable
	wire          hex5_hex4_s1_agent_m0_read;                                                                          // HEX5_HEX4_s1_agent:m0_read -> HEX5_HEX4_s1_translator:uav_read
	wire          hex5_hex4_s1_agent_m0_readdatavalid;                                                                 // HEX5_HEX4_s1_translator:uav_readdatavalid -> HEX5_HEX4_s1_agent:m0_readdatavalid
	wire          hex5_hex4_s1_agent_m0_lock;                                                                          // HEX5_HEX4_s1_agent:m0_lock -> HEX5_HEX4_s1_translator:uav_lock
	wire   [31:0] hex5_hex4_s1_agent_m0_writedata;                                                                     // HEX5_HEX4_s1_agent:m0_writedata -> HEX5_HEX4_s1_translator:uav_writedata
	wire          hex5_hex4_s1_agent_m0_write;                                                                         // HEX5_HEX4_s1_agent:m0_write -> HEX5_HEX4_s1_translator:uav_write
	wire    [2:0] hex5_hex4_s1_agent_m0_burstcount;                                                                    // HEX5_HEX4_s1_agent:m0_burstcount -> HEX5_HEX4_s1_translator:uav_burstcount
	wire          hex5_hex4_s1_agent_rf_source_valid;                                                                  // HEX5_HEX4_s1_agent:rf_source_valid -> HEX5_HEX4_s1_agent_rsp_fifo:in_valid
	wire  [137:0] hex5_hex4_s1_agent_rf_source_data;                                                                   // HEX5_HEX4_s1_agent:rf_source_data -> HEX5_HEX4_s1_agent_rsp_fifo:in_data
	wire          hex5_hex4_s1_agent_rf_source_ready;                                                                  // HEX5_HEX4_s1_agent_rsp_fifo:in_ready -> HEX5_HEX4_s1_agent:rf_source_ready
	wire          hex5_hex4_s1_agent_rf_source_startofpacket;                                                          // HEX5_HEX4_s1_agent:rf_source_startofpacket -> HEX5_HEX4_s1_agent_rsp_fifo:in_startofpacket
	wire          hex5_hex4_s1_agent_rf_source_endofpacket;                                                            // HEX5_HEX4_s1_agent:rf_source_endofpacket -> HEX5_HEX4_s1_agent_rsp_fifo:in_endofpacket
	wire          hex5_hex4_s1_agent_rsp_fifo_out_valid;                                                               // HEX5_HEX4_s1_agent_rsp_fifo:out_valid -> HEX5_HEX4_s1_agent:rf_sink_valid
	wire  [137:0] hex5_hex4_s1_agent_rsp_fifo_out_data;                                                                // HEX5_HEX4_s1_agent_rsp_fifo:out_data -> HEX5_HEX4_s1_agent:rf_sink_data
	wire          hex5_hex4_s1_agent_rsp_fifo_out_ready;                                                               // HEX5_HEX4_s1_agent:rf_sink_ready -> HEX5_HEX4_s1_agent_rsp_fifo:out_ready
	wire          hex5_hex4_s1_agent_rsp_fifo_out_startofpacket;                                                       // HEX5_HEX4_s1_agent_rsp_fifo:out_startofpacket -> HEX5_HEX4_s1_agent:rf_sink_startofpacket
	wire          hex5_hex4_s1_agent_rsp_fifo_out_endofpacket;                                                         // HEX5_HEX4_s1_agent_rsp_fifo:out_endofpacket -> HEX5_HEX4_s1_agent:rf_sink_endofpacket
	wire          hex5_hex4_s1_agent_rdata_fifo_src_valid;                                                             // HEX5_HEX4_s1_agent:rdata_fifo_src_valid -> HEX5_HEX4_s1_agent_rdata_fifo:in_valid
	wire   [33:0] hex5_hex4_s1_agent_rdata_fifo_src_data;                                                              // HEX5_HEX4_s1_agent:rdata_fifo_src_data -> HEX5_HEX4_s1_agent_rdata_fifo:in_data
	wire          hex5_hex4_s1_agent_rdata_fifo_src_ready;                                                             // HEX5_HEX4_s1_agent_rdata_fifo:in_ready -> HEX5_HEX4_s1_agent:rdata_fifo_src_ready
	wire   [31:0] slider_switches_s1_agent_m0_readdata;                                                                // Slider_Switches_s1_translator:uav_readdata -> Slider_Switches_s1_agent:m0_readdata
	wire          slider_switches_s1_agent_m0_waitrequest;                                                             // Slider_Switches_s1_translator:uav_waitrequest -> Slider_Switches_s1_agent:m0_waitrequest
	wire          slider_switches_s1_agent_m0_debugaccess;                                                             // Slider_Switches_s1_agent:m0_debugaccess -> Slider_Switches_s1_translator:uav_debugaccess
	wire   [31:0] slider_switches_s1_agent_m0_address;                                                                 // Slider_Switches_s1_agent:m0_address -> Slider_Switches_s1_translator:uav_address
	wire    [3:0] slider_switches_s1_agent_m0_byteenable;                                                              // Slider_Switches_s1_agent:m0_byteenable -> Slider_Switches_s1_translator:uav_byteenable
	wire          slider_switches_s1_agent_m0_read;                                                                    // Slider_Switches_s1_agent:m0_read -> Slider_Switches_s1_translator:uav_read
	wire          slider_switches_s1_agent_m0_readdatavalid;                                                           // Slider_Switches_s1_translator:uav_readdatavalid -> Slider_Switches_s1_agent:m0_readdatavalid
	wire          slider_switches_s1_agent_m0_lock;                                                                    // Slider_Switches_s1_agent:m0_lock -> Slider_Switches_s1_translator:uav_lock
	wire   [31:0] slider_switches_s1_agent_m0_writedata;                                                               // Slider_Switches_s1_agent:m0_writedata -> Slider_Switches_s1_translator:uav_writedata
	wire          slider_switches_s1_agent_m0_write;                                                                   // Slider_Switches_s1_agent:m0_write -> Slider_Switches_s1_translator:uav_write
	wire    [2:0] slider_switches_s1_agent_m0_burstcount;                                                              // Slider_Switches_s1_agent:m0_burstcount -> Slider_Switches_s1_translator:uav_burstcount
	wire          slider_switches_s1_agent_rf_source_valid;                                                            // Slider_Switches_s1_agent:rf_source_valid -> Slider_Switches_s1_agent_rsp_fifo:in_valid
	wire  [137:0] slider_switches_s1_agent_rf_source_data;                                                             // Slider_Switches_s1_agent:rf_source_data -> Slider_Switches_s1_agent_rsp_fifo:in_data
	wire          slider_switches_s1_agent_rf_source_ready;                                                            // Slider_Switches_s1_agent_rsp_fifo:in_ready -> Slider_Switches_s1_agent:rf_source_ready
	wire          slider_switches_s1_agent_rf_source_startofpacket;                                                    // Slider_Switches_s1_agent:rf_source_startofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_startofpacket
	wire          slider_switches_s1_agent_rf_source_endofpacket;                                                      // Slider_Switches_s1_agent:rf_source_endofpacket -> Slider_Switches_s1_agent_rsp_fifo:in_endofpacket
	wire          slider_switches_s1_agent_rsp_fifo_out_valid;                                                         // Slider_Switches_s1_agent_rsp_fifo:out_valid -> Slider_Switches_s1_agent:rf_sink_valid
	wire  [137:0] slider_switches_s1_agent_rsp_fifo_out_data;                                                          // Slider_Switches_s1_agent_rsp_fifo:out_data -> Slider_Switches_s1_agent:rf_sink_data
	wire          slider_switches_s1_agent_rsp_fifo_out_ready;                                                         // Slider_Switches_s1_agent:rf_sink_ready -> Slider_Switches_s1_agent_rsp_fifo:out_ready
	wire          slider_switches_s1_agent_rsp_fifo_out_startofpacket;                                                 // Slider_Switches_s1_agent_rsp_fifo:out_startofpacket -> Slider_Switches_s1_agent:rf_sink_startofpacket
	wire          slider_switches_s1_agent_rsp_fifo_out_endofpacket;                                                   // Slider_Switches_s1_agent_rsp_fifo:out_endofpacket -> Slider_Switches_s1_agent:rf_sink_endofpacket
	wire          slider_switches_s1_agent_rdata_fifo_src_valid;                                                       // Slider_Switches_s1_agent:rdata_fifo_src_valid -> Slider_Switches_s1_agent_rdata_fifo:in_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_src_data;                                                        // Slider_Switches_s1_agent:rdata_fifo_src_data -> Slider_Switches_s1_agent_rdata_fifo:in_data
	wire          slider_switches_s1_agent_rdata_fifo_src_ready;                                                       // Slider_Switches_s1_agent_rdata_fifo:in_ready -> Slider_Switches_s1_agent:rdata_fifo_src_ready
	wire   [31:0] pushbuttons_s1_agent_m0_readdata;                                                                    // Pushbuttons_s1_translator:uav_readdata -> Pushbuttons_s1_agent:m0_readdata
	wire          pushbuttons_s1_agent_m0_waitrequest;                                                                 // Pushbuttons_s1_translator:uav_waitrequest -> Pushbuttons_s1_agent:m0_waitrequest
	wire          pushbuttons_s1_agent_m0_debugaccess;                                                                 // Pushbuttons_s1_agent:m0_debugaccess -> Pushbuttons_s1_translator:uav_debugaccess
	wire   [31:0] pushbuttons_s1_agent_m0_address;                                                                     // Pushbuttons_s1_agent:m0_address -> Pushbuttons_s1_translator:uav_address
	wire    [3:0] pushbuttons_s1_agent_m0_byteenable;                                                                  // Pushbuttons_s1_agent:m0_byteenable -> Pushbuttons_s1_translator:uav_byteenable
	wire          pushbuttons_s1_agent_m0_read;                                                                        // Pushbuttons_s1_agent:m0_read -> Pushbuttons_s1_translator:uav_read
	wire          pushbuttons_s1_agent_m0_readdatavalid;                                                               // Pushbuttons_s1_translator:uav_readdatavalid -> Pushbuttons_s1_agent:m0_readdatavalid
	wire          pushbuttons_s1_agent_m0_lock;                                                                        // Pushbuttons_s1_agent:m0_lock -> Pushbuttons_s1_translator:uav_lock
	wire   [31:0] pushbuttons_s1_agent_m0_writedata;                                                                   // Pushbuttons_s1_agent:m0_writedata -> Pushbuttons_s1_translator:uav_writedata
	wire          pushbuttons_s1_agent_m0_write;                                                                       // Pushbuttons_s1_agent:m0_write -> Pushbuttons_s1_translator:uav_write
	wire    [2:0] pushbuttons_s1_agent_m0_burstcount;                                                                  // Pushbuttons_s1_agent:m0_burstcount -> Pushbuttons_s1_translator:uav_burstcount
	wire          pushbuttons_s1_agent_rf_source_valid;                                                                // Pushbuttons_s1_agent:rf_source_valid -> Pushbuttons_s1_agent_rsp_fifo:in_valid
	wire  [137:0] pushbuttons_s1_agent_rf_source_data;                                                                 // Pushbuttons_s1_agent:rf_source_data -> Pushbuttons_s1_agent_rsp_fifo:in_data
	wire          pushbuttons_s1_agent_rf_source_ready;                                                                // Pushbuttons_s1_agent_rsp_fifo:in_ready -> Pushbuttons_s1_agent:rf_source_ready
	wire          pushbuttons_s1_agent_rf_source_startofpacket;                                                        // Pushbuttons_s1_agent:rf_source_startofpacket -> Pushbuttons_s1_agent_rsp_fifo:in_startofpacket
	wire          pushbuttons_s1_agent_rf_source_endofpacket;                                                          // Pushbuttons_s1_agent:rf_source_endofpacket -> Pushbuttons_s1_agent_rsp_fifo:in_endofpacket
	wire          pushbuttons_s1_agent_rsp_fifo_out_valid;                                                             // Pushbuttons_s1_agent_rsp_fifo:out_valid -> Pushbuttons_s1_agent:rf_sink_valid
	wire  [137:0] pushbuttons_s1_agent_rsp_fifo_out_data;                                                              // Pushbuttons_s1_agent_rsp_fifo:out_data -> Pushbuttons_s1_agent:rf_sink_data
	wire          pushbuttons_s1_agent_rsp_fifo_out_ready;                                                             // Pushbuttons_s1_agent:rf_sink_ready -> Pushbuttons_s1_agent_rsp_fifo:out_ready
	wire          pushbuttons_s1_agent_rsp_fifo_out_startofpacket;                                                     // Pushbuttons_s1_agent_rsp_fifo:out_startofpacket -> Pushbuttons_s1_agent:rf_sink_startofpacket
	wire          pushbuttons_s1_agent_rsp_fifo_out_endofpacket;                                                       // Pushbuttons_s1_agent_rsp_fifo:out_endofpacket -> Pushbuttons_s1_agent:rf_sink_endofpacket
	wire          pushbuttons_s1_agent_rdata_fifo_src_valid;                                                           // Pushbuttons_s1_agent:rdata_fifo_src_valid -> Pushbuttons_s1_agent_rdata_fifo:in_valid
	wire   [33:0] pushbuttons_s1_agent_rdata_fifo_src_data;                                                            // Pushbuttons_s1_agent:rdata_fifo_src_data -> Pushbuttons_s1_agent_rdata_fifo:in_data
	wire          pushbuttons_s1_agent_rdata_fifo_src_ready;                                                           // Pushbuttons_s1_agent_rdata_fifo:in_ready -> Pushbuttons_s1_agent:rdata_fifo_src_ready
	wire   [31:0] expansion_jp1_s1_agent_m0_readdata;                                                                  // Expansion_JP1_s1_translator:uav_readdata -> Expansion_JP1_s1_agent:m0_readdata
	wire          expansion_jp1_s1_agent_m0_waitrequest;                                                               // Expansion_JP1_s1_translator:uav_waitrequest -> Expansion_JP1_s1_agent:m0_waitrequest
	wire          expansion_jp1_s1_agent_m0_debugaccess;                                                               // Expansion_JP1_s1_agent:m0_debugaccess -> Expansion_JP1_s1_translator:uav_debugaccess
	wire   [31:0] expansion_jp1_s1_agent_m0_address;                                                                   // Expansion_JP1_s1_agent:m0_address -> Expansion_JP1_s1_translator:uav_address
	wire    [3:0] expansion_jp1_s1_agent_m0_byteenable;                                                                // Expansion_JP1_s1_agent:m0_byteenable -> Expansion_JP1_s1_translator:uav_byteenable
	wire          expansion_jp1_s1_agent_m0_read;                                                                      // Expansion_JP1_s1_agent:m0_read -> Expansion_JP1_s1_translator:uav_read
	wire          expansion_jp1_s1_agent_m0_readdatavalid;                                                             // Expansion_JP1_s1_translator:uav_readdatavalid -> Expansion_JP1_s1_agent:m0_readdatavalid
	wire          expansion_jp1_s1_agent_m0_lock;                                                                      // Expansion_JP1_s1_agent:m0_lock -> Expansion_JP1_s1_translator:uav_lock
	wire   [31:0] expansion_jp1_s1_agent_m0_writedata;                                                                 // Expansion_JP1_s1_agent:m0_writedata -> Expansion_JP1_s1_translator:uav_writedata
	wire          expansion_jp1_s1_agent_m0_write;                                                                     // Expansion_JP1_s1_agent:m0_write -> Expansion_JP1_s1_translator:uav_write
	wire    [2:0] expansion_jp1_s1_agent_m0_burstcount;                                                                // Expansion_JP1_s1_agent:m0_burstcount -> Expansion_JP1_s1_translator:uav_burstcount
	wire          expansion_jp1_s1_agent_rf_source_valid;                                                              // Expansion_JP1_s1_agent:rf_source_valid -> Expansion_JP1_s1_agent_rsp_fifo:in_valid
	wire  [137:0] expansion_jp1_s1_agent_rf_source_data;                                                               // Expansion_JP1_s1_agent:rf_source_data -> Expansion_JP1_s1_agent_rsp_fifo:in_data
	wire          expansion_jp1_s1_agent_rf_source_ready;                                                              // Expansion_JP1_s1_agent_rsp_fifo:in_ready -> Expansion_JP1_s1_agent:rf_source_ready
	wire          expansion_jp1_s1_agent_rf_source_startofpacket;                                                      // Expansion_JP1_s1_agent:rf_source_startofpacket -> Expansion_JP1_s1_agent_rsp_fifo:in_startofpacket
	wire          expansion_jp1_s1_agent_rf_source_endofpacket;                                                        // Expansion_JP1_s1_agent:rf_source_endofpacket -> Expansion_JP1_s1_agent_rsp_fifo:in_endofpacket
	wire          expansion_jp1_s1_agent_rsp_fifo_out_valid;                                                           // Expansion_JP1_s1_agent_rsp_fifo:out_valid -> Expansion_JP1_s1_agent:rf_sink_valid
	wire  [137:0] expansion_jp1_s1_agent_rsp_fifo_out_data;                                                            // Expansion_JP1_s1_agent_rsp_fifo:out_data -> Expansion_JP1_s1_agent:rf_sink_data
	wire          expansion_jp1_s1_agent_rsp_fifo_out_ready;                                                           // Expansion_JP1_s1_agent:rf_sink_ready -> Expansion_JP1_s1_agent_rsp_fifo:out_ready
	wire          expansion_jp1_s1_agent_rsp_fifo_out_startofpacket;                                                   // Expansion_JP1_s1_agent_rsp_fifo:out_startofpacket -> Expansion_JP1_s1_agent:rf_sink_startofpacket
	wire          expansion_jp1_s1_agent_rsp_fifo_out_endofpacket;                                                     // Expansion_JP1_s1_agent_rsp_fifo:out_endofpacket -> Expansion_JP1_s1_agent:rf_sink_endofpacket
	wire          expansion_jp1_s1_agent_rdata_fifo_src_valid;                                                         // Expansion_JP1_s1_agent:rdata_fifo_src_valid -> Expansion_JP1_s1_agent_rdata_fifo:in_valid
	wire   [33:0] expansion_jp1_s1_agent_rdata_fifo_src_data;                                                          // Expansion_JP1_s1_agent:rdata_fifo_src_data -> Expansion_JP1_s1_agent_rdata_fifo:in_data
	wire          expansion_jp1_s1_agent_rdata_fifo_src_ready;                                                         // Expansion_JP1_s1_agent_rdata_fifo:in_ready -> Expansion_JP1_s1_agent:rdata_fifo_src_ready
	wire   [31:0] expansion_jp2_s1_agent_m0_readdata;                                                                  // Expansion_JP2_s1_translator:uav_readdata -> Expansion_JP2_s1_agent:m0_readdata
	wire          expansion_jp2_s1_agent_m0_waitrequest;                                                               // Expansion_JP2_s1_translator:uav_waitrequest -> Expansion_JP2_s1_agent:m0_waitrequest
	wire          expansion_jp2_s1_agent_m0_debugaccess;                                                               // Expansion_JP2_s1_agent:m0_debugaccess -> Expansion_JP2_s1_translator:uav_debugaccess
	wire   [31:0] expansion_jp2_s1_agent_m0_address;                                                                   // Expansion_JP2_s1_agent:m0_address -> Expansion_JP2_s1_translator:uav_address
	wire    [3:0] expansion_jp2_s1_agent_m0_byteenable;                                                                // Expansion_JP2_s1_agent:m0_byteenable -> Expansion_JP2_s1_translator:uav_byteenable
	wire          expansion_jp2_s1_agent_m0_read;                                                                      // Expansion_JP2_s1_agent:m0_read -> Expansion_JP2_s1_translator:uav_read
	wire          expansion_jp2_s1_agent_m0_readdatavalid;                                                             // Expansion_JP2_s1_translator:uav_readdatavalid -> Expansion_JP2_s1_agent:m0_readdatavalid
	wire          expansion_jp2_s1_agent_m0_lock;                                                                      // Expansion_JP2_s1_agent:m0_lock -> Expansion_JP2_s1_translator:uav_lock
	wire   [31:0] expansion_jp2_s1_agent_m0_writedata;                                                                 // Expansion_JP2_s1_agent:m0_writedata -> Expansion_JP2_s1_translator:uav_writedata
	wire          expansion_jp2_s1_agent_m0_write;                                                                     // Expansion_JP2_s1_agent:m0_write -> Expansion_JP2_s1_translator:uav_write
	wire    [2:0] expansion_jp2_s1_agent_m0_burstcount;                                                                // Expansion_JP2_s1_agent:m0_burstcount -> Expansion_JP2_s1_translator:uav_burstcount
	wire          expansion_jp2_s1_agent_rf_source_valid;                                                              // Expansion_JP2_s1_agent:rf_source_valid -> Expansion_JP2_s1_agent_rsp_fifo:in_valid
	wire  [137:0] expansion_jp2_s1_agent_rf_source_data;                                                               // Expansion_JP2_s1_agent:rf_source_data -> Expansion_JP2_s1_agent_rsp_fifo:in_data
	wire          expansion_jp2_s1_agent_rf_source_ready;                                                              // Expansion_JP2_s1_agent_rsp_fifo:in_ready -> Expansion_JP2_s1_agent:rf_source_ready
	wire          expansion_jp2_s1_agent_rf_source_startofpacket;                                                      // Expansion_JP2_s1_agent:rf_source_startofpacket -> Expansion_JP2_s1_agent_rsp_fifo:in_startofpacket
	wire          expansion_jp2_s1_agent_rf_source_endofpacket;                                                        // Expansion_JP2_s1_agent:rf_source_endofpacket -> Expansion_JP2_s1_agent_rsp_fifo:in_endofpacket
	wire          expansion_jp2_s1_agent_rsp_fifo_out_valid;                                                           // Expansion_JP2_s1_agent_rsp_fifo:out_valid -> Expansion_JP2_s1_agent:rf_sink_valid
	wire  [137:0] expansion_jp2_s1_agent_rsp_fifo_out_data;                                                            // Expansion_JP2_s1_agent_rsp_fifo:out_data -> Expansion_JP2_s1_agent:rf_sink_data
	wire          expansion_jp2_s1_agent_rsp_fifo_out_ready;                                                           // Expansion_JP2_s1_agent:rf_sink_ready -> Expansion_JP2_s1_agent_rsp_fifo:out_ready
	wire          expansion_jp2_s1_agent_rsp_fifo_out_startofpacket;                                                   // Expansion_JP2_s1_agent_rsp_fifo:out_startofpacket -> Expansion_JP2_s1_agent:rf_sink_startofpacket
	wire          expansion_jp2_s1_agent_rsp_fifo_out_endofpacket;                                                     // Expansion_JP2_s1_agent_rsp_fifo:out_endofpacket -> Expansion_JP2_s1_agent:rf_sink_endofpacket
	wire          expansion_jp2_s1_agent_rdata_fifo_src_valid;                                                         // Expansion_JP2_s1_agent:rdata_fifo_src_valid -> Expansion_JP2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] expansion_jp2_s1_agent_rdata_fifo_src_data;                                                          // Expansion_JP2_s1_agent:rdata_fifo_src_data -> Expansion_JP2_s1_agent_rdata_fifo:in_data
	wire          expansion_jp2_s1_agent_rdata_fifo_src_ready;                                                         // Expansion_JP2_s1_agent_rdata_fifo:in_ready -> Expansion_JP2_s1_agent:rdata_fifo_src_ready
	wire   [31:0] interval_timer_s1_agent_m0_readdata;                                                                 // Interval_Timer_s1_translator:uav_readdata -> Interval_Timer_s1_agent:m0_readdata
	wire          interval_timer_s1_agent_m0_waitrequest;                                                              // Interval_Timer_s1_translator:uav_waitrequest -> Interval_Timer_s1_agent:m0_waitrequest
	wire          interval_timer_s1_agent_m0_debugaccess;                                                              // Interval_Timer_s1_agent:m0_debugaccess -> Interval_Timer_s1_translator:uav_debugaccess
	wire   [31:0] interval_timer_s1_agent_m0_address;                                                                  // Interval_Timer_s1_agent:m0_address -> Interval_Timer_s1_translator:uav_address
	wire    [3:0] interval_timer_s1_agent_m0_byteenable;                                                               // Interval_Timer_s1_agent:m0_byteenable -> Interval_Timer_s1_translator:uav_byteenable
	wire          interval_timer_s1_agent_m0_read;                                                                     // Interval_Timer_s1_agent:m0_read -> Interval_Timer_s1_translator:uav_read
	wire          interval_timer_s1_agent_m0_readdatavalid;                                                            // Interval_Timer_s1_translator:uav_readdatavalid -> Interval_Timer_s1_agent:m0_readdatavalid
	wire          interval_timer_s1_agent_m0_lock;                                                                     // Interval_Timer_s1_agent:m0_lock -> Interval_Timer_s1_translator:uav_lock
	wire   [31:0] interval_timer_s1_agent_m0_writedata;                                                                // Interval_Timer_s1_agent:m0_writedata -> Interval_Timer_s1_translator:uav_writedata
	wire          interval_timer_s1_agent_m0_write;                                                                    // Interval_Timer_s1_agent:m0_write -> Interval_Timer_s1_translator:uav_write
	wire    [2:0] interval_timer_s1_agent_m0_burstcount;                                                               // Interval_Timer_s1_agent:m0_burstcount -> Interval_Timer_s1_translator:uav_burstcount
	wire          interval_timer_s1_agent_rf_source_valid;                                                             // Interval_Timer_s1_agent:rf_source_valid -> Interval_Timer_s1_agent_rsp_fifo:in_valid
	wire  [137:0] interval_timer_s1_agent_rf_source_data;                                                              // Interval_Timer_s1_agent:rf_source_data -> Interval_Timer_s1_agent_rsp_fifo:in_data
	wire          interval_timer_s1_agent_rf_source_ready;                                                             // Interval_Timer_s1_agent_rsp_fifo:in_ready -> Interval_Timer_s1_agent:rf_source_ready
	wire          interval_timer_s1_agent_rf_source_startofpacket;                                                     // Interval_Timer_s1_agent:rf_source_startofpacket -> Interval_Timer_s1_agent_rsp_fifo:in_startofpacket
	wire          interval_timer_s1_agent_rf_source_endofpacket;                                                       // Interval_Timer_s1_agent:rf_source_endofpacket -> Interval_Timer_s1_agent_rsp_fifo:in_endofpacket
	wire          interval_timer_s1_agent_rsp_fifo_out_valid;                                                          // Interval_Timer_s1_agent_rsp_fifo:out_valid -> Interval_Timer_s1_agent:rf_sink_valid
	wire  [137:0] interval_timer_s1_agent_rsp_fifo_out_data;                                                           // Interval_Timer_s1_agent_rsp_fifo:out_data -> Interval_Timer_s1_agent:rf_sink_data
	wire          interval_timer_s1_agent_rsp_fifo_out_ready;                                                          // Interval_Timer_s1_agent:rf_sink_ready -> Interval_Timer_s1_agent_rsp_fifo:out_ready
	wire          interval_timer_s1_agent_rsp_fifo_out_startofpacket;                                                  // Interval_Timer_s1_agent_rsp_fifo:out_startofpacket -> Interval_Timer_s1_agent:rf_sink_startofpacket
	wire          interval_timer_s1_agent_rsp_fifo_out_endofpacket;                                                    // Interval_Timer_s1_agent_rsp_fifo:out_endofpacket -> Interval_Timer_s1_agent:rf_sink_endofpacket
	wire          interval_timer_s1_agent_rdata_fifo_src_valid;                                                        // Interval_Timer_s1_agent:rdata_fifo_src_valid -> Interval_Timer_s1_agent_rdata_fifo:in_valid
	wire   [33:0] interval_timer_s1_agent_rdata_fifo_src_data;                                                         // Interval_Timer_s1_agent:rdata_fifo_src_data -> Interval_Timer_s1_agent_rdata_fifo:in_data
	wire          interval_timer_s1_agent_rdata_fifo_src_ready;                                                        // Interval_Timer_s1_agent_rdata_fifo:in_ready -> Interval_Timer_s1_agent:rdata_fifo_src_ready
	wire   [31:0] interval_timer_2_s1_agent_m0_readdata;                                                               // Interval_Timer_2_s1_translator:uav_readdata -> Interval_Timer_2_s1_agent:m0_readdata
	wire          interval_timer_2_s1_agent_m0_waitrequest;                                                            // Interval_Timer_2_s1_translator:uav_waitrequest -> Interval_Timer_2_s1_agent:m0_waitrequest
	wire          interval_timer_2_s1_agent_m0_debugaccess;                                                            // Interval_Timer_2_s1_agent:m0_debugaccess -> Interval_Timer_2_s1_translator:uav_debugaccess
	wire   [31:0] interval_timer_2_s1_agent_m0_address;                                                                // Interval_Timer_2_s1_agent:m0_address -> Interval_Timer_2_s1_translator:uav_address
	wire    [3:0] interval_timer_2_s1_agent_m0_byteenable;                                                             // Interval_Timer_2_s1_agent:m0_byteenable -> Interval_Timer_2_s1_translator:uav_byteenable
	wire          interval_timer_2_s1_agent_m0_read;                                                                   // Interval_Timer_2_s1_agent:m0_read -> Interval_Timer_2_s1_translator:uav_read
	wire          interval_timer_2_s1_agent_m0_readdatavalid;                                                          // Interval_Timer_2_s1_translator:uav_readdatavalid -> Interval_Timer_2_s1_agent:m0_readdatavalid
	wire          interval_timer_2_s1_agent_m0_lock;                                                                   // Interval_Timer_2_s1_agent:m0_lock -> Interval_Timer_2_s1_translator:uav_lock
	wire   [31:0] interval_timer_2_s1_agent_m0_writedata;                                                              // Interval_Timer_2_s1_agent:m0_writedata -> Interval_Timer_2_s1_translator:uav_writedata
	wire          interval_timer_2_s1_agent_m0_write;                                                                  // Interval_Timer_2_s1_agent:m0_write -> Interval_Timer_2_s1_translator:uav_write
	wire    [2:0] interval_timer_2_s1_agent_m0_burstcount;                                                             // Interval_Timer_2_s1_agent:m0_burstcount -> Interval_Timer_2_s1_translator:uav_burstcount
	wire          interval_timer_2_s1_agent_rf_source_valid;                                                           // Interval_Timer_2_s1_agent:rf_source_valid -> Interval_Timer_2_s1_agent_rsp_fifo:in_valid
	wire  [137:0] interval_timer_2_s1_agent_rf_source_data;                                                            // Interval_Timer_2_s1_agent:rf_source_data -> Interval_Timer_2_s1_agent_rsp_fifo:in_data
	wire          interval_timer_2_s1_agent_rf_source_ready;                                                           // Interval_Timer_2_s1_agent_rsp_fifo:in_ready -> Interval_Timer_2_s1_agent:rf_source_ready
	wire          interval_timer_2_s1_agent_rf_source_startofpacket;                                                   // Interval_Timer_2_s1_agent:rf_source_startofpacket -> Interval_Timer_2_s1_agent_rsp_fifo:in_startofpacket
	wire          interval_timer_2_s1_agent_rf_source_endofpacket;                                                     // Interval_Timer_2_s1_agent:rf_source_endofpacket -> Interval_Timer_2_s1_agent_rsp_fifo:in_endofpacket
	wire          interval_timer_2_s1_agent_rsp_fifo_out_valid;                                                        // Interval_Timer_2_s1_agent_rsp_fifo:out_valid -> Interval_Timer_2_s1_agent:rf_sink_valid
	wire  [137:0] interval_timer_2_s1_agent_rsp_fifo_out_data;                                                         // Interval_Timer_2_s1_agent_rsp_fifo:out_data -> Interval_Timer_2_s1_agent:rf_sink_data
	wire          interval_timer_2_s1_agent_rsp_fifo_out_ready;                                                        // Interval_Timer_2_s1_agent:rf_sink_ready -> Interval_Timer_2_s1_agent_rsp_fifo:out_ready
	wire          interval_timer_2_s1_agent_rsp_fifo_out_startofpacket;                                                // Interval_Timer_2_s1_agent_rsp_fifo:out_startofpacket -> Interval_Timer_2_s1_agent:rf_sink_startofpacket
	wire          interval_timer_2_s1_agent_rsp_fifo_out_endofpacket;                                                  // Interval_Timer_2_s1_agent_rsp_fifo:out_endofpacket -> Interval_Timer_2_s1_agent:rf_sink_endofpacket
	wire          interval_timer_2_s1_agent_rdata_fifo_src_valid;                                                      // Interval_Timer_2_s1_agent:rdata_fifo_src_valid -> Interval_Timer_2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] interval_timer_2_s1_agent_rdata_fifo_src_data;                                                       // Interval_Timer_2_s1_agent:rdata_fifo_src_data -> Interval_Timer_2_s1_agent_rdata_fifo:in_data
	wire          interval_timer_2_s1_agent_rdata_fifo_src_ready;                                                      // Interval_Timer_2_s1_agent_rdata_fifo:in_ready -> Interval_Timer_2_s1_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdata;                                             // JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_waitrequest;                                          // JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_debugaccess;                                          // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_address;                                              // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_address -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_byteenable;                                           // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_read;                                                 // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_read -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdatavalid;                                        // JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_lock;                                                 // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_writedata;                                            // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_write;                                                // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_write -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_burstcount;                                           // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_for_ARM_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_valid;                                         // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [137:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_data;                                          // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_ready;                                         // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_startofpacket;                                 // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_endofpacket;                                   // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                      // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [137:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                                       // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                      // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                              // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                    // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                                     // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                    // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:in_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdata;                                             // JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_waitrequest;                                          // JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_debugaccess;                                          // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_address;                                              // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_address -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_byteenable;                                           // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_read;                                                 // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_read -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdatavalid;                                        // JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_lock;                                                 // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_writedata;                                            // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_write;                                                // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_write -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_burstcount;                                           // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_for_ARM_1_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_valid;                                         // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [137:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_data;                                          // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_ready;                                         // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_startofpacket;                                 // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_endofpacket;                                   // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                      // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_valid
	wire  [137:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_data;                                       // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                      // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                              // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                    // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_src_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_data;                                     // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_src_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                    // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:in_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] pixel_dma_addr_translation_slave_agent_m0_readdata;                                                  // Pixel_DMA_Addr_Translation_slave_translator:uav_readdata -> Pixel_DMA_Addr_Translation_slave_agent:m0_readdata
	wire          pixel_dma_addr_translation_slave_agent_m0_waitrequest;                                               // Pixel_DMA_Addr_Translation_slave_translator:uav_waitrequest -> Pixel_DMA_Addr_Translation_slave_agent:m0_waitrequest
	wire          pixel_dma_addr_translation_slave_agent_m0_debugaccess;                                               // Pixel_DMA_Addr_Translation_slave_agent:m0_debugaccess -> Pixel_DMA_Addr_Translation_slave_translator:uav_debugaccess
	wire   [31:0] pixel_dma_addr_translation_slave_agent_m0_address;                                                   // Pixel_DMA_Addr_Translation_slave_agent:m0_address -> Pixel_DMA_Addr_Translation_slave_translator:uav_address
	wire    [3:0] pixel_dma_addr_translation_slave_agent_m0_byteenable;                                                // Pixel_DMA_Addr_Translation_slave_agent:m0_byteenable -> Pixel_DMA_Addr_Translation_slave_translator:uav_byteenable
	wire          pixel_dma_addr_translation_slave_agent_m0_read;                                                      // Pixel_DMA_Addr_Translation_slave_agent:m0_read -> Pixel_DMA_Addr_Translation_slave_translator:uav_read
	wire          pixel_dma_addr_translation_slave_agent_m0_readdatavalid;                                             // Pixel_DMA_Addr_Translation_slave_translator:uav_readdatavalid -> Pixel_DMA_Addr_Translation_slave_agent:m0_readdatavalid
	wire          pixel_dma_addr_translation_slave_agent_m0_lock;                                                      // Pixel_DMA_Addr_Translation_slave_agent:m0_lock -> Pixel_DMA_Addr_Translation_slave_translator:uav_lock
	wire   [31:0] pixel_dma_addr_translation_slave_agent_m0_writedata;                                                 // Pixel_DMA_Addr_Translation_slave_agent:m0_writedata -> Pixel_DMA_Addr_Translation_slave_translator:uav_writedata
	wire          pixel_dma_addr_translation_slave_agent_m0_write;                                                     // Pixel_DMA_Addr_Translation_slave_agent:m0_write -> Pixel_DMA_Addr_Translation_slave_translator:uav_write
	wire    [2:0] pixel_dma_addr_translation_slave_agent_m0_burstcount;                                                // Pixel_DMA_Addr_Translation_slave_agent:m0_burstcount -> Pixel_DMA_Addr_Translation_slave_translator:uav_burstcount
	wire          pixel_dma_addr_translation_slave_agent_rf_source_valid;                                              // Pixel_DMA_Addr_Translation_slave_agent:rf_source_valid -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_valid
	wire  [137:0] pixel_dma_addr_translation_slave_agent_rf_source_data;                                               // Pixel_DMA_Addr_Translation_slave_agent:rf_source_data -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_data
	wire          pixel_dma_addr_translation_slave_agent_rf_source_ready;                                              // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_ready -> Pixel_DMA_Addr_Translation_slave_agent:rf_source_ready
	wire          pixel_dma_addr_translation_slave_agent_rf_source_startofpacket;                                      // Pixel_DMA_Addr_Translation_slave_agent:rf_source_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_startofpacket
	wire          pixel_dma_addr_translation_slave_agent_rf_source_endofpacket;                                        // Pixel_DMA_Addr_Translation_slave_agent:rf_source_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:in_endofpacket
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid;                                           // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_valid -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_valid
	wire  [137:0] pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data;                                            // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_data -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_data
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready;                                           // Pixel_DMA_Addr_Translation_slave_agent:rf_sink_ready -> Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_ready
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket;                                   // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_startofpacket
	wire          pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket;                                     // Pixel_DMA_Addr_Translation_slave_agent_rsp_fifo:out_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent:rf_sink_endofpacket
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid;                                         // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_valid -> Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:in_valid
	wire   [33:0] pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data;                                          // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_data -> Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:in_data
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready;                                         // Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:in_ready -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_src_ready
	wire   [31:0] video_in_dma_addr_translation_slave_agent_m0_readdata;                                               // Video_In_DMA_Addr_Translation_slave_translator:uav_readdata -> Video_In_DMA_Addr_Translation_slave_agent:m0_readdata
	wire          video_in_dma_addr_translation_slave_agent_m0_waitrequest;                                            // Video_In_DMA_Addr_Translation_slave_translator:uav_waitrequest -> Video_In_DMA_Addr_Translation_slave_agent:m0_waitrequest
	wire          video_in_dma_addr_translation_slave_agent_m0_debugaccess;                                            // Video_In_DMA_Addr_Translation_slave_agent:m0_debugaccess -> Video_In_DMA_Addr_Translation_slave_translator:uav_debugaccess
	wire   [31:0] video_in_dma_addr_translation_slave_agent_m0_address;                                                // Video_In_DMA_Addr_Translation_slave_agent:m0_address -> Video_In_DMA_Addr_Translation_slave_translator:uav_address
	wire    [3:0] video_in_dma_addr_translation_slave_agent_m0_byteenable;                                             // Video_In_DMA_Addr_Translation_slave_agent:m0_byteenable -> Video_In_DMA_Addr_Translation_slave_translator:uav_byteenable
	wire          video_in_dma_addr_translation_slave_agent_m0_read;                                                   // Video_In_DMA_Addr_Translation_slave_agent:m0_read -> Video_In_DMA_Addr_Translation_slave_translator:uav_read
	wire          video_in_dma_addr_translation_slave_agent_m0_readdatavalid;                                          // Video_In_DMA_Addr_Translation_slave_translator:uav_readdatavalid -> Video_In_DMA_Addr_Translation_slave_agent:m0_readdatavalid
	wire          video_in_dma_addr_translation_slave_agent_m0_lock;                                                   // Video_In_DMA_Addr_Translation_slave_agent:m0_lock -> Video_In_DMA_Addr_Translation_slave_translator:uav_lock
	wire   [31:0] video_in_dma_addr_translation_slave_agent_m0_writedata;                                              // Video_In_DMA_Addr_Translation_slave_agent:m0_writedata -> Video_In_DMA_Addr_Translation_slave_translator:uav_writedata
	wire          video_in_dma_addr_translation_slave_agent_m0_write;                                                  // Video_In_DMA_Addr_Translation_slave_agent:m0_write -> Video_In_DMA_Addr_Translation_slave_translator:uav_write
	wire    [2:0] video_in_dma_addr_translation_slave_agent_m0_burstcount;                                             // Video_In_DMA_Addr_Translation_slave_agent:m0_burstcount -> Video_In_DMA_Addr_Translation_slave_translator:uav_burstcount
	wire          video_in_dma_addr_translation_slave_agent_rf_source_valid;                                           // Video_In_DMA_Addr_Translation_slave_agent:rf_source_valid -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_valid
	wire  [137:0] video_in_dma_addr_translation_slave_agent_rf_source_data;                                            // Video_In_DMA_Addr_Translation_slave_agent:rf_source_data -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_data
	wire          video_in_dma_addr_translation_slave_agent_rf_source_ready;                                           // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_ready -> Video_In_DMA_Addr_Translation_slave_agent:rf_source_ready
	wire          video_in_dma_addr_translation_slave_agent_rf_source_startofpacket;                                   // Video_In_DMA_Addr_Translation_slave_agent:rf_source_startofpacket -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_startofpacket
	wire          video_in_dma_addr_translation_slave_agent_rf_source_endofpacket;                                     // Video_In_DMA_Addr_Translation_slave_agent:rf_source_endofpacket -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:in_endofpacket
	wire          video_in_dma_addr_translation_slave_agent_rsp_fifo_out_valid;                                        // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_valid -> Video_In_DMA_Addr_Translation_slave_agent:rf_sink_valid
	wire  [137:0] video_in_dma_addr_translation_slave_agent_rsp_fifo_out_data;                                         // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_data -> Video_In_DMA_Addr_Translation_slave_agent:rf_sink_data
	wire          video_in_dma_addr_translation_slave_agent_rsp_fifo_out_ready;                                        // Video_In_DMA_Addr_Translation_slave_agent:rf_sink_ready -> Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_ready
	wire          video_in_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket;                                // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_startofpacket -> Video_In_DMA_Addr_Translation_slave_agent:rf_sink_startofpacket
	wire          video_in_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket;                                  // Video_In_DMA_Addr_Translation_slave_agent_rsp_fifo:out_endofpacket -> Video_In_DMA_Addr_Translation_slave_agent:rf_sink_endofpacket
	wire          video_in_dma_addr_translation_slave_agent_rdata_fifo_src_valid;                                      // Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_src_valid -> Video_In_DMA_Addr_Translation_slave_agent_rdata_fifo:in_valid
	wire   [33:0] video_in_dma_addr_translation_slave_agent_rdata_fifo_src_data;                                       // Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_src_data -> Video_In_DMA_Addr_Translation_slave_agent_rdata_fifo:in_data
	wire          video_in_dma_addr_translation_slave_agent_rdata_fifo_src_ready;                                      // Video_In_DMA_Addr_Translation_slave_agent_rdata_fifo:in_ready -> Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                                       // JTAG_UART_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                                    // JTAG_UART_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                                    // JTAG_UART_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                                        // JTAG_UART_avalon_jtag_slave_agent:m0_address -> JTAG_UART_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                                     // JTAG_UART_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                                           // JTAG_UART_avalon_jtag_slave_agent:m0_read -> JTAG_UART_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                                  // JTAG_UART_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                                           // JTAG_UART_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                                      // JTAG_UART_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                                          // JTAG_UART_avalon_jtag_slave_agent:m0_write -> JTAG_UART_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                                     // JTAG_UART_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                                   // JTAG_UART_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [137:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                                    // JTAG_UART_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                                   // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                                           // JTAG_UART_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                                             // JTAG_UART_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                                // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_valid
	wire  [137:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                                 // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                                // JTAG_UART_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                                        // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                          // JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                              // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_valid -> JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                                               // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_data -> JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                              // JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:in_ready -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_022_src_valid;                                                                               // cmd_mux_022:src_valid -> JTAG_UART_avalon_jtag_slave_agent:cp_valid
	wire  [136:0] cmd_mux_022_src_data;                                                                                // cmd_mux_022:src_data -> JTAG_UART_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_022_src_ready;                                                                               // JTAG_UART_avalon_jtag_slave_agent:cp_ready -> cmd_mux_022:src_ready
	wire   [36:0] cmd_mux_022_src_channel;                                                                             // cmd_mux_022:src_channel -> JTAG_UART_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_022_src_startofpacket;                                                                       // cmd_mux_022:src_startofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_022_src_endofpacket;                                                                         // cmd_mux_022:src_endofpacket -> JTAG_UART_avalon_jtag_slave_agent:cp_endofpacket
	wire    [7:0] vga_subsystem_char_buffer_slave_agent_m0_readdata;                                                   // VGA_Subsystem_char_buffer_slave_translator:uav_readdata -> VGA_Subsystem_char_buffer_slave_agent:m0_readdata
	wire          vga_subsystem_char_buffer_slave_agent_m0_waitrequest;                                                // VGA_Subsystem_char_buffer_slave_translator:uav_waitrequest -> VGA_Subsystem_char_buffer_slave_agent:m0_waitrequest
	wire          vga_subsystem_char_buffer_slave_agent_m0_debugaccess;                                                // VGA_Subsystem_char_buffer_slave_agent:m0_debugaccess -> VGA_Subsystem_char_buffer_slave_translator:uav_debugaccess
	wire   [31:0] vga_subsystem_char_buffer_slave_agent_m0_address;                                                    // VGA_Subsystem_char_buffer_slave_agent:m0_address -> VGA_Subsystem_char_buffer_slave_translator:uav_address
	wire    [0:0] vga_subsystem_char_buffer_slave_agent_m0_byteenable;                                                 // VGA_Subsystem_char_buffer_slave_agent:m0_byteenable -> VGA_Subsystem_char_buffer_slave_translator:uav_byteenable
	wire          vga_subsystem_char_buffer_slave_agent_m0_read;                                                       // VGA_Subsystem_char_buffer_slave_agent:m0_read -> VGA_Subsystem_char_buffer_slave_translator:uav_read
	wire          vga_subsystem_char_buffer_slave_agent_m0_readdatavalid;                                              // VGA_Subsystem_char_buffer_slave_translator:uav_readdatavalid -> VGA_Subsystem_char_buffer_slave_agent:m0_readdatavalid
	wire          vga_subsystem_char_buffer_slave_agent_m0_lock;                                                       // VGA_Subsystem_char_buffer_slave_agent:m0_lock -> VGA_Subsystem_char_buffer_slave_translator:uav_lock
	wire    [7:0] vga_subsystem_char_buffer_slave_agent_m0_writedata;                                                  // VGA_Subsystem_char_buffer_slave_agent:m0_writedata -> VGA_Subsystem_char_buffer_slave_translator:uav_writedata
	wire          vga_subsystem_char_buffer_slave_agent_m0_write;                                                      // VGA_Subsystem_char_buffer_slave_agent:m0_write -> VGA_Subsystem_char_buffer_slave_translator:uav_write
	wire    [0:0] vga_subsystem_char_buffer_slave_agent_m0_burstcount;                                                 // VGA_Subsystem_char_buffer_slave_agent:m0_burstcount -> VGA_Subsystem_char_buffer_slave_translator:uav_burstcount
	wire          vga_subsystem_char_buffer_slave_agent_rf_source_valid;                                               // VGA_Subsystem_char_buffer_slave_agent:rf_source_valid -> VGA_Subsystem_char_buffer_slave_agent_rsp_fifo:in_valid
	wire  [110:0] vga_subsystem_char_buffer_slave_agent_rf_source_data;                                                // VGA_Subsystem_char_buffer_slave_agent:rf_source_data -> VGA_Subsystem_char_buffer_slave_agent_rsp_fifo:in_data
	wire          vga_subsystem_char_buffer_slave_agent_rf_source_ready;                                               // VGA_Subsystem_char_buffer_slave_agent_rsp_fifo:in_ready -> VGA_Subsystem_char_buffer_slave_agent:rf_source_ready
	wire          vga_subsystem_char_buffer_slave_agent_rf_source_startofpacket;                                       // VGA_Subsystem_char_buffer_slave_agent:rf_source_startofpacket -> VGA_Subsystem_char_buffer_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_subsystem_char_buffer_slave_agent_rf_source_endofpacket;                                         // VGA_Subsystem_char_buffer_slave_agent:rf_source_endofpacket -> VGA_Subsystem_char_buffer_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_valid;                                            // VGA_Subsystem_char_buffer_slave_agent_rsp_fifo:out_valid -> VGA_Subsystem_char_buffer_slave_agent:rf_sink_valid
	wire  [110:0] vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_data;                                             // VGA_Subsystem_char_buffer_slave_agent_rsp_fifo:out_data -> VGA_Subsystem_char_buffer_slave_agent:rf_sink_data
	wire          vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_ready;                                            // VGA_Subsystem_char_buffer_slave_agent:rf_sink_ready -> VGA_Subsystem_char_buffer_slave_agent_rsp_fifo:out_ready
	wire          vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_startofpacket;                                    // VGA_Subsystem_char_buffer_slave_agent_rsp_fifo:out_startofpacket -> VGA_Subsystem_char_buffer_slave_agent:rf_sink_startofpacket
	wire          vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_endofpacket;                                      // VGA_Subsystem_char_buffer_slave_agent_rsp_fifo:out_endofpacket -> VGA_Subsystem_char_buffer_slave_agent:rf_sink_endofpacket
	wire          vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_valid;                                          // VGA_Subsystem_char_buffer_slave_agent:rdata_fifo_src_valid -> VGA_Subsystem_char_buffer_slave_agent_rdata_fifo:in_valid
	wire    [9:0] vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_data;                                           // VGA_Subsystem_char_buffer_slave_agent:rdata_fifo_src_data -> VGA_Subsystem_char_buffer_slave_agent_rdata_fifo:in_data
	wire          vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_ready;                                          // VGA_Subsystem_char_buffer_slave_agent_rdata_fifo:in_ready -> VGA_Subsystem_char_buffer_slave_agent:rdata_fifo_src_ready
	wire   [31:0] vga_subsystem_pixel_dma_control_slave_agent_m0_readdata;                                             // VGA_Subsystem_pixel_dma_control_slave_translator:uav_readdata -> VGA_Subsystem_pixel_dma_control_slave_agent:m0_readdata
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_waitrequest;                                          // VGA_Subsystem_pixel_dma_control_slave_translator:uav_waitrequest -> VGA_Subsystem_pixel_dma_control_slave_agent:m0_waitrequest
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_debugaccess;                                          // VGA_Subsystem_pixel_dma_control_slave_agent:m0_debugaccess -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_debugaccess
	wire   [31:0] vga_subsystem_pixel_dma_control_slave_agent_m0_address;                                              // VGA_Subsystem_pixel_dma_control_slave_agent:m0_address -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_address
	wire    [3:0] vga_subsystem_pixel_dma_control_slave_agent_m0_byteenable;                                           // VGA_Subsystem_pixel_dma_control_slave_agent:m0_byteenable -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_byteenable
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_read;                                                 // VGA_Subsystem_pixel_dma_control_slave_agent:m0_read -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_read
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_readdatavalid;                                        // VGA_Subsystem_pixel_dma_control_slave_translator:uav_readdatavalid -> VGA_Subsystem_pixel_dma_control_slave_agent:m0_readdatavalid
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_lock;                                                 // VGA_Subsystem_pixel_dma_control_slave_agent:m0_lock -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_lock
	wire   [31:0] vga_subsystem_pixel_dma_control_slave_agent_m0_writedata;                                            // VGA_Subsystem_pixel_dma_control_slave_agent:m0_writedata -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_writedata
	wire          vga_subsystem_pixel_dma_control_slave_agent_m0_write;                                                // VGA_Subsystem_pixel_dma_control_slave_agent:m0_write -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_write
	wire    [2:0] vga_subsystem_pixel_dma_control_slave_agent_m0_burstcount;                                           // VGA_Subsystem_pixel_dma_control_slave_agent:m0_burstcount -> VGA_Subsystem_pixel_dma_control_slave_translator:uav_burstcount
	wire          vga_subsystem_pixel_dma_control_slave_agent_rf_source_valid;                                         // VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_valid -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_valid
	wire  [137:0] vga_subsystem_pixel_dma_control_slave_agent_rf_source_data;                                          // VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_data -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rf_source_ready;                                         // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_ready -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_ready
	wire          vga_subsystem_pixel_dma_control_slave_agent_rf_source_startofpacket;                                 // VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_startofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_startofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rf_source_endofpacket;                                   // VGA_Subsystem_pixel_dma_control_slave_agent:rf_source_endofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:in_endofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_valid;                                      // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_valid -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_valid
	wire  [137:0] vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_data;                                       // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_data -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_ready;                                      // VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_ready -> VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_ready
	wire          vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_startofpacket;                              // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_startofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_startofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_endofpacket;                                // VGA_Subsystem_pixel_dma_control_slave_agent_rsp_fifo:out_endofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent:rf_sink_endofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_valid;                                    // VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_src_valid -> VGA_Subsystem_pixel_dma_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_data;                                     // VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_src_data -> VGA_Subsystem_pixel_dma_control_slave_agent_rdata_fifo:in_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_ready;                                    // VGA_Subsystem_pixel_dma_control_slave_agent_rdata_fifo:in_ready -> VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_024_src_valid;                                                                               // cmd_mux_024:src_valid -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_valid
	wire  [136:0] cmd_mux_024_src_data;                                                                                // cmd_mux_024:src_data -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_data
	wire          cmd_mux_024_src_ready;                                                                               // VGA_Subsystem_pixel_dma_control_slave_agent:cp_ready -> cmd_mux_024:src_ready
	wire   [36:0] cmd_mux_024_src_channel;                                                                             // cmd_mux_024:src_channel -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_channel
	wire          cmd_mux_024_src_startofpacket;                                                                       // cmd_mux_024:src_startofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_startofpacket
	wire          cmd_mux_024_src_endofpacket;                                                                         // cmd_mux_024:src_endofpacket -> VGA_Subsystem_pixel_dma_control_slave_agent:cp_endofpacket
	wire   [15:0] sdram_s1_agent_m0_readdata;                                                                          // SDRAM_s1_translator:uav_readdata -> SDRAM_s1_agent:m0_readdata
	wire          sdram_s1_agent_m0_waitrequest;                                                                       // SDRAM_s1_translator:uav_waitrequest -> SDRAM_s1_agent:m0_waitrequest
	wire          sdram_s1_agent_m0_debugaccess;                                                                       // SDRAM_s1_agent:m0_debugaccess -> SDRAM_s1_translator:uav_debugaccess
	wire   [31:0] sdram_s1_agent_m0_address;                                                                           // SDRAM_s1_agent:m0_address -> SDRAM_s1_translator:uav_address
	wire    [1:0] sdram_s1_agent_m0_byteenable;                                                                        // SDRAM_s1_agent:m0_byteenable -> SDRAM_s1_translator:uav_byteenable
	wire          sdram_s1_agent_m0_read;                                                                              // SDRAM_s1_agent:m0_read -> SDRAM_s1_translator:uav_read
	wire          sdram_s1_agent_m0_readdatavalid;                                                                     // SDRAM_s1_translator:uav_readdatavalid -> SDRAM_s1_agent:m0_readdatavalid
	wire          sdram_s1_agent_m0_lock;                                                                              // SDRAM_s1_agent:m0_lock -> SDRAM_s1_translator:uav_lock
	wire   [15:0] sdram_s1_agent_m0_writedata;                                                                         // SDRAM_s1_agent:m0_writedata -> SDRAM_s1_translator:uav_writedata
	wire          sdram_s1_agent_m0_write;                                                                             // SDRAM_s1_agent:m0_write -> SDRAM_s1_translator:uav_write
	wire    [1:0] sdram_s1_agent_m0_burstcount;                                                                        // SDRAM_s1_agent:m0_burstcount -> SDRAM_s1_translator:uav_burstcount
	wire          sdram_s1_agent_rf_source_valid;                                                                      // SDRAM_s1_agent:rf_source_valid -> SDRAM_s1_agent_rsp_fifo:in_valid
	wire  [119:0] sdram_s1_agent_rf_source_data;                                                                       // SDRAM_s1_agent:rf_source_data -> SDRAM_s1_agent_rsp_fifo:in_data
	wire          sdram_s1_agent_rf_source_ready;                                                                      // SDRAM_s1_agent_rsp_fifo:in_ready -> SDRAM_s1_agent:rf_source_ready
	wire          sdram_s1_agent_rf_source_startofpacket;                                                              // SDRAM_s1_agent:rf_source_startofpacket -> SDRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_s1_agent_rf_source_endofpacket;                                                                // SDRAM_s1_agent:rf_source_endofpacket -> SDRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_s1_agent_rsp_fifo_out_valid;                                                                   // SDRAM_s1_agent_rsp_fifo:out_valid -> SDRAM_s1_agent:rf_sink_valid
	wire  [119:0] sdram_s1_agent_rsp_fifo_out_data;                                                                    // SDRAM_s1_agent_rsp_fifo:out_data -> SDRAM_s1_agent:rf_sink_data
	wire          sdram_s1_agent_rsp_fifo_out_ready;                                                                   // SDRAM_s1_agent:rf_sink_ready -> SDRAM_s1_agent_rsp_fifo:out_ready
	wire          sdram_s1_agent_rsp_fifo_out_startofpacket;                                                           // SDRAM_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_s1_agent:rf_sink_startofpacket
	wire          sdram_s1_agent_rsp_fifo_out_endofpacket;                                                             // SDRAM_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_s1_agent:rf_sink_endofpacket
	wire          sdram_s1_agent_rdata_fifo_src_valid;                                                                 // SDRAM_s1_agent:rdata_fifo_src_valid -> SDRAM_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_src_data;                                                                  // SDRAM_s1_agent:rdata_fifo_src_data -> SDRAM_s1_agent_rdata_fifo:in_data
	wire          sdram_s1_agent_rdata_fifo_src_ready;                                                                 // SDRAM_s1_agent_rdata_fifo:in_ready -> SDRAM_s1_agent:rdata_fifo_src_ready
	wire   [31:0] onchip_sram_s1_agent_m0_readdata;                                                                    // Onchip_SRAM_s1_translator:uav_readdata -> Onchip_SRAM_s1_agent:m0_readdata
	wire          onchip_sram_s1_agent_m0_waitrequest;                                                                 // Onchip_SRAM_s1_translator:uav_waitrequest -> Onchip_SRAM_s1_agent:m0_waitrequest
	wire          onchip_sram_s1_agent_m0_debugaccess;                                                                 // Onchip_SRAM_s1_agent:m0_debugaccess -> Onchip_SRAM_s1_translator:uav_debugaccess
	wire   [31:0] onchip_sram_s1_agent_m0_address;                                                                     // Onchip_SRAM_s1_agent:m0_address -> Onchip_SRAM_s1_translator:uav_address
	wire    [3:0] onchip_sram_s1_agent_m0_byteenable;                                                                  // Onchip_SRAM_s1_agent:m0_byteenable -> Onchip_SRAM_s1_translator:uav_byteenable
	wire          onchip_sram_s1_agent_m0_read;                                                                        // Onchip_SRAM_s1_agent:m0_read -> Onchip_SRAM_s1_translator:uav_read
	wire          onchip_sram_s1_agent_m0_readdatavalid;                                                               // Onchip_SRAM_s1_translator:uav_readdatavalid -> Onchip_SRAM_s1_agent:m0_readdatavalid
	wire          onchip_sram_s1_agent_m0_lock;                                                                        // Onchip_SRAM_s1_agent:m0_lock -> Onchip_SRAM_s1_translator:uav_lock
	wire   [31:0] onchip_sram_s1_agent_m0_writedata;                                                                   // Onchip_SRAM_s1_agent:m0_writedata -> Onchip_SRAM_s1_translator:uav_writedata
	wire          onchip_sram_s1_agent_m0_write;                                                                       // Onchip_SRAM_s1_agent:m0_write -> Onchip_SRAM_s1_translator:uav_write
	wire    [2:0] onchip_sram_s1_agent_m0_burstcount;                                                                  // Onchip_SRAM_s1_agent:m0_burstcount -> Onchip_SRAM_s1_translator:uav_burstcount
	wire          onchip_sram_s1_agent_rf_source_valid;                                                                // Onchip_SRAM_s1_agent:rf_source_valid -> Onchip_SRAM_s1_agent_rsp_fifo:in_valid
	wire  [137:0] onchip_sram_s1_agent_rf_source_data;                                                                 // Onchip_SRAM_s1_agent:rf_source_data -> Onchip_SRAM_s1_agent_rsp_fifo:in_data
	wire          onchip_sram_s1_agent_rf_source_ready;                                                                // Onchip_SRAM_s1_agent_rsp_fifo:in_ready -> Onchip_SRAM_s1_agent:rf_source_ready
	wire          onchip_sram_s1_agent_rf_source_startofpacket;                                                        // Onchip_SRAM_s1_agent:rf_source_startofpacket -> Onchip_SRAM_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_sram_s1_agent_rf_source_endofpacket;                                                          // Onchip_SRAM_s1_agent:rf_source_endofpacket -> Onchip_SRAM_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_sram_s1_agent_rsp_fifo_out_valid;                                                             // Onchip_SRAM_s1_agent_rsp_fifo:out_valid -> Onchip_SRAM_s1_agent:rf_sink_valid
	wire  [137:0] onchip_sram_s1_agent_rsp_fifo_out_data;                                                              // Onchip_SRAM_s1_agent_rsp_fifo:out_data -> Onchip_SRAM_s1_agent:rf_sink_data
	wire          onchip_sram_s1_agent_rsp_fifo_out_ready;                                                             // Onchip_SRAM_s1_agent:rf_sink_ready -> Onchip_SRAM_s1_agent_rsp_fifo:out_ready
	wire          onchip_sram_s1_agent_rsp_fifo_out_startofpacket;                                                     // Onchip_SRAM_s1_agent_rsp_fifo:out_startofpacket -> Onchip_SRAM_s1_agent:rf_sink_startofpacket
	wire          onchip_sram_s1_agent_rsp_fifo_out_endofpacket;                                                       // Onchip_SRAM_s1_agent_rsp_fifo:out_endofpacket -> Onchip_SRAM_s1_agent:rf_sink_endofpacket
	wire          onchip_sram_s1_agent_rdata_fifo_src_valid;                                                           // Onchip_SRAM_s1_agent:rdata_fifo_src_valid -> Onchip_SRAM_s1_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_sram_s1_agent_rdata_fifo_src_data;                                                            // Onchip_SRAM_s1_agent:rdata_fifo_src_data -> Onchip_SRAM_s1_agent_rdata_fifo:in_data
	wire          onchip_sram_s1_agent_rdata_fifo_src_ready;                                                           // Onchip_SRAM_s1_agent_rdata_fifo:in_ready -> Onchip_SRAM_s1_agent:rdata_fifo_src_ready
	wire   [31:0] video_in_subsystem_video_in_dma_control_slave_agent_m0_readdata;                                     // Video_In_Subsystem_video_in_dma_control_slave_translator:uav_readdata -> Video_In_Subsystem_video_in_dma_control_slave_agent:m0_readdata
	wire          video_in_subsystem_video_in_dma_control_slave_agent_m0_waitrequest;                                  // Video_In_Subsystem_video_in_dma_control_slave_translator:uav_waitrequest -> Video_In_Subsystem_video_in_dma_control_slave_agent:m0_waitrequest
	wire          video_in_subsystem_video_in_dma_control_slave_agent_m0_debugaccess;                                  // Video_In_Subsystem_video_in_dma_control_slave_agent:m0_debugaccess -> Video_In_Subsystem_video_in_dma_control_slave_translator:uav_debugaccess
	wire   [31:0] video_in_subsystem_video_in_dma_control_slave_agent_m0_address;                                      // Video_In_Subsystem_video_in_dma_control_slave_agent:m0_address -> Video_In_Subsystem_video_in_dma_control_slave_translator:uav_address
	wire    [3:0] video_in_subsystem_video_in_dma_control_slave_agent_m0_byteenable;                                   // Video_In_Subsystem_video_in_dma_control_slave_agent:m0_byteenable -> Video_In_Subsystem_video_in_dma_control_slave_translator:uav_byteenable
	wire          video_in_subsystem_video_in_dma_control_slave_agent_m0_read;                                         // Video_In_Subsystem_video_in_dma_control_slave_agent:m0_read -> Video_In_Subsystem_video_in_dma_control_slave_translator:uav_read
	wire          video_in_subsystem_video_in_dma_control_slave_agent_m0_readdatavalid;                                // Video_In_Subsystem_video_in_dma_control_slave_translator:uav_readdatavalid -> Video_In_Subsystem_video_in_dma_control_slave_agent:m0_readdatavalid
	wire          video_in_subsystem_video_in_dma_control_slave_agent_m0_lock;                                         // Video_In_Subsystem_video_in_dma_control_slave_agent:m0_lock -> Video_In_Subsystem_video_in_dma_control_slave_translator:uav_lock
	wire   [31:0] video_in_subsystem_video_in_dma_control_slave_agent_m0_writedata;                                    // Video_In_Subsystem_video_in_dma_control_slave_agent:m0_writedata -> Video_In_Subsystem_video_in_dma_control_slave_translator:uav_writedata
	wire          video_in_subsystem_video_in_dma_control_slave_agent_m0_write;                                        // Video_In_Subsystem_video_in_dma_control_slave_agent:m0_write -> Video_In_Subsystem_video_in_dma_control_slave_translator:uav_write
	wire    [2:0] video_in_subsystem_video_in_dma_control_slave_agent_m0_burstcount;                                   // Video_In_Subsystem_video_in_dma_control_slave_agent:m0_burstcount -> Video_In_Subsystem_video_in_dma_control_slave_translator:uav_burstcount
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rf_source_valid;                                 // Video_In_Subsystem_video_in_dma_control_slave_agent:rf_source_valid -> Video_In_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:in_valid
	wire  [137:0] video_in_subsystem_video_in_dma_control_slave_agent_rf_source_data;                                  // Video_In_Subsystem_video_in_dma_control_slave_agent:rf_source_data -> Video_In_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:in_data
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rf_source_ready;                                 // Video_In_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:in_ready -> Video_In_Subsystem_video_in_dma_control_slave_agent:rf_source_ready
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rf_source_startofpacket;                         // Video_In_Subsystem_video_in_dma_control_slave_agent:rf_source_startofpacket -> Video_In_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:in_startofpacket
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rf_source_endofpacket;                           // Video_In_Subsystem_video_in_dma_control_slave_agent:rf_source_endofpacket -> Video_In_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:in_endofpacket
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_valid;                              // Video_In_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:out_valid -> Video_In_Subsystem_video_in_dma_control_slave_agent:rf_sink_valid
	wire  [137:0] video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_data;                               // Video_In_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:out_data -> Video_In_Subsystem_video_in_dma_control_slave_agent:rf_sink_data
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_ready;                              // Video_In_Subsystem_video_in_dma_control_slave_agent:rf_sink_ready -> Video_In_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:out_ready
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_startofpacket;                      // Video_In_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:out_startofpacket -> Video_In_Subsystem_video_in_dma_control_slave_agent:rf_sink_startofpacket
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_endofpacket;                        // Video_In_Subsystem_video_in_dma_control_slave_agent_rsp_fifo:out_endofpacket -> Video_In_Subsystem_video_in_dma_control_slave_agent:rf_sink_endofpacket
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_valid;                            // Video_In_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_src_valid -> Video_In_Subsystem_video_in_dma_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_data;                             // Video_In_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_src_data -> Video_In_Subsystem_video_in_dma_control_slave_agent_rdata_fifo:in_data
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_ready;                            // Video_In_Subsystem_video_in_dma_control_slave_agent_rdata_fifo:in_ready -> Video_In_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_027_src_valid;                                                                               // cmd_mux_027:src_valid -> Video_In_Subsystem_video_in_dma_control_slave_agent:cp_valid
	wire  [136:0] cmd_mux_027_src_data;                                                                                // cmd_mux_027:src_data -> Video_In_Subsystem_video_in_dma_control_slave_agent:cp_data
	wire          cmd_mux_027_src_ready;                                                                               // Video_In_Subsystem_video_in_dma_control_slave_agent:cp_ready -> cmd_mux_027:src_ready
	wire   [36:0] cmd_mux_027_src_channel;                                                                             // cmd_mux_027:src_channel -> Video_In_Subsystem_video_in_dma_control_slave_agent:cp_channel
	wire          cmd_mux_027_src_startofpacket;                                                                       // cmd_mux_027:src_startofpacket -> Video_In_Subsystem_video_in_dma_control_slave_agent:cp_startofpacket
	wire          cmd_mux_027_src_endofpacket;                                                                         // cmd_mux_027:src_endofpacket -> Video_In_Subsystem_video_in_dma_control_slave_agent:cp_endofpacket
	wire   [31:0] f2h_mem_window_00000000_windowed_slave_agent_m0_readdata;                                            // F2H_Mem_Window_00000000_windowed_slave_translator:uav_readdata -> F2H_Mem_Window_00000000_windowed_slave_agent:m0_readdata
	wire          f2h_mem_window_00000000_windowed_slave_agent_m0_waitrequest;                                         // F2H_Mem_Window_00000000_windowed_slave_translator:uav_waitrequest -> F2H_Mem_Window_00000000_windowed_slave_agent:m0_waitrequest
	wire          f2h_mem_window_00000000_windowed_slave_agent_m0_debugaccess;                                         // F2H_Mem_Window_00000000_windowed_slave_agent:m0_debugaccess -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_debugaccess
	wire   [31:0] f2h_mem_window_00000000_windowed_slave_agent_m0_address;                                             // F2H_Mem_Window_00000000_windowed_slave_agent:m0_address -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_address
	wire    [3:0] f2h_mem_window_00000000_windowed_slave_agent_m0_byteenable;                                          // F2H_Mem_Window_00000000_windowed_slave_agent:m0_byteenable -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_byteenable
	wire          f2h_mem_window_00000000_windowed_slave_agent_m0_read;                                                // F2H_Mem_Window_00000000_windowed_slave_agent:m0_read -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_read
	wire          f2h_mem_window_00000000_windowed_slave_agent_m0_readdatavalid;                                       // F2H_Mem_Window_00000000_windowed_slave_translator:uav_readdatavalid -> F2H_Mem_Window_00000000_windowed_slave_agent:m0_readdatavalid
	wire          f2h_mem_window_00000000_windowed_slave_agent_m0_lock;                                                // F2H_Mem_Window_00000000_windowed_slave_agent:m0_lock -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_lock
	wire   [31:0] f2h_mem_window_00000000_windowed_slave_agent_m0_writedata;                                           // F2H_Mem_Window_00000000_windowed_slave_agent:m0_writedata -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_writedata
	wire          f2h_mem_window_00000000_windowed_slave_agent_m0_write;                                               // F2H_Mem_Window_00000000_windowed_slave_agent:m0_write -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_write
	wire    [2:0] f2h_mem_window_00000000_windowed_slave_agent_m0_burstcount;                                          // F2H_Mem_Window_00000000_windowed_slave_agent:m0_burstcount -> F2H_Mem_Window_00000000_windowed_slave_translator:uav_burstcount
	wire          f2h_mem_window_00000000_windowed_slave_agent_rf_source_valid;                                        // F2H_Mem_Window_00000000_windowed_slave_agent:rf_source_valid -> F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:in_valid
	wire  [137:0] f2h_mem_window_00000000_windowed_slave_agent_rf_source_data;                                         // F2H_Mem_Window_00000000_windowed_slave_agent:rf_source_data -> F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:in_data
	wire          f2h_mem_window_00000000_windowed_slave_agent_rf_source_ready;                                        // F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:in_ready -> F2H_Mem_Window_00000000_windowed_slave_agent:rf_source_ready
	wire          f2h_mem_window_00000000_windowed_slave_agent_rf_source_startofpacket;                                // F2H_Mem_Window_00000000_windowed_slave_agent:rf_source_startofpacket -> F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:in_startofpacket
	wire          f2h_mem_window_00000000_windowed_slave_agent_rf_source_endofpacket;                                  // F2H_Mem_Window_00000000_windowed_slave_agent:rf_source_endofpacket -> F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:in_endofpacket
	wire          f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_valid;                                     // F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:out_valid -> F2H_Mem_Window_00000000_windowed_slave_agent:rf_sink_valid
	wire  [137:0] f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_data;                                      // F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:out_data -> F2H_Mem_Window_00000000_windowed_slave_agent:rf_sink_data
	wire          f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_ready;                                     // F2H_Mem_Window_00000000_windowed_slave_agent:rf_sink_ready -> F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:out_ready
	wire          f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_startofpacket;                             // F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:out_startofpacket -> F2H_Mem_Window_00000000_windowed_slave_agent:rf_sink_startofpacket
	wire          f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_endofpacket;                               // F2H_Mem_Window_00000000_windowed_slave_agent_rsp_fifo:out_endofpacket -> F2H_Mem_Window_00000000_windowed_slave_agent:rf_sink_endofpacket
	wire          f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_valid;                                   // F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_src_valid -> F2H_Mem_Window_00000000_windowed_slave_agent_rdata_fifo:in_valid
	wire   [33:0] f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_data;                                    // F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_src_data -> F2H_Mem_Window_00000000_windowed_slave_agent_rdata_fifo:in_data
	wire          f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_ready;                                   // F2H_Mem_Window_00000000_windowed_slave_agent_rdata_fifo:in_ready -> F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_028_src_valid;                                                                               // cmd_mux_028:src_valid -> F2H_Mem_Window_00000000_windowed_slave_agent:cp_valid
	wire  [136:0] cmd_mux_028_src_data;                                                                                // cmd_mux_028:src_data -> F2H_Mem_Window_00000000_windowed_slave_agent:cp_data
	wire          cmd_mux_028_src_ready;                                                                               // F2H_Mem_Window_00000000_windowed_slave_agent:cp_ready -> cmd_mux_028:src_ready
	wire   [36:0] cmd_mux_028_src_channel;                                                                             // cmd_mux_028:src_channel -> F2H_Mem_Window_00000000_windowed_slave_agent:cp_channel
	wire          cmd_mux_028_src_startofpacket;                                                                       // cmd_mux_028:src_startofpacket -> F2H_Mem_Window_00000000_windowed_slave_agent:cp_startofpacket
	wire          cmd_mux_028_src_endofpacket;                                                                         // cmd_mux_028:src_endofpacket -> F2H_Mem_Window_00000000_windowed_slave_agent:cp_endofpacket
	wire   [31:0] f2h_mem_window_ff600000_windowed_slave_agent_m0_readdata;                                            // F2H_Mem_Window_FF600000_windowed_slave_translator:uav_readdata -> F2H_Mem_Window_FF600000_windowed_slave_agent:m0_readdata
	wire          f2h_mem_window_ff600000_windowed_slave_agent_m0_waitrequest;                                         // F2H_Mem_Window_FF600000_windowed_slave_translator:uav_waitrequest -> F2H_Mem_Window_FF600000_windowed_slave_agent:m0_waitrequest
	wire          f2h_mem_window_ff600000_windowed_slave_agent_m0_debugaccess;                                         // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_debugaccess -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_debugaccess
	wire   [31:0] f2h_mem_window_ff600000_windowed_slave_agent_m0_address;                                             // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_address -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_address
	wire    [3:0] f2h_mem_window_ff600000_windowed_slave_agent_m0_byteenable;                                          // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_byteenable -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_byteenable
	wire          f2h_mem_window_ff600000_windowed_slave_agent_m0_read;                                                // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_read -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_read
	wire          f2h_mem_window_ff600000_windowed_slave_agent_m0_readdatavalid;                                       // F2H_Mem_Window_FF600000_windowed_slave_translator:uav_readdatavalid -> F2H_Mem_Window_FF600000_windowed_slave_agent:m0_readdatavalid
	wire          f2h_mem_window_ff600000_windowed_slave_agent_m0_lock;                                                // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_lock -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_lock
	wire   [31:0] f2h_mem_window_ff600000_windowed_slave_agent_m0_writedata;                                           // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_writedata -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_writedata
	wire          f2h_mem_window_ff600000_windowed_slave_agent_m0_write;                                               // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_write -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_write
	wire    [2:0] f2h_mem_window_ff600000_windowed_slave_agent_m0_burstcount;                                          // F2H_Mem_Window_FF600000_windowed_slave_agent:m0_burstcount -> F2H_Mem_Window_FF600000_windowed_slave_translator:uav_burstcount
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rf_source_valid;                                        // F2H_Mem_Window_FF600000_windowed_slave_agent:rf_source_valid -> F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:in_valid
	wire  [137:0] f2h_mem_window_ff600000_windowed_slave_agent_rf_source_data;                                         // F2H_Mem_Window_FF600000_windowed_slave_agent:rf_source_data -> F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:in_data
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rf_source_ready;                                        // F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:in_ready -> F2H_Mem_Window_FF600000_windowed_slave_agent:rf_source_ready
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rf_source_startofpacket;                                // F2H_Mem_Window_FF600000_windowed_slave_agent:rf_source_startofpacket -> F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:in_startofpacket
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rf_source_endofpacket;                                  // F2H_Mem_Window_FF600000_windowed_slave_agent:rf_source_endofpacket -> F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:in_endofpacket
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_valid;                                     // F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:out_valid -> F2H_Mem_Window_FF600000_windowed_slave_agent:rf_sink_valid
	wire  [137:0] f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_data;                                      // F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:out_data -> F2H_Mem_Window_FF600000_windowed_slave_agent:rf_sink_data
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_ready;                                     // F2H_Mem_Window_FF600000_windowed_slave_agent:rf_sink_ready -> F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:out_ready
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_startofpacket;                             // F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:out_startofpacket -> F2H_Mem_Window_FF600000_windowed_slave_agent:rf_sink_startofpacket
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_endofpacket;                               // F2H_Mem_Window_FF600000_windowed_slave_agent_rsp_fifo:out_endofpacket -> F2H_Mem_Window_FF600000_windowed_slave_agent:rf_sink_endofpacket
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_valid;                                   // F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_src_valid -> F2H_Mem_Window_FF600000_windowed_slave_agent_rdata_fifo:in_valid
	wire   [33:0] f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_data;                                    // F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_src_data -> F2H_Mem_Window_FF600000_windowed_slave_agent_rdata_fifo:in_data
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_ready;                                   // F2H_Mem_Window_FF600000_windowed_slave_agent_rdata_fifo:in_ready -> F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_029_src_valid;                                                                               // cmd_mux_029:src_valid -> F2H_Mem_Window_FF600000_windowed_slave_agent:cp_valid
	wire  [136:0] cmd_mux_029_src_data;                                                                                // cmd_mux_029:src_data -> F2H_Mem_Window_FF600000_windowed_slave_agent:cp_data
	wire          cmd_mux_029_src_ready;                                                                               // F2H_Mem_Window_FF600000_windowed_slave_agent:cp_ready -> cmd_mux_029:src_ready
	wire   [36:0] cmd_mux_029_src_channel;                                                                             // cmd_mux_029:src_channel -> F2H_Mem_Window_FF600000_windowed_slave_agent:cp_channel
	wire          cmd_mux_029_src_startofpacket;                                                                       // cmd_mux_029:src_startofpacket -> F2H_Mem_Window_FF600000_windowed_slave_agent:cp_startofpacket
	wire          cmd_mux_029_src_endofpacket;                                                                         // cmd_mux_029:src_endofpacket -> F2H_Mem_Window_FF600000_windowed_slave_agent:cp_endofpacket
	wire   [31:0] f2h_mem_window_ff800000_windowed_slave_agent_m0_readdata;                                            // F2H_Mem_Window_FF800000_windowed_slave_translator:uav_readdata -> F2H_Mem_Window_FF800000_windowed_slave_agent:m0_readdata
	wire          f2h_mem_window_ff800000_windowed_slave_agent_m0_waitrequest;                                         // F2H_Mem_Window_FF800000_windowed_slave_translator:uav_waitrequest -> F2H_Mem_Window_FF800000_windowed_slave_agent:m0_waitrequest
	wire          f2h_mem_window_ff800000_windowed_slave_agent_m0_debugaccess;                                         // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_debugaccess -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_debugaccess
	wire   [31:0] f2h_mem_window_ff800000_windowed_slave_agent_m0_address;                                             // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_address -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_address
	wire    [3:0] f2h_mem_window_ff800000_windowed_slave_agent_m0_byteenable;                                          // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_byteenable -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_byteenable
	wire          f2h_mem_window_ff800000_windowed_slave_agent_m0_read;                                                // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_read -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_read
	wire          f2h_mem_window_ff800000_windowed_slave_agent_m0_readdatavalid;                                       // F2H_Mem_Window_FF800000_windowed_slave_translator:uav_readdatavalid -> F2H_Mem_Window_FF800000_windowed_slave_agent:m0_readdatavalid
	wire          f2h_mem_window_ff800000_windowed_slave_agent_m0_lock;                                                // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_lock -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_lock
	wire   [31:0] f2h_mem_window_ff800000_windowed_slave_agent_m0_writedata;                                           // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_writedata -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_writedata
	wire          f2h_mem_window_ff800000_windowed_slave_agent_m0_write;                                               // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_write -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_write
	wire    [2:0] f2h_mem_window_ff800000_windowed_slave_agent_m0_burstcount;                                          // F2H_Mem_Window_FF800000_windowed_slave_agent:m0_burstcount -> F2H_Mem_Window_FF800000_windowed_slave_translator:uav_burstcount
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rf_source_valid;                                        // F2H_Mem_Window_FF800000_windowed_slave_agent:rf_source_valid -> F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:in_valid
	wire  [137:0] f2h_mem_window_ff800000_windowed_slave_agent_rf_source_data;                                         // F2H_Mem_Window_FF800000_windowed_slave_agent:rf_source_data -> F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:in_data
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rf_source_ready;                                        // F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:in_ready -> F2H_Mem_Window_FF800000_windowed_slave_agent:rf_source_ready
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rf_source_startofpacket;                                // F2H_Mem_Window_FF800000_windowed_slave_agent:rf_source_startofpacket -> F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:in_startofpacket
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rf_source_endofpacket;                                  // F2H_Mem_Window_FF800000_windowed_slave_agent:rf_source_endofpacket -> F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:in_endofpacket
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_valid;                                     // F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:out_valid -> F2H_Mem_Window_FF800000_windowed_slave_agent:rf_sink_valid
	wire  [137:0] f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_data;                                      // F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:out_data -> F2H_Mem_Window_FF800000_windowed_slave_agent:rf_sink_data
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_ready;                                     // F2H_Mem_Window_FF800000_windowed_slave_agent:rf_sink_ready -> F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:out_ready
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_startofpacket;                             // F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:out_startofpacket -> F2H_Mem_Window_FF800000_windowed_slave_agent:rf_sink_startofpacket
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_endofpacket;                               // F2H_Mem_Window_FF800000_windowed_slave_agent_rsp_fifo:out_endofpacket -> F2H_Mem_Window_FF800000_windowed_slave_agent:rf_sink_endofpacket
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_valid;                                   // F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_src_valid -> F2H_Mem_Window_FF800000_windowed_slave_agent_rdata_fifo:in_valid
	wire   [33:0] f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_data;                                    // F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_src_data -> F2H_Mem_Window_FF800000_windowed_slave_agent_rdata_fifo:in_data
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_ready;                                   // F2H_Mem_Window_FF800000_windowed_slave_agent_rdata_fifo:in_ready -> F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_030_src_valid;                                                                               // cmd_mux_030:src_valid -> F2H_Mem_Window_FF800000_windowed_slave_agent:cp_valid
	wire  [136:0] cmd_mux_030_src_data;                                                                                // cmd_mux_030:src_data -> F2H_Mem_Window_FF800000_windowed_slave_agent:cp_data
	wire          cmd_mux_030_src_ready;                                                                               // F2H_Mem_Window_FF800000_windowed_slave_agent:cp_ready -> cmd_mux_030:src_ready
	wire   [36:0] cmd_mux_030_src_channel;                                                                             // cmd_mux_030:src_channel -> F2H_Mem_Window_FF800000_windowed_slave_agent:cp_channel
	wire          cmd_mux_030_src_startofpacket;                                                                       // cmd_mux_030:src_startofpacket -> F2H_Mem_Window_FF800000_windowed_slave_agent:cp_startofpacket
	wire          cmd_mux_030_src_endofpacket;                                                                         // cmd_mux_030:src_endofpacket -> F2H_Mem_Window_FF800000_windowed_slave_agent:cp_endofpacket
	wire   [31:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdata;                                              // JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_readdata -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_waitrequest;                                           // JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_waitrequest -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_debugaccess;                                           // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_debugaccess -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_address;                                               // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_address -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_byteenable;                                            // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_byteenable -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_read;                                                  // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_read -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdatavalid;                                         // JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_readdatavalid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_lock;                                                  // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_lock -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_writedata;                                             // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_writedata -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_write;                                                 // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_write -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_burstcount;                                            // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:m0_burstcount -> JTAG_UART_2nd_Core_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_valid;                                          // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [137:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_data;                                           // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_ready;                                          // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_startofpacket;                                  // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_startofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_endofpacket;                                    // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_source_endofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                       // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_valid
	wire  [137:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_data;                                        // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                       // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                               // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                                 // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                     // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_src_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_data;                                      // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_src_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                     // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rdata_fifo:in_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_031_src_valid;                                                                               // cmd_mux_031:src_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_valid
	wire  [136:0] cmd_mux_031_src_data;                                                                                // cmd_mux_031:src_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_031_src_ready;                                                                               // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_ready -> cmd_mux_031:src_ready
	wire   [36:0] cmd_mux_031_src_channel;                                                                             // cmd_mux_031:src_channel -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_031_src_startofpacket;                                                                       // cmd_mux_031:src_startofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_031_src_endofpacket;                                                                         // cmd_mux_031:src_endofpacket -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] nios2_2nd_core_debug_mem_slave_agent_m0_readdata;                                                    // Nios2_2nd_Core_debug_mem_slave_translator:uav_readdata -> Nios2_2nd_Core_debug_mem_slave_agent:m0_readdata
	wire          nios2_2nd_core_debug_mem_slave_agent_m0_waitrequest;                                                 // Nios2_2nd_Core_debug_mem_slave_translator:uav_waitrequest -> Nios2_2nd_Core_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_2nd_core_debug_mem_slave_agent_m0_debugaccess;                                                 // Nios2_2nd_Core_debug_mem_slave_agent:m0_debugaccess -> Nios2_2nd_Core_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios2_2nd_core_debug_mem_slave_agent_m0_address;                                                     // Nios2_2nd_Core_debug_mem_slave_agent:m0_address -> Nios2_2nd_Core_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_2nd_core_debug_mem_slave_agent_m0_byteenable;                                                  // Nios2_2nd_Core_debug_mem_slave_agent:m0_byteenable -> Nios2_2nd_Core_debug_mem_slave_translator:uav_byteenable
	wire          nios2_2nd_core_debug_mem_slave_agent_m0_read;                                                        // Nios2_2nd_Core_debug_mem_slave_agent:m0_read -> Nios2_2nd_Core_debug_mem_slave_translator:uav_read
	wire          nios2_2nd_core_debug_mem_slave_agent_m0_readdatavalid;                                               // Nios2_2nd_Core_debug_mem_slave_translator:uav_readdatavalid -> Nios2_2nd_Core_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_2nd_core_debug_mem_slave_agent_m0_lock;                                                        // Nios2_2nd_Core_debug_mem_slave_agent:m0_lock -> Nios2_2nd_Core_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_2nd_core_debug_mem_slave_agent_m0_writedata;                                                   // Nios2_2nd_Core_debug_mem_slave_agent:m0_writedata -> Nios2_2nd_Core_debug_mem_slave_translator:uav_writedata
	wire          nios2_2nd_core_debug_mem_slave_agent_m0_write;                                                       // Nios2_2nd_Core_debug_mem_slave_agent:m0_write -> Nios2_2nd_Core_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_2nd_core_debug_mem_slave_agent_m0_burstcount;                                                  // Nios2_2nd_Core_debug_mem_slave_agent:m0_burstcount -> Nios2_2nd_Core_debug_mem_slave_translator:uav_burstcount
	wire          nios2_2nd_core_debug_mem_slave_agent_rf_source_valid;                                                // Nios2_2nd_Core_debug_mem_slave_agent:rf_source_valid -> Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [137:0] nios2_2nd_core_debug_mem_slave_agent_rf_source_data;                                                 // Nios2_2nd_Core_debug_mem_slave_agent:rf_source_data -> Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_2nd_core_debug_mem_slave_agent_rf_source_ready;                                                // Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:in_ready -> Nios2_2nd_Core_debug_mem_slave_agent:rf_source_ready
	wire          nios2_2nd_core_debug_mem_slave_agent_rf_source_startofpacket;                                        // Nios2_2nd_Core_debug_mem_slave_agent:rf_source_startofpacket -> Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_2nd_core_debug_mem_slave_agent_rf_source_endofpacket;                                          // Nios2_2nd_Core_debug_mem_slave_agent:rf_source_endofpacket -> Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_valid;                                             // Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:out_valid -> Nios2_2nd_Core_debug_mem_slave_agent:rf_sink_valid
	wire  [137:0] nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_data;                                              // Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:out_data -> Nios2_2nd_Core_debug_mem_slave_agent:rf_sink_data
	wire          nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_ready;                                             // Nios2_2nd_Core_debug_mem_slave_agent:rf_sink_ready -> Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                     // Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> Nios2_2nd_Core_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                       // Nios2_2nd_Core_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> Nios2_2nd_Core_debug_mem_slave_agent:rf_sink_endofpacket
	wire          nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_valid;                                           // Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_src_valid -> Nios2_2nd_Core_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_data;                                            // Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_src_data -> Nios2_2nd_Core_debug_mem_slave_agent_rdata_fifo:in_data
	wire          nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_ready;                                           // Nios2_2nd_Core_debug_mem_slave_agent_rdata_fifo:in_ready -> Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_032_src_valid;                                                                               // cmd_mux_032:src_valid -> Nios2_2nd_Core_debug_mem_slave_agent:cp_valid
	wire  [136:0] cmd_mux_032_src_data;                                                                                // cmd_mux_032:src_data -> Nios2_2nd_Core_debug_mem_slave_agent:cp_data
	wire          cmd_mux_032_src_ready;                                                                               // Nios2_2nd_Core_debug_mem_slave_agent:cp_ready -> cmd_mux_032:src_ready
	wire   [36:0] cmd_mux_032_src_channel;                                                                             // cmd_mux_032:src_channel -> Nios2_2nd_Core_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_032_src_startofpacket;                                                                       // cmd_mux_032:src_startofpacket -> Nios2_2nd_Core_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_032_src_endofpacket;                                                                         // cmd_mux_032:src_endofpacket -> Nios2_2nd_Core_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] interval_timer_2nd_core_s1_agent_m0_readdata;                                                        // Interval_Timer_2nd_Core_s1_translator:uav_readdata -> Interval_Timer_2nd_Core_s1_agent:m0_readdata
	wire          interval_timer_2nd_core_s1_agent_m0_waitrequest;                                                     // Interval_Timer_2nd_Core_s1_translator:uav_waitrequest -> Interval_Timer_2nd_Core_s1_agent:m0_waitrequest
	wire          interval_timer_2nd_core_s1_agent_m0_debugaccess;                                                     // Interval_Timer_2nd_Core_s1_agent:m0_debugaccess -> Interval_Timer_2nd_Core_s1_translator:uav_debugaccess
	wire   [31:0] interval_timer_2nd_core_s1_agent_m0_address;                                                         // Interval_Timer_2nd_Core_s1_agent:m0_address -> Interval_Timer_2nd_Core_s1_translator:uav_address
	wire    [3:0] interval_timer_2nd_core_s1_agent_m0_byteenable;                                                      // Interval_Timer_2nd_Core_s1_agent:m0_byteenable -> Interval_Timer_2nd_Core_s1_translator:uav_byteenable
	wire          interval_timer_2nd_core_s1_agent_m0_read;                                                            // Interval_Timer_2nd_Core_s1_agent:m0_read -> Interval_Timer_2nd_Core_s1_translator:uav_read
	wire          interval_timer_2nd_core_s1_agent_m0_readdatavalid;                                                   // Interval_Timer_2nd_Core_s1_translator:uav_readdatavalid -> Interval_Timer_2nd_Core_s1_agent:m0_readdatavalid
	wire          interval_timer_2nd_core_s1_agent_m0_lock;                                                            // Interval_Timer_2nd_Core_s1_agent:m0_lock -> Interval_Timer_2nd_Core_s1_translator:uav_lock
	wire   [31:0] interval_timer_2nd_core_s1_agent_m0_writedata;                                                       // Interval_Timer_2nd_Core_s1_agent:m0_writedata -> Interval_Timer_2nd_Core_s1_translator:uav_writedata
	wire          interval_timer_2nd_core_s1_agent_m0_write;                                                           // Interval_Timer_2nd_Core_s1_agent:m0_write -> Interval_Timer_2nd_Core_s1_translator:uav_write
	wire    [2:0] interval_timer_2nd_core_s1_agent_m0_burstcount;                                                      // Interval_Timer_2nd_Core_s1_agent:m0_burstcount -> Interval_Timer_2nd_Core_s1_translator:uav_burstcount
	wire          interval_timer_2nd_core_s1_agent_rf_source_valid;                                                    // Interval_Timer_2nd_Core_s1_agent:rf_source_valid -> Interval_Timer_2nd_Core_s1_agent_rsp_fifo:in_valid
	wire  [137:0] interval_timer_2nd_core_s1_agent_rf_source_data;                                                     // Interval_Timer_2nd_Core_s1_agent:rf_source_data -> Interval_Timer_2nd_Core_s1_agent_rsp_fifo:in_data
	wire          interval_timer_2nd_core_s1_agent_rf_source_ready;                                                    // Interval_Timer_2nd_Core_s1_agent_rsp_fifo:in_ready -> Interval_Timer_2nd_Core_s1_agent:rf_source_ready
	wire          interval_timer_2nd_core_s1_agent_rf_source_startofpacket;                                            // Interval_Timer_2nd_Core_s1_agent:rf_source_startofpacket -> Interval_Timer_2nd_Core_s1_agent_rsp_fifo:in_startofpacket
	wire          interval_timer_2nd_core_s1_agent_rf_source_endofpacket;                                              // Interval_Timer_2nd_Core_s1_agent:rf_source_endofpacket -> Interval_Timer_2nd_Core_s1_agent_rsp_fifo:in_endofpacket
	wire          interval_timer_2nd_core_s1_agent_rsp_fifo_out_valid;                                                 // Interval_Timer_2nd_Core_s1_agent_rsp_fifo:out_valid -> Interval_Timer_2nd_Core_s1_agent:rf_sink_valid
	wire  [137:0] interval_timer_2nd_core_s1_agent_rsp_fifo_out_data;                                                  // Interval_Timer_2nd_Core_s1_agent_rsp_fifo:out_data -> Interval_Timer_2nd_Core_s1_agent:rf_sink_data
	wire          interval_timer_2nd_core_s1_agent_rsp_fifo_out_ready;                                                 // Interval_Timer_2nd_Core_s1_agent:rf_sink_ready -> Interval_Timer_2nd_Core_s1_agent_rsp_fifo:out_ready
	wire          interval_timer_2nd_core_s1_agent_rsp_fifo_out_startofpacket;                                         // Interval_Timer_2nd_Core_s1_agent_rsp_fifo:out_startofpacket -> Interval_Timer_2nd_Core_s1_agent:rf_sink_startofpacket
	wire          interval_timer_2nd_core_s1_agent_rsp_fifo_out_endofpacket;                                           // Interval_Timer_2nd_Core_s1_agent_rsp_fifo:out_endofpacket -> Interval_Timer_2nd_Core_s1_agent:rf_sink_endofpacket
	wire          interval_timer_2nd_core_s1_agent_rdata_fifo_src_valid;                                               // Interval_Timer_2nd_Core_s1_agent:rdata_fifo_src_valid -> Interval_Timer_2nd_Core_s1_agent_rdata_fifo:in_valid
	wire   [33:0] interval_timer_2nd_core_s1_agent_rdata_fifo_src_data;                                                // Interval_Timer_2nd_Core_s1_agent:rdata_fifo_src_data -> Interval_Timer_2nd_Core_s1_agent_rdata_fifo:in_data
	wire          interval_timer_2nd_core_s1_agent_rdata_fifo_src_ready;                                               // Interval_Timer_2nd_Core_s1_agent_rdata_fifo:in_ready -> Interval_Timer_2nd_Core_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_033_src_valid;                                                                               // cmd_mux_033:src_valid -> Interval_Timer_2nd_Core_s1_agent:cp_valid
	wire  [136:0] cmd_mux_033_src_data;                                                                                // cmd_mux_033:src_data -> Interval_Timer_2nd_Core_s1_agent:cp_data
	wire          cmd_mux_033_src_ready;                                                                               // Interval_Timer_2nd_Core_s1_agent:cp_ready -> cmd_mux_033:src_ready
	wire   [36:0] cmd_mux_033_src_channel;                                                                             // cmd_mux_033:src_channel -> Interval_Timer_2nd_Core_s1_agent:cp_channel
	wire          cmd_mux_033_src_startofpacket;                                                                       // cmd_mux_033:src_startofpacket -> Interval_Timer_2nd_Core_s1_agent:cp_startofpacket
	wire          cmd_mux_033_src_endofpacket;                                                                         // cmd_mux_033:src_endofpacket -> Interval_Timer_2nd_Core_s1_agent:cp_endofpacket
	wire   [31:0] interval_timer_2nd_core_2_s1_agent_m0_readdata;                                                      // Interval_Timer_2nd_Core_2_s1_translator:uav_readdata -> Interval_Timer_2nd_Core_2_s1_agent:m0_readdata
	wire          interval_timer_2nd_core_2_s1_agent_m0_waitrequest;                                                   // Interval_Timer_2nd_Core_2_s1_translator:uav_waitrequest -> Interval_Timer_2nd_Core_2_s1_agent:m0_waitrequest
	wire          interval_timer_2nd_core_2_s1_agent_m0_debugaccess;                                                   // Interval_Timer_2nd_Core_2_s1_agent:m0_debugaccess -> Interval_Timer_2nd_Core_2_s1_translator:uav_debugaccess
	wire   [31:0] interval_timer_2nd_core_2_s1_agent_m0_address;                                                       // Interval_Timer_2nd_Core_2_s1_agent:m0_address -> Interval_Timer_2nd_Core_2_s1_translator:uav_address
	wire    [3:0] interval_timer_2nd_core_2_s1_agent_m0_byteenable;                                                    // Interval_Timer_2nd_Core_2_s1_agent:m0_byteenable -> Interval_Timer_2nd_Core_2_s1_translator:uav_byteenable
	wire          interval_timer_2nd_core_2_s1_agent_m0_read;                                                          // Interval_Timer_2nd_Core_2_s1_agent:m0_read -> Interval_Timer_2nd_Core_2_s1_translator:uav_read
	wire          interval_timer_2nd_core_2_s1_agent_m0_readdatavalid;                                                 // Interval_Timer_2nd_Core_2_s1_translator:uav_readdatavalid -> Interval_Timer_2nd_Core_2_s1_agent:m0_readdatavalid
	wire          interval_timer_2nd_core_2_s1_agent_m0_lock;                                                          // Interval_Timer_2nd_Core_2_s1_agent:m0_lock -> Interval_Timer_2nd_Core_2_s1_translator:uav_lock
	wire   [31:0] interval_timer_2nd_core_2_s1_agent_m0_writedata;                                                     // Interval_Timer_2nd_Core_2_s1_agent:m0_writedata -> Interval_Timer_2nd_Core_2_s1_translator:uav_writedata
	wire          interval_timer_2nd_core_2_s1_agent_m0_write;                                                         // Interval_Timer_2nd_Core_2_s1_agent:m0_write -> Interval_Timer_2nd_Core_2_s1_translator:uav_write
	wire    [2:0] interval_timer_2nd_core_2_s1_agent_m0_burstcount;                                                    // Interval_Timer_2nd_Core_2_s1_agent:m0_burstcount -> Interval_Timer_2nd_Core_2_s1_translator:uav_burstcount
	wire          interval_timer_2nd_core_2_s1_agent_rf_source_valid;                                                  // Interval_Timer_2nd_Core_2_s1_agent:rf_source_valid -> Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:in_valid
	wire  [137:0] interval_timer_2nd_core_2_s1_agent_rf_source_data;                                                   // Interval_Timer_2nd_Core_2_s1_agent:rf_source_data -> Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:in_data
	wire          interval_timer_2nd_core_2_s1_agent_rf_source_ready;                                                  // Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:in_ready -> Interval_Timer_2nd_Core_2_s1_agent:rf_source_ready
	wire          interval_timer_2nd_core_2_s1_agent_rf_source_startofpacket;                                          // Interval_Timer_2nd_Core_2_s1_agent:rf_source_startofpacket -> Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:in_startofpacket
	wire          interval_timer_2nd_core_2_s1_agent_rf_source_endofpacket;                                            // Interval_Timer_2nd_Core_2_s1_agent:rf_source_endofpacket -> Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:in_endofpacket
	wire          interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_valid;                                               // Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:out_valid -> Interval_Timer_2nd_Core_2_s1_agent:rf_sink_valid
	wire  [137:0] interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_data;                                                // Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:out_data -> Interval_Timer_2nd_Core_2_s1_agent:rf_sink_data
	wire          interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_ready;                                               // Interval_Timer_2nd_Core_2_s1_agent:rf_sink_ready -> Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:out_ready
	wire          interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_startofpacket;                                       // Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:out_startofpacket -> Interval_Timer_2nd_Core_2_s1_agent:rf_sink_startofpacket
	wire          interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_endofpacket;                                         // Interval_Timer_2nd_Core_2_s1_agent_rsp_fifo:out_endofpacket -> Interval_Timer_2nd_Core_2_s1_agent:rf_sink_endofpacket
	wire          interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_valid;                                             // Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_src_valid -> Interval_Timer_2nd_Core_2_s1_agent_rdata_fifo:in_valid
	wire   [33:0] interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_data;                                              // Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_src_data -> Interval_Timer_2nd_Core_2_s1_agent_rdata_fifo:in_data
	wire          interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_ready;                                             // Interval_Timer_2nd_Core_2_s1_agent_rdata_fifo:in_ready -> Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_034_src_valid;                                                                               // cmd_mux_034:src_valid -> Interval_Timer_2nd_Core_2_s1_agent:cp_valid
	wire  [136:0] cmd_mux_034_src_data;                                                                                // cmd_mux_034:src_data -> Interval_Timer_2nd_Core_2_s1_agent:cp_data
	wire          cmd_mux_034_src_ready;                                                                               // Interval_Timer_2nd_Core_2_s1_agent:cp_ready -> cmd_mux_034:src_ready
	wire   [36:0] cmd_mux_034_src_channel;                                                                             // cmd_mux_034:src_channel -> Interval_Timer_2nd_Core_2_s1_agent:cp_channel
	wire          cmd_mux_034_src_startofpacket;                                                                       // cmd_mux_034:src_startofpacket -> Interval_Timer_2nd_Core_2_s1_agent:cp_startofpacket
	wire          cmd_mux_034_src_endofpacket;                                                                         // cmd_mux_034:src_endofpacket -> Interval_Timer_2nd_Core_2_s1_agent:cp_endofpacket
	wire   [31:0] onchip_sram_s2_agent_m0_readdata;                                                                    // Onchip_SRAM_s2_translator:uav_readdata -> Onchip_SRAM_s2_agent:m0_readdata
	wire          onchip_sram_s2_agent_m0_waitrequest;                                                                 // Onchip_SRAM_s2_translator:uav_waitrequest -> Onchip_SRAM_s2_agent:m0_waitrequest
	wire          onchip_sram_s2_agent_m0_debugaccess;                                                                 // Onchip_SRAM_s2_agent:m0_debugaccess -> Onchip_SRAM_s2_translator:uav_debugaccess
	wire   [31:0] onchip_sram_s2_agent_m0_address;                                                                     // Onchip_SRAM_s2_agent:m0_address -> Onchip_SRAM_s2_translator:uav_address
	wire    [3:0] onchip_sram_s2_agent_m0_byteenable;                                                                  // Onchip_SRAM_s2_agent:m0_byteenable -> Onchip_SRAM_s2_translator:uav_byteenable
	wire          onchip_sram_s2_agent_m0_read;                                                                        // Onchip_SRAM_s2_agent:m0_read -> Onchip_SRAM_s2_translator:uav_read
	wire          onchip_sram_s2_agent_m0_readdatavalid;                                                               // Onchip_SRAM_s2_translator:uav_readdatavalid -> Onchip_SRAM_s2_agent:m0_readdatavalid
	wire          onchip_sram_s2_agent_m0_lock;                                                                        // Onchip_SRAM_s2_agent:m0_lock -> Onchip_SRAM_s2_translator:uav_lock
	wire   [31:0] onchip_sram_s2_agent_m0_writedata;                                                                   // Onchip_SRAM_s2_agent:m0_writedata -> Onchip_SRAM_s2_translator:uav_writedata
	wire          onchip_sram_s2_agent_m0_write;                                                                       // Onchip_SRAM_s2_agent:m0_write -> Onchip_SRAM_s2_translator:uav_write
	wire    [2:0] onchip_sram_s2_agent_m0_burstcount;                                                                  // Onchip_SRAM_s2_agent:m0_burstcount -> Onchip_SRAM_s2_translator:uav_burstcount
	wire          onchip_sram_s2_agent_rf_source_valid;                                                                // Onchip_SRAM_s2_agent:rf_source_valid -> Onchip_SRAM_s2_agent_rsp_fifo:in_valid
	wire  [137:0] onchip_sram_s2_agent_rf_source_data;                                                                 // Onchip_SRAM_s2_agent:rf_source_data -> Onchip_SRAM_s2_agent_rsp_fifo:in_data
	wire          onchip_sram_s2_agent_rf_source_ready;                                                                // Onchip_SRAM_s2_agent_rsp_fifo:in_ready -> Onchip_SRAM_s2_agent:rf_source_ready
	wire          onchip_sram_s2_agent_rf_source_startofpacket;                                                        // Onchip_SRAM_s2_agent:rf_source_startofpacket -> Onchip_SRAM_s2_agent_rsp_fifo:in_startofpacket
	wire          onchip_sram_s2_agent_rf_source_endofpacket;                                                          // Onchip_SRAM_s2_agent:rf_source_endofpacket -> Onchip_SRAM_s2_agent_rsp_fifo:in_endofpacket
	wire          onchip_sram_s2_agent_rsp_fifo_out_valid;                                                             // Onchip_SRAM_s2_agent_rsp_fifo:out_valid -> Onchip_SRAM_s2_agent:rf_sink_valid
	wire  [137:0] onchip_sram_s2_agent_rsp_fifo_out_data;                                                              // Onchip_SRAM_s2_agent_rsp_fifo:out_data -> Onchip_SRAM_s2_agent:rf_sink_data
	wire          onchip_sram_s2_agent_rsp_fifo_out_ready;                                                             // Onchip_SRAM_s2_agent:rf_sink_ready -> Onchip_SRAM_s2_agent_rsp_fifo:out_ready
	wire          onchip_sram_s2_agent_rsp_fifo_out_startofpacket;                                                     // Onchip_SRAM_s2_agent_rsp_fifo:out_startofpacket -> Onchip_SRAM_s2_agent:rf_sink_startofpacket
	wire          onchip_sram_s2_agent_rsp_fifo_out_endofpacket;                                                       // Onchip_SRAM_s2_agent_rsp_fifo:out_endofpacket -> Onchip_SRAM_s2_agent:rf_sink_endofpacket
	wire          onchip_sram_s2_agent_rdata_fifo_src_valid;                                                           // Onchip_SRAM_s2_agent:rdata_fifo_src_valid -> Onchip_SRAM_s2_agent_rdata_fifo:in_valid
	wire   [33:0] onchip_sram_s2_agent_rdata_fifo_src_data;                                                            // Onchip_SRAM_s2_agent:rdata_fifo_src_data -> Onchip_SRAM_s2_agent_rdata_fifo:in_data
	wire          onchip_sram_s2_agent_rdata_fifo_src_ready;                                                           // Onchip_SRAM_s2_agent_rdata_fifo:in_ready -> Onchip_SRAM_s2_agent:rdata_fifo_src_ready
	wire   [31:0] nios2_debug_mem_slave_agent_m0_readdata;                                                             // Nios2_debug_mem_slave_translator:uav_readdata -> Nios2_debug_mem_slave_agent:m0_readdata
	wire          nios2_debug_mem_slave_agent_m0_waitrequest;                                                          // Nios2_debug_mem_slave_translator:uav_waitrequest -> Nios2_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_debug_mem_slave_agent_m0_debugaccess;                                                          // Nios2_debug_mem_slave_agent:m0_debugaccess -> Nios2_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios2_debug_mem_slave_agent_m0_address;                                                              // Nios2_debug_mem_slave_agent:m0_address -> Nios2_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_debug_mem_slave_agent_m0_byteenable;                                                           // Nios2_debug_mem_slave_agent:m0_byteenable -> Nios2_debug_mem_slave_translator:uav_byteenable
	wire          nios2_debug_mem_slave_agent_m0_read;                                                                 // Nios2_debug_mem_slave_agent:m0_read -> Nios2_debug_mem_slave_translator:uav_read
	wire          nios2_debug_mem_slave_agent_m0_readdatavalid;                                                        // Nios2_debug_mem_slave_translator:uav_readdatavalid -> Nios2_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_debug_mem_slave_agent_m0_lock;                                                                 // Nios2_debug_mem_slave_agent:m0_lock -> Nios2_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_debug_mem_slave_agent_m0_writedata;                                                            // Nios2_debug_mem_slave_agent:m0_writedata -> Nios2_debug_mem_slave_translator:uav_writedata
	wire          nios2_debug_mem_slave_agent_m0_write;                                                                // Nios2_debug_mem_slave_agent:m0_write -> Nios2_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_debug_mem_slave_agent_m0_burstcount;                                                           // Nios2_debug_mem_slave_agent:m0_burstcount -> Nios2_debug_mem_slave_translator:uav_burstcount
	wire          nios2_debug_mem_slave_agent_rf_source_valid;                                                         // Nios2_debug_mem_slave_agent:rf_source_valid -> Nios2_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [137:0] nios2_debug_mem_slave_agent_rf_source_data;                                                          // Nios2_debug_mem_slave_agent:rf_source_data -> Nios2_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_debug_mem_slave_agent_rf_source_ready;                                                         // Nios2_debug_mem_slave_agent_rsp_fifo:in_ready -> Nios2_debug_mem_slave_agent:rf_source_ready
	wire          nios2_debug_mem_slave_agent_rf_source_startofpacket;                                                 // Nios2_debug_mem_slave_agent:rf_source_startofpacket -> Nios2_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_debug_mem_slave_agent_rf_source_endofpacket;                                                   // Nios2_debug_mem_slave_agent:rf_source_endofpacket -> Nios2_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_valid;                                                      // Nios2_debug_mem_slave_agent_rsp_fifo:out_valid -> Nios2_debug_mem_slave_agent:rf_sink_valid
	wire  [137:0] nios2_debug_mem_slave_agent_rsp_fifo_out_data;                                                       // Nios2_debug_mem_slave_agent_rsp_fifo:out_data -> Nios2_debug_mem_slave_agent:rf_sink_data
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_ready;                                                      // Nios2_debug_mem_slave_agent:rf_sink_ready -> Nios2_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                              // Nios2_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> Nios2_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                                // Nios2_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> Nios2_debug_mem_slave_agent:rf_sink_endofpacket
	wire          nios2_debug_mem_slave_agent_rdata_fifo_src_valid;                                                    // Nios2_debug_mem_slave_agent:rdata_fifo_src_valid -> Nios2_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] nios2_debug_mem_slave_agent_rdata_fifo_src_data;                                                     // Nios2_debug_mem_slave_agent:rdata_fifo_src_data -> Nios2_debug_mem_slave_agent_rdata_fifo:in_data
	wire          nios2_debug_mem_slave_agent_rdata_fifo_src_ready;                                                    // Nios2_debug_mem_slave_agent_rdata_fifo:in_ready -> Nios2_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_036_src_valid;                                                                               // cmd_mux_036:src_valid -> Nios2_debug_mem_slave_agent:cp_valid
	wire  [136:0] cmd_mux_036_src_data;                                                                                // cmd_mux_036:src_data -> Nios2_debug_mem_slave_agent:cp_data
	wire          cmd_mux_036_src_ready;                                                                               // Nios2_debug_mem_slave_agent:cp_ready -> cmd_mux_036:src_ready
	wire   [36:0] cmd_mux_036_src_channel;                                                                             // cmd_mux_036:src_channel -> Nios2_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_036_src_startofpacket;                                                                       // cmd_mux_036:src_startofpacket -> Nios2_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_036_src_endofpacket;                                                                         // cmd_mux_036:src_endofpacket -> Nios2_debug_mem_slave_agent:cp_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid;                                                   // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_valid -> router:sink_valid
	wire  [136:0] arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data;                                                    // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_data -> router:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready;                                                   // router:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket;                                           // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_startofpacket -> router:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket;                                             // ARM_A9_HPS_h2f_lw_axi_master_agent:write_cp_endofpacket -> router:sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid;                                                    // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_valid -> router_001:sink_valid
	wire  [136:0] arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data;                                                     // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_data -> router_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready;                                                    // router_001:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_ready
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket;                                            // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_startofpacket -> router_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket;                                              // ARM_A9_HPS_h2f_lw_axi_master_agent:read_cp_endofpacket -> router_001:sink_endofpacket
	wire          nios2_data_master_agent_cp_valid;                                                                    // Nios2_data_master_agent:cp_valid -> router_002:sink_valid
	wire  [136:0] nios2_data_master_agent_cp_data;                                                                     // Nios2_data_master_agent:cp_data -> router_002:sink_data
	wire          nios2_data_master_agent_cp_ready;                                                                    // router_002:sink_ready -> Nios2_data_master_agent:cp_ready
	wire          nios2_data_master_agent_cp_startofpacket;                                                            // Nios2_data_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          nios2_data_master_agent_cp_endofpacket;                                                              // Nios2_data_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                                // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [136:0] router_002_src_data;                                                                                 // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                                // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [36:0] router_002_src_channel;                                                                              // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                                        // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                          // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          nios2_2nd_core_data_master_agent_cp_valid;                                                           // Nios2_2nd_Core_data_master_agent:cp_valid -> router_003:sink_valid
	wire  [136:0] nios2_2nd_core_data_master_agent_cp_data;                                                            // Nios2_2nd_Core_data_master_agent:cp_data -> router_003:sink_data
	wire          nios2_2nd_core_data_master_agent_cp_ready;                                                           // router_003:sink_ready -> Nios2_2nd_Core_data_master_agent:cp_ready
	wire          nios2_2nd_core_data_master_agent_cp_startofpacket;                                                   // Nios2_2nd_Core_data_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          nios2_2nd_core_data_master_agent_cp_endofpacket;                                                     // Nios2_2nd_Core_data_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                                // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [136:0] router_003_src_data;                                                                                 // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                                // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [36:0] router_003_src_channel;                                                                              // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                                        // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                          // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          jtag_to_fpga_bridge_master_agent_cp_valid;                                                           // JTAG_to_FPGA_Bridge_master_agent:cp_valid -> router_004:sink_valid
	wire  [136:0] jtag_to_fpga_bridge_master_agent_cp_data;                                                            // JTAG_to_FPGA_Bridge_master_agent:cp_data -> router_004:sink_data
	wire          jtag_to_fpga_bridge_master_agent_cp_ready;                                                           // router_004:sink_ready -> JTAG_to_FPGA_Bridge_master_agent:cp_ready
	wire          jtag_to_fpga_bridge_master_agent_cp_startofpacket;                                                   // JTAG_to_FPGA_Bridge_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          jtag_to_fpga_bridge_master_agent_cp_endofpacket;                                                     // JTAG_to_FPGA_Bridge_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          nios2_2nd_core_instruction_master_agent_cp_valid;                                                    // Nios2_2nd_Core_instruction_master_agent:cp_valid -> router_005:sink_valid
	wire  [136:0] nios2_2nd_core_instruction_master_agent_cp_data;                                                     // Nios2_2nd_Core_instruction_master_agent:cp_data -> router_005:sink_data
	wire          nios2_2nd_core_instruction_master_agent_cp_ready;                                                    // router_005:sink_ready -> Nios2_2nd_Core_instruction_master_agent:cp_ready
	wire          nios2_2nd_core_instruction_master_agent_cp_startofpacket;                                            // Nios2_2nd_Core_instruction_master_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          nios2_2nd_core_instruction_master_agent_cp_endofpacket;                                              // Nios2_2nd_Core_instruction_master_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          nios2_instruction_master_agent_cp_valid;                                                             // Nios2_instruction_master_agent:cp_valid -> router_006:sink_valid
	wire  [136:0] nios2_instruction_master_agent_cp_data;                                                              // Nios2_instruction_master_agent:cp_data -> router_006:sink_data
	wire          nios2_instruction_master_agent_cp_ready;                                                             // router_006:sink_ready -> Nios2_instruction_master_agent:cp_ready
	wire          nios2_instruction_master_agent_cp_startofpacket;                                                     // Nios2_instruction_master_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          nios2_instruction_master_agent_cp_endofpacket;                                                       // Nios2_instruction_master_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          vga_subsystem_pixel_dma_master_agent_cp_valid;                                                       // VGA_Subsystem_pixel_dma_master_agent:cp_valid -> router_007:sink_valid
	wire  [109:0] vga_subsystem_pixel_dma_master_agent_cp_data;                                                        // VGA_Subsystem_pixel_dma_master_agent:cp_data -> router_007:sink_data
	wire          vga_subsystem_pixel_dma_master_agent_cp_ready;                                                       // router_007:sink_ready -> VGA_Subsystem_pixel_dma_master_agent:cp_ready
	wire          vga_subsystem_pixel_dma_master_agent_cp_startofpacket;                                               // VGA_Subsystem_pixel_dma_master_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          vga_subsystem_pixel_dma_master_agent_cp_endofpacket;                                                 // VGA_Subsystem_pixel_dma_master_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_valid;                                                      // ARM_A9_HPS_h2f_axi_master_agent:write_cp_valid -> router_008:sink_valid
	wire  [244:0] arm_a9_hps_h2f_axi_master_agent_write_cp_data;                                                       // ARM_A9_HPS_h2f_axi_master_agent:write_cp_data -> router_008:sink_data
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_ready;                                                      // router_008:sink_ready -> ARM_A9_HPS_h2f_axi_master_agent:write_cp_ready
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket;                                              // ARM_A9_HPS_h2f_axi_master_agent:write_cp_startofpacket -> router_008:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket;                                                // ARM_A9_HPS_h2f_axi_master_agent:write_cp_endofpacket -> router_008:sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_valid;                                                       // ARM_A9_HPS_h2f_axi_master_agent:read_cp_valid -> router_009:sink_valid
	wire  [244:0] arm_a9_hps_h2f_axi_master_agent_read_cp_data;                                                        // ARM_A9_HPS_h2f_axi_master_agent:read_cp_data -> router_009:sink_data
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_ready;                                                       // router_009:sink_ready -> ARM_A9_HPS_h2f_axi_master_agent:read_cp_ready
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket;                                               // ARM_A9_HPS_h2f_axi_master_agent:read_cp_startofpacket -> router_009:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket;                                                 // ARM_A9_HPS_h2f_axi_master_agent:read_cp_endofpacket -> router_009:sink_endofpacket
	wire          video_in_subsystem_video_in_dma_master_agent_cp_valid;                                               // Video_In_Subsystem_video_in_dma_master_agent:cp_valid -> router_010:sink_valid
	wire  [118:0] video_in_subsystem_video_in_dma_master_agent_cp_data;                                                // Video_In_Subsystem_video_in_dma_master_agent:cp_data -> router_010:sink_data
	wire          video_in_subsystem_video_in_dma_master_agent_cp_ready;                                               // router_010:sink_ready -> Video_In_Subsystem_video_in_dma_master_agent:cp_ready
	wire          video_in_subsystem_video_in_dma_master_agent_cp_startofpacket;                                       // Video_In_Subsystem_video_in_dma_master_agent:cp_startofpacket -> router_010:sink_startofpacket
	wire          video_in_subsystem_video_in_dma_master_agent_cp_endofpacket;                                         // Video_In_Subsystem_video_in_dma_master_agent:cp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                                // router_010:src_valid -> cmd_demux_010:sink_valid
	wire  [118:0] router_010_src_data;                                                                                 // router_010:src_data -> cmd_demux_010:sink_data
	wire          router_010_src_ready;                                                                                // cmd_demux_010:sink_ready -> router_010:src_ready
	wire   [36:0] router_010_src_channel;                                                                              // router_010:src_channel -> cmd_demux_010:sink_channel
	wire          router_010_src_startofpacket;                                                                        // router_010:src_startofpacket -> cmd_demux_010:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                          // router_010:src_endofpacket -> cmd_demux_010:sink_endofpacket
	wire          video_in_dma_addr_translation_master_agent_cp_valid;                                                 // Video_In_DMA_Addr_Translation_master_agent:cp_valid -> router_011:sink_valid
	wire  [136:0] video_in_dma_addr_translation_master_agent_cp_data;                                                  // Video_In_DMA_Addr_Translation_master_agent:cp_data -> router_011:sink_data
	wire          video_in_dma_addr_translation_master_agent_cp_ready;                                                 // router_011:sink_ready -> Video_In_DMA_Addr_Translation_master_agent:cp_ready
	wire          video_in_dma_addr_translation_master_agent_cp_startofpacket;                                         // Video_In_DMA_Addr_Translation_master_agent:cp_startofpacket -> router_011:sink_startofpacket
	wire          video_in_dma_addr_translation_master_agent_cp_endofpacket;                                           // Video_In_DMA_Addr_Translation_master_agent:cp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                                // router_011:src_valid -> cmd_demux_011:sink_valid
	wire  [136:0] router_011_src_data;                                                                                 // router_011:src_data -> cmd_demux_011:sink_data
	wire          router_011_src_ready;                                                                                // cmd_demux_011:sink_ready -> router_011:src_ready
	wire   [36:0] router_011_src_channel;                                                                              // router_011:src_channel -> cmd_demux_011:sink_channel
	wire          router_011_src_startofpacket;                                                                        // router_011:src_startofpacket -> cmd_demux_011:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                          // router_011:src_endofpacket -> cmd_demux_011:sink_endofpacket
	wire          pixel_dma_addr_translation_master_agent_cp_valid;                                                    // Pixel_DMA_Addr_Translation_master_agent:cp_valid -> router_012:sink_valid
	wire  [136:0] pixel_dma_addr_translation_master_agent_cp_data;                                                     // Pixel_DMA_Addr_Translation_master_agent:cp_data -> router_012:sink_data
	wire          pixel_dma_addr_translation_master_agent_cp_ready;                                                    // router_012:sink_ready -> Pixel_DMA_Addr_Translation_master_agent:cp_ready
	wire          pixel_dma_addr_translation_master_agent_cp_startofpacket;                                            // Pixel_DMA_Addr_Translation_master_agent:cp_startofpacket -> router_012:sink_startofpacket
	wire          pixel_dma_addr_translation_master_agent_cp_endofpacket;                                              // Pixel_DMA_Addr_Translation_master_agent:cp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                                // router_012:src_valid -> cmd_demux_012:sink_valid
	wire  [136:0] router_012_src_data;                                                                                 // router_012:src_data -> cmd_demux_012:sink_data
	wire          router_012_src_ready;                                                                                // cmd_demux_012:sink_ready -> router_012:src_ready
	wire   [36:0] router_012_src_channel;                                                                              // router_012:src_channel -> cmd_demux_012:sink_channel
	wire          router_012_src_startofpacket;                                                                        // router_012:src_startofpacket -> cmd_demux_012:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                          // router_012:src_endofpacket -> cmd_demux_012:sink_endofpacket
	wire          adc_adc_slave_agent_rp_valid;                                                                        // ADC_adc_slave_agent:rp_valid -> router_013:sink_valid
	wire  [136:0] adc_adc_slave_agent_rp_data;                                                                         // ADC_adc_slave_agent:rp_data -> router_013:sink_data
	wire          adc_adc_slave_agent_rp_ready;                                                                        // router_013:sink_ready -> ADC_adc_slave_agent:rp_ready
	wire          adc_adc_slave_agent_rp_startofpacket;                                                                // ADC_adc_slave_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          adc_adc_slave_agent_rp_endofpacket;                                                                  // ADC_adc_slave_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                                // router_013:src_valid -> rsp_demux:sink_valid
	wire  [136:0] router_013_src_data;                                                                                 // router_013:src_data -> rsp_demux:sink_data
	wire          router_013_src_ready;                                                                                // rsp_demux:sink_ready -> router_013:src_ready
	wire   [36:0] router_013_src_channel;                                                                              // router_013:src_channel -> rsp_demux:sink_channel
	wire          router_013_src_startofpacket;                                                                        // router_013:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                          // router_013:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          audio_subsystem_audio_slave_agent_rp_valid;                                                          // Audio_Subsystem_audio_slave_agent:rp_valid -> router_014:sink_valid
	wire  [136:0] audio_subsystem_audio_slave_agent_rp_data;                                                           // Audio_Subsystem_audio_slave_agent:rp_data -> router_014:sink_data
	wire          audio_subsystem_audio_slave_agent_rp_ready;                                                          // router_014:sink_ready -> Audio_Subsystem_audio_slave_agent:rp_ready
	wire          audio_subsystem_audio_slave_agent_rp_startofpacket;                                                  // Audio_Subsystem_audio_slave_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          audio_subsystem_audio_slave_agent_rp_endofpacket;                                                    // Audio_Subsystem_audio_slave_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                                // router_014:src_valid -> rsp_demux_001:sink_valid
	wire  [136:0] router_014_src_data;                                                                                 // router_014:src_data -> rsp_demux_001:sink_data
	wire          router_014_src_ready;                                                                                // rsp_demux_001:sink_ready -> router_014:src_ready
	wire   [36:0] router_014_src_channel;                                                                              // router_014:src_channel -> rsp_demux_001:sink_channel
	wire          router_014_src_startofpacket;                                                                        // router_014:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                          // router_014:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          av_config_avalon_av_config_slave_agent_rp_valid;                                                     // AV_Config_avalon_av_config_slave_agent:rp_valid -> router_015:sink_valid
	wire  [136:0] av_config_avalon_av_config_slave_agent_rp_data;                                                      // AV_Config_avalon_av_config_slave_agent:rp_data -> router_015:sink_data
	wire          av_config_avalon_av_config_slave_agent_rp_ready;                                                     // router_015:sink_ready -> AV_Config_avalon_av_config_slave_agent:rp_ready
	wire          av_config_avalon_av_config_slave_agent_rp_startofpacket;                                             // AV_Config_avalon_av_config_slave_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          av_config_avalon_av_config_slave_agent_rp_endofpacket;                                               // AV_Config_avalon_av_config_slave_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                                // router_015:src_valid -> rsp_demux_002:sink_valid
	wire  [136:0] router_015_src_data;                                                                                 // router_015:src_data -> rsp_demux_002:sink_data
	wire          router_015_src_ready;                                                                                // rsp_demux_002:sink_ready -> router_015:src_ready
	wire   [36:0] router_015_src_channel;                                                                              // router_015:src_channel -> rsp_demux_002:sink_channel
	wire          router_015_src_startofpacket;                                                                        // router_015:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                          // router_015:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          irda_avalon_irda_slave_agent_rp_valid;                                                               // IrDA_avalon_irda_slave_agent:rp_valid -> router_016:sink_valid
	wire  [136:0] irda_avalon_irda_slave_agent_rp_data;                                                                // IrDA_avalon_irda_slave_agent:rp_data -> router_016:sink_data
	wire          irda_avalon_irda_slave_agent_rp_ready;                                                               // router_016:sink_ready -> IrDA_avalon_irda_slave_agent:rp_ready
	wire          irda_avalon_irda_slave_agent_rp_startofpacket;                                                       // IrDA_avalon_irda_slave_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          irda_avalon_irda_slave_agent_rp_endofpacket;                                                         // IrDA_avalon_irda_slave_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                                // router_016:src_valid -> rsp_demux_003:sink_valid
	wire  [136:0] router_016_src_data;                                                                                 // router_016:src_data -> rsp_demux_003:sink_data
	wire          router_016_src_ready;                                                                                // rsp_demux_003:sink_ready -> router_016:src_ready
	wire   [36:0] router_016_src_channel;                                                                              // router_016:src_channel -> rsp_demux_003:sink_channel
	wire          router_016_src_startofpacket;                                                                        // router_016:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                          // router_016:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          ps2_port_avalon_ps2_slave_agent_rp_valid;                                                            // PS2_Port_avalon_ps2_slave_agent:rp_valid -> router_017:sink_valid
	wire  [136:0] ps2_port_avalon_ps2_slave_agent_rp_data;                                                             // PS2_Port_avalon_ps2_slave_agent:rp_data -> router_017:sink_data
	wire          ps2_port_avalon_ps2_slave_agent_rp_ready;                                                            // router_017:sink_ready -> PS2_Port_avalon_ps2_slave_agent:rp_ready
	wire          ps2_port_avalon_ps2_slave_agent_rp_startofpacket;                                                    // PS2_Port_avalon_ps2_slave_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          ps2_port_avalon_ps2_slave_agent_rp_endofpacket;                                                      // PS2_Port_avalon_ps2_slave_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                                // router_017:src_valid -> rsp_demux_004:sink_valid
	wire  [136:0] router_017_src_data;                                                                                 // router_017:src_data -> rsp_demux_004:sink_data
	wire          router_017_src_ready;                                                                                // rsp_demux_004:sink_ready -> router_017:src_ready
	wire   [36:0] router_017_src_channel;                                                                              // router_017:src_channel -> rsp_demux_004:sink_channel
	wire          router_017_src_startofpacket;                                                                        // router_017:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                          // router_017:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          ps2_port_dual_avalon_ps2_slave_agent_rp_valid;                                                       // PS2_Port_Dual_avalon_ps2_slave_agent:rp_valid -> router_018:sink_valid
	wire  [136:0] ps2_port_dual_avalon_ps2_slave_agent_rp_data;                                                        // PS2_Port_Dual_avalon_ps2_slave_agent:rp_data -> router_018:sink_data
	wire          ps2_port_dual_avalon_ps2_slave_agent_rp_ready;                                                       // router_018:sink_ready -> PS2_Port_Dual_avalon_ps2_slave_agent:rp_ready
	wire          ps2_port_dual_avalon_ps2_slave_agent_rp_startofpacket;                                               // PS2_Port_Dual_avalon_ps2_slave_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          ps2_port_dual_avalon_ps2_slave_agent_rp_endofpacket;                                                 // PS2_Port_Dual_avalon_ps2_slave_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                                // router_018:src_valid -> rsp_demux_005:sink_valid
	wire  [136:0] router_018_src_data;                                                                                 // router_018:src_data -> rsp_demux_005:sink_data
	wire          router_018_src_ready;                                                                                // rsp_demux_005:sink_ready -> router_018:src_ready
	wire   [36:0] router_018_src_channel;                                                                              // router_018:src_channel -> rsp_demux_005:sink_channel
	wire          router_018_src_startofpacket;                                                                        // router_018:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                          // router_018:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_valid;                                              // VGA_Subsystem_char_buffer_control_slave_agent:rp_valid -> router_019:sink_valid
	wire  [136:0] vga_subsystem_char_buffer_control_slave_agent_rp_data;                                               // VGA_Subsystem_char_buffer_control_slave_agent:rp_data -> router_019:sink_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_ready;                                              // router_019:sink_ready -> VGA_Subsystem_char_buffer_control_slave_agent:rp_ready
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_startofpacket;                                      // VGA_Subsystem_char_buffer_control_slave_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_agent_rp_endofpacket;                                        // VGA_Subsystem_char_buffer_control_slave_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                                // router_019:src_valid -> rsp_demux_006:sink_valid
	wire  [136:0] router_019_src_data;                                                                                 // router_019:src_data -> rsp_demux_006:sink_data
	wire          router_019_src_ready;                                                                                // rsp_demux_006:sink_ready -> router_019:src_ready
	wire   [36:0] router_019_src_channel;                                                                              // router_019:src_channel -> rsp_demux_006:sink_channel
	wire          router_019_src_startofpacket;                                                                        // router_019:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                          // router_019:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                                                  // SysID_control_slave_agent:rp_valid -> router_020:sink_valid
	wire  [136:0] sysid_control_slave_agent_rp_data;                                                                   // SysID_control_slave_agent:rp_data -> router_020:sink_data
	wire          sysid_control_slave_agent_rp_ready;                                                                  // router_020:sink_ready -> SysID_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                                          // SysID_control_slave_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                                            // SysID_control_slave_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                                // router_020:src_valid -> rsp_demux_007:sink_valid
	wire  [136:0] router_020_src_data;                                                                                 // router_020:src_data -> rsp_demux_007:sink_data
	wire          router_020_src_ready;                                                                                // rsp_demux_007:sink_ready -> router_020:src_ready
	wire   [36:0] router_020_src_channel;                                                                              // router_020:src_channel -> rsp_demux_007:sink_channel
	wire          router_020_src_startofpacket;                                                                        // router_020:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                          // router_020:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          video_in_subsystem_edge_detection_control_slave_agent_rp_valid;                                      // Video_In_Subsystem_edge_detection_control_slave_agent:rp_valid -> router_021:sink_valid
	wire  [136:0] video_in_subsystem_edge_detection_control_slave_agent_rp_data;                                       // Video_In_Subsystem_edge_detection_control_slave_agent:rp_data -> router_021:sink_data
	wire          video_in_subsystem_edge_detection_control_slave_agent_rp_ready;                                      // router_021:sink_ready -> Video_In_Subsystem_edge_detection_control_slave_agent:rp_ready
	wire          video_in_subsystem_edge_detection_control_slave_agent_rp_startofpacket;                              // Video_In_Subsystem_edge_detection_control_slave_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          video_in_subsystem_edge_detection_control_slave_agent_rp_endofpacket;                                // Video_In_Subsystem_edge_detection_control_slave_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                                // router_021:src_valid -> rsp_demux_008:sink_valid
	wire  [136:0] router_021_src_data;                                                                                 // router_021:src_data -> rsp_demux_008:sink_data
	wire          router_021_src_ready;                                                                                // rsp_demux_008:sink_ready -> router_021:src_ready
	wire   [36:0] router_021_src_channel;                                                                              // router_021:src_channel -> rsp_demux_008:sink_channel
	wire          router_021_src_startofpacket;                                                                        // router_021:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                          // router_021:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          leds_s1_agent_rp_valid;                                                                              // LEDs_s1_agent:rp_valid -> router_022:sink_valid
	wire  [136:0] leds_s1_agent_rp_data;                                                                               // LEDs_s1_agent:rp_data -> router_022:sink_data
	wire          leds_s1_agent_rp_ready;                                                                              // router_022:sink_ready -> LEDs_s1_agent:rp_ready
	wire          leds_s1_agent_rp_startofpacket;                                                                      // LEDs_s1_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          leds_s1_agent_rp_endofpacket;                                                                        // LEDs_s1_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                                // router_022:src_valid -> rsp_demux_009:sink_valid
	wire  [136:0] router_022_src_data;                                                                                 // router_022:src_data -> rsp_demux_009:sink_data
	wire          router_022_src_ready;                                                                                // rsp_demux_009:sink_ready -> router_022:src_ready
	wire   [36:0] router_022_src_channel;                                                                              // router_022:src_channel -> rsp_demux_009:sink_channel
	wire          router_022_src_startofpacket;                                                                        // router_022:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                          // router_022:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          hex3_hex0_s1_agent_rp_valid;                                                                         // HEX3_HEX0_s1_agent:rp_valid -> router_023:sink_valid
	wire  [136:0] hex3_hex0_s1_agent_rp_data;                                                                          // HEX3_HEX0_s1_agent:rp_data -> router_023:sink_data
	wire          hex3_hex0_s1_agent_rp_ready;                                                                         // router_023:sink_ready -> HEX3_HEX0_s1_agent:rp_ready
	wire          hex3_hex0_s1_agent_rp_startofpacket;                                                                 // HEX3_HEX0_s1_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          hex3_hex0_s1_agent_rp_endofpacket;                                                                   // HEX3_HEX0_s1_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                                // router_023:src_valid -> rsp_demux_010:sink_valid
	wire  [136:0] router_023_src_data;                                                                                 // router_023:src_data -> rsp_demux_010:sink_data
	wire          router_023_src_ready;                                                                                // rsp_demux_010:sink_ready -> router_023:src_ready
	wire   [36:0] router_023_src_channel;                                                                              // router_023:src_channel -> rsp_demux_010:sink_channel
	wire          router_023_src_startofpacket;                                                                        // router_023:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                          // router_023:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          hex5_hex4_s1_agent_rp_valid;                                                                         // HEX5_HEX4_s1_agent:rp_valid -> router_024:sink_valid
	wire  [136:0] hex5_hex4_s1_agent_rp_data;                                                                          // HEX5_HEX4_s1_agent:rp_data -> router_024:sink_data
	wire          hex5_hex4_s1_agent_rp_ready;                                                                         // router_024:sink_ready -> HEX5_HEX4_s1_agent:rp_ready
	wire          hex5_hex4_s1_agent_rp_startofpacket;                                                                 // HEX5_HEX4_s1_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          hex5_hex4_s1_agent_rp_endofpacket;                                                                   // HEX5_HEX4_s1_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                                                // router_024:src_valid -> rsp_demux_011:sink_valid
	wire  [136:0] router_024_src_data;                                                                                 // router_024:src_data -> rsp_demux_011:sink_data
	wire          router_024_src_ready;                                                                                // rsp_demux_011:sink_ready -> router_024:src_ready
	wire   [36:0] router_024_src_channel;                                                                              // router_024:src_channel -> rsp_demux_011:sink_channel
	wire          router_024_src_startofpacket;                                                                        // router_024:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_024_src_endofpacket;                                                                          // router_024:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          slider_switches_s1_agent_rp_valid;                                                                   // Slider_Switches_s1_agent:rp_valid -> router_025:sink_valid
	wire  [136:0] slider_switches_s1_agent_rp_data;                                                                    // Slider_Switches_s1_agent:rp_data -> router_025:sink_data
	wire          slider_switches_s1_agent_rp_ready;                                                                   // router_025:sink_ready -> Slider_Switches_s1_agent:rp_ready
	wire          slider_switches_s1_agent_rp_startofpacket;                                                           // Slider_Switches_s1_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          slider_switches_s1_agent_rp_endofpacket;                                                             // Slider_Switches_s1_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                                                // router_025:src_valid -> rsp_demux_012:sink_valid
	wire  [136:0] router_025_src_data;                                                                                 // router_025:src_data -> rsp_demux_012:sink_data
	wire          router_025_src_ready;                                                                                // rsp_demux_012:sink_ready -> router_025:src_ready
	wire   [36:0] router_025_src_channel;                                                                              // router_025:src_channel -> rsp_demux_012:sink_channel
	wire          router_025_src_startofpacket;                                                                        // router_025:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_025_src_endofpacket;                                                                          // router_025:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          pushbuttons_s1_agent_rp_valid;                                                                       // Pushbuttons_s1_agent:rp_valid -> router_026:sink_valid
	wire  [136:0] pushbuttons_s1_agent_rp_data;                                                                        // Pushbuttons_s1_agent:rp_data -> router_026:sink_data
	wire          pushbuttons_s1_agent_rp_ready;                                                                       // router_026:sink_ready -> Pushbuttons_s1_agent:rp_ready
	wire          pushbuttons_s1_agent_rp_startofpacket;                                                               // Pushbuttons_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          pushbuttons_s1_agent_rp_endofpacket;                                                                 // Pushbuttons_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                                                // router_026:src_valid -> rsp_demux_013:sink_valid
	wire  [136:0] router_026_src_data;                                                                                 // router_026:src_data -> rsp_demux_013:sink_data
	wire          router_026_src_ready;                                                                                // rsp_demux_013:sink_ready -> router_026:src_ready
	wire   [36:0] router_026_src_channel;                                                                              // router_026:src_channel -> rsp_demux_013:sink_channel
	wire          router_026_src_startofpacket;                                                                        // router_026:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_026_src_endofpacket;                                                                          // router_026:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          expansion_jp1_s1_agent_rp_valid;                                                                     // Expansion_JP1_s1_agent:rp_valid -> router_027:sink_valid
	wire  [136:0] expansion_jp1_s1_agent_rp_data;                                                                      // Expansion_JP1_s1_agent:rp_data -> router_027:sink_data
	wire          expansion_jp1_s1_agent_rp_ready;                                                                     // router_027:sink_ready -> Expansion_JP1_s1_agent:rp_ready
	wire          expansion_jp1_s1_agent_rp_startofpacket;                                                             // Expansion_JP1_s1_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          expansion_jp1_s1_agent_rp_endofpacket;                                                               // Expansion_JP1_s1_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                                                // router_027:src_valid -> rsp_demux_014:sink_valid
	wire  [136:0] router_027_src_data;                                                                                 // router_027:src_data -> rsp_demux_014:sink_data
	wire          router_027_src_ready;                                                                                // rsp_demux_014:sink_ready -> router_027:src_ready
	wire   [36:0] router_027_src_channel;                                                                              // router_027:src_channel -> rsp_demux_014:sink_channel
	wire          router_027_src_startofpacket;                                                                        // router_027:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_027_src_endofpacket;                                                                          // router_027:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          expansion_jp2_s1_agent_rp_valid;                                                                     // Expansion_JP2_s1_agent:rp_valid -> router_028:sink_valid
	wire  [136:0] expansion_jp2_s1_agent_rp_data;                                                                      // Expansion_JP2_s1_agent:rp_data -> router_028:sink_data
	wire          expansion_jp2_s1_agent_rp_ready;                                                                     // router_028:sink_ready -> Expansion_JP2_s1_agent:rp_ready
	wire          expansion_jp2_s1_agent_rp_startofpacket;                                                             // Expansion_JP2_s1_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          expansion_jp2_s1_agent_rp_endofpacket;                                                               // Expansion_JP2_s1_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                                                // router_028:src_valid -> rsp_demux_015:sink_valid
	wire  [136:0] router_028_src_data;                                                                                 // router_028:src_data -> rsp_demux_015:sink_data
	wire          router_028_src_ready;                                                                                // rsp_demux_015:sink_ready -> router_028:src_ready
	wire   [36:0] router_028_src_channel;                                                                              // router_028:src_channel -> rsp_demux_015:sink_channel
	wire          router_028_src_startofpacket;                                                                        // router_028:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_028_src_endofpacket;                                                                          // router_028:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          interval_timer_s1_agent_rp_valid;                                                                    // Interval_Timer_s1_agent:rp_valid -> router_029:sink_valid
	wire  [136:0] interval_timer_s1_agent_rp_data;                                                                     // Interval_Timer_s1_agent:rp_data -> router_029:sink_data
	wire          interval_timer_s1_agent_rp_ready;                                                                    // router_029:sink_ready -> Interval_Timer_s1_agent:rp_ready
	wire          interval_timer_s1_agent_rp_startofpacket;                                                            // Interval_Timer_s1_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          interval_timer_s1_agent_rp_endofpacket;                                                              // Interval_Timer_s1_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                                                // router_029:src_valid -> rsp_demux_016:sink_valid
	wire  [136:0] router_029_src_data;                                                                                 // router_029:src_data -> rsp_demux_016:sink_data
	wire          router_029_src_ready;                                                                                // rsp_demux_016:sink_ready -> router_029:src_ready
	wire   [36:0] router_029_src_channel;                                                                              // router_029:src_channel -> rsp_demux_016:sink_channel
	wire          router_029_src_startofpacket;                                                                        // router_029:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_029_src_endofpacket;                                                                          // router_029:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          interval_timer_2_s1_agent_rp_valid;                                                                  // Interval_Timer_2_s1_agent:rp_valid -> router_030:sink_valid
	wire  [136:0] interval_timer_2_s1_agent_rp_data;                                                                   // Interval_Timer_2_s1_agent:rp_data -> router_030:sink_data
	wire          interval_timer_2_s1_agent_rp_ready;                                                                  // router_030:sink_ready -> Interval_Timer_2_s1_agent:rp_ready
	wire          interval_timer_2_s1_agent_rp_startofpacket;                                                          // Interval_Timer_2_s1_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          interval_timer_2_s1_agent_rp_endofpacket;                                                            // Interval_Timer_2_s1_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                                                // router_030:src_valid -> rsp_demux_017:sink_valid
	wire  [136:0] router_030_src_data;                                                                                 // router_030:src_data -> rsp_demux_017:sink_data
	wire          router_030_src_ready;                                                                                // rsp_demux_017:sink_ready -> router_030:src_ready
	wire   [36:0] router_030_src_channel;                                                                              // router_030:src_channel -> rsp_demux_017:sink_channel
	wire          router_030_src_startofpacket;                                                                        // router_030:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_030_src_endofpacket;                                                                          // router_030:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_valid;                                                // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_valid -> router_031:sink_valid
	wire  [136:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_data;                                                 // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_data -> router_031:sink_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_ready;                                                // router_031:sink_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_startofpacket;                                        // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_endofpacket;                                          // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                                                // router_031:src_valid -> rsp_demux_018:sink_valid
	wire  [136:0] router_031_src_data;                                                                                 // router_031:src_data -> rsp_demux_018:sink_data
	wire          router_031_src_ready;                                                                                // rsp_demux_018:sink_ready -> router_031:src_ready
	wire   [36:0] router_031_src_channel;                                                                              // router_031:src_channel -> rsp_demux_018:sink_channel
	wire          router_031_src_startofpacket;                                                                        // router_031:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_031_src_endofpacket;                                                                          // router_031:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_valid;                                                // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_valid -> router_032:sink_valid
	wire  [136:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_data;                                                 // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_data -> router_032:sink_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_ready;                                                // router_032:sink_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_startofpacket;                                        // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_endofpacket;                                          // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          router_032_src_valid;                                                                                // router_032:src_valid -> rsp_demux_019:sink_valid
	wire  [136:0] router_032_src_data;                                                                                 // router_032:src_data -> rsp_demux_019:sink_data
	wire          router_032_src_ready;                                                                                // rsp_demux_019:sink_ready -> router_032:src_ready
	wire   [36:0] router_032_src_channel;                                                                              // router_032:src_channel -> rsp_demux_019:sink_channel
	wire          router_032_src_startofpacket;                                                                        // router_032:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_032_src_endofpacket;                                                                          // router_032:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          pixel_dma_addr_translation_slave_agent_rp_valid;                                                     // Pixel_DMA_Addr_Translation_slave_agent:rp_valid -> router_033:sink_valid
	wire  [136:0] pixel_dma_addr_translation_slave_agent_rp_data;                                                      // Pixel_DMA_Addr_Translation_slave_agent:rp_data -> router_033:sink_data
	wire          pixel_dma_addr_translation_slave_agent_rp_ready;                                                     // router_033:sink_ready -> Pixel_DMA_Addr_Translation_slave_agent:rp_ready
	wire          pixel_dma_addr_translation_slave_agent_rp_startofpacket;                                             // Pixel_DMA_Addr_Translation_slave_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire          pixel_dma_addr_translation_slave_agent_rp_endofpacket;                                               // Pixel_DMA_Addr_Translation_slave_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          router_033_src_valid;                                                                                // router_033:src_valid -> rsp_demux_020:sink_valid
	wire  [136:0] router_033_src_data;                                                                                 // router_033:src_data -> rsp_demux_020:sink_data
	wire          router_033_src_ready;                                                                                // rsp_demux_020:sink_ready -> router_033:src_ready
	wire   [36:0] router_033_src_channel;                                                                              // router_033:src_channel -> rsp_demux_020:sink_channel
	wire          router_033_src_startofpacket;                                                                        // router_033:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_033_src_endofpacket;                                                                          // router_033:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          video_in_dma_addr_translation_slave_agent_rp_valid;                                                  // Video_In_DMA_Addr_Translation_slave_agent:rp_valid -> router_034:sink_valid
	wire  [136:0] video_in_dma_addr_translation_slave_agent_rp_data;                                                   // Video_In_DMA_Addr_Translation_slave_agent:rp_data -> router_034:sink_data
	wire          video_in_dma_addr_translation_slave_agent_rp_ready;                                                  // router_034:sink_ready -> Video_In_DMA_Addr_Translation_slave_agent:rp_ready
	wire          video_in_dma_addr_translation_slave_agent_rp_startofpacket;                                          // Video_In_DMA_Addr_Translation_slave_agent:rp_startofpacket -> router_034:sink_startofpacket
	wire          video_in_dma_addr_translation_slave_agent_rp_endofpacket;                                            // Video_In_DMA_Addr_Translation_slave_agent:rp_endofpacket -> router_034:sink_endofpacket
	wire          router_034_src_valid;                                                                                // router_034:src_valid -> rsp_demux_021:sink_valid
	wire  [136:0] router_034_src_data;                                                                                 // router_034:src_data -> rsp_demux_021:sink_data
	wire          router_034_src_ready;                                                                                // rsp_demux_021:sink_ready -> router_034:src_ready
	wire   [36:0] router_034_src_channel;                                                                              // router_034:src_channel -> rsp_demux_021:sink_channel
	wire          router_034_src_startofpacket;                                                                        // router_034:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_034_src_endofpacket;                                                                          // router_034:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                                          // JTAG_UART_avalon_jtag_slave_agent:rp_valid -> router_035:sink_valid
	wire  [136:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                                           // JTAG_UART_avalon_jtag_slave_agent:rp_data -> router_035:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                                          // router_035:sink_ready -> JTAG_UART_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                                  // JTAG_UART_avalon_jtag_slave_agent:rp_startofpacket -> router_035:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                                    // JTAG_UART_avalon_jtag_slave_agent:rp_endofpacket -> router_035:sink_endofpacket
	wire          router_035_src_valid;                                                                                // router_035:src_valid -> rsp_demux_022:sink_valid
	wire  [136:0] router_035_src_data;                                                                                 // router_035:src_data -> rsp_demux_022:sink_data
	wire          router_035_src_ready;                                                                                // rsp_demux_022:sink_ready -> router_035:src_ready
	wire   [36:0] router_035_src_channel;                                                                              // router_035:src_channel -> rsp_demux_022:sink_channel
	wire          router_035_src_startofpacket;                                                                        // router_035:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire          router_035_src_endofpacket;                                                                          // router_035:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire          vga_subsystem_char_buffer_slave_agent_rp_valid;                                                      // VGA_Subsystem_char_buffer_slave_agent:rp_valid -> router_036:sink_valid
	wire  [109:0] vga_subsystem_char_buffer_slave_agent_rp_data;                                                       // VGA_Subsystem_char_buffer_slave_agent:rp_data -> router_036:sink_data
	wire          vga_subsystem_char_buffer_slave_agent_rp_ready;                                                      // router_036:sink_ready -> VGA_Subsystem_char_buffer_slave_agent:rp_ready
	wire          vga_subsystem_char_buffer_slave_agent_rp_startofpacket;                                              // VGA_Subsystem_char_buffer_slave_agent:rp_startofpacket -> router_036:sink_startofpacket
	wire          vga_subsystem_char_buffer_slave_agent_rp_endofpacket;                                                // VGA_Subsystem_char_buffer_slave_agent:rp_endofpacket -> router_036:sink_endofpacket
	wire          router_036_src_valid;                                                                                // router_036:src_valid -> rsp_demux_023:sink_valid
	wire  [109:0] router_036_src_data;                                                                                 // router_036:src_data -> rsp_demux_023:sink_data
	wire          router_036_src_ready;                                                                                // rsp_demux_023:sink_ready -> router_036:src_ready
	wire   [36:0] router_036_src_channel;                                                                              // router_036:src_channel -> rsp_demux_023:sink_channel
	wire          router_036_src_startofpacket;                                                                        // router_036:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire          router_036_src_endofpacket;                                                                          // router_036:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rp_valid;                                                // VGA_Subsystem_pixel_dma_control_slave_agent:rp_valid -> router_037:sink_valid
	wire  [136:0] vga_subsystem_pixel_dma_control_slave_agent_rp_data;                                                 // VGA_Subsystem_pixel_dma_control_slave_agent:rp_data -> router_037:sink_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rp_ready;                                                // router_037:sink_ready -> VGA_Subsystem_pixel_dma_control_slave_agent:rp_ready
	wire          vga_subsystem_pixel_dma_control_slave_agent_rp_startofpacket;                                        // VGA_Subsystem_pixel_dma_control_slave_agent:rp_startofpacket -> router_037:sink_startofpacket
	wire          vga_subsystem_pixel_dma_control_slave_agent_rp_endofpacket;                                          // VGA_Subsystem_pixel_dma_control_slave_agent:rp_endofpacket -> router_037:sink_endofpacket
	wire          router_037_src_valid;                                                                                // router_037:src_valid -> rsp_demux_024:sink_valid
	wire  [136:0] router_037_src_data;                                                                                 // router_037:src_data -> rsp_demux_024:sink_data
	wire          router_037_src_ready;                                                                                // rsp_demux_024:sink_ready -> router_037:src_ready
	wire   [36:0] router_037_src_channel;                                                                              // router_037:src_channel -> rsp_demux_024:sink_channel
	wire          router_037_src_startofpacket;                                                                        // router_037:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire          router_037_src_endofpacket;                                                                          // router_037:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire          sdram_s1_agent_rp_valid;                                                                             // SDRAM_s1_agent:rp_valid -> router_038:sink_valid
	wire  [118:0] sdram_s1_agent_rp_data;                                                                              // SDRAM_s1_agent:rp_data -> router_038:sink_data
	wire          sdram_s1_agent_rp_ready;                                                                             // router_038:sink_ready -> SDRAM_s1_agent:rp_ready
	wire          sdram_s1_agent_rp_startofpacket;                                                                     // SDRAM_s1_agent:rp_startofpacket -> router_038:sink_startofpacket
	wire          sdram_s1_agent_rp_endofpacket;                                                                       // SDRAM_s1_agent:rp_endofpacket -> router_038:sink_endofpacket
	wire          router_038_src_valid;                                                                                // router_038:src_valid -> rsp_demux_025:sink_valid
	wire  [118:0] router_038_src_data;                                                                                 // router_038:src_data -> rsp_demux_025:sink_data
	wire          router_038_src_ready;                                                                                // rsp_demux_025:sink_ready -> router_038:src_ready
	wire   [36:0] router_038_src_channel;                                                                              // router_038:src_channel -> rsp_demux_025:sink_channel
	wire          router_038_src_startofpacket;                                                                        // router_038:src_startofpacket -> rsp_demux_025:sink_startofpacket
	wire          router_038_src_endofpacket;                                                                          // router_038:src_endofpacket -> rsp_demux_025:sink_endofpacket
	wire          onchip_sram_s1_agent_rp_valid;                                                                       // Onchip_SRAM_s1_agent:rp_valid -> router_039:sink_valid
	wire  [136:0] onchip_sram_s1_agent_rp_data;                                                                        // Onchip_SRAM_s1_agent:rp_data -> router_039:sink_data
	wire          onchip_sram_s1_agent_rp_ready;                                                                       // router_039:sink_ready -> Onchip_SRAM_s1_agent:rp_ready
	wire          onchip_sram_s1_agent_rp_startofpacket;                                                               // Onchip_SRAM_s1_agent:rp_startofpacket -> router_039:sink_startofpacket
	wire          onchip_sram_s1_agent_rp_endofpacket;                                                                 // Onchip_SRAM_s1_agent:rp_endofpacket -> router_039:sink_endofpacket
	wire          router_039_src_valid;                                                                                // router_039:src_valid -> rsp_demux_026:sink_valid
	wire  [136:0] router_039_src_data;                                                                                 // router_039:src_data -> rsp_demux_026:sink_data
	wire          router_039_src_ready;                                                                                // rsp_demux_026:sink_ready -> router_039:src_ready
	wire   [36:0] router_039_src_channel;                                                                              // router_039:src_channel -> rsp_demux_026:sink_channel
	wire          router_039_src_startofpacket;                                                                        // router_039:src_startofpacket -> rsp_demux_026:sink_startofpacket
	wire          router_039_src_endofpacket;                                                                          // router_039:src_endofpacket -> rsp_demux_026:sink_endofpacket
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rp_valid;                                        // Video_In_Subsystem_video_in_dma_control_slave_agent:rp_valid -> router_040:sink_valid
	wire  [136:0] video_in_subsystem_video_in_dma_control_slave_agent_rp_data;                                         // Video_In_Subsystem_video_in_dma_control_slave_agent:rp_data -> router_040:sink_data
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rp_ready;                                        // router_040:sink_ready -> Video_In_Subsystem_video_in_dma_control_slave_agent:rp_ready
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rp_startofpacket;                                // Video_In_Subsystem_video_in_dma_control_slave_agent:rp_startofpacket -> router_040:sink_startofpacket
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rp_endofpacket;                                  // Video_In_Subsystem_video_in_dma_control_slave_agent:rp_endofpacket -> router_040:sink_endofpacket
	wire          router_040_src_valid;                                                                                // router_040:src_valid -> rsp_demux_027:sink_valid
	wire  [136:0] router_040_src_data;                                                                                 // router_040:src_data -> rsp_demux_027:sink_data
	wire          router_040_src_ready;                                                                                // rsp_demux_027:sink_ready -> router_040:src_ready
	wire   [36:0] router_040_src_channel;                                                                              // router_040:src_channel -> rsp_demux_027:sink_channel
	wire          router_040_src_startofpacket;                                                                        // router_040:src_startofpacket -> rsp_demux_027:sink_startofpacket
	wire          router_040_src_endofpacket;                                                                          // router_040:src_endofpacket -> rsp_demux_027:sink_endofpacket
	wire          f2h_mem_window_00000000_windowed_slave_agent_rp_valid;                                               // F2H_Mem_Window_00000000_windowed_slave_agent:rp_valid -> router_041:sink_valid
	wire  [136:0] f2h_mem_window_00000000_windowed_slave_agent_rp_data;                                                // F2H_Mem_Window_00000000_windowed_slave_agent:rp_data -> router_041:sink_data
	wire          f2h_mem_window_00000000_windowed_slave_agent_rp_ready;                                               // router_041:sink_ready -> F2H_Mem_Window_00000000_windowed_slave_agent:rp_ready
	wire          f2h_mem_window_00000000_windowed_slave_agent_rp_startofpacket;                                       // F2H_Mem_Window_00000000_windowed_slave_agent:rp_startofpacket -> router_041:sink_startofpacket
	wire          f2h_mem_window_00000000_windowed_slave_agent_rp_endofpacket;                                         // F2H_Mem_Window_00000000_windowed_slave_agent:rp_endofpacket -> router_041:sink_endofpacket
	wire          router_041_src_valid;                                                                                // router_041:src_valid -> rsp_demux_028:sink_valid
	wire  [136:0] router_041_src_data;                                                                                 // router_041:src_data -> rsp_demux_028:sink_data
	wire          router_041_src_ready;                                                                                // rsp_demux_028:sink_ready -> router_041:src_ready
	wire   [36:0] router_041_src_channel;                                                                              // router_041:src_channel -> rsp_demux_028:sink_channel
	wire          router_041_src_startofpacket;                                                                        // router_041:src_startofpacket -> rsp_demux_028:sink_startofpacket
	wire          router_041_src_endofpacket;                                                                          // router_041:src_endofpacket -> rsp_demux_028:sink_endofpacket
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rp_valid;                                               // F2H_Mem_Window_FF600000_windowed_slave_agent:rp_valid -> router_042:sink_valid
	wire  [136:0] f2h_mem_window_ff600000_windowed_slave_agent_rp_data;                                                // F2H_Mem_Window_FF600000_windowed_slave_agent:rp_data -> router_042:sink_data
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rp_ready;                                               // router_042:sink_ready -> F2H_Mem_Window_FF600000_windowed_slave_agent:rp_ready
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rp_startofpacket;                                       // F2H_Mem_Window_FF600000_windowed_slave_agent:rp_startofpacket -> router_042:sink_startofpacket
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rp_endofpacket;                                         // F2H_Mem_Window_FF600000_windowed_slave_agent:rp_endofpacket -> router_042:sink_endofpacket
	wire          router_042_src_valid;                                                                                // router_042:src_valid -> rsp_demux_029:sink_valid
	wire  [136:0] router_042_src_data;                                                                                 // router_042:src_data -> rsp_demux_029:sink_data
	wire          router_042_src_ready;                                                                                // rsp_demux_029:sink_ready -> router_042:src_ready
	wire   [36:0] router_042_src_channel;                                                                              // router_042:src_channel -> rsp_demux_029:sink_channel
	wire          router_042_src_startofpacket;                                                                        // router_042:src_startofpacket -> rsp_demux_029:sink_startofpacket
	wire          router_042_src_endofpacket;                                                                          // router_042:src_endofpacket -> rsp_demux_029:sink_endofpacket
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rp_valid;                                               // F2H_Mem_Window_FF800000_windowed_slave_agent:rp_valid -> router_043:sink_valid
	wire  [136:0] f2h_mem_window_ff800000_windowed_slave_agent_rp_data;                                                // F2H_Mem_Window_FF800000_windowed_slave_agent:rp_data -> router_043:sink_data
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rp_ready;                                               // router_043:sink_ready -> F2H_Mem_Window_FF800000_windowed_slave_agent:rp_ready
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rp_startofpacket;                                       // F2H_Mem_Window_FF800000_windowed_slave_agent:rp_startofpacket -> router_043:sink_startofpacket
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rp_endofpacket;                                         // F2H_Mem_Window_FF800000_windowed_slave_agent:rp_endofpacket -> router_043:sink_endofpacket
	wire          router_043_src_valid;                                                                                // router_043:src_valid -> rsp_demux_030:sink_valid
	wire  [136:0] router_043_src_data;                                                                                 // router_043:src_data -> rsp_demux_030:sink_data
	wire          router_043_src_ready;                                                                                // rsp_demux_030:sink_ready -> router_043:src_ready
	wire   [36:0] router_043_src_channel;                                                                              // router_043:src_channel -> rsp_demux_030:sink_channel
	wire          router_043_src_startofpacket;                                                                        // router_043:src_startofpacket -> rsp_demux_030:sink_startofpacket
	wire          router_043_src_endofpacket;                                                                          // router_043:src_endofpacket -> rsp_demux_030:sink_endofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_valid;                                                 // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_valid -> router_044:sink_valid
	wire  [136:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_data;                                                  // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_data -> router_044:sink_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_ready;                                                 // router_044:sink_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_startofpacket;                                         // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_startofpacket -> router_044:sink_startofpacket
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_endofpacket;                                           // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rp_endofpacket -> router_044:sink_endofpacket
	wire          router_044_src_valid;                                                                                // router_044:src_valid -> rsp_demux_031:sink_valid
	wire  [136:0] router_044_src_data;                                                                                 // router_044:src_data -> rsp_demux_031:sink_data
	wire          router_044_src_ready;                                                                                // rsp_demux_031:sink_ready -> router_044:src_ready
	wire   [36:0] router_044_src_channel;                                                                              // router_044:src_channel -> rsp_demux_031:sink_channel
	wire          router_044_src_startofpacket;                                                                        // router_044:src_startofpacket -> rsp_demux_031:sink_startofpacket
	wire          router_044_src_endofpacket;                                                                          // router_044:src_endofpacket -> rsp_demux_031:sink_endofpacket
	wire          nios2_2nd_core_debug_mem_slave_agent_rp_valid;                                                       // Nios2_2nd_Core_debug_mem_slave_agent:rp_valid -> router_045:sink_valid
	wire  [136:0] nios2_2nd_core_debug_mem_slave_agent_rp_data;                                                        // Nios2_2nd_Core_debug_mem_slave_agent:rp_data -> router_045:sink_data
	wire          nios2_2nd_core_debug_mem_slave_agent_rp_ready;                                                       // router_045:sink_ready -> Nios2_2nd_Core_debug_mem_slave_agent:rp_ready
	wire          nios2_2nd_core_debug_mem_slave_agent_rp_startofpacket;                                               // Nios2_2nd_Core_debug_mem_slave_agent:rp_startofpacket -> router_045:sink_startofpacket
	wire          nios2_2nd_core_debug_mem_slave_agent_rp_endofpacket;                                                 // Nios2_2nd_Core_debug_mem_slave_agent:rp_endofpacket -> router_045:sink_endofpacket
	wire          router_045_src_valid;                                                                                // router_045:src_valid -> rsp_demux_032:sink_valid
	wire  [136:0] router_045_src_data;                                                                                 // router_045:src_data -> rsp_demux_032:sink_data
	wire          router_045_src_ready;                                                                                // rsp_demux_032:sink_ready -> router_045:src_ready
	wire   [36:0] router_045_src_channel;                                                                              // router_045:src_channel -> rsp_demux_032:sink_channel
	wire          router_045_src_startofpacket;                                                                        // router_045:src_startofpacket -> rsp_demux_032:sink_startofpacket
	wire          router_045_src_endofpacket;                                                                          // router_045:src_endofpacket -> rsp_demux_032:sink_endofpacket
	wire          interval_timer_2nd_core_s1_agent_rp_valid;                                                           // Interval_Timer_2nd_Core_s1_agent:rp_valid -> router_046:sink_valid
	wire  [136:0] interval_timer_2nd_core_s1_agent_rp_data;                                                            // Interval_Timer_2nd_Core_s1_agent:rp_data -> router_046:sink_data
	wire          interval_timer_2nd_core_s1_agent_rp_ready;                                                           // router_046:sink_ready -> Interval_Timer_2nd_Core_s1_agent:rp_ready
	wire          interval_timer_2nd_core_s1_agent_rp_startofpacket;                                                   // Interval_Timer_2nd_Core_s1_agent:rp_startofpacket -> router_046:sink_startofpacket
	wire          interval_timer_2nd_core_s1_agent_rp_endofpacket;                                                     // Interval_Timer_2nd_Core_s1_agent:rp_endofpacket -> router_046:sink_endofpacket
	wire          router_046_src_valid;                                                                                // router_046:src_valid -> rsp_demux_033:sink_valid
	wire  [136:0] router_046_src_data;                                                                                 // router_046:src_data -> rsp_demux_033:sink_data
	wire          router_046_src_ready;                                                                                // rsp_demux_033:sink_ready -> router_046:src_ready
	wire   [36:0] router_046_src_channel;                                                                              // router_046:src_channel -> rsp_demux_033:sink_channel
	wire          router_046_src_startofpacket;                                                                        // router_046:src_startofpacket -> rsp_demux_033:sink_startofpacket
	wire          router_046_src_endofpacket;                                                                          // router_046:src_endofpacket -> rsp_demux_033:sink_endofpacket
	wire          interval_timer_2nd_core_2_s1_agent_rp_valid;                                                         // Interval_Timer_2nd_Core_2_s1_agent:rp_valid -> router_047:sink_valid
	wire  [136:0] interval_timer_2nd_core_2_s1_agent_rp_data;                                                          // Interval_Timer_2nd_Core_2_s1_agent:rp_data -> router_047:sink_data
	wire          interval_timer_2nd_core_2_s1_agent_rp_ready;                                                         // router_047:sink_ready -> Interval_Timer_2nd_Core_2_s1_agent:rp_ready
	wire          interval_timer_2nd_core_2_s1_agent_rp_startofpacket;                                                 // Interval_Timer_2nd_Core_2_s1_agent:rp_startofpacket -> router_047:sink_startofpacket
	wire          interval_timer_2nd_core_2_s1_agent_rp_endofpacket;                                                   // Interval_Timer_2nd_Core_2_s1_agent:rp_endofpacket -> router_047:sink_endofpacket
	wire          router_047_src_valid;                                                                                // router_047:src_valid -> rsp_demux_034:sink_valid
	wire  [136:0] router_047_src_data;                                                                                 // router_047:src_data -> rsp_demux_034:sink_data
	wire          router_047_src_ready;                                                                                // rsp_demux_034:sink_ready -> router_047:src_ready
	wire   [36:0] router_047_src_channel;                                                                              // router_047:src_channel -> rsp_demux_034:sink_channel
	wire          router_047_src_startofpacket;                                                                        // router_047:src_startofpacket -> rsp_demux_034:sink_startofpacket
	wire          router_047_src_endofpacket;                                                                          // router_047:src_endofpacket -> rsp_demux_034:sink_endofpacket
	wire          onchip_sram_s2_agent_rp_valid;                                                                       // Onchip_SRAM_s2_agent:rp_valid -> router_048:sink_valid
	wire  [136:0] onchip_sram_s2_agent_rp_data;                                                                        // Onchip_SRAM_s2_agent:rp_data -> router_048:sink_data
	wire          onchip_sram_s2_agent_rp_ready;                                                                       // router_048:sink_ready -> Onchip_SRAM_s2_agent:rp_ready
	wire          onchip_sram_s2_agent_rp_startofpacket;                                                               // Onchip_SRAM_s2_agent:rp_startofpacket -> router_048:sink_startofpacket
	wire          onchip_sram_s2_agent_rp_endofpacket;                                                                 // Onchip_SRAM_s2_agent:rp_endofpacket -> router_048:sink_endofpacket
	wire          router_048_src_valid;                                                                                // router_048:src_valid -> rsp_demux_035:sink_valid
	wire  [136:0] router_048_src_data;                                                                                 // router_048:src_data -> rsp_demux_035:sink_data
	wire          router_048_src_ready;                                                                                // rsp_demux_035:sink_ready -> router_048:src_ready
	wire   [36:0] router_048_src_channel;                                                                              // router_048:src_channel -> rsp_demux_035:sink_channel
	wire          router_048_src_startofpacket;                                                                        // router_048:src_startofpacket -> rsp_demux_035:sink_startofpacket
	wire          router_048_src_endofpacket;                                                                          // router_048:src_endofpacket -> rsp_demux_035:sink_endofpacket
	wire          nios2_debug_mem_slave_agent_rp_valid;                                                                // Nios2_debug_mem_slave_agent:rp_valid -> router_049:sink_valid
	wire  [136:0] nios2_debug_mem_slave_agent_rp_data;                                                                 // Nios2_debug_mem_slave_agent:rp_data -> router_049:sink_data
	wire          nios2_debug_mem_slave_agent_rp_ready;                                                                // router_049:sink_ready -> Nios2_debug_mem_slave_agent:rp_ready
	wire          nios2_debug_mem_slave_agent_rp_startofpacket;                                                        // Nios2_debug_mem_slave_agent:rp_startofpacket -> router_049:sink_startofpacket
	wire          nios2_debug_mem_slave_agent_rp_endofpacket;                                                          // Nios2_debug_mem_slave_agent:rp_endofpacket -> router_049:sink_endofpacket
	wire          router_049_src_valid;                                                                                // router_049:src_valid -> rsp_demux_036:sink_valid
	wire  [136:0] router_049_src_data;                                                                                 // router_049:src_data -> rsp_demux_036:sink_data
	wire          router_049_src_ready;                                                                                // rsp_demux_036:sink_ready -> router_049:src_ready
	wire   [36:0] router_049_src_channel;                                                                              // router_049:src_channel -> rsp_demux_036:sink_channel
	wire          router_049_src_startofpacket;                                                                        // router_049:src_startofpacket -> rsp_demux_036:sink_startofpacket
	wire          router_049_src_endofpacket;                                                                          // router_049:src_endofpacket -> rsp_demux_036:sink_endofpacket
	wire          router_src_valid;                                                                                    // router:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_valid
	wire  [136:0] router_src_data;                                                                                     // router:src_data -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_data
	wire          router_src_ready;                                                                                    // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_ready -> router:src_ready
	wire   [36:0] router_src_channel;                                                                                  // router:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                                            // router:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                                              // router:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [136:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data;                                                // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_data -> cmd_demux:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready;                                               // cmd_demux:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_ready
	wire   [36:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel;                                             // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket;                                       // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket;                                         // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                                                   // rsp_mux:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_valid
	wire  [136:0] rsp_mux_src_data;                                                                                    // rsp_mux:src_data -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_src_ready;                                                                                   // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire   [36:0] rsp_mux_src_channel;                                                                                 // rsp_mux:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_src_startofpacket;                                                                           // rsp_mux:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                             // rsp_mux:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid;                                               // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_valid
	wire  [136:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data;                                                // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_data -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready;                                               // ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_ready -> ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_ready
	wire   [36:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel;                                             // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket;                                       // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket;                                         // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:write_rp_endofpacket
	wire          router_001_src_valid;                                                                                // router_001:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_valid
	wire  [136:0] router_001_src_data;                                                                                 // router_001:src_data -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                                // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [36:0] router_001_src_channel;                                                                              // router_001:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                                        // router_001:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                          // router_001:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [136:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data;                                                // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready;                                               // cmd_demux_001:sink_ready -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_ready
	wire   [36:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel;                                             // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket;                                       // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket;                                         // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                               // rsp_mux_001:src_valid -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_valid
	wire  [136:0] rsp_mux_001_src_data;                                                                                // rsp_mux_001:src_data -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                               // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [36:0] rsp_mux_001_src_channel;                                                                             // rsp_mux_001:src_channel -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                                       // rsp_mux_001:src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                         // rsp_mux_001:src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid;                                               // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_valid
	wire  [136:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data;                                                // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_data -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_data
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready;                                               // ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_ready -> ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_ready
	wire   [36:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel;                                             // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_channel
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket;                                       // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_startofpacket
	wire          arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket;                                         // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_lw_axi_master_agent:read_rp_endofpacket
	wire          router_004_src_valid;                                                                                // router_004:src_valid -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_valid
	wire  [136:0] router_004_src_data;                                                                                 // router_004:src_data -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_data
	wire          router_004_src_ready;                                                                                // JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_ready -> router_004:src_ready
	wire   [36:0] router_004_src_channel;                                                                              // router_004:src_channel -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_channel
	wire          router_004_src_startofpacket;                                                                        // router_004:src_startofpacket -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_startofpacket
	wire          router_004_src_endofpacket;                                                                          // router_004:src_endofpacket -> JTAG_to_FPGA_Bridge_master_limiter:cmd_sink_endofpacket
	wire  [136:0] jtag_to_fpga_bridge_master_limiter_cmd_src_data;                                                     // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_data -> cmd_demux_004:sink_data
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_ready;                                                    // cmd_demux_004:sink_ready -> JTAG_to_FPGA_Bridge_master_limiter:cmd_src_ready
	wire   [36:0] jtag_to_fpga_bridge_master_limiter_cmd_src_channel;                                                  // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_channel -> cmd_demux_004:sink_channel
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket;                                            // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket;                                              // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          rsp_mux_004_src_valid;                                                                               // rsp_mux_004:src_valid -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_valid
	wire  [136:0] rsp_mux_004_src_data;                                                                                // rsp_mux_004:src_data -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_data
	wire          rsp_mux_004_src_ready;                                                                               // JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_ready -> rsp_mux_004:src_ready
	wire   [36:0] rsp_mux_004_src_channel;                                                                             // rsp_mux_004:src_channel -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_channel
	wire          rsp_mux_004_src_startofpacket;                                                                       // rsp_mux_004:src_startofpacket -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                                         // rsp_mux_004:src_endofpacket -> JTAG_to_FPGA_Bridge_master_limiter:rsp_sink_endofpacket
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_valid;                                                    // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_valid -> JTAG_to_FPGA_Bridge_master_agent:rp_valid
	wire  [136:0] jtag_to_fpga_bridge_master_limiter_rsp_src_data;                                                     // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_data -> JTAG_to_FPGA_Bridge_master_agent:rp_data
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_ready;                                                    // JTAG_to_FPGA_Bridge_master_agent:rp_ready -> JTAG_to_FPGA_Bridge_master_limiter:rsp_src_ready
	wire   [36:0] jtag_to_fpga_bridge_master_limiter_rsp_src_channel;                                                  // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_channel -> JTAG_to_FPGA_Bridge_master_agent:rp_channel
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket;                                            // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_startofpacket -> JTAG_to_FPGA_Bridge_master_agent:rp_startofpacket
	wire          jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket;                                              // JTAG_to_FPGA_Bridge_master_limiter:rsp_src_endofpacket -> JTAG_to_FPGA_Bridge_master_agent:rp_endofpacket
	wire          router_005_src_valid;                                                                                // router_005:src_valid -> Nios2_2nd_Core_instruction_master_limiter:cmd_sink_valid
	wire  [136:0] router_005_src_data;                                                                                 // router_005:src_data -> Nios2_2nd_Core_instruction_master_limiter:cmd_sink_data
	wire          router_005_src_ready;                                                                                // Nios2_2nd_Core_instruction_master_limiter:cmd_sink_ready -> router_005:src_ready
	wire   [36:0] router_005_src_channel;                                                                              // router_005:src_channel -> Nios2_2nd_Core_instruction_master_limiter:cmd_sink_channel
	wire          router_005_src_startofpacket;                                                                        // router_005:src_startofpacket -> Nios2_2nd_Core_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_005_src_endofpacket;                                                                          // router_005:src_endofpacket -> Nios2_2nd_Core_instruction_master_limiter:cmd_sink_endofpacket
	wire  [136:0] nios2_2nd_core_instruction_master_limiter_cmd_src_data;                                              // Nios2_2nd_Core_instruction_master_limiter:cmd_src_data -> cmd_demux_005:sink_data
	wire          nios2_2nd_core_instruction_master_limiter_cmd_src_ready;                                             // cmd_demux_005:sink_ready -> Nios2_2nd_Core_instruction_master_limiter:cmd_src_ready
	wire   [36:0] nios2_2nd_core_instruction_master_limiter_cmd_src_channel;                                           // Nios2_2nd_Core_instruction_master_limiter:cmd_src_channel -> cmd_demux_005:sink_channel
	wire          nios2_2nd_core_instruction_master_limiter_cmd_src_startofpacket;                                     // Nios2_2nd_Core_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          nios2_2nd_core_instruction_master_limiter_cmd_src_endofpacket;                                       // Nios2_2nd_Core_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          rsp_mux_005_src_valid;                                                                               // rsp_mux_005:src_valid -> Nios2_2nd_Core_instruction_master_limiter:rsp_sink_valid
	wire  [136:0] rsp_mux_005_src_data;                                                                                // rsp_mux_005:src_data -> Nios2_2nd_Core_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_005_src_ready;                                                                               // Nios2_2nd_Core_instruction_master_limiter:rsp_sink_ready -> rsp_mux_005:src_ready
	wire   [36:0] rsp_mux_005_src_channel;                                                                             // rsp_mux_005:src_channel -> Nios2_2nd_Core_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_005_src_startofpacket;                                                                       // rsp_mux_005:src_startofpacket -> Nios2_2nd_Core_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                                         // rsp_mux_005:src_endofpacket -> Nios2_2nd_Core_instruction_master_limiter:rsp_sink_endofpacket
	wire          nios2_2nd_core_instruction_master_limiter_rsp_src_valid;                                             // Nios2_2nd_Core_instruction_master_limiter:rsp_src_valid -> Nios2_2nd_Core_instruction_master_agent:rp_valid
	wire  [136:0] nios2_2nd_core_instruction_master_limiter_rsp_src_data;                                              // Nios2_2nd_Core_instruction_master_limiter:rsp_src_data -> Nios2_2nd_Core_instruction_master_agent:rp_data
	wire          nios2_2nd_core_instruction_master_limiter_rsp_src_ready;                                             // Nios2_2nd_Core_instruction_master_agent:rp_ready -> Nios2_2nd_Core_instruction_master_limiter:rsp_src_ready
	wire   [36:0] nios2_2nd_core_instruction_master_limiter_rsp_src_channel;                                           // Nios2_2nd_Core_instruction_master_limiter:rsp_src_channel -> Nios2_2nd_Core_instruction_master_agent:rp_channel
	wire          nios2_2nd_core_instruction_master_limiter_rsp_src_startofpacket;                                     // Nios2_2nd_Core_instruction_master_limiter:rsp_src_startofpacket -> Nios2_2nd_Core_instruction_master_agent:rp_startofpacket
	wire          nios2_2nd_core_instruction_master_limiter_rsp_src_endofpacket;                                       // Nios2_2nd_Core_instruction_master_limiter:rsp_src_endofpacket -> Nios2_2nd_Core_instruction_master_agent:rp_endofpacket
	wire          router_006_src_valid;                                                                                // router_006:src_valid -> Nios2_instruction_master_limiter:cmd_sink_valid
	wire  [136:0] router_006_src_data;                                                                                 // router_006:src_data -> Nios2_instruction_master_limiter:cmd_sink_data
	wire          router_006_src_ready;                                                                                // Nios2_instruction_master_limiter:cmd_sink_ready -> router_006:src_ready
	wire   [36:0] router_006_src_channel;                                                                              // router_006:src_channel -> Nios2_instruction_master_limiter:cmd_sink_channel
	wire          router_006_src_startofpacket;                                                                        // router_006:src_startofpacket -> Nios2_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_006_src_endofpacket;                                                                          // router_006:src_endofpacket -> Nios2_instruction_master_limiter:cmd_sink_endofpacket
	wire  [136:0] nios2_instruction_master_limiter_cmd_src_data;                                                       // Nios2_instruction_master_limiter:cmd_src_data -> cmd_demux_006:sink_data
	wire          nios2_instruction_master_limiter_cmd_src_ready;                                                      // cmd_demux_006:sink_ready -> Nios2_instruction_master_limiter:cmd_src_ready
	wire   [36:0] nios2_instruction_master_limiter_cmd_src_channel;                                                    // Nios2_instruction_master_limiter:cmd_src_channel -> cmd_demux_006:sink_channel
	wire          nios2_instruction_master_limiter_cmd_src_startofpacket;                                              // Nios2_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          nios2_instruction_master_limiter_cmd_src_endofpacket;                                                // Nios2_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          rsp_mux_006_src_valid;                                                                               // rsp_mux_006:src_valid -> Nios2_instruction_master_limiter:rsp_sink_valid
	wire  [136:0] rsp_mux_006_src_data;                                                                                // rsp_mux_006:src_data -> Nios2_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_006_src_ready;                                                                               // Nios2_instruction_master_limiter:rsp_sink_ready -> rsp_mux_006:src_ready
	wire   [36:0] rsp_mux_006_src_channel;                                                                             // rsp_mux_006:src_channel -> Nios2_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_006_src_startofpacket;                                                                       // rsp_mux_006:src_startofpacket -> Nios2_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                                         // rsp_mux_006:src_endofpacket -> Nios2_instruction_master_limiter:rsp_sink_endofpacket
	wire          nios2_instruction_master_limiter_rsp_src_valid;                                                      // Nios2_instruction_master_limiter:rsp_src_valid -> Nios2_instruction_master_agent:rp_valid
	wire  [136:0] nios2_instruction_master_limiter_rsp_src_data;                                                       // Nios2_instruction_master_limiter:rsp_src_data -> Nios2_instruction_master_agent:rp_data
	wire          nios2_instruction_master_limiter_rsp_src_ready;                                                      // Nios2_instruction_master_agent:rp_ready -> Nios2_instruction_master_limiter:rsp_src_ready
	wire   [36:0] nios2_instruction_master_limiter_rsp_src_channel;                                                    // Nios2_instruction_master_limiter:rsp_src_channel -> Nios2_instruction_master_agent:rp_channel
	wire          nios2_instruction_master_limiter_rsp_src_startofpacket;                                              // Nios2_instruction_master_limiter:rsp_src_startofpacket -> Nios2_instruction_master_agent:rp_startofpacket
	wire          nios2_instruction_master_limiter_rsp_src_endofpacket;                                                // Nios2_instruction_master_limiter:rsp_src_endofpacket -> Nios2_instruction_master_agent:rp_endofpacket
	wire          router_007_src_valid;                                                                                // router_007:src_valid -> VGA_Subsystem_pixel_dma_master_limiter:cmd_sink_valid
	wire  [109:0] router_007_src_data;                                                                                 // router_007:src_data -> VGA_Subsystem_pixel_dma_master_limiter:cmd_sink_data
	wire          router_007_src_ready;                                                                                // VGA_Subsystem_pixel_dma_master_limiter:cmd_sink_ready -> router_007:src_ready
	wire   [36:0] router_007_src_channel;                                                                              // router_007:src_channel -> VGA_Subsystem_pixel_dma_master_limiter:cmd_sink_channel
	wire          router_007_src_startofpacket;                                                                        // router_007:src_startofpacket -> VGA_Subsystem_pixel_dma_master_limiter:cmd_sink_startofpacket
	wire          router_007_src_endofpacket;                                                                          // router_007:src_endofpacket -> VGA_Subsystem_pixel_dma_master_limiter:cmd_sink_endofpacket
	wire  [109:0] vga_subsystem_pixel_dma_master_limiter_cmd_src_data;                                                 // VGA_Subsystem_pixel_dma_master_limiter:cmd_src_data -> cmd_demux_007:sink_data
	wire          vga_subsystem_pixel_dma_master_limiter_cmd_src_ready;                                                // cmd_demux_007:sink_ready -> VGA_Subsystem_pixel_dma_master_limiter:cmd_src_ready
	wire   [36:0] vga_subsystem_pixel_dma_master_limiter_cmd_src_channel;                                              // VGA_Subsystem_pixel_dma_master_limiter:cmd_src_channel -> cmd_demux_007:sink_channel
	wire          vga_subsystem_pixel_dma_master_limiter_cmd_src_startofpacket;                                        // VGA_Subsystem_pixel_dma_master_limiter:cmd_src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          vga_subsystem_pixel_dma_master_limiter_cmd_src_endofpacket;                                          // VGA_Subsystem_pixel_dma_master_limiter:cmd_src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          rsp_mux_007_src_valid;                                                                               // rsp_mux_007:src_valid -> VGA_Subsystem_pixel_dma_master_limiter:rsp_sink_valid
	wire  [109:0] rsp_mux_007_src_data;                                                                                // rsp_mux_007:src_data -> VGA_Subsystem_pixel_dma_master_limiter:rsp_sink_data
	wire          rsp_mux_007_src_ready;                                                                               // VGA_Subsystem_pixel_dma_master_limiter:rsp_sink_ready -> rsp_mux_007:src_ready
	wire   [36:0] rsp_mux_007_src_channel;                                                                             // rsp_mux_007:src_channel -> VGA_Subsystem_pixel_dma_master_limiter:rsp_sink_channel
	wire          rsp_mux_007_src_startofpacket;                                                                       // rsp_mux_007:src_startofpacket -> VGA_Subsystem_pixel_dma_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                                         // rsp_mux_007:src_endofpacket -> VGA_Subsystem_pixel_dma_master_limiter:rsp_sink_endofpacket
	wire          vga_subsystem_pixel_dma_master_limiter_rsp_src_valid;                                                // VGA_Subsystem_pixel_dma_master_limiter:rsp_src_valid -> VGA_Subsystem_pixel_dma_master_agent:rp_valid
	wire  [109:0] vga_subsystem_pixel_dma_master_limiter_rsp_src_data;                                                 // VGA_Subsystem_pixel_dma_master_limiter:rsp_src_data -> VGA_Subsystem_pixel_dma_master_agent:rp_data
	wire          vga_subsystem_pixel_dma_master_limiter_rsp_src_ready;                                                // VGA_Subsystem_pixel_dma_master_agent:rp_ready -> VGA_Subsystem_pixel_dma_master_limiter:rsp_src_ready
	wire   [36:0] vga_subsystem_pixel_dma_master_limiter_rsp_src_channel;                                              // VGA_Subsystem_pixel_dma_master_limiter:rsp_src_channel -> VGA_Subsystem_pixel_dma_master_agent:rp_channel
	wire          vga_subsystem_pixel_dma_master_limiter_rsp_src_startofpacket;                                        // VGA_Subsystem_pixel_dma_master_limiter:rsp_src_startofpacket -> VGA_Subsystem_pixel_dma_master_agent:rp_startofpacket
	wire          vga_subsystem_pixel_dma_master_limiter_rsp_src_endofpacket;                                          // VGA_Subsystem_pixel_dma_master_limiter:rsp_src_endofpacket -> VGA_Subsystem_pixel_dma_master_agent:rp_endofpacket
	wire          router_008_src_valid;                                                                                // router_008:src_valid -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_valid
	wire  [244:0] router_008_src_data;                                                                                 // router_008:src_data -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_data
	wire          router_008_src_ready;                                                                                // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_ready -> router_008:src_ready
	wire   [36:0] router_008_src_channel;                                                                              // router_008:src_channel -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_channel
	wire          router_008_src_startofpacket;                                                                        // router_008:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_startofpacket
	wire          router_008_src_endofpacket;                                                                          // router_008:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_sink_endofpacket
	wire  [244:0] arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_data;                                                   // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_data -> cmd_demux_008:sink_data
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_ready;                                                  // cmd_demux_008:sink_ready -> ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_ready
	wire   [36:0] arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_channel;                                                // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_channel -> cmd_demux_008:sink_channel
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket;                                          // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_startofpacket -> cmd_demux_008:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket;                                            // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_endofpacket -> cmd_demux_008:sink_endofpacket
	wire          rsp_mux_008_src_valid;                                                                               // rsp_mux_008:src_valid -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_valid
	wire  [244:0] rsp_mux_008_src_data;                                                                                // rsp_mux_008:src_data -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_data
	wire          rsp_mux_008_src_ready;                                                                               // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_ready -> rsp_mux_008:src_ready
	wire   [36:0] rsp_mux_008_src_channel;                                                                             // rsp_mux_008:src_channel -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_channel
	wire          rsp_mux_008_src_startofpacket;                                                                       // rsp_mux_008:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_startofpacket
	wire          rsp_mux_008_src_endofpacket;                                                                         // rsp_mux_008:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_valid;                                                  // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_valid
	wire  [244:0] arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_data;                                                   // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_data -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_data
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_ready;                                                  // ARM_A9_HPS_h2f_axi_master_agent:write_rp_ready -> ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_ready
	wire   [36:0] arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_channel;                                                // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_channel
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket;                                          // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_startofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket;                                            // ARM_A9_HPS_h2f_axi_master_wr_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_axi_master_agent:write_rp_endofpacket
	wire          router_009_src_valid;                                                                                // router_009:src_valid -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_valid
	wire  [244:0] router_009_src_data;                                                                                 // router_009:src_data -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_data
	wire          router_009_src_ready;                                                                                // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_ready -> router_009:src_ready
	wire   [36:0] router_009_src_channel;                                                                              // router_009:src_channel -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_channel
	wire          router_009_src_startofpacket;                                                                        // router_009:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_startofpacket
	wire          router_009_src_endofpacket;                                                                          // router_009:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_sink_endofpacket
	wire  [244:0] arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_data;                                                   // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_data -> cmd_demux_009:sink_data
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_ready;                                                  // cmd_demux_009:sink_ready -> ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_ready
	wire   [36:0] arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_channel;                                                // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_channel -> cmd_demux_009:sink_channel
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket;                                          // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_startofpacket -> cmd_demux_009:sink_startofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket;                                            // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_endofpacket -> cmd_demux_009:sink_endofpacket
	wire          rsp_mux_009_src_valid;                                                                               // rsp_mux_009:src_valid -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_valid
	wire  [244:0] rsp_mux_009_src_data;                                                                                // rsp_mux_009:src_data -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_data
	wire          rsp_mux_009_src_ready;                                                                               // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_ready -> rsp_mux_009:src_ready
	wire   [36:0] rsp_mux_009_src_channel;                                                                             // rsp_mux_009:src_channel -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_channel
	wire          rsp_mux_009_src_startofpacket;                                                                       // rsp_mux_009:src_startofpacket -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_startofpacket
	wire          rsp_mux_009_src_endofpacket;                                                                         // rsp_mux_009:src_endofpacket -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_sink_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_valid;                                                  // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_valid -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_valid
	wire  [244:0] arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_data;                                                   // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_data -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_data
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_ready;                                                  // ARM_A9_HPS_h2f_axi_master_agent:read_rp_ready -> ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_ready
	wire   [36:0] arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_channel;                                                // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_channel -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_channel
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket;                                          // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_startofpacket -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_startofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket;                                            // ARM_A9_HPS_h2f_axi_master_rd_limiter:rsp_src_endofpacket -> ARM_A9_HPS_h2f_axi_master_agent:read_rp_endofpacket
	wire          cmd_mux_src_valid;                                                                                   // cmd_mux:src_valid -> ADC_adc_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_src_data;                                                                                    // cmd_mux:src_data -> ADC_adc_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                                   // ADC_adc_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [36:0] cmd_mux_src_channel;                                                                                 // cmd_mux:src_channel -> ADC_adc_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                           // cmd_mux:src_startofpacket -> ADC_adc_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                             // cmd_mux:src_endofpacket -> ADC_adc_slave_burst_adapter:sink0_endofpacket
	wire          adc_adc_slave_burst_adapter_source0_valid;                                                           // ADC_adc_slave_burst_adapter:source0_valid -> ADC_adc_slave_agent:cp_valid
	wire  [136:0] adc_adc_slave_burst_adapter_source0_data;                                                            // ADC_adc_slave_burst_adapter:source0_data -> ADC_adc_slave_agent:cp_data
	wire          adc_adc_slave_burst_adapter_source0_ready;                                                           // ADC_adc_slave_agent:cp_ready -> ADC_adc_slave_burst_adapter:source0_ready
	wire   [36:0] adc_adc_slave_burst_adapter_source0_channel;                                                         // ADC_adc_slave_burst_adapter:source0_channel -> ADC_adc_slave_agent:cp_channel
	wire          adc_adc_slave_burst_adapter_source0_startofpacket;                                                   // ADC_adc_slave_burst_adapter:source0_startofpacket -> ADC_adc_slave_agent:cp_startofpacket
	wire          adc_adc_slave_burst_adapter_source0_endofpacket;                                                     // ADC_adc_slave_burst_adapter:source0_endofpacket -> ADC_adc_slave_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                               // cmd_mux_001:src_valid -> Audio_Subsystem_audio_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_001_src_data;                                                                                // cmd_mux_001:src_data -> Audio_Subsystem_audio_slave_burst_adapter:sink0_data
	wire          cmd_mux_001_src_ready;                                                                               // Audio_Subsystem_audio_slave_burst_adapter:sink0_ready -> cmd_mux_001:src_ready
	wire   [36:0] cmd_mux_001_src_channel;                                                                             // cmd_mux_001:src_channel -> Audio_Subsystem_audio_slave_burst_adapter:sink0_channel
	wire          cmd_mux_001_src_startofpacket;                                                                       // cmd_mux_001:src_startofpacket -> Audio_Subsystem_audio_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                         // cmd_mux_001:src_endofpacket -> Audio_Subsystem_audio_slave_burst_adapter:sink0_endofpacket
	wire          audio_subsystem_audio_slave_burst_adapter_source0_valid;                                             // Audio_Subsystem_audio_slave_burst_adapter:source0_valid -> Audio_Subsystem_audio_slave_agent:cp_valid
	wire  [136:0] audio_subsystem_audio_slave_burst_adapter_source0_data;                                              // Audio_Subsystem_audio_slave_burst_adapter:source0_data -> Audio_Subsystem_audio_slave_agent:cp_data
	wire          audio_subsystem_audio_slave_burst_adapter_source0_ready;                                             // Audio_Subsystem_audio_slave_agent:cp_ready -> Audio_Subsystem_audio_slave_burst_adapter:source0_ready
	wire   [36:0] audio_subsystem_audio_slave_burst_adapter_source0_channel;                                           // Audio_Subsystem_audio_slave_burst_adapter:source0_channel -> Audio_Subsystem_audio_slave_agent:cp_channel
	wire          audio_subsystem_audio_slave_burst_adapter_source0_startofpacket;                                     // Audio_Subsystem_audio_slave_burst_adapter:source0_startofpacket -> Audio_Subsystem_audio_slave_agent:cp_startofpacket
	wire          audio_subsystem_audio_slave_burst_adapter_source0_endofpacket;                                       // Audio_Subsystem_audio_slave_burst_adapter:source0_endofpacket -> Audio_Subsystem_audio_slave_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                               // cmd_mux_002:src_valid -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_002_src_data;                                                                                // cmd_mux_002:src_data -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                                               // AV_Config_avalon_av_config_slave_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire   [36:0] cmd_mux_002_src_channel;                                                                             // cmd_mux_002:src_channel -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                                                       // cmd_mux_002:src_startofpacket -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                         // cmd_mux_002:src_endofpacket -> AV_Config_avalon_av_config_slave_burst_adapter:sink0_endofpacket
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_valid;                                        // AV_Config_avalon_av_config_slave_burst_adapter:source0_valid -> AV_Config_avalon_av_config_slave_agent:cp_valid
	wire  [136:0] av_config_avalon_av_config_slave_burst_adapter_source0_data;                                         // AV_Config_avalon_av_config_slave_burst_adapter:source0_data -> AV_Config_avalon_av_config_slave_agent:cp_data
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_ready;                                        // AV_Config_avalon_av_config_slave_agent:cp_ready -> AV_Config_avalon_av_config_slave_burst_adapter:source0_ready
	wire   [36:0] av_config_avalon_av_config_slave_burst_adapter_source0_channel;                                      // AV_Config_avalon_av_config_slave_burst_adapter:source0_channel -> AV_Config_avalon_av_config_slave_agent:cp_channel
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_startofpacket;                                // AV_Config_avalon_av_config_slave_burst_adapter:source0_startofpacket -> AV_Config_avalon_av_config_slave_agent:cp_startofpacket
	wire          av_config_avalon_av_config_slave_burst_adapter_source0_endofpacket;                                  // AV_Config_avalon_av_config_slave_burst_adapter:source0_endofpacket -> AV_Config_avalon_av_config_slave_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                               // cmd_mux_003:src_valid -> IrDA_avalon_irda_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_003_src_data;                                                                                // cmd_mux_003:src_data -> IrDA_avalon_irda_slave_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                                               // IrDA_avalon_irda_slave_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire   [36:0] cmd_mux_003_src_channel;                                                                             // cmd_mux_003:src_channel -> IrDA_avalon_irda_slave_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                                                       // cmd_mux_003:src_startofpacket -> IrDA_avalon_irda_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                         // cmd_mux_003:src_endofpacket -> IrDA_avalon_irda_slave_burst_adapter:sink0_endofpacket
	wire          irda_avalon_irda_slave_burst_adapter_source0_valid;                                                  // IrDA_avalon_irda_slave_burst_adapter:source0_valid -> IrDA_avalon_irda_slave_agent:cp_valid
	wire  [136:0] irda_avalon_irda_slave_burst_adapter_source0_data;                                                   // IrDA_avalon_irda_slave_burst_adapter:source0_data -> IrDA_avalon_irda_slave_agent:cp_data
	wire          irda_avalon_irda_slave_burst_adapter_source0_ready;                                                  // IrDA_avalon_irda_slave_agent:cp_ready -> IrDA_avalon_irda_slave_burst_adapter:source0_ready
	wire   [36:0] irda_avalon_irda_slave_burst_adapter_source0_channel;                                                // IrDA_avalon_irda_slave_burst_adapter:source0_channel -> IrDA_avalon_irda_slave_agent:cp_channel
	wire          irda_avalon_irda_slave_burst_adapter_source0_startofpacket;                                          // IrDA_avalon_irda_slave_burst_adapter:source0_startofpacket -> IrDA_avalon_irda_slave_agent:cp_startofpacket
	wire          irda_avalon_irda_slave_burst_adapter_source0_endofpacket;                                            // IrDA_avalon_irda_slave_burst_adapter:source0_endofpacket -> IrDA_avalon_irda_slave_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                               // cmd_mux_004:src_valid -> PS2_Port_avalon_ps2_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_004_src_data;                                                                                // cmd_mux_004:src_data -> PS2_Port_avalon_ps2_slave_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                                               // PS2_Port_avalon_ps2_slave_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [36:0] cmd_mux_004_src_channel;                                                                             // cmd_mux_004:src_channel -> PS2_Port_avalon_ps2_slave_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                                       // cmd_mux_004:src_startofpacket -> PS2_Port_avalon_ps2_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                         // cmd_mux_004:src_endofpacket -> PS2_Port_avalon_ps2_slave_burst_adapter:sink0_endofpacket
	wire          ps2_port_avalon_ps2_slave_burst_adapter_source0_valid;                                               // PS2_Port_avalon_ps2_slave_burst_adapter:source0_valid -> PS2_Port_avalon_ps2_slave_agent:cp_valid
	wire  [136:0] ps2_port_avalon_ps2_slave_burst_adapter_source0_data;                                                // PS2_Port_avalon_ps2_slave_burst_adapter:source0_data -> PS2_Port_avalon_ps2_slave_agent:cp_data
	wire          ps2_port_avalon_ps2_slave_burst_adapter_source0_ready;                                               // PS2_Port_avalon_ps2_slave_agent:cp_ready -> PS2_Port_avalon_ps2_slave_burst_adapter:source0_ready
	wire   [36:0] ps2_port_avalon_ps2_slave_burst_adapter_source0_channel;                                             // PS2_Port_avalon_ps2_slave_burst_adapter:source0_channel -> PS2_Port_avalon_ps2_slave_agent:cp_channel
	wire          ps2_port_avalon_ps2_slave_burst_adapter_source0_startofpacket;                                       // PS2_Port_avalon_ps2_slave_burst_adapter:source0_startofpacket -> PS2_Port_avalon_ps2_slave_agent:cp_startofpacket
	wire          ps2_port_avalon_ps2_slave_burst_adapter_source0_endofpacket;                                         // PS2_Port_avalon_ps2_slave_burst_adapter:source0_endofpacket -> PS2_Port_avalon_ps2_slave_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                                               // cmd_mux_005:src_valid -> PS2_Port_Dual_avalon_ps2_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_005_src_data;                                                                                // cmd_mux_005:src_data -> PS2_Port_Dual_avalon_ps2_slave_burst_adapter:sink0_data
	wire          cmd_mux_005_src_ready;                                                                               // PS2_Port_Dual_avalon_ps2_slave_burst_adapter:sink0_ready -> cmd_mux_005:src_ready
	wire   [36:0] cmd_mux_005_src_channel;                                                                             // cmd_mux_005:src_channel -> PS2_Port_Dual_avalon_ps2_slave_burst_adapter:sink0_channel
	wire          cmd_mux_005_src_startofpacket;                                                                       // cmd_mux_005:src_startofpacket -> PS2_Port_Dual_avalon_ps2_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                         // cmd_mux_005:src_endofpacket -> PS2_Port_Dual_avalon_ps2_slave_burst_adapter:sink0_endofpacket
	wire          ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_valid;                                          // PS2_Port_Dual_avalon_ps2_slave_burst_adapter:source0_valid -> PS2_Port_Dual_avalon_ps2_slave_agent:cp_valid
	wire  [136:0] ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_data;                                           // PS2_Port_Dual_avalon_ps2_slave_burst_adapter:source0_data -> PS2_Port_Dual_avalon_ps2_slave_agent:cp_data
	wire          ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_ready;                                          // PS2_Port_Dual_avalon_ps2_slave_agent:cp_ready -> PS2_Port_Dual_avalon_ps2_slave_burst_adapter:source0_ready
	wire   [36:0] ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_channel;                                        // PS2_Port_Dual_avalon_ps2_slave_burst_adapter:source0_channel -> PS2_Port_Dual_avalon_ps2_slave_agent:cp_channel
	wire          ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_startofpacket;                                  // PS2_Port_Dual_avalon_ps2_slave_burst_adapter:source0_startofpacket -> PS2_Port_Dual_avalon_ps2_slave_agent:cp_startofpacket
	wire          ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_endofpacket;                                    // PS2_Port_Dual_avalon_ps2_slave_burst_adapter:source0_endofpacket -> PS2_Port_Dual_avalon_ps2_slave_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                                               // cmd_mux_006:src_valid -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_006_src_data;                                                                                // cmd_mux_006:src_data -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                                               // VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire   [36:0] cmd_mux_006_src_channel;                                                                             // cmd_mux_006:src_channel -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                                                       // cmd_mux_006:src_startofpacket -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                         // cmd_mux_006:src_endofpacket -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:sink0_endofpacket
	wire          vga_subsystem_char_buffer_control_slave_burst_adapter_source0_valid;                                 // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_valid -> VGA_Subsystem_char_buffer_control_slave_agent:cp_valid
	wire  [136:0] vga_subsystem_char_buffer_control_slave_burst_adapter_source0_data;                                  // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_data -> VGA_Subsystem_char_buffer_control_slave_agent:cp_data
	wire          vga_subsystem_char_buffer_control_slave_burst_adapter_source0_ready;                                 // VGA_Subsystem_char_buffer_control_slave_agent:cp_ready -> VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_ready
	wire   [36:0] vga_subsystem_char_buffer_control_slave_burst_adapter_source0_channel;                               // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_channel -> VGA_Subsystem_char_buffer_control_slave_agent:cp_channel
	wire          vga_subsystem_char_buffer_control_slave_burst_adapter_source0_startofpacket;                         // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_startofpacket -> VGA_Subsystem_char_buffer_control_slave_agent:cp_startofpacket
	wire          vga_subsystem_char_buffer_control_slave_burst_adapter_source0_endofpacket;                           // VGA_Subsystem_char_buffer_control_slave_burst_adapter:source0_endofpacket -> VGA_Subsystem_char_buffer_control_slave_agent:cp_endofpacket
	wire          cmd_mux_007_src_valid;                                                                               // cmd_mux_007:src_valid -> SysID_control_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_007_src_data;                                                                                // cmd_mux_007:src_data -> SysID_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                                               // SysID_control_slave_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire   [36:0] cmd_mux_007_src_channel;                                                                             // cmd_mux_007:src_channel -> SysID_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                                                       // cmd_mux_007:src_startofpacket -> SysID_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                         // cmd_mux_007:src_endofpacket -> SysID_control_slave_burst_adapter:sink0_endofpacket
	wire          sysid_control_slave_burst_adapter_source0_valid;                                                     // SysID_control_slave_burst_adapter:source0_valid -> SysID_control_slave_agent:cp_valid
	wire  [136:0] sysid_control_slave_burst_adapter_source0_data;                                                      // SysID_control_slave_burst_adapter:source0_data -> SysID_control_slave_agent:cp_data
	wire          sysid_control_slave_burst_adapter_source0_ready;                                                     // SysID_control_slave_agent:cp_ready -> SysID_control_slave_burst_adapter:source0_ready
	wire   [36:0] sysid_control_slave_burst_adapter_source0_channel;                                                   // SysID_control_slave_burst_adapter:source0_channel -> SysID_control_slave_agent:cp_channel
	wire          sysid_control_slave_burst_adapter_source0_startofpacket;                                             // SysID_control_slave_burst_adapter:source0_startofpacket -> SysID_control_slave_agent:cp_startofpacket
	wire          sysid_control_slave_burst_adapter_source0_endofpacket;                                               // SysID_control_slave_burst_adapter:source0_endofpacket -> SysID_control_slave_agent:cp_endofpacket
	wire          cmd_mux_008_src_valid;                                                                               // cmd_mux_008:src_valid -> Video_In_Subsystem_edge_detection_control_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_008_src_data;                                                                                // cmd_mux_008:src_data -> Video_In_Subsystem_edge_detection_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                                               // Video_In_Subsystem_edge_detection_control_slave_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [36:0] cmd_mux_008_src_channel;                                                                             // cmd_mux_008:src_channel -> Video_In_Subsystem_edge_detection_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                                       // cmd_mux_008:src_startofpacket -> Video_In_Subsystem_edge_detection_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                         // cmd_mux_008:src_endofpacket -> Video_In_Subsystem_edge_detection_control_slave_burst_adapter:sink0_endofpacket
	wire          video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_valid;                         // Video_In_Subsystem_edge_detection_control_slave_burst_adapter:source0_valid -> Video_In_Subsystem_edge_detection_control_slave_agent:cp_valid
	wire  [136:0] video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_data;                          // Video_In_Subsystem_edge_detection_control_slave_burst_adapter:source0_data -> Video_In_Subsystem_edge_detection_control_slave_agent:cp_data
	wire          video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_ready;                         // Video_In_Subsystem_edge_detection_control_slave_agent:cp_ready -> Video_In_Subsystem_edge_detection_control_slave_burst_adapter:source0_ready
	wire   [36:0] video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_channel;                       // Video_In_Subsystem_edge_detection_control_slave_burst_adapter:source0_channel -> Video_In_Subsystem_edge_detection_control_slave_agent:cp_channel
	wire          video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_startofpacket;                 // Video_In_Subsystem_edge_detection_control_slave_burst_adapter:source0_startofpacket -> Video_In_Subsystem_edge_detection_control_slave_agent:cp_startofpacket
	wire          video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_endofpacket;                   // Video_In_Subsystem_edge_detection_control_slave_burst_adapter:source0_endofpacket -> Video_In_Subsystem_edge_detection_control_slave_agent:cp_endofpacket
	wire          cmd_mux_009_src_valid;                                                                               // cmd_mux_009:src_valid -> LEDs_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_009_src_data;                                                                                // cmd_mux_009:src_data -> LEDs_s1_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                                               // LEDs_s1_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire   [36:0] cmd_mux_009_src_channel;                                                                             // cmd_mux_009:src_channel -> LEDs_s1_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                                                       // cmd_mux_009:src_startofpacket -> LEDs_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                         // cmd_mux_009:src_endofpacket -> LEDs_s1_burst_adapter:sink0_endofpacket
	wire          leds_s1_burst_adapter_source0_valid;                                                                 // LEDs_s1_burst_adapter:source0_valid -> LEDs_s1_agent:cp_valid
	wire  [136:0] leds_s1_burst_adapter_source0_data;                                                                  // LEDs_s1_burst_adapter:source0_data -> LEDs_s1_agent:cp_data
	wire          leds_s1_burst_adapter_source0_ready;                                                                 // LEDs_s1_agent:cp_ready -> LEDs_s1_burst_adapter:source0_ready
	wire   [36:0] leds_s1_burst_adapter_source0_channel;                                                               // LEDs_s1_burst_adapter:source0_channel -> LEDs_s1_agent:cp_channel
	wire          leds_s1_burst_adapter_source0_startofpacket;                                                         // LEDs_s1_burst_adapter:source0_startofpacket -> LEDs_s1_agent:cp_startofpacket
	wire          leds_s1_burst_adapter_source0_endofpacket;                                                           // LEDs_s1_burst_adapter:source0_endofpacket -> LEDs_s1_agent:cp_endofpacket
	wire          cmd_mux_010_src_valid;                                                                               // cmd_mux_010:src_valid -> HEX3_HEX0_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_010_src_data;                                                                                // cmd_mux_010:src_data -> HEX3_HEX0_s1_burst_adapter:sink0_data
	wire          cmd_mux_010_src_ready;                                                                               // HEX3_HEX0_s1_burst_adapter:sink0_ready -> cmd_mux_010:src_ready
	wire   [36:0] cmd_mux_010_src_channel;                                                                             // cmd_mux_010:src_channel -> HEX3_HEX0_s1_burst_adapter:sink0_channel
	wire          cmd_mux_010_src_startofpacket;                                                                       // cmd_mux_010:src_startofpacket -> HEX3_HEX0_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                         // cmd_mux_010:src_endofpacket -> HEX3_HEX0_s1_burst_adapter:sink0_endofpacket
	wire          hex3_hex0_s1_burst_adapter_source0_valid;                                                            // HEX3_HEX0_s1_burst_adapter:source0_valid -> HEX3_HEX0_s1_agent:cp_valid
	wire  [136:0] hex3_hex0_s1_burst_adapter_source0_data;                                                             // HEX3_HEX0_s1_burst_adapter:source0_data -> HEX3_HEX0_s1_agent:cp_data
	wire          hex3_hex0_s1_burst_adapter_source0_ready;                                                            // HEX3_HEX0_s1_agent:cp_ready -> HEX3_HEX0_s1_burst_adapter:source0_ready
	wire   [36:0] hex3_hex0_s1_burst_adapter_source0_channel;                                                          // HEX3_HEX0_s1_burst_adapter:source0_channel -> HEX3_HEX0_s1_agent:cp_channel
	wire          hex3_hex0_s1_burst_adapter_source0_startofpacket;                                                    // HEX3_HEX0_s1_burst_adapter:source0_startofpacket -> HEX3_HEX0_s1_agent:cp_startofpacket
	wire          hex3_hex0_s1_burst_adapter_source0_endofpacket;                                                      // HEX3_HEX0_s1_burst_adapter:source0_endofpacket -> HEX3_HEX0_s1_agent:cp_endofpacket
	wire          cmd_mux_011_src_valid;                                                                               // cmd_mux_011:src_valid -> HEX5_HEX4_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_011_src_data;                                                                                // cmd_mux_011:src_data -> HEX5_HEX4_s1_burst_adapter:sink0_data
	wire          cmd_mux_011_src_ready;                                                                               // HEX5_HEX4_s1_burst_adapter:sink0_ready -> cmd_mux_011:src_ready
	wire   [36:0] cmd_mux_011_src_channel;                                                                             // cmd_mux_011:src_channel -> HEX5_HEX4_s1_burst_adapter:sink0_channel
	wire          cmd_mux_011_src_startofpacket;                                                                       // cmd_mux_011:src_startofpacket -> HEX5_HEX4_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                         // cmd_mux_011:src_endofpacket -> HEX5_HEX4_s1_burst_adapter:sink0_endofpacket
	wire          hex5_hex4_s1_burst_adapter_source0_valid;                                                            // HEX5_HEX4_s1_burst_adapter:source0_valid -> HEX5_HEX4_s1_agent:cp_valid
	wire  [136:0] hex5_hex4_s1_burst_adapter_source0_data;                                                             // HEX5_HEX4_s1_burst_adapter:source0_data -> HEX5_HEX4_s1_agent:cp_data
	wire          hex5_hex4_s1_burst_adapter_source0_ready;                                                            // HEX5_HEX4_s1_agent:cp_ready -> HEX5_HEX4_s1_burst_adapter:source0_ready
	wire   [36:0] hex5_hex4_s1_burst_adapter_source0_channel;                                                          // HEX5_HEX4_s1_burst_adapter:source0_channel -> HEX5_HEX4_s1_agent:cp_channel
	wire          hex5_hex4_s1_burst_adapter_source0_startofpacket;                                                    // HEX5_HEX4_s1_burst_adapter:source0_startofpacket -> HEX5_HEX4_s1_agent:cp_startofpacket
	wire          hex5_hex4_s1_burst_adapter_source0_endofpacket;                                                      // HEX5_HEX4_s1_burst_adapter:source0_endofpacket -> HEX5_HEX4_s1_agent:cp_endofpacket
	wire          cmd_mux_012_src_valid;                                                                               // cmd_mux_012:src_valid -> Slider_Switches_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_012_src_data;                                                                                // cmd_mux_012:src_data -> Slider_Switches_s1_burst_adapter:sink0_data
	wire          cmd_mux_012_src_ready;                                                                               // Slider_Switches_s1_burst_adapter:sink0_ready -> cmd_mux_012:src_ready
	wire   [36:0] cmd_mux_012_src_channel;                                                                             // cmd_mux_012:src_channel -> Slider_Switches_s1_burst_adapter:sink0_channel
	wire          cmd_mux_012_src_startofpacket;                                                                       // cmd_mux_012:src_startofpacket -> Slider_Switches_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                         // cmd_mux_012:src_endofpacket -> Slider_Switches_s1_burst_adapter:sink0_endofpacket
	wire          slider_switches_s1_burst_adapter_source0_valid;                                                      // Slider_Switches_s1_burst_adapter:source0_valid -> Slider_Switches_s1_agent:cp_valid
	wire  [136:0] slider_switches_s1_burst_adapter_source0_data;                                                       // Slider_Switches_s1_burst_adapter:source0_data -> Slider_Switches_s1_agent:cp_data
	wire          slider_switches_s1_burst_adapter_source0_ready;                                                      // Slider_Switches_s1_agent:cp_ready -> Slider_Switches_s1_burst_adapter:source0_ready
	wire   [36:0] slider_switches_s1_burst_adapter_source0_channel;                                                    // Slider_Switches_s1_burst_adapter:source0_channel -> Slider_Switches_s1_agent:cp_channel
	wire          slider_switches_s1_burst_adapter_source0_startofpacket;                                              // Slider_Switches_s1_burst_adapter:source0_startofpacket -> Slider_Switches_s1_agent:cp_startofpacket
	wire          slider_switches_s1_burst_adapter_source0_endofpacket;                                                // Slider_Switches_s1_burst_adapter:source0_endofpacket -> Slider_Switches_s1_agent:cp_endofpacket
	wire          cmd_mux_013_src_valid;                                                                               // cmd_mux_013:src_valid -> Pushbuttons_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_013_src_data;                                                                                // cmd_mux_013:src_data -> Pushbuttons_s1_burst_adapter:sink0_data
	wire          cmd_mux_013_src_ready;                                                                               // Pushbuttons_s1_burst_adapter:sink0_ready -> cmd_mux_013:src_ready
	wire   [36:0] cmd_mux_013_src_channel;                                                                             // cmd_mux_013:src_channel -> Pushbuttons_s1_burst_adapter:sink0_channel
	wire          cmd_mux_013_src_startofpacket;                                                                       // cmd_mux_013:src_startofpacket -> Pushbuttons_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                         // cmd_mux_013:src_endofpacket -> Pushbuttons_s1_burst_adapter:sink0_endofpacket
	wire          pushbuttons_s1_burst_adapter_source0_valid;                                                          // Pushbuttons_s1_burst_adapter:source0_valid -> Pushbuttons_s1_agent:cp_valid
	wire  [136:0] pushbuttons_s1_burst_adapter_source0_data;                                                           // Pushbuttons_s1_burst_adapter:source0_data -> Pushbuttons_s1_agent:cp_data
	wire          pushbuttons_s1_burst_adapter_source0_ready;                                                          // Pushbuttons_s1_agent:cp_ready -> Pushbuttons_s1_burst_adapter:source0_ready
	wire   [36:0] pushbuttons_s1_burst_adapter_source0_channel;                                                        // Pushbuttons_s1_burst_adapter:source0_channel -> Pushbuttons_s1_agent:cp_channel
	wire          pushbuttons_s1_burst_adapter_source0_startofpacket;                                                  // Pushbuttons_s1_burst_adapter:source0_startofpacket -> Pushbuttons_s1_agent:cp_startofpacket
	wire          pushbuttons_s1_burst_adapter_source0_endofpacket;                                                    // Pushbuttons_s1_burst_adapter:source0_endofpacket -> Pushbuttons_s1_agent:cp_endofpacket
	wire          cmd_mux_014_src_valid;                                                                               // cmd_mux_014:src_valid -> Expansion_JP1_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_014_src_data;                                                                                // cmd_mux_014:src_data -> Expansion_JP1_s1_burst_adapter:sink0_data
	wire          cmd_mux_014_src_ready;                                                                               // Expansion_JP1_s1_burst_adapter:sink0_ready -> cmd_mux_014:src_ready
	wire   [36:0] cmd_mux_014_src_channel;                                                                             // cmd_mux_014:src_channel -> Expansion_JP1_s1_burst_adapter:sink0_channel
	wire          cmd_mux_014_src_startofpacket;                                                                       // cmd_mux_014:src_startofpacket -> Expansion_JP1_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                         // cmd_mux_014:src_endofpacket -> Expansion_JP1_s1_burst_adapter:sink0_endofpacket
	wire          expansion_jp1_s1_burst_adapter_source0_valid;                                                        // Expansion_JP1_s1_burst_adapter:source0_valid -> Expansion_JP1_s1_agent:cp_valid
	wire  [136:0] expansion_jp1_s1_burst_adapter_source0_data;                                                         // Expansion_JP1_s1_burst_adapter:source0_data -> Expansion_JP1_s1_agent:cp_data
	wire          expansion_jp1_s1_burst_adapter_source0_ready;                                                        // Expansion_JP1_s1_agent:cp_ready -> Expansion_JP1_s1_burst_adapter:source0_ready
	wire   [36:0] expansion_jp1_s1_burst_adapter_source0_channel;                                                      // Expansion_JP1_s1_burst_adapter:source0_channel -> Expansion_JP1_s1_agent:cp_channel
	wire          expansion_jp1_s1_burst_adapter_source0_startofpacket;                                                // Expansion_JP1_s1_burst_adapter:source0_startofpacket -> Expansion_JP1_s1_agent:cp_startofpacket
	wire          expansion_jp1_s1_burst_adapter_source0_endofpacket;                                                  // Expansion_JP1_s1_burst_adapter:source0_endofpacket -> Expansion_JP1_s1_agent:cp_endofpacket
	wire          cmd_mux_015_src_valid;                                                                               // cmd_mux_015:src_valid -> Expansion_JP2_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_015_src_data;                                                                                // cmd_mux_015:src_data -> Expansion_JP2_s1_burst_adapter:sink0_data
	wire          cmd_mux_015_src_ready;                                                                               // Expansion_JP2_s1_burst_adapter:sink0_ready -> cmd_mux_015:src_ready
	wire   [36:0] cmd_mux_015_src_channel;                                                                             // cmd_mux_015:src_channel -> Expansion_JP2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_015_src_startofpacket;                                                                       // cmd_mux_015:src_startofpacket -> Expansion_JP2_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                         // cmd_mux_015:src_endofpacket -> Expansion_JP2_s1_burst_adapter:sink0_endofpacket
	wire          expansion_jp2_s1_burst_adapter_source0_valid;                                                        // Expansion_JP2_s1_burst_adapter:source0_valid -> Expansion_JP2_s1_agent:cp_valid
	wire  [136:0] expansion_jp2_s1_burst_adapter_source0_data;                                                         // Expansion_JP2_s1_burst_adapter:source0_data -> Expansion_JP2_s1_agent:cp_data
	wire          expansion_jp2_s1_burst_adapter_source0_ready;                                                        // Expansion_JP2_s1_agent:cp_ready -> Expansion_JP2_s1_burst_adapter:source0_ready
	wire   [36:0] expansion_jp2_s1_burst_adapter_source0_channel;                                                      // Expansion_JP2_s1_burst_adapter:source0_channel -> Expansion_JP2_s1_agent:cp_channel
	wire          expansion_jp2_s1_burst_adapter_source0_startofpacket;                                                // Expansion_JP2_s1_burst_adapter:source0_startofpacket -> Expansion_JP2_s1_agent:cp_startofpacket
	wire          expansion_jp2_s1_burst_adapter_source0_endofpacket;                                                  // Expansion_JP2_s1_burst_adapter:source0_endofpacket -> Expansion_JP2_s1_agent:cp_endofpacket
	wire          cmd_mux_016_src_valid;                                                                               // cmd_mux_016:src_valid -> Interval_Timer_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_016_src_data;                                                                                // cmd_mux_016:src_data -> Interval_Timer_s1_burst_adapter:sink0_data
	wire          cmd_mux_016_src_ready;                                                                               // Interval_Timer_s1_burst_adapter:sink0_ready -> cmd_mux_016:src_ready
	wire   [36:0] cmd_mux_016_src_channel;                                                                             // cmd_mux_016:src_channel -> Interval_Timer_s1_burst_adapter:sink0_channel
	wire          cmd_mux_016_src_startofpacket;                                                                       // cmd_mux_016:src_startofpacket -> Interval_Timer_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                                         // cmd_mux_016:src_endofpacket -> Interval_Timer_s1_burst_adapter:sink0_endofpacket
	wire          interval_timer_s1_burst_adapter_source0_valid;                                                       // Interval_Timer_s1_burst_adapter:source0_valid -> Interval_Timer_s1_agent:cp_valid
	wire  [136:0] interval_timer_s1_burst_adapter_source0_data;                                                        // Interval_Timer_s1_burst_adapter:source0_data -> Interval_Timer_s1_agent:cp_data
	wire          interval_timer_s1_burst_adapter_source0_ready;                                                       // Interval_Timer_s1_agent:cp_ready -> Interval_Timer_s1_burst_adapter:source0_ready
	wire   [36:0] interval_timer_s1_burst_adapter_source0_channel;                                                     // Interval_Timer_s1_burst_adapter:source0_channel -> Interval_Timer_s1_agent:cp_channel
	wire          interval_timer_s1_burst_adapter_source0_startofpacket;                                               // Interval_Timer_s1_burst_adapter:source0_startofpacket -> Interval_Timer_s1_agent:cp_startofpacket
	wire          interval_timer_s1_burst_adapter_source0_endofpacket;                                                 // Interval_Timer_s1_burst_adapter:source0_endofpacket -> Interval_Timer_s1_agent:cp_endofpacket
	wire          cmd_mux_017_src_valid;                                                                               // cmd_mux_017:src_valid -> Interval_Timer_2_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_017_src_data;                                                                                // cmd_mux_017:src_data -> Interval_Timer_2_s1_burst_adapter:sink0_data
	wire          cmd_mux_017_src_ready;                                                                               // Interval_Timer_2_s1_burst_adapter:sink0_ready -> cmd_mux_017:src_ready
	wire   [36:0] cmd_mux_017_src_channel;                                                                             // cmd_mux_017:src_channel -> Interval_Timer_2_s1_burst_adapter:sink0_channel
	wire          cmd_mux_017_src_startofpacket;                                                                       // cmd_mux_017:src_startofpacket -> Interval_Timer_2_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                                         // cmd_mux_017:src_endofpacket -> Interval_Timer_2_s1_burst_adapter:sink0_endofpacket
	wire          interval_timer_2_s1_burst_adapter_source0_valid;                                                     // Interval_Timer_2_s1_burst_adapter:source0_valid -> Interval_Timer_2_s1_agent:cp_valid
	wire  [136:0] interval_timer_2_s1_burst_adapter_source0_data;                                                      // Interval_Timer_2_s1_burst_adapter:source0_data -> Interval_Timer_2_s1_agent:cp_data
	wire          interval_timer_2_s1_burst_adapter_source0_ready;                                                     // Interval_Timer_2_s1_agent:cp_ready -> Interval_Timer_2_s1_burst_adapter:source0_ready
	wire   [36:0] interval_timer_2_s1_burst_adapter_source0_channel;                                                   // Interval_Timer_2_s1_burst_adapter:source0_channel -> Interval_Timer_2_s1_agent:cp_channel
	wire          interval_timer_2_s1_burst_adapter_source0_startofpacket;                                             // Interval_Timer_2_s1_burst_adapter:source0_startofpacket -> Interval_Timer_2_s1_agent:cp_startofpacket
	wire          interval_timer_2_s1_burst_adapter_source0_endofpacket;                                               // Interval_Timer_2_s1_burst_adapter:source0_endofpacket -> Interval_Timer_2_s1_agent:cp_endofpacket
	wire          cmd_mux_018_src_valid;                                                                               // cmd_mux_018:src_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_018_src_data;                                                                                // cmd_mux_018:src_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_018_src_ready;                                                                               // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_018:src_ready
	wire   [36:0] cmd_mux_018_src_channel;                                                                             // cmd_mux_018:src_channel -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_018_src_startofpacket;                                                                       // cmd_mux_018:src_startofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                                         // cmd_mux_018:src_endofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_valid;                                   // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_valid
	wire  [136:0] jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_data;                                    // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_ready;                                   // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_ready
	wire   [36:0] jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_channel;                                 // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_channel -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_startofpacket;                           // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_startofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_endofpacket;                             // JTAG_UART_for_ARM_0_avalon_jtag_slave_burst_adapter:source0_endofpacket -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_019_src_valid;                                                                               // cmd_mux_019:src_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_019_src_data;                                                                                // cmd_mux_019:src_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_019_src_ready;                                                                               // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_019:src_ready
	wire   [36:0] cmd_mux_019_src_channel;                                                                             // cmd_mux_019:src_channel -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_019_src_startofpacket;                                                                       // cmd_mux_019:src_startofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                                         // cmd_mux_019:src_endofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_valid;                                   // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_valid
	wire  [136:0] jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_data;                                    // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_ready;                                   // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_ready
	wire   [36:0] jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_channel;                                 // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_channel -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_channel
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_startofpacket;                           // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_startofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_startofpacket
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_endofpacket;                             // JTAG_UART_for_ARM_1_avalon_jtag_slave_burst_adapter:source0_endofpacket -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:cp_endofpacket
	wire          cmd_mux_020_src_valid;                                                                               // cmd_mux_020:src_valid -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_020_src_data;                                                                                // cmd_mux_020:src_data -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_data
	wire          cmd_mux_020_src_ready;                                                                               // Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_ready -> cmd_mux_020:src_ready
	wire   [36:0] cmd_mux_020_src_channel;                                                                             // cmd_mux_020:src_channel -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_channel
	wire          cmd_mux_020_src_startofpacket;                                                                       // cmd_mux_020:src_startofpacket -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                                         // cmd_mux_020:src_endofpacket -> Pixel_DMA_Addr_Translation_slave_burst_adapter:sink0_endofpacket
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_valid;                                        // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_valid -> Pixel_DMA_Addr_Translation_slave_agent:cp_valid
	wire  [136:0] pixel_dma_addr_translation_slave_burst_adapter_source0_data;                                         // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_data -> Pixel_DMA_Addr_Translation_slave_agent:cp_data
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_ready;                                        // Pixel_DMA_Addr_Translation_slave_agent:cp_ready -> Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_ready
	wire   [36:0] pixel_dma_addr_translation_slave_burst_adapter_source0_channel;                                      // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_channel -> Pixel_DMA_Addr_Translation_slave_agent:cp_channel
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_startofpacket;                                // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_startofpacket -> Pixel_DMA_Addr_Translation_slave_agent:cp_startofpacket
	wire          pixel_dma_addr_translation_slave_burst_adapter_source0_endofpacket;                                  // Pixel_DMA_Addr_Translation_slave_burst_adapter:source0_endofpacket -> Pixel_DMA_Addr_Translation_slave_agent:cp_endofpacket
	wire          cmd_mux_021_src_valid;                                                                               // cmd_mux_021:src_valid -> Video_In_DMA_Addr_Translation_slave_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_021_src_data;                                                                                // cmd_mux_021:src_data -> Video_In_DMA_Addr_Translation_slave_burst_adapter:sink0_data
	wire          cmd_mux_021_src_ready;                                                                               // Video_In_DMA_Addr_Translation_slave_burst_adapter:sink0_ready -> cmd_mux_021:src_ready
	wire   [36:0] cmd_mux_021_src_channel;                                                                             // cmd_mux_021:src_channel -> Video_In_DMA_Addr_Translation_slave_burst_adapter:sink0_channel
	wire          cmd_mux_021_src_startofpacket;                                                                       // cmd_mux_021:src_startofpacket -> Video_In_DMA_Addr_Translation_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                                         // cmd_mux_021:src_endofpacket -> Video_In_DMA_Addr_Translation_slave_burst_adapter:sink0_endofpacket
	wire          video_in_dma_addr_translation_slave_burst_adapter_source0_valid;                                     // Video_In_DMA_Addr_Translation_slave_burst_adapter:source0_valid -> Video_In_DMA_Addr_Translation_slave_agent:cp_valid
	wire  [136:0] video_in_dma_addr_translation_slave_burst_adapter_source0_data;                                      // Video_In_DMA_Addr_Translation_slave_burst_adapter:source0_data -> Video_In_DMA_Addr_Translation_slave_agent:cp_data
	wire          video_in_dma_addr_translation_slave_burst_adapter_source0_ready;                                     // Video_In_DMA_Addr_Translation_slave_agent:cp_ready -> Video_In_DMA_Addr_Translation_slave_burst_adapter:source0_ready
	wire   [36:0] video_in_dma_addr_translation_slave_burst_adapter_source0_channel;                                   // Video_In_DMA_Addr_Translation_slave_burst_adapter:source0_channel -> Video_In_DMA_Addr_Translation_slave_agent:cp_channel
	wire          video_in_dma_addr_translation_slave_burst_adapter_source0_startofpacket;                             // Video_In_DMA_Addr_Translation_slave_burst_adapter:source0_startofpacket -> Video_In_DMA_Addr_Translation_slave_agent:cp_startofpacket
	wire          video_in_dma_addr_translation_slave_burst_adapter_source0_endofpacket;                               // Video_In_DMA_Addr_Translation_slave_burst_adapter:source0_endofpacket -> Video_In_DMA_Addr_Translation_slave_agent:cp_endofpacket
	wire          cmd_mux_023_src_valid;                                                                               // cmd_mux_023:src_valid -> VGA_Subsystem_char_buffer_slave_burst_adapter:sink0_valid
	wire  [109:0] cmd_mux_023_src_data;                                                                                // cmd_mux_023:src_data -> VGA_Subsystem_char_buffer_slave_burst_adapter:sink0_data
	wire          cmd_mux_023_src_ready;                                                                               // VGA_Subsystem_char_buffer_slave_burst_adapter:sink0_ready -> cmd_mux_023:src_ready
	wire   [36:0] cmd_mux_023_src_channel;                                                                             // cmd_mux_023:src_channel -> VGA_Subsystem_char_buffer_slave_burst_adapter:sink0_channel
	wire          cmd_mux_023_src_startofpacket;                                                                       // cmd_mux_023:src_startofpacket -> VGA_Subsystem_char_buffer_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_023_src_endofpacket;                                                                         // cmd_mux_023:src_endofpacket -> VGA_Subsystem_char_buffer_slave_burst_adapter:sink0_endofpacket
	wire          vga_subsystem_char_buffer_slave_burst_adapter_source0_valid;                                         // VGA_Subsystem_char_buffer_slave_burst_adapter:source0_valid -> VGA_Subsystem_char_buffer_slave_agent:cp_valid
	wire  [109:0] vga_subsystem_char_buffer_slave_burst_adapter_source0_data;                                          // VGA_Subsystem_char_buffer_slave_burst_adapter:source0_data -> VGA_Subsystem_char_buffer_slave_agent:cp_data
	wire          vga_subsystem_char_buffer_slave_burst_adapter_source0_ready;                                         // VGA_Subsystem_char_buffer_slave_agent:cp_ready -> VGA_Subsystem_char_buffer_slave_burst_adapter:source0_ready
	wire   [36:0] vga_subsystem_char_buffer_slave_burst_adapter_source0_channel;                                       // VGA_Subsystem_char_buffer_slave_burst_adapter:source0_channel -> VGA_Subsystem_char_buffer_slave_agent:cp_channel
	wire          vga_subsystem_char_buffer_slave_burst_adapter_source0_startofpacket;                                 // VGA_Subsystem_char_buffer_slave_burst_adapter:source0_startofpacket -> VGA_Subsystem_char_buffer_slave_agent:cp_startofpacket
	wire          vga_subsystem_char_buffer_slave_burst_adapter_source0_endofpacket;                                   // VGA_Subsystem_char_buffer_slave_burst_adapter:source0_endofpacket -> VGA_Subsystem_char_buffer_slave_agent:cp_endofpacket
	wire          cmd_mux_025_src_valid;                                                                               // cmd_mux_025:src_valid -> SDRAM_s1_burst_adapter:sink0_valid
	wire  [118:0] cmd_mux_025_src_data;                                                                                // cmd_mux_025:src_data -> SDRAM_s1_burst_adapter:sink0_data
	wire          cmd_mux_025_src_ready;                                                                               // SDRAM_s1_burst_adapter:sink0_ready -> cmd_mux_025:src_ready
	wire   [36:0] cmd_mux_025_src_channel;                                                                             // cmd_mux_025:src_channel -> SDRAM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_025_src_startofpacket;                                                                       // cmd_mux_025:src_startofpacket -> SDRAM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_025_src_endofpacket;                                                                         // cmd_mux_025:src_endofpacket -> SDRAM_s1_burst_adapter:sink0_endofpacket
	wire          sdram_s1_burst_adapter_source0_valid;                                                                // SDRAM_s1_burst_adapter:source0_valid -> SDRAM_s1_agent:cp_valid
	wire  [118:0] sdram_s1_burst_adapter_source0_data;                                                                 // SDRAM_s1_burst_adapter:source0_data -> SDRAM_s1_agent:cp_data
	wire          sdram_s1_burst_adapter_source0_ready;                                                                // SDRAM_s1_agent:cp_ready -> SDRAM_s1_burst_adapter:source0_ready
	wire   [36:0] sdram_s1_burst_adapter_source0_channel;                                                              // SDRAM_s1_burst_adapter:source0_channel -> SDRAM_s1_agent:cp_channel
	wire          sdram_s1_burst_adapter_source0_startofpacket;                                                        // SDRAM_s1_burst_adapter:source0_startofpacket -> SDRAM_s1_agent:cp_startofpacket
	wire          sdram_s1_burst_adapter_source0_endofpacket;                                                          // SDRAM_s1_burst_adapter:source0_endofpacket -> SDRAM_s1_agent:cp_endofpacket
	wire          cmd_mux_026_src_valid;                                                                               // cmd_mux_026:src_valid -> Onchip_SRAM_s1_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_026_src_data;                                                                                // cmd_mux_026:src_data -> Onchip_SRAM_s1_burst_adapter:sink0_data
	wire          cmd_mux_026_src_ready;                                                                               // Onchip_SRAM_s1_burst_adapter:sink0_ready -> cmd_mux_026:src_ready
	wire   [36:0] cmd_mux_026_src_channel;                                                                             // cmd_mux_026:src_channel -> Onchip_SRAM_s1_burst_adapter:sink0_channel
	wire          cmd_mux_026_src_startofpacket;                                                                       // cmd_mux_026:src_startofpacket -> Onchip_SRAM_s1_burst_adapter:sink0_startofpacket
	wire          cmd_mux_026_src_endofpacket;                                                                         // cmd_mux_026:src_endofpacket -> Onchip_SRAM_s1_burst_adapter:sink0_endofpacket
	wire          onchip_sram_s1_burst_adapter_source0_valid;                                                          // Onchip_SRAM_s1_burst_adapter:source0_valid -> Onchip_SRAM_s1_agent:cp_valid
	wire  [136:0] onchip_sram_s1_burst_adapter_source0_data;                                                           // Onchip_SRAM_s1_burst_adapter:source0_data -> Onchip_SRAM_s1_agent:cp_data
	wire          onchip_sram_s1_burst_adapter_source0_ready;                                                          // Onchip_SRAM_s1_agent:cp_ready -> Onchip_SRAM_s1_burst_adapter:source0_ready
	wire   [36:0] onchip_sram_s1_burst_adapter_source0_channel;                                                        // Onchip_SRAM_s1_burst_adapter:source0_channel -> Onchip_SRAM_s1_agent:cp_channel
	wire          onchip_sram_s1_burst_adapter_source0_startofpacket;                                                  // Onchip_SRAM_s1_burst_adapter:source0_startofpacket -> Onchip_SRAM_s1_agent:cp_startofpacket
	wire          onchip_sram_s1_burst_adapter_source0_endofpacket;                                                    // Onchip_SRAM_s1_burst_adapter:source0_endofpacket -> Onchip_SRAM_s1_agent:cp_endofpacket
	wire          cmd_mux_035_src_valid;                                                                               // cmd_mux_035:src_valid -> Onchip_SRAM_s2_burst_adapter:sink0_valid
	wire  [136:0] cmd_mux_035_src_data;                                                                                // cmd_mux_035:src_data -> Onchip_SRAM_s2_burst_adapter:sink0_data
	wire          cmd_mux_035_src_ready;                                                                               // Onchip_SRAM_s2_burst_adapter:sink0_ready -> cmd_mux_035:src_ready
	wire   [36:0] cmd_mux_035_src_channel;                                                                             // cmd_mux_035:src_channel -> Onchip_SRAM_s2_burst_adapter:sink0_channel
	wire          cmd_mux_035_src_startofpacket;                                                                       // cmd_mux_035:src_startofpacket -> Onchip_SRAM_s2_burst_adapter:sink0_startofpacket
	wire          cmd_mux_035_src_endofpacket;                                                                         // cmd_mux_035:src_endofpacket -> Onchip_SRAM_s2_burst_adapter:sink0_endofpacket
	wire          onchip_sram_s2_burst_adapter_source0_valid;                                                          // Onchip_SRAM_s2_burst_adapter:source0_valid -> Onchip_SRAM_s2_agent:cp_valid
	wire  [136:0] onchip_sram_s2_burst_adapter_source0_data;                                                           // Onchip_SRAM_s2_burst_adapter:source0_data -> Onchip_SRAM_s2_agent:cp_data
	wire          onchip_sram_s2_burst_adapter_source0_ready;                                                          // Onchip_SRAM_s2_agent:cp_ready -> Onchip_SRAM_s2_burst_adapter:source0_ready
	wire   [36:0] onchip_sram_s2_burst_adapter_source0_channel;                                                        // Onchip_SRAM_s2_burst_adapter:source0_channel -> Onchip_SRAM_s2_agent:cp_channel
	wire          onchip_sram_s2_burst_adapter_source0_startofpacket;                                                  // Onchip_SRAM_s2_burst_adapter:source0_startofpacket -> Onchip_SRAM_s2_agent:cp_startofpacket
	wire          onchip_sram_s2_burst_adapter_source0_endofpacket;                                                    // Onchip_SRAM_s2_burst_adapter:source0_endofpacket -> Onchip_SRAM_s2_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                                // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [136:0] cmd_demux_src0_data;                                                                                 // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                                // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [36:0] cmd_demux_src0_channel;                                                                              // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                        // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                          // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                                // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [136:0] cmd_demux_src1_data;                                                                                 // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                                // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [36:0] cmd_demux_src1_channel;                                                                              // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                                        // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                          // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                                // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [136:0] cmd_demux_src2_data;                                                                                 // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                                // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [36:0] cmd_demux_src2_channel;                                                                              // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                                        // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                          // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                                // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [136:0] cmd_demux_src3_data;                                                                                 // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                                // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [36:0] cmd_demux_src3_channel;                                                                              // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                                        // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                          // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                                // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [136:0] cmd_demux_src4_data;                                                                                 // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                                                // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [36:0] cmd_demux_src4_channel;                                                                              // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                                        // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                          // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                                // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [136:0] cmd_demux_src5_data;                                                                                 // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                                // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [36:0] cmd_demux_src5_channel;                                                                              // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                                        // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                          // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                                // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [136:0] cmd_demux_src6_data;                                                                                 // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                                // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [36:0] cmd_demux_src6_channel;                                                                              // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                                        // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                          // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                                // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [136:0] cmd_demux_src7_data;                                                                                 // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                                // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [36:0] cmd_demux_src7_channel;                                                                              // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                                        // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                          // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                                // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [136:0] cmd_demux_src8_data;                                                                                 // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                                // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [36:0] cmd_demux_src8_channel;                                                                              // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                                        // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                                          // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                                // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [136:0] cmd_demux_src9_data;                                                                                 // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                                                // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [36:0] cmd_demux_src9_channel;                                                                              // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                                        // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                                          // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                               // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [136:0] cmd_demux_src10_data;                                                                                // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                                               // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [36:0] cmd_demux_src10_channel;                                                                             // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                                       // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                                         // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                               // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [136:0] cmd_demux_src11_data;                                                                                // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                                               // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [36:0] cmd_demux_src11_channel;                                                                             // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                                       // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                                         // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                                               // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [136:0] cmd_demux_src12_data;                                                                                // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                                               // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [36:0] cmd_demux_src12_channel;                                                                             // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                                       // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                                         // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                                               // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [136:0] cmd_demux_src13_data;                                                                                // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                                               // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [36:0] cmd_demux_src13_channel;                                                                             // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                                       // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                                         // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                                               // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [136:0] cmd_demux_src14_data;                                                                                // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                                               // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [36:0] cmd_demux_src14_channel;                                                                             // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                                       // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                                         // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                                               // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [136:0] cmd_demux_src15_data;                                                                                // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                                               // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [36:0] cmd_demux_src15_channel;                                                                             // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                                       // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                                         // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                                               // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [136:0] cmd_demux_src16_data;                                                                                // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                                               // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [36:0] cmd_demux_src16_channel;                                                                             // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                                       // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                                         // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                                               // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [136:0] cmd_demux_src17_data;                                                                                // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                                               // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [36:0] cmd_demux_src17_channel;                                                                             // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                                       // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                                         // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                                               // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [136:0] cmd_demux_src18_data;                                                                                // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                                               // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [36:0] cmd_demux_src18_channel;                                                                             // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                                       // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                                         // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                                               // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [136:0] cmd_demux_src19_data;                                                                                // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                                               // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [36:0] cmd_demux_src19_channel;                                                                             // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                                       // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                                         // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                                               // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [136:0] cmd_demux_src20_data;                                                                                // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                                               // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [36:0] cmd_demux_src20_channel;                                                                             // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                                       // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                                         // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                                               // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [136:0] cmd_demux_src21_data;                                                                                // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                                               // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [36:0] cmd_demux_src21_channel;                                                                             // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                                                       // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                                         // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                            // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [136:0] cmd_demux_001_src0_data;                                                                             // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                            // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [36:0] cmd_demux_001_src0_channel;                                                                          // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                                    // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                      // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                            // cmd_demux_001:src1_valid -> cmd_mux_001:sink1_valid
	wire  [136:0] cmd_demux_001_src1_data;                                                                             // cmd_demux_001:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src1_ready;                                                                            // cmd_mux_001:sink1_ready -> cmd_demux_001:src1_ready
	wire   [36:0] cmd_demux_001_src1_channel;                                                                          // cmd_demux_001:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                                    // cmd_demux_001:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                      // cmd_demux_001:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                            // cmd_demux_001:src2_valid -> cmd_mux_002:sink1_valid
	wire  [136:0] cmd_demux_001_src2_data;                                                                             // cmd_demux_001:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_001_src2_ready;                                                                            // cmd_mux_002:sink1_ready -> cmd_demux_001:src2_ready
	wire   [36:0] cmd_demux_001_src2_channel;                                                                          // cmd_demux_001:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                                    // cmd_demux_001:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                                      // cmd_demux_001:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                            // cmd_demux_001:src3_valid -> cmd_mux_003:sink1_valid
	wire  [136:0] cmd_demux_001_src3_data;                                                                             // cmd_demux_001:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_001_src3_ready;                                                                            // cmd_mux_003:sink1_ready -> cmd_demux_001:src3_ready
	wire   [36:0] cmd_demux_001_src3_channel;                                                                          // cmd_demux_001:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_001_src3_startofpacket;                                                                    // cmd_demux_001:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                                      // cmd_demux_001:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_001_src4_valid;                                                                            // cmd_demux_001:src4_valid -> cmd_mux_004:sink1_valid
	wire  [136:0] cmd_demux_001_src4_data;                                                                             // cmd_demux_001:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_001_src4_ready;                                                                            // cmd_mux_004:sink1_ready -> cmd_demux_001:src4_ready
	wire   [36:0] cmd_demux_001_src4_channel;                                                                          // cmd_demux_001:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_001_src4_startofpacket;                                                                    // cmd_demux_001:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                                      // cmd_demux_001:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_001_src5_valid;                                                                            // cmd_demux_001:src5_valid -> cmd_mux_005:sink1_valid
	wire  [136:0] cmd_demux_001_src5_data;                                                                             // cmd_demux_001:src5_data -> cmd_mux_005:sink1_data
	wire          cmd_demux_001_src5_ready;                                                                            // cmd_mux_005:sink1_ready -> cmd_demux_001:src5_ready
	wire   [36:0] cmd_demux_001_src5_channel;                                                                          // cmd_demux_001:src5_channel -> cmd_mux_005:sink1_channel
	wire          cmd_demux_001_src5_startofpacket;                                                                    // cmd_demux_001:src5_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                                      // cmd_demux_001:src5_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                                            // cmd_demux_001:src6_valid -> cmd_mux_006:sink1_valid
	wire  [136:0] cmd_demux_001_src6_data;                                                                             // cmd_demux_001:src6_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_001_src6_ready;                                                                            // cmd_mux_006:sink1_ready -> cmd_demux_001:src6_ready
	wire   [36:0] cmd_demux_001_src6_channel;                                                                          // cmd_demux_001:src6_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_001_src6_startofpacket;                                                                    // cmd_demux_001:src6_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                                      // cmd_demux_001:src6_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src7_valid;                                                                            // cmd_demux_001:src7_valid -> cmd_mux_007:sink1_valid
	wire  [136:0] cmd_demux_001_src7_data;                                                                             // cmd_demux_001:src7_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_001_src7_ready;                                                                            // cmd_mux_007:sink1_ready -> cmd_demux_001:src7_ready
	wire   [36:0] cmd_demux_001_src7_channel;                                                                          // cmd_demux_001:src7_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_001_src7_startofpacket;                                                                    // cmd_demux_001:src7_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                                      // cmd_demux_001:src7_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          cmd_demux_001_src8_valid;                                                                            // cmd_demux_001:src8_valid -> cmd_mux_008:sink1_valid
	wire  [136:0] cmd_demux_001_src8_data;                                                                             // cmd_demux_001:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src8_ready;                                                                            // cmd_mux_008:sink1_ready -> cmd_demux_001:src8_ready
	wire   [36:0] cmd_demux_001_src8_channel;                                                                          // cmd_demux_001:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src8_startofpacket;                                                                    // cmd_demux_001:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                                      // cmd_demux_001:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src9_valid;                                                                            // cmd_demux_001:src9_valid -> cmd_mux_009:sink1_valid
	wire  [136:0] cmd_demux_001_src9_data;                                                                             // cmd_demux_001:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_001_src9_ready;                                                                            // cmd_mux_009:sink1_ready -> cmd_demux_001:src9_ready
	wire   [36:0] cmd_demux_001_src9_channel;                                                                          // cmd_demux_001:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_001_src9_startofpacket;                                                                    // cmd_demux_001:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                                      // cmd_demux_001:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_001_src10_valid;                                                                           // cmd_demux_001:src10_valid -> cmd_mux_010:sink1_valid
	wire  [136:0] cmd_demux_001_src10_data;                                                                            // cmd_demux_001:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_001_src10_ready;                                                                           // cmd_mux_010:sink1_ready -> cmd_demux_001:src10_ready
	wire   [36:0] cmd_demux_001_src10_channel;                                                                         // cmd_demux_001:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_001_src10_startofpacket;                                                                   // cmd_demux_001:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                                     // cmd_demux_001:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_001_src11_valid;                                                                           // cmd_demux_001:src11_valid -> cmd_mux_011:sink1_valid
	wire  [136:0] cmd_demux_001_src11_data;                                                                            // cmd_demux_001:src11_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_001_src11_ready;                                                                           // cmd_mux_011:sink1_ready -> cmd_demux_001:src11_ready
	wire   [36:0] cmd_demux_001_src11_channel;                                                                         // cmd_demux_001:src11_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_001_src11_startofpacket;                                                                   // cmd_demux_001:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                                     // cmd_demux_001:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_001_src12_valid;                                                                           // cmd_demux_001:src12_valid -> cmd_mux_012:sink1_valid
	wire  [136:0] cmd_demux_001_src12_data;                                                                            // cmd_demux_001:src12_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_001_src12_ready;                                                                           // cmd_mux_012:sink1_ready -> cmd_demux_001:src12_ready
	wire   [36:0] cmd_demux_001_src12_channel;                                                                         // cmd_demux_001:src12_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src12_startofpacket;                                                                   // cmd_demux_001:src12_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                                                     // cmd_demux_001:src12_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_001_src13_valid;                                                                           // cmd_demux_001:src13_valid -> cmd_mux_013:sink1_valid
	wire  [136:0] cmd_demux_001_src13_data;                                                                            // cmd_demux_001:src13_data -> cmd_mux_013:sink1_data
	wire          cmd_demux_001_src13_ready;                                                                           // cmd_mux_013:sink1_ready -> cmd_demux_001:src13_ready
	wire   [36:0] cmd_demux_001_src13_channel;                                                                         // cmd_demux_001:src13_channel -> cmd_mux_013:sink1_channel
	wire          cmd_demux_001_src13_startofpacket;                                                                   // cmd_demux_001:src13_startofpacket -> cmd_mux_013:sink1_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                                                     // cmd_demux_001:src13_endofpacket -> cmd_mux_013:sink1_endofpacket
	wire          cmd_demux_001_src14_valid;                                                                           // cmd_demux_001:src14_valid -> cmd_mux_014:sink1_valid
	wire  [136:0] cmd_demux_001_src14_data;                                                                            // cmd_demux_001:src14_data -> cmd_mux_014:sink1_data
	wire          cmd_demux_001_src14_ready;                                                                           // cmd_mux_014:sink1_ready -> cmd_demux_001:src14_ready
	wire   [36:0] cmd_demux_001_src14_channel;                                                                         // cmd_demux_001:src14_channel -> cmd_mux_014:sink1_channel
	wire          cmd_demux_001_src14_startofpacket;                                                                   // cmd_demux_001:src14_startofpacket -> cmd_mux_014:sink1_startofpacket
	wire          cmd_demux_001_src14_endofpacket;                                                                     // cmd_demux_001:src14_endofpacket -> cmd_mux_014:sink1_endofpacket
	wire          cmd_demux_001_src15_valid;                                                                           // cmd_demux_001:src15_valid -> cmd_mux_015:sink1_valid
	wire  [136:0] cmd_demux_001_src15_data;                                                                            // cmd_demux_001:src15_data -> cmd_mux_015:sink1_data
	wire          cmd_demux_001_src15_ready;                                                                           // cmd_mux_015:sink1_ready -> cmd_demux_001:src15_ready
	wire   [36:0] cmd_demux_001_src15_channel;                                                                         // cmd_demux_001:src15_channel -> cmd_mux_015:sink1_channel
	wire          cmd_demux_001_src15_startofpacket;                                                                   // cmd_demux_001:src15_startofpacket -> cmd_mux_015:sink1_startofpacket
	wire          cmd_demux_001_src15_endofpacket;                                                                     // cmd_demux_001:src15_endofpacket -> cmd_mux_015:sink1_endofpacket
	wire          cmd_demux_001_src16_valid;                                                                           // cmd_demux_001:src16_valid -> cmd_mux_016:sink1_valid
	wire  [136:0] cmd_demux_001_src16_data;                                                                            // cmd_demux_001:src16_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_001_src16_ready;                                                                           // cmd_mux_016:sink1_ready -> cmd_demux_001:src16_ready
	wire   [36:0] cmd_demux_001_src16_channel;                                                                         // cmd_demux_001:src16_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_001_src16_startofpacket;                                                                   // cmd_demux_001:src16_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_001_src16_endofpacket;                                                                     // cmd_demux_001:src16_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_001_src17_valid;                                                                           // cmd_demux_001:src17_valid -> cmd_mux_017:sink1_valid
	wire  [136:0] cmd_demux_001_src17_data;                                                                            // cmd_demux_001:src17_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_001_src17_ready;                                                                           // cmd_mux_017:sink1_ready -> cmd_demux_001:src17_ready
	wire   [36:0] cmd_demux_001_src17_channel;                                                                         // cmd_demux_001:src17_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_001_src17_startofpacket;                                                                   // cmd_demux_001:src17_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_001_src17_endofpacket;                                                                     // cmd_demux_001:src17_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          cmd_demux_001_src18_valid;                                                                           // cmd_demux_001:src18_valid -> cmd_mux_018:sink1_valid
	wire  [136:0] cmd_demux_001_src18_data;                                                                            // cmd_demux_001:src18_data -> cmd_mux_018:sink1_data
	wire          cmd_demux_001_src18_ready;                                                                           // cmd_mux_018:sink1_ready -> cmd_demux_001:src18_ready
	wire   [36:0] cmd_demux_001_src18_channel;                                                                         // cmd_demux_001:src18_channel -> cmd_mux_018:sink1_channel
	wire          cmd_demux_001_src18_startofpacket;                                                                   // cmd_demux_001:src18_startofpacket -> cmd_mux_018:sink1_startofpacket
	wire          cmd_demux_001_src18_endofpacket;                                                                     // cmd_demux_001:src18_endofpacket -> cmd_mux_018:sink1_endofpacket
	wire          cmd_demux_001_src19_valid;                                                                           // cmd_demux_001:src19_valid -> cmd_mux_019:sink1_valid
	wire  [136:0] cmd_demux_001_src19_data;                                                                            // cmd_demux_001:src19_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_001_src19_ready;                                                                           // cmd_mux_019:sink1_ready -> cmd_demux_001:src19_ready
	wire   [36:0] cmd_demux_001_src19_channel;                                                                         // cmd_demux_001:src19_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_001_src19_startofpacket;                                                                   // cmd_demux_001:src19_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_001_src19_endofpacket;                                                                     // cmd_demux_001:src19_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_001_src20_valid;                                                                           // cmd_demux_001:src20_valid -> cmd_mux_020:sink1_valid
	wire  [136:0] cmd_demux_001_src20_data;                                                                            // cmd_demux_001:src20_data -> cmd_mux_020:sink1_data
	wire          cmd_demux_001_src20_ready;                                                                           // cmd_mux_020:sink1_ready -> cmd_demux_001:src20_ready
	wire   [36:0] cmd_demux_001_src20_channel;                                                                         // cmd_demux_001:src20_channel -> cmd_mux_020:sink1_channel
	wire          cmd_demux_001_src20_startofpacket;                                                                   // cmd_demux_001:src20_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          cmd_demux_001_src20_endofpacket;                                                                     // cmd_demux_001:src20_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_001_src21_valid;                                                                           // cmd_demux_001:src21_valid -> cmd_mux_021:sink1_valid
	wire  [136:0] cmd_demux_001_src21_data;                                                                            // cmd_demux_001:src21_data -> cmd_mux_021:sink1_data
	wire          cmd_demux_001_src21_ready;                                                                           // cmd_mux_021:sink1_ready -> cmd_demux_001:src21_ready
	wire   [36:0] cmd_demux_001_src21_channel;                                                                         // cmd_demux_001:src21_channel -> cmd_mux_021:sink1_channel
	wire          cmd_demux_001_src21_startofpacket;                                                                   // cmd_demux_001:src21_startofpacket -> cmd_mux_021:sink1_startofpacket
	wire          cmd_demux_001_src21_endofpacket;                                                                     // cmd_demux_001:src21_endofpacket -> cmd_mux_021:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                            // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [136:0] cmd_demux_002_src0_data;                                                                             // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                                            // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire   [36:0] cmd_demux_002_src0_channel;                                                                          // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                                    // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                                      // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                            // cmd_demux_002:src1_valid -> cmd_mux_001:sink2_valid
	wire  [136:0] cmd_demux_002_src1_data;                                                                             // cmd_demux_002:src1_data -> cmd_mux_001:sink2_data
	wire          cmd_demux_002_src1_ready;                                                                            // cmd_mux_001:sink2_ready -> cmd_demux_002:src1_ready
	wire   [36:0] cmd_demux_002_src1_channel;                                                                          // cmd_demux_002:src1_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_002_src1_startofpacket;                                                                    // cmd_demux_002:src1_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                                      // cmd_demux_002:src1_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                            // cmd_demux_002:src2_valid -> cmd_mux_002:sink2_valid
	wire  [136:0] cmd_demux_002_src2_data;                                                                             // cmd_demux_002:src2_data -> cmd_mux_002:sink2_data
	wire          cmd_demux_002_src2_ready;                                                                            // cmd_mux_002:sink2_ready -> cmd_demux_002:src2_ready
	wire   [36:0] cmd_demux_002_src2_channel;                                                                          // cmd_demux_002:src2_channel -> cmd_mux_002:sink2_channel
	wire          cmd_demux_002_src2_startofpacket;                                                                    // cmd_demux_002:src2_startofpacket -> cmd_mux_002:sink2_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                                      // cmd_demux_002:src2_endofpacket -> cmd_mux_002:sink2_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                            // cmd_demux_002:src3_valid -> cmd_mux_003:sink2_valid
	wire  [136:0] cmd_demux_002_src3_data;                                                                             // cmd_demux_002:src3_data -> cmd_mux_003:sink2_data
	wire          cmd_demux_002_src3_ready;                                                                            // cmd_mux_003:sink2_ready -> cmd_demux_002:src3_ready
	wire   [36:0] cmd_demux_002_src3_channel;                                                                          // cmd_demux_002:src3_channel -> cmd_mux_003:sink2_channel
	wire          cmd_demux_002_src3_startofpacket;                                                                    // cmd_demux_002:src3_startofpacket -> cmd_mux_003:sink2_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                                      // cmd_demux_002:src3_endofpacket -> cmd_mux_003:sink2_endofpacket
	wire          cmd_demux_002_src4_valid;                                                                            // cmd_demux_002:src4_valid -> cmd_mux_004:sink2_valid
	wire  [136:0] cmd_demux_002_src4_data;                                                                             // cmd_demux_002:src4_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_002_src4_ready;                                                                            // cmd_mux_004:sink2_ready -> cmd_demux_002:src4_ready
	wire   [36:0] cmd_demux_002_src4_channel;                                                                          // cmd_demux_002:src4_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_002_src4_startofpacket;                                                                    // cmd_demux_002:src4_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                                      // cmd_demux_002:src4_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          cmd_demux_002_src5_valid;                                                                            // cmd_demux_002:src5_valid -> cmd_mux_005:sink2_valid
	wire  [136:0] cmd_demux_002_src5_data;                                                                             // cmd_demux_002:src5_data -> cmd_mux_005:sink2_data
	wire          cmd_demux_002_src5_ready;                                                                            // cmd_mux_005:sink2_ready -> cmd_demux_002:src5_ready
	wire   [36:0] cmd_demux_002_src5_channel;                                                                          // cmd_demux_002:src5_channel -> cmd_mux_005:sink2_channel
	wire          cmd_demux_002_src5_startofpacket;                                                                    // cmd_demux_002:src5_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                                                      // cmd_demux_002:src5_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_002_src6_valid;                                                                            // cmd_demux_002:src6_valid -> cmd_mux_006:sink2_valid
	wire  [136:0] cmd_demux_002_src6_data;                                                                             // cmd_demux_002:src6_data -> cmd_mux_006:sink2_data
	wire          cmd_demux_002_src6_ready;                                                                            // cmd_mux_006:sink2_ready -> cmd_demux_002:src6_ready
	wire   [36:0] cmd_demux_002_src6_channel;                                                                          // cmd_demux_002:src6_channel -> cmd_mux_006:sink2_channel
	wire          cmd_demux_002_src6_startofpacket;                                                                    // cmd_demux_002:src6_startofpacket -> cmd_mux_006:sink2_startofpacket
	wire          cmd_demux_002_src6_endofpacket;                                                                      // cmd_demux_002:src6_endofpacket -> cmd_mux_006:sink2_endofpacket
	wire          cmd_demux_002_src7_valid;                                                                            // cmd_demux_002:src7_valid -> cmd_mux_007:sink2_valid
	wire  [136:0] cmd_demux_002_src7_data;                                                                             // cmd_demux_002:src7_data -> cmd_mux_007:sink2_data
	wire          cmd_demux_002_src7_ready;                                                                            // cmd_mux_007:sink2_ready -> cmd_demux_002:src7_ready
	wire   [36:0] cmd_demux_002_src7_channel;                                                                          // cmd_demux_002:src7_channel -> cmd_mux_007:sink2_channel
	wire          cmd_demux_002_src7_startofpacket;                                                                    // cmd_demux_002:src7_startofpacket -> cmd_mux_007:sink2_startofpacket
	wire          cmd_demux_002_src7_endofpacket;                                                                      // cmd_demux_002:src7_endofpacket -> cmd_mux_007:sink2_endofpacket
	wire          cmd_demux_002_src8_valid;                                                                            // cmd_demux_002:src8_valid -> cmd_mux_008:sink2_valid
	wire  [136:0] cmd_demux_002_src8_data;                                                                             // cmd_demux_002:src8_data -> cmd_mux_008:sink2_data
	wire          cmd_demux_002_src8_ready;                                                                            // cmd_mux_008:sink2_ready -> cmd_demux_002:src8_ready
	wire   [36:0] cmd_demux_002_src8_channel;                                                                          // cmd_demux_002:src8_channel -> cmd_mux_008:sink2_channel
	wire          cmd_demux_002_src8_startofpacket;                                                                    // cmd_demux_002:src8_startofpacket -> cmd_mux_008:sink2_startofpacket
	wire          cmd_demux_002_src8_endofpacket;                                                                      // cmd_demux_002:src8_endofpacket -> cmd_mux_008:sink2_endofpacket
	wire          cmd_demux_002_src9_valid;                                                                            // cmd_demux_002:src9_valid -> cmd_mux_009:sink2_valid
	wire  [136:0] cmd_demux_002_src9_data;                                                                             // cmd_demux_002:src9_data -> cmd_mux_009:sink2_data
	wire          cmd_demux_002_src9_ready;                                                                            // cmd_mux_009:sink2_ready -> cmd_demux_002:src9_ready
	wire   [36:0] cmd_demux_002_src9_channel;                                                                          // cmd_demux_002:src9_channel -> cmd_mux_009:sink2_channel
	wire          cmd_demux_002_src9_startofpacket;                                                                    // cmd_demux_002:src9_startofpacket -> cmd_mux_009:sink2_startofpacket
	wire          cmd_demux_002_src9_endofpacket;                                                                      // cmd_demux_002:src9_endofpacket -> cmd_mux_009:sink2_endofpacket
	wire          cmd_demux_002_src10_valid;                                                                           // cmd_demux_002:src10_valid -> cmd_mux_010:sink2_valid
	wire  [136:0] cmd_demux_002_src10_data;                                                                            // cmd_demux_002:src10_data -> cmd_mux_010:sink2_data
	wire          cmd_demux_002_src10_ready;                                                                           // cmd_mux_010:sink2_ready -> cmd_demux_002:src10_ready
	wire   [36:0] cmd_demux_002_src10_channel;                                                                         // cmd_demux_002:src10_channel -> cmd_mux_010:sink2_channel
	wire          cmd_demux_002_src10_startofpacket;                                                                   // cmd_demux_002:src10_startofpacket -> cmd_mux_010:sink2_startofpacket
	wire          cmd_demux_002_src10_endofpacket;                                                                     // cmd_demux_002:src10_endofpacket -> cmd_mux_010:sink2_endofpacket
	wire          cmd_demux_002_src11_valid;                                                                           // cmd_demux_002:src11_valid -> cmd_mux_011:sink2_valid
	wire  [136:0] cmd_demux_002_src11_data;                                                                            // cmd_demux_002:src11_data -> cmd_mux_011:sink2_data
	wire          cmd_demux_002_src11_ready;                                                                           // cmd_mux_011:sink2_ready -> cmd_demux_002:src11_ready
	wire   [36:0] cmd_demux_002_src11_channel;                                                                         // cmd_demux_002:src11_channel -> cmd_mux_011:sink2_channel
	wire          cmd_demux_002_src11_startofpacket;                                                                   // cmd_demux_002:src11_startofpacket -> cmd_mux_011:sink2_startofpacket
	wire          cmd_demux_002_src11_endofpacket;                                                                     // cmd_demux_002:src11_endofpacket -> cmd_mux_011:sink2_endofpacket
	wire          cmd_demux_002_src12_valid;                                                                           // cmd_demux_002:src12_valid -> cmd_mux_012:sink2_valid
	wire  [136:0] cmd_demux_002_src12_data;                                                                            // cmd_demux_002:src12_data -> cmd_mux_012:sink2_data
	wire          cmd_demux_002_src12_ready;                                                                           // cmd_mux_012:sink2_ready -> cmd_demux_002:src12_ready
	wire   [36:0] cmd_demux_002_src12_channel;                                                                         // cmd_demux_002:src12_channel -> cmd_mux_012:sink2_channel
	wire          cmd_demux_002_src12_startofpacket;                                                                   // cmd_demux_002:src12_startofpacket -> cmd_mux_012:sink2_startofpacket
	wire          cmd_demux_002_src12_endofpacket;                                                                     // cmd_demux_002:src12_endofpacket -> cmd_mux_012:sink2_endofpacket
	wire          cmd_demux_002_src13_valid;                                                                           // cmd_demux_002:src13_valid -> cmd_mux_013:sink2_valid
	wire  [136:0] cmd_demux_002_src13_data;                                                                            // cmd_demux_002:src13_data -> cmd_mux_013:sink2_data
	wire          cmd_demux_002_src13_ready;                                                                           // cmd_mux_013:sink2_ready -> cmd_demux_002:src13_ready
	wire   [36:0] cmd_demux_002_src13_channel;                                                                         // cmd_demux_002:src13_channel -> cmd_mux_013:sink2_channel
	wire          cmd_demux_002_src13_startofpacket;                                                                   // cmd_demux_002:src13_startofpacket -> cmd_mux_013:sink2_startofpacket
	wire          cmd_demux_002_src13_endofpacket;                                                                     // cmd_demux_002:src13_endofpacket -> cmd_mux_013:sink2_endofpacket
	wire          cmd_demux_002_src14_valid;                                                                           // cmd_demux_002:src14_valid -> cmd_mux_014:sink2_valid
	wire  [136:0] cmd_demux_002_src14_data;                                                                            // cmd_demux_002:src14_data -> cmd_mux_014:sink2_data
	wire          cmd_demux_002_src14_ready;                                                                           // cmd_mux_014:sink2_ready -> cmd_demux_002:src14_ready
	wire   [36:0] cmd_demux_002_src14_channel;                                                                         // cmd_demux_002:src14_channel -> cmd_mux_014:sink2_channel
	wire          cmd_demux_002_src14_startofpacket;                                                                   // cmd_demux_002:src14_startofpacket -> cmd_mux_014:sink2_startofpacket
	wire          cmd_demux_002_src14_endofpacket;                                                                     // cmd_demux_002:src14_endofpacket -> cmd_mux_014:sink2_endofpacket
	wire          cmd_demux_002_src15_valid;                                                                           // cmd_demux_002:src15_valid -> cmd_mux_015:sink2_valid
	wire  [136:0] cmd_demux_002_src15_data;                                                                            // cmd_demux_002:src15_data -> cmd_mux_015:sink2_data
	wire          cmd_demux_002_src15_ready;                                                                           // cmd_mux_015:sink2_ready -> cmd_demux_002:src15_ready
	wire   [36:0] cmd_demux_002_src15_channel;                                                                         // cmd_demux_002:src15_channel -> cmd_mux_015:sink2_channel
	wire          cmd_demux_002_src15_startofpacket;                                                                   // cmd_demux_002:src15_startofpacket -> cmd_mux_015:sink2_startofpacket
	wire          cmd_demux_002_src15_endofpacket;                                                                     // cmd_demux_002:src15_endofpacket -> cmd_mux_015:sink2_endofpacket
	wire          cmd_demux_002_src16_valid;                                                                           // cmd_demux_002:src16_valid -> cmd_mux_016:sink2_valid
	wire  [136:0] cmd_demux_002_src16_data;                                                                            // cmd_demux_002:src16_data -> cmd_mux_016:sink2_data
	wire          cmd_demux_002_src16_ready;                                                                           // cmd_mux_016:sink2_ready -> cmd_demux_002:src16_ready
	wire   [36:0] cmd_demux_002_src16_channel;                                                                         // cmd_demux_002:src16_channel -> cmd_mux_016:sink2_channel
	wire          cmd_demux_002_src16_startofpacket;                                                                   // cmd_demux_002:src16_startofpacket -> cmd_mux_016:sink2_startofpacket
	wire          cmd_demux_002_src16_endofpacket;                                                                     // cmd_demux_002:src16_endofpacket -> cmd_mux_016:sink2_endofpacket
	wire          cmd_demux_002_src17_valid;                                                                           // cmd_demux_002:src17_valid -> cmd_mux_017:sink2_valid
	wire  [136:0] cmd_demux_002_src17_data;                                                                            // cmd_demux_002:src17_data -> cmd_mux_017:sink2_data
	wire          cmd_demux_002_src17_ready;                                                                           // cmd_mux_017:sink2_ready -> cmd_demux_002:src17_ready
	wire   [36:0] cmd_demux_002_src17_channel;                                                                         // cmd_demux_002:src17_channel -> cmd_mux_017:sink2_channel
	wire          cmd_demux_002_src17_startofpacket;                                                                   // cmd_demux_002:src17_startofpacket -> cmd_mux_017:sink2_startofpacket
	wire          cmd_demux_002_src17_endofpacket;                                                                     // cmd_demux_002:src17_endofpacket -> cmd_mux_017:sink2_endofpacket
	wire          cmd_demux_002_src18_valid;                                                                           // cmd_demux_002:src18_valid -> cmd_mux_022:sink0_valid
	wire  [136:0] cmd_demux_002_src18_data;                                                                            // cmd_demux_002:src18_data -> cmd_mux_022:sink0_data
	wire          cmd_demux_002_src18_ready;                                                                           // cmd_mux_022:sink0_ready -> cmd_demux_002:src18_ready
	wire   [36:0] cmd_demux_002_src18_channel;                                                                         // cmd_demux_002:src18_channel -> cmd_mux_022:sink0_channel
	wire          cmd_demux_002_src18_startofpacket;                                                                   // cmd_demux_002:src18_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire          cmd_demux_002_src18_endofpacket;                                                                     // cmd_demux_002:src18_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire          cmd_demux_002_src20_valid;                                                                           // cmd_demux_002:src20_valid -> cmd_mux_024:sink0_valid
	wire  [136:0] cmd_demux_002_src20_data;                                                                            // cmd_demux_002:src20_data -> cmd_mux_024:sink0_data
	wire          cmd_demux_002_src20_ready;                                                                           // cmd_mux_024:sink0_ready -> cmd_demux_002:src20_ready
	wire   [36:0] cmd_demux_002_src20_channel;                                                                         // cmd_demux_002:src20_channel -> cmd_mux_024:sink0_channel
	wire          cmd_demux_002_src20_startofpacket;                                                                   // cmd_demux_002:src20_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire          cmd_demux_002_src20_endofpacket;                                                                     // cmd_demux_002:src20_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire          cmd_demux_002_src22_valid;                                                                           // cmd_demux_002:src22_valid -> cmd_mux_026:sink0_valid
	wire  [136:0] cmd_demux_002_src22_data;                                                                            // cmd_demux_002:src22_data -> cmd_mux_026:sink0_data
	wire          cmd_demux_002_src22_ready;                                                                           // cmd_mux_026:sink0_ready -> cmd_demux_002:src22_ready
	wire   [36:0] cmd_demux_002_src22_channel;                                                                         // cmd_demux_002:src22_channel -> cmd_mux_026:sink0_channel
	wire          cmd_demux_002_src22_startofpacket;                                                                   // cmd_demux_002:src22_startofpacket -> cmd_mux_026:sink0_startofpacket
	wire          cmd_demux_002_src22_endofpacket;                                                                     // cmd_demux_002:src22_endofpacket -> cmd_mux_026:sink0_endofpacket
	wire          cmd_demux_002_src23_valid;                                                                           // cmd_demux_002:src23_valid -> cmd_mux_027:sink0_valid
	wire  [136:0] cmd_demux_002_src23_data;                                                                            // cmd_demux_002:src23_data -> cmd_mux_027:sink0_data
	wire          cmd_demux_002_src23_ready;                                                                           // cmd_mux_027:sink0_ready -> cmd_demux_002:src23_ready
	wire   [36:0] cmd_demux_002_src23_channel;                                                                         // cmd_demux_002:src23_channel -> cmd_mux_027:sink0_channel
	wire          cmd_demux_002_src23_startofpacket;                                                                   // cmd_demux_002:src23_startofpacket -> cmd_mux_027:sink0_startofpacket
	wire          cmd_demux_002_src23_endofpacket;                                                                     // cmd_demux_002:src23_endofpacket -> cmd_mux_027:sink0_endofpacket
	wire          cmd_demux_002_src24_valid;                                                                           // cmd_demux_002:src24_valid -> cmd_mux_028:sink0_valid
	wire  [136:0] cmd_demux_002_src24_data;                                                                            // cmd_demux_002:src24_data -> cmd_mux_028:sink0_data
	wire          cmd_demux_002_src24_ready;                                                                           // cmd_mux_028:sink0_ready -> cmd_demux_002:src24_ready
	wire   [36:0] cmd_demux_002_src24_channel;                                                                         // cmd_demux_002:src24_channel -> cmd_mux_028:sink0_channel
	wire          cmd_demux_002_src24_startofpacket;                                                                   // cmd_demux_002:src24_startofpacket -> cmd_mux_028:sink0_startofpacket
	wire          cmd_demux_002_src24_endofpacket;                                                                     // cmd_demux_002:src24_endofpacket -> cmd_mux_028:sink0_endofpacket
	wire          cmd_demux_002_src25_valid;                                                                           // cmd_demux_002:src25_valid -> cmd_mux_029:sink0_valid
	wire  [136:0] cmd_demux_002_src25_data;                                                                            // cmd_demux_002:src25_data -> cmd_mux_029:sink0_data
	wire          cmd_demux_002_src25_ready;                                                                           // cmd_mux_029:sink0_ready -> cmd_demux_002:src25_ready
	wire   [36:0] cmd_demux_002_src25_channel;                                                                         // cmd_demux_002:src25_channel -> cmd_mux_029:sink0_channel
	wire          cmd_demux_002_src25_startofpacket;                                                                   // cmd_demux_002:src25_startofpacket -> cmd_mux_029:sink0_startofpacket
	wire          cmd_demux_002_src25_endofpacket;                                                                     // cmd_demux_002:src25_endofpacket -> cmd_mux_029:sink0_endofpacket
	wire          cmd_demux_002_src26_valid;                                                                           // cmd_demux_002:src26_valid -> cmd_mux_030:sink0_valid
	wire  [136:0] cmd_demux_002_src26_data;                                                                            // cmd_demux_002:src26_data -> cmd_mux_030:sink0_data
	wire          cmd_demux_002_src26_ready;                                                                           // cmd_mux_030:sink0_ready -> cmd_demux_002:src26_ready
	wire   [36:0] cmd_demux_002_src26_channel;                                                                         // cmd_demux_002:src26_channel -> cmd_mux_030:sink0_channel
	wire          cmd_demux_002_src26_startofpacket;                                                                   // cmd_demux_002:src26_startofpacket -> cmd_mux_030:sink0_startofpacket
	wire          cmd_demux_002_src26_endofpacket;                                                                     // cmd_demux_002:src26_endofpacket -> cmd_mux_030:sink0_endofpacket
	wire          cmd_demux_002_src27_valid;                                                                           // cmd_demux_002:src27_valid -> cmd_mux_036:sink0_valid
	wire  [136:0] cmd_demux_002_src27_data;                                                                            // cmd_demux_002:src27_data -> cmd_mux_036:sink0_data
	wire          cmd_demux_002_src27_ready;                                                                           // cmd_mux_036:sink0_ready -> cmd_demux_002:src27_ready
	wire   [36:0] cmd_demux_002_src27_channel;                                                                         // cmd_demux_002:src27_channel -> cmd_mux_036:sink0_channel
	wire          cmd_demux_002_src27_startofpacket;                                                                   // cmd_demux_002:src27_startofpacket -> cmd_mux_036:sink0_startofpacket
	wire          cmd_demux_002_src27_endofpacket;                                                                     // cmd_demux_002:src27_endofpacket -> cmd_mux_036:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                            // cmd_demux_003:src0_valid -> cmd_mux:sink3_valid
	wire  [136:0] cmd_demux_003_src0_data;                                                                             // cmd_demux_003:src0_data -> cmd_mux:sink3_data
	wire          cmd_demux_003_src0_ready;                                                                            // cmd_mux:sink3_ready -> cmd_demux_003:src0_ready
	wire   [36:0] cmd_demux_003_src0_channel;                                                                          // cmd_demux_003:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                                    // cmd_demux_003:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                                      // cmd_demux_003:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                            // cmd_demux_003:src1_valid -> cmd_mux_001:sink3_valid
	wire  [136:0] cmd_demux_003_src1_data;                                                                             // cmd_demux_003:src1_data -> cmd_mux_001:sink3_data
	wire          cmd_demux_003_src1_ready;                                                                            // cmd_mux_001:sink3_ready -> cmd_demux_003:src1_ready
	wire   [36:0] cmd_demux_003_src1_channel;                                                                          // cmd_demux_003:src1_channel -> cmd_mux_001:sink3_channel
	wire          cmd_demux_003_src1_startofpacket;                                                                    // cmd_demux_003:src1_startofpacket -> cmd_mux_001:sink3_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                                      // cmd_demux_003:src1_endofpacket -> cmd_mux_001:sink3_endofpacket
	wire          cmd_demux_003_src2_valid;                                                                            // cmd_demux_003:src2_valid -> cmd_mux_002:sink3_valid
	wire  [136:0] cmd_demux_003_src2_data;                                                                             // cmd_demux_003:src2_data -> cmd_mux_002:sink3_data
	wire          cmd_demux_003_src2_ready;                                                                            // cmd_mux_002:sink3_ready -> cmd_demux_003:src2_ready
	wire   [36:0] cmd_demux_003_src2_channel;                                                                          // cmd_demux_003:src2_channel -> cmd_mux_002:sink3_channel
	wire          cmd_demux_003_src2_startofpacket;                                                                    // cmd_demux_003:src2_startofpacket -> cmd_mux_002:sink3_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                                                      // cmd_demux_003:src2_endofpacket -> cmd_mux_002:sink3_endofpacket
	wire          cmd_demux_003_src3_valid;                                                                            // cmd_demux_003:src3_valid -> cmd_mux_003:sink3_valid
	wire  [136:0] cmd_demux_003_src3_data;                                                                             // cmd_demux_003:src3_data -> cmd_mux_003:sink3_data
	wire          cmd_demux_003_src3_ready;                                                                            // cmd_mux_003:sink3_ready -> cmd_demux_003:src3_ready
	wire   [36:0] cmd_demux_003_src3_channel;                                                                          // cmd_demux_003:src3_channel -> cmd_mux_003:sink3_channel
	wire          cmd_demux_003_src3_startofpacket;                                                                    // cmd_demux_003:src3_startofpacket -> cmd_mux_003:sink3_startofpacket
	wire          cmd_demux_003_src3_endofpacket;                                                                      // cmd_demux_003:src3_endofpacket -> cmd_mux_003:sink3_endofpacket
	wire          cmd_demux_003_src4_valid;                                                                            // cmd_demux_003:src4_valid -> cmd_mux_004:sink3_valid
	wire  [136:0] cmd_demux_003_src4_data;                                                                             // cmd_demux_003:src4_data -> cmd_mux_004:sink3_data
	wire          cmd_demux_003_src4_ready;                                                                            // cmd_mux_004:sink3_ready -> cmd_demux_003:src4_ready
	wire   [36:0] cmd_demux_003_src4_channel;                                                                          // cmd_demux_003:src4_channel -> cmd_mux_004:sink3_channel
	wire          cmd_demux_003_src4_startofpacket;                                                                    // cmd_demux_003:src4_startofpacket -> cmd_mux_004:sink3_startofpacket
	wire          cmd_demux_003_src4_endofpacket;                                                                      // cmd_demux_003:src4_endofpacket -> cmd_mux_004:sink3_endofpacket
	wire          cmd_demux_003_src5_valid;                                                                            // cmd_demux_003:src5_valid -> cmd_mux_005:sink3_valid
	wire  [136:0] cmd_demux_003_src5_data;                                                                             // cmd_demux_003:src5_data -> cmd_mux_005:sink3_data
	wire          cmd_demux_003_src5_ready;                                                                            // cmd_mux_005:sink3_ready -> cmd_demux_003:src5_ready
	wire   [36:0] cmd_demux_003_src5_channel;                                                                          // cmd_demux_003:src5_channel -> cmd_mux_005:sink3_channel
	wire          cmd_demux_003_src5_startofpacket;                                                                    // cmd_demux_003:src5_startofpacket -> cmd_mux_005:sink3_startofpacket
	wire          cmd_demux_003_src5_endofpacket;                                                                      // cmd_demux_003:src5_endofpacket -> cmd_mux_005:sink3_endofpacket
	wire          cmd_demux_003_src6_valid;                                                                            // cmd_demux_003:src6_valid -> cmd_mux_006:sink3_valid
	wire  [136:0] cmd_demux_003_src6_data;                                                                             // cmd_demux_003:src6_data -> cmd_mux_006:sink3_data
	wire          cmd_demux_003_src6_ready;                                                                            // cmd_mux_006:sink3_ready -> cmd_demux_003:src6_ready
	wire   [36:0] cmd_demux_003_src6_channel;                                                                          // cmd_demux_003:src6_channel -> cmd_mux_006:sink3_channel
	wire          cmd_demux_003_src6_startofpacket;                                                                    // cmd_demux_003:src6_startofpacket -> cmd_mux_006:sink3_startofpacket
	wire          cmd_demux_003_src6_endofpacket;                                                                      // cmd_demux_003:src6_endofpacket -> cmd_mux_006:sink3_endofpacket
	wire          cmd_demux_003_src7_valid;                                                                            // cmd_demux_003:src7_valid -> cmd_mux_007:sink3_valid
	wire  [136:0] cmd_demux_003_src7_data;                                                                             // cmd_demux_003:src7_data -> cmd_mux_007:sink3_data
	wire          cmd_demux_003_src7_ready;                                                                            // cmd_mux_007:sink3_ready -> cmd_demux_003:src7_ready
	wire   [36:0] cmd_demux_003_src7_channel;                                                                          // cmd_demux_003:src7_channel -> cmd_mux_007:sink3_channel
	wire          cmd_demux_003_src7_startofpacket;                                                                    // cmd_demux_003:src7_startofpacket -> cmd_mux_007:sink3_startofpacket
	wire          cmd_demux_003_src7_endofpacket;                                                                      // cmd_demux_003:src7_endofpacket -> cmd_mux_007:sink3_endofpacket
	wire          cmd_demux_003_src8_valid;                                                                            // cmd_demux_003:src8_valid -> cmd_mux_008:sink3_valid
	wire  [136:0] cmd_demux_003_src8_data;                                                                             // cmd_demux_003:src8_data -> cmd_mux_008:sink3_data
	wire          cmd_demux_003_src8_ready;                                                                            // cmd_mux_008:sink3_ready -> cmd_demux_003:src8_ready
	wire   [36:0] cmd_demux_003_src8_channel;                                                                          // cmd_demux_003:src8_channel -> cmd_mux_008:sink3_channel
	wire          cmd_demux_003_src8_startofpacket;                                                                    // cmd_demux_003:src8_startofpacket -> cmd_mux_008:sink3_startofpacket
	wire          cmd_demux_003_src8_endofpacket;                                                                      // cmd_demux_003:src8_endofpacket -> cmd_mux_008:sink3_endofpacket
	wire          cmd_demux_003_src9_valid;                                                                            // cmd_demux_003:src9_valid -> cmd_mux_009:sink3_valid
	wire  [136:0] cmd_demux_003_src9_data;                                                                             // cmd_demux_003:src9_data -> cmd_mux_009:sink3_data
	wire          cmd_demux_003_src9_ready;                                                                            // cmd_mux_009:sink3_ready -> cmd_demux_003:src9_ready
	wire   [36:0] cmd_demux_003_src9_channel;                                                                          // cmd_demux_003:src9_channel -> cmd_mux_009:sink3_channel
	wire          cmd_demux_003_src9_startofpacket;                                                                    // cmd_demux_003:src9_startofpacket -> cmd_mux_009:sink3_startofpacket
	wire          cmd_demux_003_src9_endofpacket;                                                                      // cmd_demux_003:src9_endofpacket -> cmd_mux_009:sink3_endofpacket
	wire          cmd_demux_003_src10_valid;                                                                           // cmd_demux_003:src10_valid -> cmd_mux_010:sink3_valid
	wire  [136:0] cmd_demux_003_src10_data;                                                                            // cmd_demux_003:src10_data -> cmd_mux_010:sink3_data
	wire          cmd_demux_003_src10_ready;                                                                           // cmd_mux_010:sink3_ready -> cmd_demux_003:src10_ready
	wire   [36:0] cmd_demux_003_src10_channel;                                                                         // cmd_demux_003:src10_channel -> cmd_mux_010:sink3_channel
	wire          cmd_demux_003_src10_startofpacket;                                                                   // cmd_demux_003:src10_startofpacket -> cmd_mux_010:sink3_startofpacket
	wire          cmd_demux_003_src10_endofpacket;                                                                     // cmd_demux_003:src10_endofpacket -> cmd_mux_010:sink3_endofpacket
	wire          cmd_demux_003_src11_valid;                                                                           // cmd_demux_003:src11_valid -> cmd_mux_011:sink3_valid
	wire  [136:0] cmd_demux_003_src11_data;                                                                            // cmd_demux_003:src11_data -> cmd_mux_011:sink3_data
	wire          cmd_demux_003_src11_ready;                                                                           // cmd_mux_011:sink3_ready -> cmd_demux_003:src11_ready
	wire   [36:0] cmd_demux_003_src11_channel;                                                                         // cmd_demux_003:src11_channel -> cmd_mux_011:sink3_channel
	wire          cmd_demux_003_src11_startofpacket;                                                                   // cmd_demux_003:src11_startofpacket -> cmd_mux_011:sink3_startofpacket
	wire          cmd_demux_003_src11_endofpacket;                                                                     // cmd_demux_003:src11_endofpacket -> cmd_mux_011:sink3_endofpacket
	wire          cmd_demux_003_src12_valid;                                                                           // cmd_demux_003:src12_valid -> cmd_mux_012:sink3_valid
	wire  [136:0] cmd_demux_003_src12_data;                                                                            // cmd_demux_003:src12_data -> cmd_mux_012:sink3_data
	wire          cmd_demux_003_src12_ready;                                                                           // cmd_mux_012:sink3_ready -> cmd_demux_003:src12_ready
	wire   [36:0] cmd_demux_003_src12_channel;                                                                         // cmd_demux_003:src12_channel -> cmd_mux_012:sink3_channel
	wire          cmd_demux_003_src12_startofpacket;                                                                   // cmd_demux_003:src12_startofpacket -> cmd_mux_012:sink3_startofpacket
	wire          cmd_demux_003_src12_endofpacket;                                                                     // cmd_demux_003:src12_endofpacket -> cmd_mux_012:sink3_endofpacket
	wire          cmd_demux_003_src13_valid;                                                                           // cmd_demux_003:src13_valid -> cmd_mux_013:sink3_valid
	wire  [136:0] cmd_demux_003_src13_data;                                                                            // cmd_demux_003:src13_data -> cmd_mux_013:sink3_data
	wire          cmd_demux_003_src13_ready;                                                                           // cmd_mux_013:sink3_ready -> cmd_demux_003:src13_ready
	wire   [36:0] cmd_demux_003_src13_channel;                                                                         // cmd_demux_003:src13_channel -> cmd_mux_013:sink3_channel
	wire          cmd_demux_003_src13_startofpacket;                                                                   // cmd_demux_003:src13_startofpacket -> cmd_mux_013:sink3_startofpacket
	wire          cmd_demux_003_src13_endofpacket;                                                                     // cmd_demux_003:src13_endofpacket -> cmd_mux_013:sink3_endofpacket
	wire          cmd_demux_003_src14_valid;                                                                           // cmd_demux_003:src14_valid -> cmd_mux_014:sink3_valid
	wire  [136:0] cmd_demux_003_src14_data;                                                                            // cmd_demux_003:src14_data -> cmd_mux_014:sink3_data
	wire          cmd_demux_003_src14_ready;                                                                           // cmd_mux_014:sink3_ready -> cmd_demux_003:src14_ready
	wire   [36:0] cmd_demux_003_src14_channel;                                                                         // cmd_demux_003:src14_channel -> cmd_mux_014:sink3_channel
	wire          cmd_demux_003_src14_startofpacket;                                                                   // cmd_demux_003:src14_startofpacket -> cmd_mux_014:sink3_startofpacket
	wire          cmd_demux_003_src14_endofpacket;                                                                     // cmd_demux_003:src14_endofpacket -> cmd_mux_014:sink3_endofpacket
	wire          cmd_demux_003_src15_valid;                                                                           // cmd_demux_003:src15_valid -> cmd_mux_015:sink3_valid
	wire  [136:0] cmd_demux_003_src15_data;                                                                            // cmd_demux_003:src15_data -> cmd_mux_015:sink3_data
	wire          cmd_demux_003_src15_ready;                                                                           // cmd_mux_015:sink3_ready -> cmd_demux_003:src15_ready
	wire   [36:0] cmd_demux_003_src15_channel;                                                                         // cmd_demux_003:src15_channel -> cmd_mux_015:sink3_channel
	wire          cmd_demux_003_src15_startofpacket;                                                                   // cmd_demux_003:src15_startofpacket -> cmd_mux_015:sink3_startofpacket
	wire          cmd_demux_003_src15_endofpacket;                                                                     // cmd_demux_003:src15_endofpacket -> cmd_mux_015:sink3_endofpacket
	wire          cmd_demux_003_src17_valid;                                                                           // cmd_demux_003:src17_valid -> cmd_mux_024:sink1_valid
	wire  [136:0] cmd_demux_003_src17_data;                                                                            // cmd_demux_003:src17_data -> cmd_mux_024:sink1_data
	wire          cmd_demux_003_src17_ready;                                                                           // cmd_mux_024:sink1_ready -> cmd_demux_003:src17_ready
	wire   [36:0] cmd_demux_003_src17_channel;                                                                         // cmd_demux_003:src17_channel -> cmd_mux_024:sink1_channel
	wire          cmd_demux_003_src17_startofpacket;                                                                   // cmd_demux_003:src17_startofpacket -> cmd_mux_024:sink1_startofpacket
	wire          cmd_demux_003_src17_endofpacket;                                                                     // cmd_demux_003:src17_endofpacket -> cmd_mux_024:sink1_endofpacket
	wire          cmd_demux_003_src19_valid;                                                                           // cmd_demux_003:src19_valid -> cmd_mux_026:sink1_valid
	wire  [136:0] cmd_demux_003_src19_data;                                                                            // cmd_demux_003:src19_data -> cmd_mux_026:sink1_data
	wire          cmd_demux_003_src19_ready;                                                                           // cmd_mux_026:sink1_ready -> cmd_demux_003:src19_ready
	wire   [36:0] cmd_demux_003_src19_channel;                                                                         // cmd_demux_003:src19_channel -> cmd_mux_026:sink1_channel
	wire          cmd_demux_003_src19_startofpacket;                                                                   // cmd_demux_003:src19_startofpacket -> cmd_mux_026:sink1_startofpacket
	wire          cmd_demux_003_src19_endofpacket;                                                                     // cmd_demux_003:src19_endofpacket -> cmd_mux_026:sink1_endofpacket
	wire          cmd_demux_003_src20_valid;                                                                           // cmd_demux_003:src20_valid -> cmd_mux_027:sink1_valid
	wire  [136:0] cmd_demux_003_src20_data;                                                                            // cmd_demux_003:src20_data -> cmd_mux_027:sink1_data
	wire          cmd_demux_003_src20_ready;                                                                           // cmd_mux_027:sink1_ready -> cmd_demux_003:src20_ready
	wire   [36:0] cmd_demux_003_src20_channel;                                                                         // cmd_demux_003:src20_channel -> cmd_mux_027:sink1_channel
	wire          cmd_demux_003_src20_startofpacket;                                                                   // cmd_demux_003:src20_startofpacket -> cmd_mux_027:sink1_startofpacket
	wire          cmd_demux_003_src20_endofpacket;                                                                     // cmd_demux_003:src20_endofpacket -> cmd_mux_027:sink1_endofpacket
	wire          cmd_demux_003_src21_valid;                                                                           // cmd_demux_003:src21_valid -> cmd_mux_028:sink1_valid
	wire  [136:0] cmd_demux_003_src21_data;                                                                            // cmd_demux_003:src21_data -> cmd_mux_028:sink1_data
	wire          cmd_demux_003_src21_ready;                                                                           // cmd_mux_028:sink1_ready -> cmd_demux_003:src21_ready
	wire   [36:0] cmd_demux_003_src21_channel;                                                                         // cmd_demux_003:src21_channel -> cmd_mux_028:sink1_channel
	wire          cmd_demux_003_src21_startofpacket;                                                                   // cmd_demux_003:src21_startofpacket -> cmd_mux_028:sink1_startofpacket
	wire          cmd_demux_003_src21_endofpacket;                                                                     // cmd_demux_003:src21_endofpacket -> cmd_mux_028:sink1_endofpacket
	wire          cmd_demux_003_src22_valid;                                                                           // cmd_demux_003:src22_valid -> cmd_mux_029:sink1_valid
	wire  [136:0] cmd_demux_003_src22_data;                                                                            // cmd_demux_003:src22_data -> cmd_mux_029:sink1_data
	wire          cmd_demux_003_src22_ready;                                                                           // cmd_mux_029:sink1_ready -> cmd_demux_003:src22_ready
	wire   [36:0] cmd_demux_003_src22_channel;                                                                         // cmd_demux_003:src22_channel -> cmd_mux_029:sink1_channel
	wire          cmd_demux_003_src22_startofpacket;                                                                   // cmd_demux_003:src22_startofpacket -> cmd_mux_029:sink1_startofpacket
	wire          cmd_demux_003_src22_endofpacket;                                                                     // cmd_demux_003:src22_endofpacket -> cmd_mux_029:sink1_endofpacket
	wire          cmd_demux_003_src23_valid;                                                                           // cmd_demux_003:src23_valid -> cmd_mux_030:sink1_valid
	wire  [136:0] cmd_demux_003_src23_data;                                                                            // cmd_demux_003:src23_data -> cmd_mux_030:sink1_data
	wire          cmd_demux_003_src23_ready;                                                                           // cmd_mux_030:sink1_ready -> cmd_demux_003:src23_ready
	wire   [36:0] cmd_demux_003_src23_channel;                                                                         // cmd_demux_003:src23_channel -> cmd_mux_030:sink1_channel
	wire          cmd_demux_003_src23_startofpacket;                                                                   // cmd_demux_003:src23_startofpacket -> cmd_mux_030:sink1_startofpacket
	wire          cmd_demux_003_src23_endofpacket;                                                                     // cmd_demux_003:src23_endofpacket -> cmd_mux_030:sink1_endofpacket
	wire          cmd_demux_003_src24_valid;                                                                           // cmd_demux_003:src24_valid -> cmd_mux_031:sink0_valid
	wire  [136:0] cmd_demux_003_src24_data;                                                                            // cmd_demux_003:src24_data -> cmd_mux_031:sink0_data
	wire          cmd_demux_003_src24_ready;                                                                           // cmd_mux_031:sink0_ready -> cmd_demux_003:src24_ready
	wire   [36:0] cmd_demux_003_src24_channel;                                                                         // cmd_demux_003:src24_channel -> cmd_mux_031:sink0_channel
	wire          cmd_demux_003_src24_startofpacket;                                                                   // cmd_demux_003:src24_startofpacket -> cmd_mux_031:sink0_startofpacket
	wire          cmd_demux_003_src24_endofpacket;                                                                     // cmd_demux_003:src24_endofpacket -> cmd_mux_031:sink0_endofpacket
	wire          cmd_demux_003_src25_valid;                                                                           // cmd_demux_003:src25_valid -> cmd_mux_032:sink0_valid
	wire  [136:0] cmd_demux_003_src25_data;                                                                            // cmd_demux_003:src25_data -> cmd_mux_032:sink0_data
	wire          cmd_demux_003_src25_ready;                                                                           // cmd_mux_032:sink0_ready -> cmd_demux_003:src25_ready
	wire   [36:0] cmd_demux_003_src25_channel;                                                                         // cmd_demux_003:src25_channel -> cmd_mux_032:sink0_channel
	wire          cmd_demux_003_src25_startofpacket;                                                                   // cmd_demux_003:src25_startofpacket -> cmd_mux_032:sink0_startofpacket
	wire          cmd_demux_003_src25_endofpacket;                                                                     // cmd_demux_003:src25_endofpacket -> cmd_mux_032:sink0_endofpacket
	wire          cmd_demux_003_src26_valid;                                                                           // cmd_demux_003:src26_valid -> cmd_mux_033:sink0_valid
	wire  [136:0] cmd_demux_003_src26_data;                                                                            // cmd_demux_003:src26_data -> cmd_mux_033:sink0_data
	wire          cmd_demux_003_src26_ready;                                                                           // cmd_mux_033:sink0_ready -> cmd_demux_003:src26_ready
	wire   [36:0] cmd_demux_003_src26_channel;                                                                         // cmd_demux_003:src26_channel -> cmd_mux_033:sink0_channel
	wire          cmd_demux_003_src26_startofpacket;                                                                   // cmd_demux_003:src26_startofpacket -> cmd_mux_033:sink0_startofpacket
	wire          cmd_demux_003_src26_endofpacket;                                                                     // cmd_demux_003:src26_endofpacket -> cmd_mux_033:sink0_endofpacket
	wire          cmd_demux_003_src27_valid;                                                                           // cmd_demux_003:src27_valid -> cmd_mux_034:sink0_valid
	wire  [136:0] cmd_demux_003_src27_data;                                                                            // cmd_demux_003:src27_data -> cmd_mux_034:sink0_data
	wire          cmd_demux_003_src27_ready;                                                                           // cmd_mux_034:sink0_ready -> cmd_demux_003:src27_ready
	wire   [36:0] cmd_demux_003_src27_channel;                                                                         // cmd_demux_003:src27_channel -> cmd_mux_034:sink0_channel
	wire          cmd_demux_003_src27_startofpacket;                                                                   // cmd_demux_003:src27_startofpacket -> cmd_mux_034:sink0_startofpacket
	wire          cmd_demux_003_src27_endofpacket;                                                                     // cmd_demux_003:src27_endofpacket -> cmd_mux_034:sink0_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                            // cmd_demux_004:src0_valid -> cmd_mux:sink4_valid
	wire  [136:0] cmd_demux_004_src0_data;                                                                             // cmd_demux_004:src0_data -> cmd_mux:sink4_data
	wire          cmd_demux_004_src0_ready;                                                                            // cmd_mux:sink4_ready -> cmd_demux_004:src0_ready
	wire   [36:0] cmd_demux_004_src0_channel;                                                                          // cmd_demux_004:src0_channel -> cmd_mux:sink4_channel
	wire          cmd_demux_004_src0_startofpacket;                                                                    // cmd_demux_004:src0_startofpacket -> cmd_mux:sink4_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                                      // cmd_demux_004:src0_endofpacket -> cmd_mux:sink4_endofpacket
	wire          cmd_demux_004_src1_valid;                                                                            // cmd_demux_004:src1_valid -> cmd_mux_001:sink4_valid
	wire  [136:0] cmd_demux_004_src1_data;                                                                             // cmd_demux_004:src1_data -> cmd_mux_001:sink4_data
	wire          cmd_demux_004_src1_ready;                                                                            // cmd_mux_001:sink4_ready -> cmd_demux_004:src1_ready
	wire   [36:0] cmd_demux_004_src1_channel;                                                                          // cmd_demux_004:src1_channel -> cmd_mux_001:sink4_channel
	wire          cmd_demux_004_src1_startofpacket;                                                                    // cmd_demux_004:src1_startofpacket -> cmd_mux_001:sink4_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                                      // cmd_demux_004:src1_endofpacket -> cmd_mux_001:sink4_endofpacket
	wire          cmd_demux_004_src2_valid;                                                                            // cmd_demux_004:src2_valid -> cmd_mux_002:sink4_valid
	wire  [136:0] cmd_demux_004_src2_data;                                                                             // cmd_demux_004:src2_data -> cmd_mux_002:sink4_data
	wire          cmd_demux_004_src2_ready;                                                                            // cmd_mux_002:sink4_ready -> cmd_demux_004:src2_ready
	wire   [36:0] cmd_demux_004_src2_channel;                                                                          // cmd_demux_004:src2_channel -> cmd_mux_002:sink4_channel
	wire          cmd_demux_004_src2_startofpacket;                                                                    // cmd_demux_004:src2_startofpacket -> cmd_mux_002:sink4_startofpacket
	wire          cmd_demux_004_src2_endofpacket;                                                                      // cmd_demux_004:src2_endofpacket -> cmd_mux_002:sink4_endofpacket
	wire          cmd_demux_004_src3_valid;                                                                            // cmd_demux_004:src3_valid -> cmd_mux_003:sink4_valid
	wire  [136:0] cmd_demux_004_src3_data;                                                                             // cmd_demux_004:src3_data -> cmd_mux_003:sink4_data
	wire          cmd_demux_004_src3_ready;                                                                            // cmd_mux_003:sink4_ready -> cmd_demux_004:src3_ready
	wire   [36:0] cmd_demux_004_src3_channel;                                                                          // cmd_demux_004:src3_channel -> cmd_mux_003:sink4_channel
	wire          cmd_demux_004_src3_startofpacket;                                                                    // cmd_demux_004:src3_startofpacket -> cmd_mux_003:sink4_startofpacket
	wire          cmd_demux_004_src3_endofpacket;                                                                      // cmd_demux_004:src3_endofpacket -> cmd_mux_003:sink4_endofpacket
	wire          cmd_demux_004_src4_valid;                                                                            // cmd_demux_004:src4_valid -> cmd_mux_004:sink4_valid
	wire  [136:0] cmd_demux_004_src4_data;                                                                             // cmd_demux_004:src4_data -> cmd_mux_004:sink4_data
	wire          cmd_demux_004_src4_ready;                                                                            // cmd_mux_004:sink4_ready -> cmd_demux_004:src4_ready
	wire   [36:0] cmd_demux_004_src4_channel;                                                                          // cmd_demux_004:src4_channel -> cmd_mux_004:sink4_channel
	wire          cmd_demux_004_src4_startofpacket;                                                                    // cmd_demux_004:src4_startofpacket -> cmd_mux_004:sink4_startofpacket
	wire          cmd_demux_004_src4_endofpacket;                                                                      // cmd_demux_004:src4_endofpacket -> cmd_mux_004:sink4_endofpacket
	wire          cmd_demux_004_src5_valid;                                                                            // cmd_demux_004:src5_valid -> cmd_mux_005:sink4_valid
	wire  [136:0] cmd_demux_004_src5_data;                                                                             // cmd_demux_004:src5_data -> cmd_mux_005:sink4_data
	wire          cmd_demux_004_src5_ready;                                                                            // cmd_mux_005:sink4_ready -> cmd_demux_004:src5_ready
	wire   [36:0] cmd_demux_004_src5_channel;                                                                          // cmd_demux_004:src5_channel -> cmd_mux_005:sink4_channel
	wire          cmd_demux_004_src5_startofpacket;                                                                    // cmd_demux_004:src5_startofpacket -> cmd_mux_005:sink4_startofpacket
	wire          cmd_demux_004_src5_endofpacket;                                                                      // cmd_demux_004:src5_endofpacket -> cmd_mux_005:sink4_endofpacket
	wire          cmd_demux_004_src6_valid;                                                                            // cmd_demux_004:src6_valid -> cmd_mux_006:sink4_valid
	wire  [136:0] cmd_demux_004_src6_data;                                                                             // cmd_demux_004:src6_data -> cmd_mux_006:sink4_data
	wire          cmd_demux_004_src6_ready;                                                                            // cmd_mux_006:sink4_ready -> cmd_demux_004:src6_ready
	wire   [36:0] cmd_demux_004_src6_channel;                                                                          // cmd_demux_004:src6_channel -> cmd_mux_006:sink4_channel
	wire          cmd_demux_004_src6_startofpacket;                                                                    // cmd_demux_004:src6_startofpacket -> cmd_mux_006:sink4_startofpacket
	wire          cmd_demux_004_src6_endofpacket;                                                                      // cmd_demux_004:src6_endofpacket -> cmd_mux_006:sink4_endofpacket
	wire          cmd_demux_004_src7_valid;                                                                            // cmd_demux_004:src7_valid -> cmd_mux_007:sink4_valid
	wire  [136:0] cmd_demux_004_src7_data;                                                                             // cmd_demux_004:src7_data -> cmd_mux_007:sink4_data
	wire          cmd_demux_004_src7_ready;                                                                            // cmd_mux_007:sink4_ready -> cmd_demux_004:src7_ready
	wire   [36:0] cmd_demux_004_src7_channel;                                                                          // cmd_demux_004:src7_channel -> cmd_mux_007:sink4_channel
	wire          cmd_demux_004_src7_startofpacket;                                                                    // cmd_demux_004:src7_startofpacket -> cmd_mux_007:sink4_startofpacket
	wire          cmd_demux_004_src7_endofpacket;                                                                      // cmd_demux_004:src7_endofpacket -> cmd_mux_007:sink4_endofpacket
	wire          cmd_demux_004_src8_valid;                                                                            // cmd_demux_004:src8_valid -> cmd_mux_008:sink4_valid
	wire  [136:0] cmd_demux_004_src8_data;                                                                             // cmd_demux_004:src8_data -> cmd_mux_008:sink4_data
	wire          cmd_demux_004_src8_ready;                                                                            // cmd_mux_008:sink4_ready -> cmd_demux_004:src8_ready
	wire   [36:0] cmd_demux_004_src8_channel;                                                                          // cmd_demux_004:src8_channel -> cmd_mux_008:sink4_channel
	wire          cmd_demux_004_src8_startofpacket;                                                                    // cmd_demux_004:src8_startofpacket -> cmd_mux_008:sink4_startofpacket
	wire          cmd_demux_004_src8_endofpacket;                                                                      // cmd_demux_004:src8_endofpacket -> cmd_mux_008:sink4_endofpacket
	wire          cmd_demux_004_src9_valid;                                                                            // cmd_demux_004:src9_valid -> cmd_mux_009:sink4_valid
	wire  [136:0] cmd_demux_004_src9_data;                                                                             // cmd_demux_004:src9_data -> cmd_mux_009:sink4_data
	wire          cmd_demux_004_src9_ready;                                                                            // cmd_mux_009:sink4_ready -> cmd_demux_004:src9_ready
	wire   [36:0] cmd_demux_004_src9_channel;                                                                          // cmd_demux_004:src9_channel -> cmd_mux_009:sink4_channel
	wire          cmd_demux_004_src9_startofpacket;                                                                    // cmd_demux_004:src9_startofpacket -> cmd_mux_009:sink4_startofpacket
	wire          cmd_demux_004_src9_endofpacket;                                                                      // cmd_demux_004:src9_endofpacket -> cmd_mux_009:sink4_endofpacket
	wire          cmd_demux_004_src10_valid;                                                                           // cmd_demux_004:src10_valid -> cmd_mux_010:sink4_valid
	wire  [136:0] cmd_demux_004_src10_data;                                                                            // cmd_demux_004:src10_data -> cmd_mux_010:sink4_data
	wire          cmd_demux_004_src10_ready;                                                                           // cmd_mux_010:sink4_ready -> cmd_demux_004:src10_ready
	wire   [36:0] cmd_demux_004_src10_channel;                                                                         // cmd_demux_004:src10_channel -> cmd_mux_010:sink4_channel
	wire          cmd_demux_004_src10_startofpacket;                                                                   // cmd_demux_004:src10_startofpacket -> cmd_mux_010:sink4_startofpacket
	wire          cmd_demux_004_src10_endofpacket;                                                                     // cmd_demux_004:src10_endofpacket -> cmd_mux_010:sink4_endofpacket
	wire          cmd_demux_004_src11_valid;                                                                           // cmd_demux_004:src11_valid -> cmd_mux_011:sink4_valid
	wire  [136:0] cmd_demux_004_src11_data;                                                                            // cmd_demux_004:src11_data -> cmd_mux_011:sink4_data
	wire          cmd_demux_004_src11_ready;                                                                           // cmd_mux_011:sink4_ready -> cmd_demux_004:src11_ready
	wire   [36:0] cmd_demux_004_src11_channel;                                                                         // cmd_demux_004:src11_channel -> cmd_mux_011:sink4_channel
	wire          cmd_demux_004_src11_startofpacket;                                                                   // cmd_demux_004:src11_startofpacket -> cmd_mux_011:sink4_startofpacket
	wire          cmd_demux_004_src11_endofpacket;                                                                     // cmd_demux_004:src11_endofpacket -> cmd_mux_011:sink4_endofpacket
	wire          cmd_demux_004_src12_valid;                                                                           // cmd_demux_004:src12_valid -> cmd_mux_012:sink4_valid
	wire  [136:0] cmd_demux_004_src12_data;                                                                            // cmd_demux_004:src12_data -> cmd_mux_012:sink4_data
	wire          cmd_demux_004_src12_ready;                                                                           // cmd_mux_012:sink4_ready -> cmd_demux_004:src12_ready
	wire   [36:0] cmd_demux_004_src12_channel;                                                                         // cmd_demux_004:src12_channel -> cmd_mux_012:sink4_channel
	wire          cmd_demux_004_src12_startofpacket;                                                                   // cmd_demux_004:src12_startofpacket -> cmd_mux_012:sink4_startofpacket
	wire          cmd_demux_004_src12_endofpacket;                                                                     // cmd_demux_004:src12_endofpacket -> cmd_mux_012:sink4_endofpacket
	wire          cmd_demux_004_src13_valid;                                                                           // cmd_demux_004:src13_valid -> cmd_mux_013:sink4_valid
	wire  [136:0] cmd_demux_004_src13_data;                                                                            // cmd_demux_004:src13_data -> cmd_mux_013:sink4_data
	wire          cmd_demux_004_src13_ready;                                                                           // cmd_mux_013:sink4_ready -> cmd_demux_004:src13_ready
	wire   [36:0] cmd_demux_004_src13_channel;                                                                         // cmd_demux_004:src13_channel -> cmd_mux_013:sink4_channel
	wire          cmd_demux_004_src13_startofpacket;                                                                   // cmd_demux_004:src13_startofpacket -> cmd_mux_013:sink4_startofpacket
	wire          cmd_demux_004_src13_endofpacket;                                                                     // cmd_demux_004:src13_endofpacket -> cmd_mux_013:sink4_endofpacket
	wire          cmd_demux_004_src14_valid;                                                                           // cmd_demux_004:src14_valid -> cmd_mux_014:sink4_valid
	wire  [136:0] cmd_demux_004_src14_data;                                                                            // cmd_demux_004:src14_data -> cmd_mux_014:sink4_data
	wire          cmd_demux_004_src14_ready;                                                                           // cmd_mux_014:sink4_ready -> cmd_demux_004:src14_ready
	wire   [36:0] cmd_demux_004_src14_channel;                                                                         // cmd_demux_004:src14_channel -> cmd_mux_014:sink4_channel
	wire          cmd_demux_004_src14_startofpacket;                                                                   // cmd_demux_004:src14_startofpacket -> cmd_mux_014:sink4_startofpacket
	wire          cmd_demux_004_src14_endofpacket;                                                                     // cmd_demux_004:src14_endofpacket -> cmd_mux_014:sink4_endofpacket
	wire          cmd_demux_004_src15_valid;                                                                           // cmd_demux_004:src15_valid -> cmd_mux_015:sink4_valid
	wire  [136:0] cmd_demux_004_src15_data;                                                                            // cmd_demux_004:src15_data -> cmd_mux_015:sink4_data
	wire          cmd_demux_004_src15_ready;                                                                           // cmd_mux_015:sink4_ready -> cmd_demux_004:src15_ready
	wire   [36:0] cmd_demux_004_src15_channel;                                                                         // cmd_demux_004:src15_channel -> cmd_mux_015:sink4_channel
	wire          cmd_demux_004_src15_startofpacket;                                                                   // cmd_demux_004:src15_startofpacket -> cmd_mux_015:sink4_startofpacket
	wire          cmd_demux_004_src15_endofpacket;                                                                     // cmd_demux_004:src15_endofpacket -> cmd_mux_015:sink4_endofpacket
	wire          cmd_demux_004_src16_valid;                                                                           // cmd_demux_004:src16_valid -> cmd_mux_016:sink3_valid
	wire  [136:0] cmd_demux_004_src16_data;                                                                            // cmd_demux_004:src16_data -> cmd_mux_016:sink3_data
	wire          cmd_demux_004_src16_ready;                                                                           // cmd_mux_016:sink3_ready -> cmd_demux_004:src16_ready
	wire   [36:0] cmd_demux_004_src16_channel;                                                                         // cmd_demux_004:src16_channel -> cmd_mux_016:sink3_channel
	wire          cmd_demux_004_src16_startofpacket;                                                                   // cmd_demux_004:src16_startofpacket -> cmd_mux_016:sink3_startofpacket
	wire          cmd_demux_004_src16_endofpacket;                                                                     // cmd_demux_004:src16_endofpacket -> cmd_mux_016:sink3_endofpacket
	wire          cmd_demux_004_src17_valid;                                                                           // cmd_demux_004:src17_valid -> cmd_mux_017:sink3_valid
	wire  [136:0] cmd_demux_004_src17_data;                                                                            // cmd_demux_004:src17_data -> cmd_mux_017:sink3_data
	wire          cmd_demux_004_src17_ready;                                                                           // cmd_mux_017:sink3_ready -> cmd_demux_004:src17_ready
	wire   [36:0] cmd_demux_004_src17_channel;                                                                         // cmd_demux_004:src17_channel -> cmd_mux_017:sink3_channel
	wire          cmd_demux_004_src17_startofpacket;                                                                   // cmd_demux_004:src17_startofpacket -> cmd_mux_017:sink3_startofpacket
	wire          cmd_demux_004_src17_endofpacket;                                                                     // cmd_demux_004:src17_endofpacket -> cmd_mux_017:sink3_endofpacket
	wire          cmd_demux_004_src18_valid;                                                                           // cmd_demux_004:src18_valid -> cmd_mux_022:sink1_valid
	wire  [136:0] cmd_demux_004_src18_data;                                                                            // cmd_demux_004:src18_data -> cmd_mux_022:sink1_data
	wire          cmd_demux_004_src18_ready;                                                                           // cmd_mux_022:sink1_ready -> cmd_demux_004:src18_ready
	wire   [36:0] cmd_demux_004_src18_channel;                                                                         // cmd_demux_004:src18_channel -> cmd_mux_022:sink1_channel
	wire          cmd_demux_004_src18_startofpacket;                                                                   // cmd_demux_004:src18_startofpacket -> cmd_mux_022:sink1_startofpacket
	wire          cmd_demux_004_src18_endofpacket;                                                                     // cmd_demux_004:src18_endofpacket -> cmd_mux_022:sink1_endofpacket
	wire          cmd_demux_004_src20_valid;                                                                           // cmd_demux_004:src20_valid -> cmd_mux_024:sink2_valid
	wire  [136:0] cmd_demux_004_src20_data;                                                                            // cmd_demux_004:src20_data -> cmd_mux_024:sink2_data
	wire          cmd_demux_004_src20_ready;                                                                           // cmd_mux_024:sink2_ready -> cmd_demux_004:src20_ready
	wire   [36:0] cmd_demux_004_src20_channel;                                                                         // cmd_demux_004:src20_channel -> cmd_mux_024:sink2_channel
	wire          cmd_demux_004_src20_startofpacket;                                                                   // cmd_demux_004:src20_startofpacket -> cmd_mux_024:sink2_startofpacket
	wire          cmd_demux_004_src20_endofpacket;                                                                     // cmd_demux_004:src20_endofpacket -> cmd_mux_024:sink2_endofpacket
	wire          cmd_demux_004_src22_valid;                                                                           // cmd_demux_004:src22_valid -> cmd_mux_026:sink2_valid
	wire  [136:0] cmd_demux_004_src22_data;                                                                            // cmd_demux_004:src22_data -> cmd_mux_026:sink2_data
	wire          cmd_demux_004_src22_ready;                                                                           // cmd_mux_026:sink2_ready -> cmd_demux_004:src22_ready
	wire   [36:0] cmd_demux_004_src22_channel;                                                                         // cmd_demux_004:src22_channel -> cmd_mux_026:sink2_channel
	wire          cmd_demux_004_src22_startofpacket;                                                                   // cmd_demux_004:src22_startofpacket -> cmd_mux_026:sink2_startofpacket
	wire          cmd_demux_004_src22_endofpacket;                                                                     // cmd_demux_004:src22_endofpacket -> cmd_mux_026:sink2_endofpacket
	wire          cmd_demux_004_src23_valid;                                                                           // cmd_demux_004:src23_valid -> cmd_mux_027:sink2_valid
	wire  [136:0] cmd_demux_004_src23_data;                                                                            // cmd_demux_004:src23_data -> cmd_mux_027:sink2_data
	wire          cmd_demux_004_src23_ready;                                                                           // cmd_mux_027:sink2_ready -> cmd_demux_004:src23_ready
	wire   [36:0] cmd_demux_004_src23_channel;                                                                         // cmd_demux_004:src23_channel -> cmd_mux_027:sink2_channel
	wire          cmd_demux_004_src23_startofpacket;                                                                   // cmd_demux_004:src23_startofpacket -> cmd_mux_027:sink2_startofpacket
	wire          cmd_demux_004_src23_endofpacket;                                                                     // cmd_demux_004:src23_endofpacket -> cmd_mux_027:sink2_endofpacket
	wire          cmd_demux_004_src24_valid;                                                                           // cmd_demux_004:src24_valid -> cmd_mux_028:sink2_valid
	wire  [136:0] cmd_demux_004_src24_data;                                                                            // cmd_demux_004:src24_data -> cmd_mux_028:sink2_data
	wire          cmd_demux_004_src24_ready;                                                                           // cmd_mux_028:sink2_ready -> cmd_demux_004:src24_ready
	wire   [36:0] cmd_demux_004_src24_channel;                                                                         // cmd_demux_004:src24_channel -> cmd_mux_028:sink2_channel
	wire          cmd_demux_004_src24_startofpacket;                                                                   // cmd_demux_004:src24_startofpacket -> cmd_mux_028:sink2_startofpacket
	wire          cmd_demux_004_src24_endofpacket;                                                                     // cmd_demux_004:src24_endofpacket -> cmd_mux_028:sink2_endofpacket
	wire          cmd_demux_004_src25_valid;                                                                           // cmd_demux_004:src25_valid -> cmd_mux_029:sink2_valid
	wire  [136:0] cmd_demux_004_src25_data;                                                                            // cmd_demux_004:src25_data -> cmd_mux_029:sink2_data
	wire          cmd_demux_004_src25_ready;                                                                           // cmd_mux_029:sink2_ready -> cmd_demux_004:src25_ready
	wire   [36:0] cmd_demux_004_src25_channel;                                                                         // cmd_demux_004:src25_channel -> cmd_mux_029:sink2_channel
	wire          cmd_demux_004_src25_startofpacket;                                                                   // cmd_demux_004:src25_startofpacket -> cmd_mux_029:sink2_startofpacket
	wire          cmd_demux_004_src25_endofpacket;                                                                     // cmd_demux_004:src25_endofpacket -> cmd_mux_029:sink2_endofpacket
	wire          cmd_demux_004_src26_valid;                                                                           // cmd_demux_004:src26_valid -> cmd_mux_030:sink2_valid
	wire  [136:0] cmd_demux_004_src26_data;                                                                            // cmd_demux_004:src26_data -> cmd_mux_030:sink2_data
	wire          cmd_demux_004_src26_ready;                                                                           // cmd_mux_030:sink2_ready -> cmd_demux_004:src26_ready
	wire   [36:0] cmd_demux_004_src26_channel;                                                                         // cmd_demux_004:src26_channel -> cmd_mux_030:sink2_channel
	wire          cmd_demux_004_src26_startofpacket;                                                                   // cmd_demux_004:src26_startofpacket -> cmd_mux_030:sink2_startofpacket
	wire          cmd_demux_004_src26_endofpacket;                                                                     // cmd_demux_004:src26_endofpacket -> cmd_mux_030:sink2_endofpacket
	wire          cmd_demux_005_src1_valid;                                                                            // cmd_demux_005:src1_valid -> cmd_mux_032:sink1_valid
	wire  [136:0] cmd_demux_005_src1_data;                                                                             // cmd_demux_005:src1_data -> cmd_mux_032:sink1_data
	wire          cmd_demux_005_src1_ready;                                                                            // cmd_mux_032:sink1_ready -> cmd_demux_005:src1_ready
	wire   [36:0] cmd_demux_005_src1_channel;                                                                          // cmd_demux_005:src1_channel -> cmd_mux_032:sink1_channel
	wire          cmd_demux_005_src1_startofpacket;                                                                    // cmd_demux_005:src1_startofpacket -> cmd_mux_032:sink1_startofpacket
	wire          cmd_demux_005_src1_endofpacket;                                                                      // cmd_demux_005:src1_endofpacket -> cmd_mux_032:sink1_endofpacket
	wire          cmd_demux_005_src2_valid;                                                                            // cmd_demux_005:src2_valid -> cmd_mux_035:sink0_valid
	wire  [136:0] cmd_demux_005_src2_data;                                                                             // cmd_demux_005:src2_data -> cmd_mux_035:sink0_data
	wire          cmd_demux_005_src2_ready;                                                                            // cmd_mux_035:sink0_ready -> cmd_demux_005:src2_ready
	wire   [36:0] cmd_demux_005_src2_channel;                                                                          // cmd_demux_005:src2_channel -> cmd_mux_035:sink0_channel
	wire          cmd_demux_005_src2_startofpacket;                                                                    // cmd_demux_005:src2_startofpacket -> cmd_mux_035:sink0_startofpacket
	wire          cmd_demux_005_src2_endofpacket;                                                                      // cmd_demux_005:src2_endofpacket -> cmd_mux_035:sink0_endofpacket
	wire          cmd_demux_006_src1_valid;                                                                            // cmd_demux_006:src1_valid -> cmd_mux_035:sink1_valid
	wire  [136:0] cmd_demux_006_src1_data;                                                                             // cmd_demux_006:src1_data -> cmd_mux_035:sink1_data
	wire          cmd_demux_006_src1_ready;                                                                            // cmd_mux_035:sink1_ready -> cmd_demux_006:src1_ready
	wire   [36:0] cmd_demux_006_src1_channel;                                                                          // cmd_demux_006:src1_channel -> cmd_mux_035:sink1_channel
	wire          cmd_demux_006_src1_startofpacket;                                                                    // cmd_demux_006:src1_startofpacket -> cmd_mux_035:sink1_startofpacket
	wire          cmd_demux_006_src1_endofpacket;                                                                      // cmd_demux_006:src1_endofpacket -> cmd_mux_035:sink1_endofpacket
	wire          cmd_demux_006_src2_valid;                                                                            // cmd_demux_006:src2_valid -> cmd_mux_036:sink1_valid
	wire  [136:0] cmd_demux_006_src2_data;                                                                             // cmd_demux_006:src2_data -> cmd_mux_036:sink1_data
	wire          cmd_demux_006_src2_ready;                                                                            // cmd_mux_036:sink1_ready -> cmd_demux_006:src2_ready
	wire   [36:0] cmd_demux_006_src2_channel;                                                                          // cmd_demux_006:src2_channel -> cmd_mux_036:sink1_channel
	wire          cmd_demux_006_src2_startofpacket;                                                                    // cmd_demux_006:src2_startofpacket -> cmd_mux_036:sink1_startofpacket
	wire          cmd_demux_006_src2_endofpacket;                                                                      // cmd_demux_006:src2_endofpacket -> cmd_mux_036:sink1_endofpacket
	wire          cmd_demux_010_src0_valid;                                                                            // cmd_demux_010:src0_valid -> cmd_mux_025:sink8_valid
	wire  [118:0] cmd_demux_010_src0_data;                                                                             // cmd_demux_010:src0_data -> cmd_mux_025:sink8_data
	wire          cmd_demux_010_src0_ready;                                                                            // cmd_mux_025:sink8_ready -> cmd_demux_010:src0_ready
	wire   [36:0] cmd_demux_010_src0_channel;                                                                          // cmd_demux_010:src0_channel -> cmd_mux_025:sink8_channel
	wire          cmd_demux_010_src0_startofpacket;                                                                    // cmd_demux_010:src0_startofpacket -> cmd_mux_025:sink8_startofpacket
	wire          cmd_demux_010_src0_endofpacket;                                                                      // cmd_demux_010:src0_endofpacket -> cmd_mux_025:sink8_endofpacket
	wire          cmd_demux_011_src0_valid;                                                                            // cmd_demux_011:src0_valid -> cmd_mux_027:sink3_valid
	wire  [136:0] cmd_demux_011_src0_data;                                                                             // cmd_demux_011:src0_data -> cmd_mux_027:sink3_data
	wire          cmd_demux_011_src0_ready;                                                                            // cmd_mux_027:sink3_ready -> cmd_demux_011:src0_ready
	wire   [36:0] cmd_demux_011_src0_channel;                                                                          // cmd_demux_011:src0_channel -> cmd_mux_027:sink3_channel
	wire          cmd_demux_011_src0_startofpacket;                                                                    // cmd_demux_011:src0_startofpacket -> cmd_mux_027:sink3_startofpacket
	wire          cmd_demux_011_src0_endofpacket;                                                                      // cmd_demux_011:src0_endofpacket -> cmd_mux_027:sink3_endofpacket
	wire          cmd_demux_012_src0_valid;                                                                            // cmd_demux_012:src0_valid -> cmd_mux_024:sink3_valid
	wire  [136:0] cmd_demux_012_src0_data;                                                                             // cmd_demux_012:src0_data -> cmd_mux_024:sink3_data
	wire          cmd_demux_012_src0_ready;                                                                            // cmd_mux_024:sink3_ready -> cmd_demux_012:src0_ready
	wire   [36:0] cmd_demux_012_src0_channel;                                                                          // cmd_demux_012:src0_channel -> cmd_mux_024:sink3_channel
	wire          cmd_demux_012_src0_startofpacket;                                                                    // cmd_demux_012:src0_startofpacket -> cmd_mux_024:sink3_startofpacket
	wire          cmd_demux_012_src0_endofpacket;                                                                      // cmd_demux_012:src0_endofpacket -> cmd_mux_024:sink3_endofpacket
	wire          rsp_demux_src0_valid;                                                                                // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [136:0] rsp_demux_src0_data;                                                                                 // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                                // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [36:0] rsp_demux_src0_channel;                                                                              // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                        // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                          // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                                // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [136:0] rsp_demux_src1_data;                                                                                 // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                                // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [36:0] rsp_demux_src1_channel;                                                                              // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                                        // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                          // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                                // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [136:0] rsp_demux_src2_data;                                                                                 // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                                                // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire   [36:0] rsp_demux_src2_channel;                                                                              // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                                        // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                          // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                                                // rsp_demux:src3_valid -> rsp_mux_003:sink0_valid
	wire  [136:0] rsp_demux_src3_data;                                                                                 // rsp_demux:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_src3_ready;                                                                                // rsp_mux_003:sink0_ready -> rsp_demux:src3_ready
	wire   [36:0] rsp_demux_src3_channel;                                                                              // rsp_demux:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_src3_startofpacket;                                                                        // rsp_demux:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                                          // rsp_demux:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_src4_valid;                                                                                // rsp_demux:src4_valid -> rsp_mux_004:sink0_valid
	wire  [136:0] rsp_demux_src4_data;                                                                                 // rsp_demux:src4_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_src4_ready;                                                                                // rsp_mux_004:sink0_ready -> rsp_demux:src4_ready
	wire   [36:0] rsp_demux_src4_channel;                                                                              // rsp_demux:src4_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_src4_startofpacket;                                                                        // rsp_demux:src4_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_src4_endofpacket;                                                                          // rsp_demux:src4_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                            // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [136:0] rsp_demux_001_src0_data;                                                                             // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                            // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [36:0] rsp_demux_001_src0_channel;                                                                          // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                                    // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                      // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                            // rsp_demux_001:src1_valid -> rsp_mux_001:sink1_valid
	wire  [136:0] rsp_demux_001_src1_data;                                                                             // rsp_demux_001:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_001_src1_ready;                                                                            // rsp_mux_001:sink1_ready -> rsp_demux_001:src1_ready
	wire   [36:0] rsp_demux_001_src1_channel;                                                                          // rsp_demux_001:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                                    // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                                      // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_001_src2_valid;                                                                            // rsp_demux_001:src2_valid -> rsp_mux_002:sink1_valid
	wire  [136:0] rsp_demux_001_src2_data;                                                                             // rsp_demux_001:src2_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_001_src2_ready;                                                                            // rsp_mux_002:sink1_ready -> rsp_demux_001:src2_ready
	wire   [36:0] rsp_demux_001_src2_channel;                                                                          // rsp_demux_001:src2_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_001_src2_startofpacket;                                                                    // rsp_demux_001:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                                      // rsp_demux_001:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_001_src3_valid;                                                                            // rsp_demux_001:src3_valid -> rsp_mux_003:sink1_valid
	wire  [136:0] rsp_demux_001_src3_data;                                                                             // rsp_demux_001:src3_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_001_src3_ready;                                                                            // rsp_mux_003:sink1_ready -> rsp_demux_001:src3_ready
	wire   [36:0] rsp_demux_001_src3_channel;                                                                          // rsp_demux_001:src3_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_001_src3_startofpacket;                                                                    // rsp_demux_001:src3_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_001_src3_endofpacket;                                                                      // rsp_demux_001:src3_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_001_src4_valid;                                                                            // rsp_demux_001:src4_valid -> rsp_mux_004:sink1_valid
	wire  [136:0] rsp_demux_001_src4_data;                                                                             // rsp_demux_001:src4_data -> rsp_mux_004:sink1_data
	wire          rsp_demux_001_src4_ready;                                                                            // rsp_mux_004:sink1_ready -> rsp_demux_001:src4_ready
	wire   [36:0] rsp_demux_001_src4_channel;                                                                          // rsp_demux_001:src4_channel -> rsp_mux_004:sink1_channel
	wire          rsp_demux_001_src4_startofpacket;                                                                    // rsp_demux_001:src4_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          rsp_demux_001_src4_endofpacket;                                                                      // rsp_demux_001:src4_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                            // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [136:0] rsp_demux_002_src0_data;                                                                             // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                            // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [36:0] rsp_demux_002_src0_channel;                                                                          // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                                    // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                      // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                            // rsp_demux_002:src1_valid -> rsp_mux_001:sink2_valid
	wire  [136:0] rsp_demux_002_src1_data;                                                                             // rsp_demux_002:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_002_src1_ready;                                                                            // rsp_mux_001:sink2_ready -> rsp_demux_002:src1_ready
	wire   [36:0] rsp_demux_002_src1_channel;                                                                          // rsp_demux_002:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                                    // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                                      // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_002_src2_valid;                                                                            // rsp_demux_002:src2_valid -> rsp_mux_002:sink2_valid
	wire  [136:0] rsp_demux_002_src2_data;                                                                             // rsp_demux_002:src2_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_002_src2_ready;                                                                            // rsp_mux_002:sink2_ready -> rsp_demux_002:src2_ready
	wire   [36:0] rsp_demux_002_src2_channel;                                                                          // rsp_demux_002:src2_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_002_src2_startofpacket;                                                                    // rsp_demux_002:src2_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_002_src2_endofpacket;                                                                      // rsp_demux_002:src2_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_002_src3_valid;                                                                            // rsp_demux_002:src3_valid -> rsp_mux_003:sink2_valid
	wire  [136:0] rsp_demux_002_src3_data;                                                                             // rsp_demux_002:src3_data -> rsp_mux_003:sink2_data
	wire          rsp_demux_002_src3_ready;                                                                            // rsp_mux_003:sink2_ready -> rsp_demux_002:src3_ready
	wire   [36:0] rsp_demux_002_src3_channel;                                                                          // rsp_demux_002:src3_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_002_src3_startofpacket;                                                                    // rsp_demux_002:src3_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          rsp_demux_002_src3_endofpacket;                                                                      // rsp_demux_002:src3_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_002_src4_valid;                                                                            // rsp_demux_002:src4_valid -> rsp_mux_004:sink2_valid
	wire  [136:0] rsp_demux_002_src4_data;                                                                             // rsp_demux_002:src4_data -> rsp_mux_004:sink2_data
	wire          rsp_demux_002_src4_ready;                                                                            // rsp_mux_004:sink2_ready -> rsp_demux_002:src4_ready
	wire   [36:0] rsp_demux_002_src4_channel;                                                                          // rsp_demux_002:src4_channel -> rsp_mux_004:sink2_channel
	wire          rsp_demux_002_src4_startofpacket;                                                                    // rsp_demux_002:src4_startofpacket -> rsp_mux_004:sink2_startofpacket
	wire          rsp_demux_002_src4_endofpacket;                                                                      // rsp_demux_002:src4_endofpacket -> rsp_mux_004:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                            // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [136:0] rsp_demux_003_src0_data;                                                                             // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                            // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [36:0] rsp_demux_003_src0_channel;                                                                          // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                                    // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                      // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                            // rsp_demux_003:src1_valid -> rsp_mux_001:sink3_valid
	wire  [136:0] rsp_demux_003_src1_data;                                                                             // rsp_demux_003:src1_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_003_src1_ready;                                                                            // rsp_mux_001:sink3_ready -> rsp_demux_003:src1_ready
	wire   [36:0] rsp_demux_003_src1_channel;                                                                          // rsp_demux_003:src1_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                                                    // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                                      // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_003_src2_valid;                                                                            // rsp_demux_003:src2_valid -> rsp_mux_002:sink3_valid
	wire  [136:0] rsp_demux_003_src2_data;                                                                             // rsp_demux_003:src2_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_003_src2_ready;                                                                            // rsp_mux_002:sink3_ready -> rsp_demux_003:src2_ready
	wire   [36:0] rsp_demux_003_src2_channel;                                                                          // rsp_demux_003:src2_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_003_src2_startofpacket;                                                                    // rsp_demux_003:src2_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_003_src2_endofpacket;                                                                      // rsp_demux_003:src2_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_003_src3_valid;                                                                            // rsp_demux_003:src3_valid -> rsp_mux_003:sink3_valid
	wire  [136:0] rsp_demux_003_src3_data;                                                                             // rsp_demux_003:src3_data -> rsp_mux_003:sink3_data
	wire          rsp_demux_003_src3_ready;                                                                            // rsp_mux_003:sink3_ready -> rsp_demux_003:src3_ready
	wire   [36:0] rsp_demux_003_src3_channel;                                                                          // rsp_demux_003:src3_channel -> rsp_mux_003:sink3_channel
	wire          rsp_demux_003_src3_startofpacket;                                                                    // rsp_demux_003:src3_startofpacket -> rsp_mux_003:sink3_startofpacket
	wire          rsp_demux_003_src3_endofpacket;                                                                      // rsp_demux_003:src3_endofpacket -> rsp_mux_003:sink3_endofpacket
	wire          rsp_demux_003_src4_valid;                                                                            // rsp_demux_003:src4_valid -> rsp_mux_004:sink3_valid
	wire  [136:0] rsp_demux_003_src4_data;                                                                             // rsp_demux_003:src4_data -> rsp_mux_004:sink3_data
	wire          rsp_demux_003_src4_ready;                                                                            // rsp_mux_004:sink3_ready -> rsp_demux_003:src4_ready
	wire   [36:0] rsp_demux_003_src4_channel;                                                                          // rsp_demux_003:src4_channel -> rsp_mux_004:sink3_channel
	wire          rsp_demux_003_src4_startofpacket;                                                                    // rsp_demux_003:src4_startofpacket -> rsp_mux_004:sink3_startofpacket
	wire          rsp_demux_003_src4_endofpacket;                                                                      // rsp_demux_003:src4_endofpacket -> rsp_mux_004:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                            // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [136:0] rsp_demux_004_src0_data;                                                                             // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                            // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [36:0] rsp_demux_004_src0_channel;                                                                          // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                                    // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                      // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                            // rsp_demux_004:src1_valid -> rsp_mux_001:sink4_valid
	wire  [136:0] rsp_demux_004_src1_data;                                                                             // rsp_demux_004:src1_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_004_src1_ready;                                                                            // rsp_mux_001:sink4_ready -> rsp_demux_004:src1_ready
	wire   [36:0] rsp_demux_004_src1_channel;                                                                          // rsp_demux_004:src1_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                                                    // rsp_demux_004:src1_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                                      // rsp_demux_004:src1_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_004_src2_valid;                                                                            // rsp_demux_004:src2_valid -> rsp_mux_002:sink4_valid
	wire  [136:0] rsp_demux_004_src2_data;                                                                             // rsp_demux_004:src2_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_004_src2_ready;                                                                            // rsp_mux_002:sink4_ready -> rsp_demux_004:src2_ready
	wire   [36:0] rsp_demux_004_src2_channel;                                                                          // rsp_demux_004:src2_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_004_src2_startofpacket;                                                                    // rsp_demux_004:src2_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                                      // rsp_demux_004:src2_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_004_src3_valid;                                                                            // rsp_demux_004:src3_valid -> rsp_mux_003:sink4_valid
	wire  [136:0] rsp_demux_004_src3_data;                                                                             // rsp_demux_004:src3_data -> rsp_mux_003:sink4_data
	wire          rsp_demux_004_src3_ready;                                                                            // rsp_mux_003:sink4_ready -> rsp_demux_004:src3_ready
	wire   [36:0] rsp_demux_004_src3_channel;                                                                          // rsp_demux_004:src3_channel -> rsp_mux_003:sink4_channel
	wire          rsp_demux_004_src3_startofpacket;                                                                    // rsp_demux_004:src3_startofpacket -> rsp_mux_003:sink4_startofpacket
	wire          rsp_demux_004_src3_endofpacket;                                                                      // rsp_demux_004:src3_endofpacket -> rsp_mux_003:sink4_endofpacket
	wire          rsp_demux_004_src4_valid;                                                                            // rsp_demux_004:src4_valid -> rsp_mux_004:sink4_valid
	wire  [136:0] rsp_demux_004_src4_data;                                                                             // rsp_demux_004:src4_data -> rsp_mux_004:sink4_data
	wire          rsp_demux_004_src4_ready;                                                                            // rsp_mux_004:sink4_ready -> rsp_demux_004:src4_ready
	wire   [36:0] rsp_demux_004_src4_channel;                                                                          // rsp_demux_004:src4_channel -> rsp_mux_004:sink4_channel
	wire          rsp_demux_004_src4_startofpacket;                                                                    // rsp_demux_004:src4_startofpacket -> rsp_mux_004:sink4_startofpacket
	wire          rsp_demux_004_src4_endofpacket;                                                                      // rsp_demux_004:src4_endofpacket -> rsp_mux_004:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                            // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [136:0] rsp_demux_005_src0_data;                                                                             // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                            // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [36:0] rsp_demux_005_src0_channel;                                                                          // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                                    // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                      // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                                            // rsp_demux_005:src1_valid -> rsp_mux_001:sink5_valid
	wire  [136:0] rsp_demux_005_src1_data;                                                                             // rsp_demux_005:src1_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_005_src1_ready;                                                                            // rsp_mux_001:sink5_ready -> rsp_demux_005:src1_ready
	wire   [36:0] rsp_demux_005_src1_channel;                                                                          // rsp_demux_005:src1_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_005_src1_startofpacket;                                                                    // rsp_demux_005:src1_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                                                      // rsp_demux_005:src1_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_005_src2_valid;                                                                            // rsp_demux_005:src2_valid -> rsp_mux_002:sink5_valid
	wire  [136:0] rsp_demux_005_src2_data;                                                                             // rsp_demux_005:src2_data -> rsp_mux_002:sink5_data
	wire          rsp_demux_005_src2_ready;                                                                            // rsp_mux_002:sink5_ready -> rsp_demux_005:src2_ready
	wire   [36:0] rsp_demux_005_src2_channel;                                                                          // rsp_demux_005:src2_channel -> rsp_mux_002:sink5_channel
	wire          rsp_demux_005_src2_startofpacket;                                                                    // rsp_demux_005:src2_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                                                      // rsp_demux_005:src2_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_005_src3_valid;                                                                            // rsp_demux_005:src3_valid -> rsp_mux_003:sink5_valid
	wire  [136:0] rsp_demux_005_src3_data;                                                                             // rsp_demux_005:src3_data -> rsp_mux_003:sink5_data
	wire          rsp_demux_005_src3_ready;                                                                            // rsp_mux_003:sink5_ready -> rsp_demux_005:src3_ready
	wire   [36:0] rsp_demux_005_src3_channel;                                                                          // rsp_demux_005:src3_channel -> rsp_mux_003:sink5_channel
	wire          rsp_demux_005_src3_startofpacket;                                                                    // rsp_demux_005:src3_startofpacket -> rsp_mux_003:sink5_startofpacket
	wire          rsp_demux_005_src3_endofpacket;                                                                      // rsp_demux_005:src3_endofpacket -> rsp_mux_003:sink5_endofpacket
	wire          rsp_demux_005_src4_valid;                                                                            // rsp_demux_005:src4_valid -> rsp_mux_004:sink5_valid
	wire  [136:0] rsp_demux_005_src4_data;                                                                             // rsp_demux_005:src4_data -> rsp_mux_004:sink5_data
	wire          rsp_demux_005_src4_ready;                                                                            // rsp_mux_004:sink5_ready -> rsp_demux_005:src4_ready
	wire   [36:0] rsp_demux_005_src4_channel;                                                                          // rsp_demux_005:src4_channel -> rsp_mux_004:sink5_channel
	wire          rsp_demux_005_src4_startofpacket;                                                                    // rsp_demux_005:src4_startofpacket -> rsp_mux_004:sink5_startofpacket
	wire          rsp_demux_005_src4_endofpacket;                                                                      // rsp_demux_005:src4_endofpacket -> rsp_mux_004:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                            // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [136:0] rsp_demux_006_src0_data;                                                                             // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                            // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [36:0] rsp_demux_006_src0_channel;                                                                          // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                                    // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                      // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                                            // rsp_demux_006:src1_valid -> rsp_mux_001:sink6_valid
	wire  [136:0] rsp_demux_006_src1_data;                                                                             // rsp_demux_006:src1_data -> rsp_mux_001:sink6_data
	wire          rsp_demux_006_src1_ready;                                                                            // rsp_mux_001:sink6_ready -> rsp_demux_006:src1_ready
	wire   [36:0] rsp_demux_006_src1_channel;                                                                          // rsp_demux_006:src1_channel -> rsp_mux_001:sink6_channel
	wire          rsp_demux_006_src1_startofpacket;                                                                    // rsp_demux_006:src1_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                                      // rsp_demux_006:src1_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire          rsp_demux_006_src2_valid;                                                                            // rsp_demux_006:src2_valid -> rsp_mux_002:sink6_valid
	wire  [136:0] rsp_demux_006_src2_data;                                                                             // rsp_demux_006:src2_data -> rsp_mux_002:sink6_data
	wire          rsp_demux_006_src2_ready;                                                                            // rsp_mux_002:sink6_ready -> rsp_demux_006:src2_ready
	wire   [36:0] rsp_demux_006_src2_channel;                                                                          // rsp_demux_006:src2_channel -> rsp_mux_002:sink6_channel
	wire          rsp_demux_006_src2_startofpacket;                                                                    // rsp_demux_006:src2_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire          rsp_demux_006_src2_endofpacket;                                                                      // rsp_demux_006:src2_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          rsp_demux_006_src3_valid;                                                                            // rsp_demux_006:src3_valid -> rsp_mux_003:sink6_valid
	wire  [136:0] rsp_demux_006_src3_data;                                                                             // rsp_demux_006:src3_data -> rsp_mux_003:sink6_data
	wire          rsp_demux_006_src3_ready;                                                                            // rsp_mux_003:sink6_ready -> rsp_demux_006:src3_ready
	wire   [36:0] rsp_demux_006_src3_channel;                                                                          // rsp_demux_006:src3_channel -> rsp_mux_003:sink6_channel
	wire          rsp_demux_006_src3_startofpacket;                                                                    // rsp_demux_006:src3_startofpacket -> rsp_mux_003:sink6_startofpacket
	wire          rsp_demux_006_src3_endofpacket;                                                                      // rsp_demux_006:src3_endofpacket -> rsp_mux_003:sink6_endofpacket
	wire          rsp_demux_006_src4_valid;                                                                            // rsp_demux_006:src4_valid -> rsp_mux_004:sink6_valid
	wire  [136:0] rsp_demux_006_src4_data;                                                                             // rsp_demux_006:src4_data -> rsp_mux_004:sink6_data
	wire          rsp_demux_006_src4_ready;                                                                            // rsp_mux_004:sink6_ready -> rsp_demux_006:src4_ready
	wire   [36:0] rsp_demux_006_src4_channel;                                                                          // rsp_demux_006:src4_channel -> rsp_mux_004:sink6_channel
	wire          rsp_demux_006_src4_startofpacket;                                                                    // rsp_demux_006:src4_startofpacket -> rsp_mux_004:sink6_startofpacket
	wire          rsp_demux_006_src4_endofpacket;                                                                      // rsp_demux_006:src4_endofpacket -> rsp_mux_004:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                            // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [136:0] rsp_demux_007_src0_data;                                                                             // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                            // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [36:0] rsp_demux_007_src0_channel;                                                                          // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                                    // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                      // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                            // rsp_demux_007:src1_valid -> rsp_mux_001:sink7_valid
	wire  [136:0] rsp_demux_007_src1_data;                                                                             // rsp_demux_007:src1_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_007_src1_ready;                                                                            // rsp_mux_001:sink7_ready -> rsp_demux_007:src1_ready
	wire   [36:0] rsp_demux_007_src1_channel;                                                                          // rsp_demux_007:src1_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_007_src1_startofpacket;                                                                    // rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                                      // rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_007_src2_valid;                                                                            // rsp_demux_007:src2_valid -> rsp_mux_002:sink7_valid
	wire  [136:0] rsp_demux_007_src2_data;                                                                             // rsp_demux_007:src2_data -> rsp_mux_002:sink7_data
	wire          rsp_demux_007_src2_ready;                                                                            // rsp_mux_002:sink7_ready -> rsp_demux_007:src2_ready
	wire   [36:0] rsp_demux_007_src2_channel;                                                                          // rsp_demux_007:src2_channel -> rsp_mux_002:sink7_channel
	wire          rsp_demux_007_src2_startofpacket;                                                                    // rsp_demux_007:src2_startofpacket -> rsp_mux_002:sink7_startofpacket
	wire          rsp_demux_007_src2_endofpacket;                                                                      // rsp_demux_007:src2_endofpacket -> rsp_mux_002:sink7_endofpacket
	wire          rsp_demux_007_src3_valid;                                                                            // rsp_demux_007:src3_valid -> rsp_mux_003:sink7_valid
	wire  [136:0] rsp_demux_007_src3_data;                                                                             // rsp_demux_007:src3_data -> rsp_mux_003:sink7_data
	wire          rsp_demux_007_src3_ready;                                                                            // rsp_mux_003:sink7_ready -> rsp_demux_007:src3_ready
	wire   [36:0] rsp_demux_007_src3_channel;                                                                          // rsp_demux_007:src3_channel -> rsp_mux_003:sink7_channel
	wire          rsp_demux_007_src3_startofpacket;                                                                    // rsp_demux_007:src3_startofpacket -> rsp_mux_003:sink7_startofpacket
	wire          rsp_demux_007_src3_endofpacket;                                                                      // rsp_demux_007:src3_endofpacket -> rsp_mux_003:sink7_endofpacket
	wire          rsp_demux_007_src4_valid;                                                                            // rsp_demux_007:src4_valid -> rsp_mux_004:sink7_valid
	wire  [136:0] rsp_demux_007_src4_data;                                                                             // rsp_demux_007:src4_data -> rsp_mux_004:sink7_data
	wire          rsp_demux_007_src4_ready;                                                                            // rsp_mux_004:sink7_ready -> rsp_demux_007:src4_ready
	wire   [36:0] rsp_demux_007_src4_channel;                                                                          // rsp_demux_007:src4_channel -> rsp_mux_004:sink7_channel
	wire          rsp_demux_007_src4_startofpacket;                                                                    // rsp_demux_007:src4_startofpacket -> rsp_mux_004:sink7_startofpacket
	wire          rsp_demux_007_src4_endofpacket;                                                                      // rsp_demux_007:src4_endofpacket -> rsp_mux_004:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                            // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [136:0] rsp_demux_008_src0_data;                                                                             // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                            // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [36:0] rsp_demux_008_src0_channel;                                                                          // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                                    // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                      // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                            // rsp_demux_008:src1_valid -> rsp_mux_001:sink8_valid
	wire  [136:0] rsp_demux_008_src1_data;                                                                             // rsp_demux_008:src1_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_008_src1_ready;                                                                            // rsp_mux_001:sink8_ready -> rsp_demux_008:src1_ready
	wire   [36:0] rsp_demux_008_src1_channel;                                                                          // rsp_demux_008:src1_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                                                    // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                                      // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_008_src2_valid;                                                                            // rsp_demux_008:src2_valid -> rsp_mux_002:sink8_valid
	wire  [136:0] rsp_demux_008_src2_data;                                                                             // rsp_demux_008:src2_data -> rsp_mux_002:sink8_data
	wire          rsp_demux_008_src2_ready;                                                                            // rsp_mux_002:sink8_ready -> rsp_demux_008:src2_ready
	wire   [36:0] rsp_demux_008_src2_channel;                                                                          // rsp_demux_008:src2_channel -> rsp_mux_002:sink8_channel
	wire          rsp_demux_008_src2_startofpacket;                                                                    // rsp_demux_008:src2_startofpacket -> rsp_mux_002:sink8_startofpacket
	wire          rsp_demux_008_src2_endofpacket;                                                                      // rsp_demux_008:src2_endofpacket -> rsp_mux_002:sink8_endofpacket
	wire          rsp_demux_008_src3_valid;                                                                            // rsp_demux_008:src3_valid -> rsp_mux_003:sink8_valid
	wire  [136:0] rsp_demux_008_src3_data;                                                                             // rsp_demux_008:src3_data -> rsp_mux_003:sink8_data
	wire          rsp_demux_008_src3_ready;                                                                            // rsp_mux_003:sink8_ready -> rsp_demux_008:src3_ready
	wire   [36:0] rsp_demux_008_src3_channel;                                                                          // rsp_demux_008:src3_channel -> rsp_mux_003:sink8_channel
	wire          rsp_demux_008_src3_startofpacket;                                                                    // rsp_demux_008:src3_startofpacket -> rsp_mux_003:sink8_startofpacket
	wire          rsp_demux_008_src3_endofpacket;                                                                      // rsp_demux_008:src3_endofpacket -> rsp_mux_003:sink8_endofpacket
	wire          rsp_demux_008_src4_valid;                                                                            // rsp_demux_008:src4_valid -> rsp_mux_004:sink8_valid
	wire  [136:0] rsp_demux_008_src4_data;                                                                             // rsp_demux_008:src4_data -> rsp_mux_004:sink8_data
	wire          rsp_demux_008_src4_ready;                                                                            // rsp_mux_004:sink8_ready -> rsp_demux_008:src4_ready
	wire   [36:0] rsp_demux_008_src4_channel;                                                                          // rsp_demux_008:src4_channel -> rsp_mux_004:sink8_channel
	wire          rsp_demux_008_src4_startofpacket;                                                                    // rsp_demux_008:src4_startofpacket -> rsp_mux_004:sink8_startofpacket
	wire          rsp_demux_008_src4_endofpacket;                                                                      // rsp_demux_008:src4_endofpacket -> rsp_mux_004:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                            // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [136:0] rsp_demux_009_src0_data;                                                                             // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                            // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [36:0] rsp_demux_009_src0_channel;                                                                          // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                                    // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                                      // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_009_src1_valid;                                                                            // rsp_demux_009:src1_valid -> rsp_mux_001:sink9_valid
	wire  [136:0] rsp_demux_009_src1_data;                                                                             // rsp_demux_009:src1_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_009_src1_ready;                                                                            // rsp_mux_001:sink9_ready -> rsp_demux_009:src1_ready
	wire   [36:0] rsp_demux_009_src1_channel;                                                                          // rsp_demux_009:src1_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                                                                    // rsp_demux_009:src1_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                                      // rsp_demux_009:src1_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_009_src2_valid;                                                                            // rsp_demux_009:src2_valid -> rsp_mux_002:sink9_valid
	wire  [136:0] rsp_demux_009_src2_data;                                                                             // rsp_demux_009:src2_data -> rsp_mux_002:sink9_data
	wire          rsp_demux_009_src2_ready;                                                                            // rsp_mux_002:sink9_ready -> rsp_demux_009:src2_ready
	wire   [36:0] rsp_demux_009_src2_channel;                                                                          // rsp_demux_009:src2_channel -> rsp_mux_002:sink9_channel
	wire          rsp_demux_009_src2_startofpacket;                                                                    // rsp_demux_009:src2_startofpacket -> rsp_mux_002:sink9_startofpacket
	wire          rsp_demux_009_src2_endofpacket;                                                                      // rsp_demux_009:src2_endofpacket -> rsp_mux_002:sink9_endofpacket
	wire          rsp_demux_009_src3_valid;                                                                            // rsp_demux_009:src3_valid -> rsp_mux_003:sink9_valid
	wire  [136:0] rsp_demux_009_src3_data;                                                                             // rsp_demux_009:src3_data -> rsp_mux_003:sink9_data
	wire          rsp_demux_009_src3_ready;                                                                            // rsp_mux_003:sink9_ready -> rsp_demux_009:src3_ready
	wire   [36:0] rsp_demux_009_src3_channel;                                                                          // rsp_demux_009:src3_channel -> rsp_mux_003:sink9_channel
	wire          rsp_demux_009_src3_startofpacket;                                                                    // rsp_demux_009:src3_startofpacket -> rsp_mux_003:sink9_startofpacket
	wire          rsp_demux_009_src3_endofpacket;                                                                      // rsp_demux_009:src3_endofpacket -> rsp_mux_003:sink9_endofpacket
	wire          rsp_demux_009_src4_valid;                                                                            // rsp_demux_009:src4_valid -> rsp_mux_004:sink9_valid
	wire  [136:0] rsp_demux_009_src4_data;                                                                             // rsp_demux_009:src4_data -> rsp_mux_004:sink9_data
	wire          rsp_demux_009_src4_ready;                                                                            // rsp_mux_004:sink9_ready -> rsp_demux_009:src4_ready
	wire   [36:0] rsp_demux_009_src4_channel;                                                                          // rsp_demux_009:src4_channel -> rsp_mux_004:sink9_channel
	wire          rsp_demux_009_src4_startofpacket;                                                                    // rsp_demux_009:src4_startofpacket -> rsp_mux_004:sink9_startofpacket
	wire          rsp_demux_009_src4_endofpacket;                                                                      // rsp_demux_009:src4_endofpacket -> rsp_mux_004:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                            // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [136:0] rsp_demux_010_src0_data;                                                                             // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                            // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [36:0] rsp_demux_010_src0_channel;                                                                          // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                                    // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                                      // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_010_src1_valid;                                                                            // rsp_demux_010:src1_valid -> rsp_mux_001:sink10_valid
	wire  [136:0] rsp_demux_010_src1_data;                                                                             // rsp_demux_010:src1_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_010_src1_ready;                                                                            // rsp_mux_001:sink10_ready -> rsp_demux_010:src1_ready
	wire   [36:0] rsp_demux_010_src1_channel;                                                                          // rsp_demux_010:src1_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                                                                    // rsp_demux_010:src1_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                                      // rsp_demux_010:src1_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_010_src2_valid;                                                                            // rsp_demux_010:src2_valid -> rsp_mux_002:sink10_valid
	wire  [136:0] rsp_demux_010_src2_data;                                                                             // rsp_demux_010:src2_data -> rsp_mux_002:sink10_data
	wire          rsp_demux_010_src2_ready;                                                                            // rsp_mux_002:sink10_ready -> rsp_demux_010:src2_ready
	wire   [36:0] rsp_demux_010_src2_channel;                                                                          // rsp_demux_010:src2_channel -> rsp_mux_002:sink10_channel
	wire          rsp_demux_010_src2_startofpacket;                                                                    // rsp_demux_010:src2_startofpacket -> rsp_mux_002:sink10_startofpacket
	wire          rsp_demux_010_src2_endofpacket;                                                                      // rsp_demux_010:src2_endofpacket -> rsp_mux_002:sink10_endofpacket
	wire          rsp_demux_010_src3_valid;                                                                            // rsp_demux_010:src3_valid -> rsp_mux_003:sink10_valid
	wire  [136:0] rsp_demux_010_src3_data;                                                                             // rsp_demux_010:src3_data -> rsp_mux_003:sink10_data
	wire          rsp_demux_010_src3_ready;                                                                            // rsp_mux_003:sink10_ready -> rsp_demux_010:src3_ready
	wire   [36:0] rsp_demux_010_src3_channel;                                                                          // rsp_demux_010:src3_channel -> rsp_mux_003:sink10_channel
	wire          rsp_demux_010_src3_startofpacket;                                                                    // rsp_demux_010:src3_startofpacket -> rsp_mux_003:sink10_startofpacket
	wire          rsp_demux_010_src3_endofpacket;                                                                      // rsp_demux_010:src3_endofpacket -> rsp_mux_003:sink10_endofpacket
	wire          rsp_demux_010_src4_valid;                                                                            // rsp_demux_010:src4_valid -> rsp_mux_004:sink10_valid
	wire  [136:0] rsp_demux_010_src4_data;                                                                             // rsp_demux_010:src4_data -> rsp_mux_004:sink10_data
	wire          rsp_demux_010_src4_ready;                                                                            // rsp_mux_004:sink10_ready -> rsp_demux_010:src4_ready
	wire   [36:0] rsp_demux_010_src4_channel;                                                                          // rsp_demux_010:src4_channel -> rsp_mux_004:sink10_channel
	wire          rsp_demux_010_src4_startofpacket;                                                                    // rsp_demux_010:src4_startofpacket -> rsp_mux_004:sink10_startofpacket
	wire          rsp_demux_010_src4_endofpacket;                                                                      // rsp_demux_010:src4_endofpacket -> rsp_mux_004:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                            // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [136:0] rsp_demux_011_src0_data;                                                                             // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                                            // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [36:0] rsp_demux_011_src0_channel;                                                                          // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                                    // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                                      // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                                            // rsp_demux_011:src1_valid -> rsp_mux_001:sink11_valid
	wire  [136:0] rsp_demux_011_src1_data;                                                                             // rsp_demux_011:src1_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_011_src1_ready;                                                                            // rsp_mux_001:sink11_ready -> rsp_demux_011:src1_ready
	wire   [36:0] rsp_demux_011_src1_channel;                                                                          // rsp_demux_011:src1_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_011_src1_startofpacket;                                                                    // rsp_demux_011:src1_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                                      // rsp_demux_011:src1_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_011_src2_valid;                                                                            // rsp_demux_011:src2_valid -> rsp_mux_002:sink11_valid
	wire  [136:0] rsp_demux_011_src2_data;                                                                             // rsp_demux_011:src2_data -> rsp_mux_002:sink11_data
	wire          rsp_demux_011_src2_ready;                                                                            // rsp_mux_002:sink11_ready -> rsp_demux_011:src2_ready
	wire   [36:0] rsp_demux_011_src2_channel;                                                                          // rsp_demux_011:src2_channel -> rsp_mux_002:sink11_channel
	wire          rsp_demux_011_src2_startofpacket;                                                                    // rsp_demux_011:src2_startofpacket -> rsp_mux_002:sink11_startofpacket
	wire          rsp_demux_011_src2_endofpacket;                                                                      // rsp_demux_011:src2_endofpacket -> rsp_mux_002:sink11_endofpacket
	wire          rsp_demux_011_src3_valid;                                                                            // rsp_demux_011:src3_valid -> rsp_mux_003:sink11_valid
	wire  [136:0] rsp_demux_011_src3_data;                                                                             // rsp_demux_011:src3_data -> rsp_mux_003:sink11_data
	wire          rsp_demux_011_src3_ready;                                                                            // rsp_mux_003:sink11_ready -> rsp_demux_011:src3_ready
	wire   [36:0] rsp_demux_011_src3_channel;                                                                          // rsp_demux_011:src3_channel -> rsp_mux_003:sink11_channel
	wire          rsp_demux_011_src3_startofpacket;                                                                    // rsp_demux_011:src3_startofpacket -> rsp_mux_003:sink11_startofpacket
	wire          rsp_demux_011_src3_endofpacket;                                                                      // rsp_demux_011:src3_endofpacket -> rsp_mux_003:sink11_endofpacket
	wire          rsp_demux_011_src4_valid;                                                                            // rsp_demux_011:src4_valid -> rsp_mux_004:sink11_valid
	wire  [136:0] rsp_demux_011_src4_data;                                                                             // rsp_demux_011:src4_data -> rsp_mux_004:sink11_data
	wire          rsp_demux_011_src4_ready;                                                                            // rsp_mux_004:sink11_ready -> rsp_demux_011:src4_ready
	wire   [36:0] rsp_demux_011_src4_channel;                                                                          // rsp_demux_011:src4_channel -> rsp_mux_004:sink11_channel
	wire          rsp_demux_011_src4_startofpacket;                                                                    // rsp_demux_011:src4_startofpacket -> rsp_mux_004:sink11_startofpacket
	wire          rsp_demux_011_src4_endofpacket;                                                                      // rsp_demux_011:src4_endofpacket -> rsp_mux_004:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                            // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [136:0] rsp_demux_012_src0_data;                                                                             // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                                            // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [36:0] rsp_demux_012_src0_channel;                                                                          // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                                    // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                                      // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                                            // rsp_demux_012:src1_valid -> rsp_mux_001:sink12_valid
	wire  [136:0] rsp_demux_012_src1_data;                                                                             // rsp_demux_012:src1_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_012_src1_ready;                                                                            // rsp_mux_001:sink12_ready -> rsp_demux_012:src1_ready
	wire   [36:0] rsp_demux_012_src1_channel;                                                                          // rsp_demux_012:src1_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_012_src1_startofpacket;                                                                    // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                                      // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_012_src2_valid;                                                                            // rsp_demux_012:src2_valid -> rsp_mux_002:sink12_valid
	wire  [136:0] rsp_demux_012_src2_data;                                                                             // rsp_demux_012:src2_data -> rsp_mux_002:sink12_data
	wire          rsp_demux_012_src2_ready;                                                                            // rsp_mux_002:sink12_ready -> rsp_demux_012:src2_ready
	wire   [36:0] rsp_demux_012_src2_channel;                                                                          // rsp_demux_012:src2_channel -> rsp_mux_002:sink12_channel
	wire          rsp_demux_012_src2_startofpacket;                                                                    // rsp_demux_012:src2_startofpacket -> rsp_mux_002:sink12_startofpacket
	wire          rsp_demux_012_src2_endofpacket;                                                                      // rsp_demux_012:src2_endofpacket -> rsp_mux_002:sink12_endofpacket
	wire          rsp_demux_012_src3_valid;                                                                            // rsp_demux_012:src3_valid -> rsp_mux_003:sink12_valid
	wire  [136:0] rsp_demux_012_src3_data;                                                                             // rsp_demux_012:src3_data -> rsp_mux_003:sink12_data
	wire          rsp_demux_012_src3_ready;                                                                            // rsp_mux_003:sink12_ready -> rsp_demux_012:src3_ready
	wire   [36:0] rsp_demux_012_src3_channel;                                                                          // rsp_demux_012:src3_channel -> rsp_mux_003:sink12_channel
	wire          rsp_demux_012_src3_startofpacket;                                                                    // rsp_demux_012:src3_startofpacket -> rsp_mux_003:sink12_startofpacket
	wire          rsp_demux_012_src3_endofpacket;                                                                      // rsp_demux_012:src3_endofpacket -> rsp_mux_003:sink12_endofpacket
	wire          rsp_demux_012_src4_valid;                                                                            // rsp_demux_012:src4_valid -> rsp_mux_004:sink12_valid
	wire  [136:0] rsp_demux_012_src4_data;                                                                             // rsp_demux_012:src4_data -> rsp_mux_004:sink12_data
	wire          rsp_demux_012_src4_ready;                                                                            // rsp_mux_004:sink12_ready -> rsp_demux_012:src4_ready
	wire   [36:0] rsp_demux_012_src4_channel;                                                                          // rsp_demux_012:src4_channel -> rsp_mux_004:sink12_channel
	wire          rsp_demux_012_src4_startofpacket;                                                                    // rsp_demux_012:src4_startofpacket -> rsp_mux_004:sink12_startofpacket
	wire          rsp_demux_012_src4_endofpacket;                                                                      // rsp_demux_012:src4_endofpacket -> rsp_mux_004:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                            // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [136:0] rsp_demux_013_src0_data;                                                                             // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                                            // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [36:0] rsp_demux_013_src0_channel;                                                                          // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                                    // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                                      // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_013_src1_valid;                                                                            // rsp_demux_013:src1_valid -> rsp_mux_001:sink13_valid
	wire  [136:0] rsp_demux_013_src1_data;                                                                             // rsp_demux_013:src1_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_013_src1_ready;                                                                            // rsp_mux_001:sink13_ready -> rsp_demux_013:src1_ready
	wire   [36:0] rsp_demux_013_src1_channel;                                                                          // rsp_demux_013:src1_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_013_src1_startofpacket;                                                                    // rsp_demux_013:src1_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_013_src1_endofpacket;                                                                      // rsp_demux_013:src1_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_013_src2_valid;                                                                            // rsp_demux_013:src2_valid -> rsp_mux_002:sink13_valid
	wire  [136:0] rsp_demux_013_src2_data;                                                                             // rsp_demux_013:src2_data -> rsp_mux_002:sink13_data
	wire          rsp_demux_013_src2_ready;                                                                            // rsp_mux_002:sink13_ready -> rsp_demux_013:src2_ready
	wire   [36:0] rsp_demux_013_src2_channel;                                                                          // rsp_demux_013:src2_channel -> rsp_mux_002:sink13_channel
	wire          rsp_demux_013_src2_startofpacket;                                                                    // rsp_demux_013:src2_startofpacket -> rsp_mux_002:sink13_startofpacket
	wire          rsp_demux_013_src2_endofpacket;                                                                      // rsp_demux_013:src2_endofpacket -> rsp_mux_002:sink13_endofpacket
	wire          rsp_demux_013_src3_valid;                                                                            // rsp_demux_013:src3_valid -> rsp_mux_003:sink13_valid
	wire  [136:0] rsp_demux_013_src3_data;                                                                             // rsp_demux_013:src3_data -> rsp_mux_003:sink13_data
	wire          rsp_demux_013_src3_ready;                                                                            // rsp_mux_003:sink13_ready -> rsp_demux_013:src3_ready
	wire   [36:0] rsp_demux_013_src3_channel;                                                                          // rsp_demux_013:src3_channel -> rsp_mux_003:sink13_channel
	wire          rsp_demux_013_src3_startofpacket;                                                                    // rsp_demux_013:src3_startofpacket -> rsp_mux_003:sink13_startofpacket
	wire          rsp_demux_013_src3_endofpacket;                                                                      // rsp_demux_013:src3_endofpacket -> rsp_mux_003:sink13_endofpacket
	wire          rsp_demux_013_src4_valid;                                                                            // rsp_demux_013:src4_valid -> rsp_mux_004:sink13_valid
	wire  [136:0] rsp_demux_013_src4_data;                                                                             // rsp_demux_013:src4_data -> rsp_mux_004:sink13_data
	wire          rsp_demux_013_src4_ready;                                                                            // rsp_mux_004:sink13_ready -> rsp_demux_013:src4_ready
	wire   [36:0] rsp_demux_013_src4_channel;                                                                          // rsp_demux_013:src4_channel -> rsp_mux_004:sink13_channel
	wire          rsp_demux_013_src4_startofpacket;                                                                    // rsp_demux_013:src4_startofpacket -> rsp_mux_004:sink13_startofpacket
	wire          rsp_demux_013_src4_endofpacket;                                                                      // rsp_demux_013:src4_endofpacket -> rsp_mux_004:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                            // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [136:0] rsp_demux_014_src0_data;                                                                             // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                                            // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [36:0] rsp_demux_014_src0_channel;                                                                          // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                                    // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                                      // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_014_src1_valid;                                                                            // rsp_demux_014:src1_valid -> rsp_mux_001:sink14_valid
	wire  [136:0] rsp_demux_014_src1_data;                                                                             // rsp_demux_014:src1_data -> rsp_mux_001:sink14_data
	wire          rsp_demux_014_src1_ready;                                                                            // rsp_mux_001:sink14_ready -> rsp_demux_014:src1_ready
	wire   [36:0] rsp_demux_014_src1_channel;                                                                          // rsp_demux_014:src1_channel -> rsp_mux_001:sink14_channel
	wire          rsp_demux_014_src1_startofpacket;                                                                    // rsp_demux_014:src1_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire          rsp_demux_014_src1_endofpacket;                                                                      // rsp_demux_014:src1_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire          rsp_demux_014_src2_valid;                                                                            // rsp_demux_014:src2_valid -> rsp_mux_002:sink14_valid
	wire  [136:0] rsp_demux_014_src2_data;                                                                             // rsp_demux_014:src2_data -> rsp_mux_002:sink14_data
	wire          rsp_demux_014_src2_ready;                                                                            // rsp_mux_002:sink14_ready -> rsp_demux_014:src2_ready
	wire   [36:0] rsp_demux_014_src2_channel;                                                                          // rsp_demux_014:src2_channel -> rsp_mux_002:sink14_channel
	wire          rsp_demux_014_src2_startofpacket;                                                                    // rsp_demux_014:src2_startofpacket -> rsp_mux_002:sink14_startofpacket
	wire          rsp_demux_014_src2_endofpacket;                                                                      // rsp_demux_014:src2_endofpacket -> rsp_mux_002:sink14_endofpacket
	wire          rsp_demux_014_src3_valid;                                                                            // rsp_demux_014:src3_valid -> rsp_mux_003:sink14_valid
	wire  [136:0] rsp_demux_014_src3_data;                                                                             // rsp_demux_014:src3_data -> rsp_mux_003:sink14_data
	wire          rsp_demux_014_src3_ready;                                                                            // rsp_mux_003:sink14_ready -> rsp_demux_014:src3_ready
	wire   [36:0] rsp_demux_014_src3_channel;                                                                          // rsp_demux_014:src3_channel -> rsp_mux_003:sink14_channel
	wire          rsp_demux_014_src3_startofpacket;                                                                    // rsp_demux_014:src3_startofpacket -> rsp_mux_003:sink14_startofpacket
	wire          rsp_demux_014_src3_endofpacket;                                                                      // rsp_demux_014:src3_endofpacket -> rsp_mux_003:sink14_endofpacket
	wire          rsp_demux_014_src4_valid;                                                                            // rsp_demux_014:src4_valid -> rsp_mux_004:sink14_valid
	wire  [136:0] rsp_demux_014_src4_data;                                                                             // rsp_demux_014:src4_data -> rsp_mux_004:sink14_data
	wire          rsp_demux_014_src4_ready;                                                                            // rsp_mux_004:sink14_ready -> rsp_demux_014:src4_ready
	wire   [36:0] rsp_demux_014_src4_channel;                                                                          // rsp_demux_014:src4_channel -> rsp_mux_004:sink14_channel
	wire          rsp_demux_014_src4_startofpacket;                                                                    // rsp_demux_014:src4_startofpacket -> rsp_mux_004:sink14_startofpacket
	wire          rsp_demux_014_src4_endofpacket;                                                                      // rsp_demux_014:src4_endofpacket -> rsp_mux_004:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                            // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [136:0] rsp_demux_015_src0_data;                                                                             // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                                            // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [36:0] rsp_demux_015_src0_channel;                                                                          // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                                    // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                                      // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_015_src1_valid;                                                                            // rsp_demux_015:src1_valid -> rsp_mux_001:sink15_valid
	wire  [136:0] rsp_demux_015_src1_data;                                                                             // rsp_demux_015:src1_data -> rsp_mux_001:sink15_data
	wire          rsp_demux_015_src1_ready;                                                                            // rsp_mux_001:sink15_ready -> rsp_demux_015:src1_ready
	wire   [36:0] rsp_demux_015_src1_channel;                                                                          // rsp_demux_015:src1_channel -> rsp_mux_001:sink15_channel
	wire          rsp_demux_015_src1_startofpacket;                                                                    // rsp_demux_015:src1_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire          rsp_demux_015_src1_endofpacket;                                                                      // rsp_demux_015:src1_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire          rsp_demux_015_src2_valid;                                                                            // rsp_demux_015:src2_valid -> rsp_mux_002:sink15_valid
	wire  [136:0] rsp_demux_015_src2_data;                                                                             // rsp_demux_015:src2_data -> rsp_mux_002:sink15_data
	wire          rsp_demux_015_src2_ready;                                                                            // rsp_mux_002:sink15_ready -> rsp_demux_015:src2_ready
	wire   [36:0] rsp_demux_015_src2_channel;                                                                          // rsp_demux_015:src2_channel -> rsp_mux_002:sink15_channel
	wire          rsp_demux_015_src2_startofpacket;                                                                    // rsp_demux_015:src2_startofpacket -> rsp_mux_002:sink15_startofpacket
	wire          rsp_demux_015_src2_endofpacket;                                                                      // rsp_demux_015:src2_endofpacket -> rsp_mux_002:sink15_endofpacket
	wire          rsp_demux_015_src3_valid;                                                                            // rsp_demux_015:src3_valid -> rsp_mux_003:sink15_valid
	wire  [136:0] rsp_demux_015_src3_data;                                                                             // rsp_demux_015:src3_data -> rsp_mux_003:sink15_data
	wire          rsp_demux_015_src3_ready;                                                                            // rsp_mux_003:sink15_ready -> rsp_demux_015:src3_ready
	wire   [36:0] rsp_demux_015_src3_channel;                                                                          // rsp_demux_015:src3_channel -> rsp_mux_003:sink15_channel
	wire          rsp_demux_015_src3_startofpacket;                                                                    // rsp_demux_015:src3_startofpacket -> rsp_mux_003:sink15_startofpacket
	wire          rsp_demux_015_src3_endofpacket;                                                                      // rsp_demux_015:src3_endofpacket -> rsp_mux_003:sink15_endofpacket
	wire          rsp_demux_015_src4_valid;                                                                            // rsp_demux_015:src4_valid -> rsp_mux_004:sink15_valid
	wire  [136:0] rsp_demux_015_src4_data;                                                                             // rsp_demux_015:src4_data -> rsp_mux_004:sink15_data
	wire          rsp_demux_015_src4_ready;                                                                            // rsp_mux_004:sink15_ready -> rsp_demux_015:src4_ready
	wire   [36:0] rsp_demux_015_src4_channel;                                                                          // rsp_demux_015:src4_channel -> rsp_mux_004:sink15_channel
	wire          rsp_demux_015_src4_startofpacket;                                                                    // rsp_demux_015:src4_startofpacket -> rsp_mux_004:sink15_startofpacket
	wire          rsp_demux_015_src4_endofpacket;                                                                      // rsp_demux_015:src4_endofpacket -> rsp_mux_004:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                            // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [136:0] rsp_demux_016_src0_data;                                                                             // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                                            // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [36:0] rsp_demux_016_src0_channel;                                                                          // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                                    // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                                      // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_016_src1_valid;                                                                            // rsp_demux_016:src1_valid -> rsp_mux_001:sink16_valid
	wire  [136:0] rsp_demux_016_src1_data;                                                                             // rsp_demux_016:src1_data -> rsp_mux_001:sink16_data
	wire          rsp_demux_016_src1_ready;                                                                            // rsp_mux_001:sink16_ready -> rsp_demux_016:src1_ready
	wire   [36:0] rsp_demux_016_src1_channel;                                                                          // rsp_demux_016:src1_channel -> rsp_mux_001:sink16_channel
	wire          rsp_demux_016_src1_startofpacket;                                                                    // rsp_demux_016:src1_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                                                      // rsp_demux_016:src1_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire          rsp_demux_016_src2_valid;                                                                            // rsp_demux_016:src2_valid -> rsp_mux_002:sink16_valid
	wire  [136:0] rsp_demux_016_src2_data;                                                                             // rsp_demux_016:src2_data -> rsp_mux_002:sink16_data
	wire          rsp_demux_016_src2_ready;                                                                            // rsp_mux_002:sink16_ready -> rsp_demux_016:src2_ready
	wire   [36:0] rsp_demux_016_src2_channel;                                                                          // rsp_demux_016:src2_channel -> rsp_mux_002:sink16_channel
	wire          rsp_demux_016_src2_startofpacket;                                                                    // rsp_demux_016:src2_startofpacket -> rsp_mux_002:sink16_startofpacket
	wire          rsp_demux_016_src2_endofpacket;                                                                      // rsp_demux_016:src2_endofpacket -> rsp_mux_002:sink16_endofpacket
	wire          rsp_demux_016_src3_valid;                                                                            // rsp_demux_016:src3_valid -> rsp_mux_004:sink16_valid
	wire  [136:0] rsp_demux_016_src3_data;                                                                             // rsp_demux_016:src3_data -> rsp_mux_004:sink16_data
	wire          rsp_demux_016_src3_ready;                                                                            // rsp_mux_004:sink16_ready -> rsp_demux_016:src3_ready
	wire   [36:0] rsp_demux_016_src3_channel;                                                                          // rsp_demux_016:src3_channel -> rsp_mux_004:sink16_channel
	wire          rsp_demux_016_src3_startofpacket;                                                                    // rsp_demux_016:src3_startofpacket -> rsp_mux_004:sink16_startofpacket
	wire          rsp_demux_016_src3_endofpacket;                                                                      // rsp_demux_016:src3_endofpacket -> rsp_mux_004:sink16_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                            // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [136:0] rsp_demux_017_src0_data;                                                                             // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                                            // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [36:0] rsp_demux_017_src0_channel;                                                                          // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                                    // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                                      // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_017_src1_valid;                                                                            // rsp_demux_017:src1_valid -> rsp_mux_001:sink17_valid
	wire  [136:0] rsp_demux_017_src1_data;                                                                             // rsp_demux_017:src1_data -> rsp_mux_001:sink17_data
	wire          rsp_demux_017_src1_ready;                                                                            // rsp_mux_001:sink17_ready -> rsp_demux_017:src1_ready
	wire   [36:0] rsp_demux_017_src1_channel;                                                                          // rsp_demux_017:src1_channel -> rsp_mux_001:sink17_channel
	wire          rsp_demux_017_src1_startofpacket;                                                                    // rsp_demux_017:src1_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                                                      // rsp_demux_017:src1_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire          rsp_demux_017_src2_valid;                                                                            // rsp_demux_017:src2_valid -> rsp_mux_002:sink17_valid
	wire  [136:0] rsp_demux_017_src2_data;                                                                             // rsp_demux_017:src2_data -> rsp_mux_002:sink17_data
	wire          rsp_demux_017_src2_ready;                                                                            // rsp_mux_002:sink17_ready -> rsp_demux_017:src2_ready
	wire   [36:0] rsp_demux_017_src2_channel;                                                                          // rsp_demux_017:src2_channel -> rsp_mux_002:sink17_channel
	wire          rsp_demux_017_src2_startofpacket;                                                                    // rsp_demux_017:src2_startofpacket -> rsp_mux_002:sink17_startofpacket
	wire          rsp_demux_017_src2_endofpacket;                                                                      // rsp_demux_017:src2_endofpacket -> rsp_mux_002:sink17_endofpacket
	wire          rsp_demux_017_src3_valid;                                                                            // rsp_demux_017:src3_valid -> rsp_mux_004:sink17_valid
	wire  [136:0] rsp_demux_017_src3_data;                                                                             // rsp_demux_017:src3_data -> rsp_mux_004:sink17_data
	wire          rsp_demux_017_src3_ready;                                                                            // rsp_mux_004:sink17_ready -> rsp_demux_017:src3_ready
	wire   [36:0] rsp_demux_017_src3_channel;                                                                          // rsp_demux_017:src3_channel -> rsp_mux_004:sink17_channel
	wire          rsp_demux_017_src3_startofpacket;                                                                    // rsp_demux_017:src3_startofpacket -> rsp_mux_004:sink17_startofpacket
	wire          rsp_demux_017_src3_endofpacket;                                                                      // rsp_demux_017:src3_endofpacket -> rsp_mux_004:sink17_endofpacket
	wire          rsp_demux_018_src0_valid;                                                                            // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [136:0] rsp_demux_018_src0_data;                                                                             // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                                            // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [36:0] rsp_demux_018_src0_channel;                                                                          // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                                    // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                                      // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_018_src1_valid;                                                                            // rsp_demux_018:src1_valid -> rsp_mux_001:sink18_valid
	wire  [136:0] rsp_demux_018_src1_data;                                                                             // rsp_demux_018:src1_data -> rsp_mux_001:sink18_data
	wire          rsp_demux_018_src1_ready;                                                                            // rsp_mux_001:sink18_ready -> rsp_demux_018:src1_ready
	wire   [36:0] rsp_demux_018_src1_channel;                                                                          // rsp_demux_018:src1_channel -> rsp_mux_001:sink18_channel
	wire          rsp_demux_018_src1_startofpacket;                                                                    // rsp_demux_018:src1_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire          rsp_demux_018_src1_endofpacket;                                                                      // rsp_demux_018:src1_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                                            // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [136:0] rsp_demux_019_src0_data;                                                                             // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                                            // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [36:0] rsp_demux_019_src0_channel;                                                                          // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                                    // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                                      // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_019_src1_valid;                                                                            // rsp_demux_019:src1_valid -> rsp_mux_001:sink19_valid
	wire  [136:0] rsp_demux_019_src1_data;                                                                             // rsp_demux_019:src1_data -> rsp_mux_001:sink19_data
	wire          rsp_demux_019_src1_ready;                                                                            // rsp_mux_001:sink19_ready -> rsp_demux_019:src1_ready
	wire   [36:0] rsp_demux_019_src1_channel;                                                                          // rsp_demux_019:src1_channel -> rsp_mux_001:sink19_channel
	wire          rsp_demux_019_src1_startofpacket;                                                                    // rsp_demux_019:src1_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                                                      // rsp_demux_019:src1_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire          rsp_demux_020_src0_valid;                                                                            // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [136:0] rsp_demux_020_src0_data;                                                                             // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                                            // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [36:0] rsp_demux_020_src0_channel;                                                                          // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                                    // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                                      // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_020_src1_valid;                                                                            // rsp_demux_020:src1_valid -> rsp_mux_001:sink20_valid
	wire  [136:0] rsp_demux_020_src1_data;                                                                             // rsp_demux_020:src1_data -> rsp_mux_001:sink20_data
	wire          rsp_demux_020_src1_ready;                                                                            // rsp_mux_001:sink20_ready -> rsp_demux_020:src1_ready
	wire   [36:0] rsp_demux_020_src1_channel;                                                                          // rsp_demux_020:src1_channel -> rsp_mux_001:sink20_channel
	wire          rsp_demux_020_src1_startofpacket;                                                                    // rsp_demux_020:src1_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                                                                      // rsp_demux_020:src1_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire          rsp_demux_021_src0_valid;                                                                            // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [136:0] rsp_demux_021_src0_data;                                                                             // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                                            // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [36:0] rsp_demux_021_src0_channel;                                                                          // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                                    // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                                      // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_021_src1_valid;                                                                            // rsp_demux_021:src1_valid -> rsp_mux_001:sink21_valid
	wire  [136:0] rsp_demux_021_src1_data;                                                                             // rsp_demux_021:src1_data -> rsp_mux_001:sink21_data
	wire          rsp_demux_021_src1_ready;                                                                            // rsp_mux_001:sink21_ready -> rsp_demux_021:src1_ready
	wire   [36:0] rsp_demux_021_src1_channel;                                                                          // rsp_demux_021:src1_channel -> rsp_mux_001:sink21_channel
	wire          rsp_demux_021_src1_startofpacket;                                                                    // rsp_demux_021:src1_startofpacket -> rsp_mux_001:sink21_startofpacket
	wire          rsp_demux_021_src1_endofpacket;                                                                      // rsp_demux_021:src1_endofpacket -> rsp_mux_001:sink21_endofpacket
	wire          rsp_demux_022_src0_valid;                                                                            // rsp_demux_022:src0_valid -> rsp_mux_002:sink18_valid
	wire  [136:0] rsp_demux_022_src0_data;                                                                             // rsp_demux_022:src0_data -> rsp_mux_002:sink18_data
	wire          rsp_demux_022_src0_ready;                                                                            // rsp_mux_002:sink18_ready -> rsp_demux_022:src0_ready
	wire   [36:0] rsp_demux_022_src0_channel;                                                                          // rsp_demux_022:src0_channel -> rsp_mux_002:sink18_channel
	wire          rsp_demux_022_src0_startofpacket;                                                                    // rsp_demux_022:src0_startofpacket -> rsp_mux_002:sink18_startofpacket
	wire          rsp_demux_022_src0_endofpacket;                                                                      // rsp_demux_022:src0_endofpacket -> rsp_mux_002:sink18_endofpacket
	wire          rsp_demux_022_src1_valid;                                                                            // rsp_demux_022:src1_valid -> rsp_mux_004:sink18_valid
	wire  [136:0] rsp_demux_022_src1_data;                                                                             // rsp_demux_022:src1_data -> rsp_mux_004:sink18_data
	wire          rsp_demux_022_src1_ready;                                                                            // rsp_mux_004:sink18_ready -> rsp_demux_022:src1_ready
	wire   [36:0] rsp_demux_022_src1_channel;                                                                          // rsp_demux_022:src1_channel -> rsp_mux_004:sink18_channel
	wire          rsp_demux_022_src1_startofpacket;                                                                    // rsp_demux_022:src1_startofpacket -> rsp_mux_004:sink18_startofpacket
	wire          rsp_demux_022_src1_endofpacket;                                                                      // rsp_demux_022:src1_endofpacket -> rsp_mux_004:sink18_endofpacket
	wire          rsp_demux_024_src0_valid;                                                                            // rsp_demux_024:src0_valid -> rsp_mux_002:sink20_valid
	wire  [136:0] rsp_demux_024_src0_data;                                                                             // rsp_demux_024:src0_data -> rsp_mux_002:sink20_data
	wire          rsp_demux_024_src0_ready;                                                                            // rsp_mux_002:sink20_ready -> rsp_demux_024:src0_ready
	wire   [36:0] rsp_demux_024_src0_channel;                                                                          // rsp_demux_024:src0_channel -> rsp_mux_002:sink20_channel
	wire          rsp_demux_024_src0_startofpacket;                                                                    // rsp_demux_024:src0_startofpacket -> rsp_mux_002:sink20_startofpacket
	wire          rsp_demux_024_src0_endofpacket;                                                                      // rsp_demux_024:src0_endofpacket -> rsp_mux_002:sink20_endofpacket
	wire          rsp_demux_024_src1_valid;                                                                            // rsp_demux_024:src1_valid -> rsp_mux_003:sink17_valid
	wire  [136:0] rsp_demux_024_src1_data;                                                                             // rsp_demux_024:src1_data -> rsp_mux_003:sink17_data
	wire          rsp_demux_024_src1_ready;                                                                            // rsp_mux_003:sink17_ready -> rsp_demux_024:src1_ready
	wire   [36:0] rsp_demux_024_src1_channel;                                                                          // rsp_demux_024:src1_channel -> rsp_mux_003:sink17_channel
	wire          rsp_demux_024_src1_startofpacket;                                                                    // rsp_demux_024:src1_startofpacket -> rsp_mux_003:sink17_startofpacket
	wire          rsp_demux_024_src1_endofpacket;                                                                      // rsp_demux_024:src1_endofpacket -> rsp_mux_003:sink17_endofpacket
	wire          rsp_demux_024_src2_valid;                                                                            // rsp_demux_024:src2_valid -> rsp_mux_004:sink20_valid
	wire  [136:0] rsp_demux_024_src2_data;                                                                             // rsp_demux_024:src2_data -> rsp_mux_004:sink20_data
	wire          rsp_demux_024_src2_ready;                                                                            // rsp_mux_004:sink20_ready -> rsp_demux_024:src2_ready
	wire   [36:0] rsp_demux_024_src2_channel;                                                                          // rsp_demux_024:src2_channel -> rsp_mux_004:sink20_channel
	wire          rsp_demux_024_src2_startofpacket;                                                                    // rsp_demux_024:src2_startofpacket -> rsp_mux_004:sink20_startofpacket
	wire          rsp_demux_024_src2_endofpacket;                                                                      // rsp_demux_024:src2_endofpacket -> rsp_mux_004:sink20_endofpacket
	wire          rsp_demux_024_src3_valid;                                                                            // rsp_demux_024:src3_valid -> rsp_mux_012:sink0_valid
	wire  [136:0] rsp_demux_024_src3_data;                                                                             // rsp_demux_024:src3_data -> rsp_mux_012:sink0_data
	wire          rsp_demux_024_src3_ready;                                                                            // rsp_mux_012:sink0_ready -> rsp_demux_024:src3_ready
	wire   [36:0] rsp_demux_024_src3_channel;                                                                          // rsp_demux_024:src3_channel -> rsp_mux_012:sink0_channel
	wire          rsp_demux_024_src3_startofpacket;                                                                    // rsp_demux_024:src3_startofpacket -> rsp_mux_012:sink0_startofpacket
	wire          rsp_demux_024_src3_endofpacket;                                                                      // rsp_demux_024:src3_endofpacket -> rsp_mux_012:sink0_endofpacket
	wire          rsp_demux_025_src8_valid;                                                                            // rsp_demux_025:src8_valid -> rsp_mux_010:sink0_valid
	wire  [118:0] rsp_demux_025_src8_data;                                                                             // rsp_demux_025:src8_data -> rsp_mux_010:sink0_data
	wire          rsp_demux_025_src8_ready;                                                                            // rsp_mux_010:sink0_ready -> rsp_demux_025:src8_ready
	wire   [36:0] rsp_demux_025_src8_channel;                                                                          // rsp_demux_025:src8_channel -> rsp_mux_010:sink0_channel
	wire          rsp_demux_025_src8_startofpacket;                                                                    // rsp_demux_025:src8_startofpacket -> rsp_mux_010:sink0_startofpacket
	wire          rsp_demux_025_src8_endofpacket;                                                                      // rsp_demux_025:src8_endofpacket -> rsp_mux_010:sink0_endofpacket
	wire          rsp_demux_026_src0_valid;                                                                            // rsp_demux_026:src0_valid -> rsp_mux_002:sink22_valid
	wire  [136:0] rsp_demux_026_src0_data;                                                                             // rsp_demux_026:src0_data -> rsp_mux_002:sink22_data
	wire          rsp_demux_026_src0_ready;                                                                            // rsp_mux_002:sink22_ready -> rsp_demux_026:src0_ready
	wire   [36:0] rsp_demux_026_src0_channel;                                                                          // rsp_demux_026:src0_channel -> rsp_mux_002:sink22_channel
	wire          rsp_demux_026_src0_startofpacket;                                                                    // rsp_demux_026:src0_startofpacket -> rsp_mux_002:sink22_startofpacket
	wire          rsp_demux_026_src0_endofpacket;                                                                      // rsp_demux_026:src0_endofpacket -> rsp_mux_002:sink22_endofpacket
	wire          rsp_demux_026_src1_valid;                                                                            // rsp_demux_026:src1_valid -> rsp_mux_003:sink19_valid
	wire  [136:0] rsp_demux_026_src1_data;                                                                             // rsp_demux_026:src1_data -> rsp_mux_003:sink19_data
	wire          rsp_demux_026_src1_ready;                                                                            // rsp_mux_003:sink19_ready -> rsp_demux_026:src1_ready
	wire   [36:0] rsp_demux_026_src1_channel;                                                                          // rsp_demux_026:src1_channel -> rsp_mux_003:sink19_channel
	wire          rsp_demux_026_src1_startofpacket;                                                                    // rsp_demux_026:src1_startofpacket -> rsp_mux_003:sink19_startofpacket
	wire          rsp_demux_026_src1_endofpacket;                                                                      // rsp_demux_026:src1_endofpacket -> rsp_mux_003:sink19_endofpacket
	wire          rsp_demux_026_src2_valid;                                                                            // rsp_demux_026:src2_valid -> rsp_mux_004:sink22_valid
	wire  [136:0] rsp_demux_026_src2_data;                                                                             // rsp_demux_026:src2_data -> rsp_mux_004:sink22_data
	wire          rsp_demux_026_src2_ready;                                                                            // rsp_mux_004:sink22_ready -> rsp_demux_026:src2_ready
	wire   [36:0] rsp_demux_026_src2_channel;                                                                          // rsp_demux_026:src2_channel -> rsp_mux_004:sink22_channel
	wire          rsp_demux_026_src2_startofpacket;                                                                    // rsp_demux_026:src2_startofpacket -> rsp_mux_004:sink22_startofpacket
	wire          rsp_demux_026_src2_endofpacket;                                                                      // rsp_demux_026:src2_endofpacket -> rsp_mux_004:sink22_endofpacket
	wire          rsp_demux_027_src0_valid;                                                                            // rsp_demux_027:src0_valid -> rsp_mux_002:sink23_valid
	wire  [136:0] rsp_demux_027_src0_data;                                                                             // rsp_demux_027:src0_data -> rsp_mux_002:sink23_data
	wire          rsp_demux_027_src0_ready;                                                                            // rsp_mux_002:sink23_ready -> rsp_demux_027:src0_ready
	wire   [36:0] rsp_demux_027_src0_channel;                                                                          // rsp_demux_027:src0_channel -> rsp_mux_002:sink23_channel
	wire          rsp_demux_027_src0_startofpacket;                                                                    // rsp_demux_027:src0_startofpacket -> rsp_mux_002:sink23_startofpacket
	wire          rsp_demux_027_src0_endofpacket;                                                                      // rsp_demux_027:src0_endofpacket -> rsp_mux_002:sink23_endofpacket
	wire          rsp_demux_027_src1_valid;                                                                            // rsp_demux_027:src1_valid -> rsp_mux_003:sink20_valid
	wire  [136:0] rsp_demux_027_src1_data;                                                                             // rsp_demux_027:src1_data -> rsp_mux_003:sink20_data
	wire          rsp_demux_027_src1_ready;                                                                            // rsp_mux_003:sink20_ready -> rsp_demux_027:src1_ready
	wire   [36:0] rsp_demux_027_src1_channel;                                                                          // rsp_demux_027:src1_channel -> rsp_mux_003:sink20_channel
	wire          rsp_demux_027_src1_startofpacket;                                                                    // rsp_demux_027:src1_startofpacket -> rsp_mux_003:sink20_startofpacket
	wire          rsp_demux_027_src1_endofpacket;                                                                      // rsp_demux_027:src1_endofpacket -> rsp_mux_003:sink20_endofpacket
	wire          rsp_demux_027_src2_valid;                                                                            // rsp_demux_027:src2_valid -> rsp_mux_004:sink23_valid
	wire  [136:0] rsp_demux_027_src2_data;                                                                             // rsp_demux_027:src2_data -> rsp_mux_004:sink23_data
	wire          rsp_demux_027_src2_ready;                                                                            // rsp_mux_004:sink23_ready -> rsp_demux_027:src2_ready
	wire   [36:0] rsp_demux_027_src2_channel;                                                                          // rsp_demux_027:src2_channel -> rsp_mux_004:sink23_channel
	wire          rsp_demux_027_src2_startofpacket;                                                                    // rsp_demux_027:src2_startofpacket -> rsp_mux_004:sink23_startofpacket
	wire          rsp_demux_027_src2_endofpacket;                                                                      // rsp_demux_027:src2_endofpacket -> rsp_mux_004:sink23_endofpacket
	wire          rsp_demux_027_src3_valid;                                                                            // rsp_demux_027:src3_valid -> rsp_mux_011:sink0_valid
	wire  [136:0] rsp_demux_027_src3_data;                                                                             // rsp_demux_027:src3_data -> rsp_mux_011:sink0_data
	wire          rsp_demux_027_src3_ready;                                                                            // rsp_mux_011:sink0_ready -> rsp_demux_027:src3_ready
	wire   [36:0] rsp_demux_027_src3_channel;                                                                          // rsp_demux_027:src3_channel -> rsp_mux_011:sink0_channel
	wire          rsp_demux_027_src3_startofpacket;                                                                    // rsp_demux_027:src3_startofpacket -> rsp_mux_011:sink0_startofpacket
	wire          rsp_demux_027_src3_endofpacket;                                                                      // rsp_demux_027:src3_endofpacket -> rsp_mux_011:sink0_endofpacket
	wire          rsp_demux_028_src0_valid;                                                                            // rsp_demux_028:src0_valid -> rsp_mux_002:sink24_valid
	wire  [136:0] rsp_demux_028_src0_data;                                                                             // rsp_demux_028:src0_data -> rsp_mux_002:sink24_data
	wire          rsp_demux_028_src0_ready;                                                                            // rsp_mux_002:sink24_ready -> rsp_demux_028:src0_ready
	wire   [36:0] rsp_demux_028_src0_channel;                                                                          // rsp_demux_028:src0_channel -> rsp_mux_002:sink24_channel
	wire          rsp_demux_028_src0_startofpacket;                                                                    // rsp_demux_028:src0_startofpacket -> rsp_mux_002:sink24_startofpacket
	wire          rsp_demux_028_src0_endofpacket;                                                                      // rsp_demux_028:src0_endofpacket -> rsp_mux_002:sink24_endofpacket
	wire          rsp_demux_028_src1_valid;                                                                            // rsp_demux_028:src1_valid -> rsp_mux_003:sink21_valid
	wire  [136:0] rsp_demux_028_src1_data;                                                                             // rsp_demux_028:src1_data -> rsp_mux_003:sink21_data
	wire          rsp_demux_028_src1_ready;                                                                            // rsp_mux_003:sink21_ready -> rsp_demux_028:src1_ready
	wire   [36:0] rsp_demux_028_src1_channel;                                                                          // rsp_demux_028:src1_channel -> rsp_mux_003:sink21_channel
	wire          rsp_demux_028_src1_startofpacket;                                                                    // rsp_demux_028:src1_startofpacket -> rsp_mux_003:sink21_startofpacket
	wire          rsp_demux_028_src1_endofpacket;                                                                      // rsp_demux_028:src1_endofpacket -> rsp_mux_003:sink21_endofpacket
	wire          rsp_demux_028_src2_valid;                                                                            // rsp_demux_028:src2_valid -> rsp_mux_004:sink24_valid
	wire  [136:0] rsp_demux_028_src2_data;                                                                             // rsp_demux_028:src2_data -> rsp_mux_004:sink24_data
	wire          rsp_demux_028_src2_ready;                                                                            // rsp_mux_004:sink24_ready -> rsp_demux_028:src2_ready
	wire   [36:0] rsp_demux_028_src2_channel;                                                                          // rsp_demux_028:src2_channel -> rsp_mux_004:sink24_channel
	wire          rsp_demux_028_src2_startofpacket;                                                                    // rsp_demux_028:src2_startofpacket -> rsp_mux_004:sink24_startofpacket
	wire          rsp_demux_028_src2_endofpacket;                                                                      // rsp_demux_028:src2_endofpacket -> rsp_mux_004:sink24_endofpacket
	wire          rsp_demux_029_src0_valid;                                                                            // rsp_demux_029:src0_valid -> rsp_mux_002:sink25_valid
	wire  [136:0] rsp_demux_029_src0_data;                                                                             // rsp_demux_029:src0_data -> rsp_mux_002:sink25_data
	wire          rsp_demux_029_src0_ready;                                                                            // rsp_mux_002:sink25_ready -> rsp_demux_029:src0_ready
	wire   [36:0] rsp_demux_029_src0_channel;                                                                          // rsp_demux_029:src0_channel -> rsp_mux_002:sink25_channel
	wire          rsp_demux_029_src0_startofpacket;                                                                    // rsp_demux_029:src0_startofpacket -> rsp_mux_002:sink25_startofpacket
	wire          rsp_demux_029_src0_endofpacket;                                                                      // rsp_demux_029:src0_endofpacket -> rsp_mux_002:sink25_endofpacket
	wire          rsp_demux_029_src1_valid;                                                                            // rsp_demux_029:src1_valid -> rsp_mux_003:sink22_valid
	wire  [136:0] rsp_demux_029_src1_data;                                                                             // rsp_demux_029:src1_data -> rsp_mux_003:sink22_data
	wire          rsp_demux_029_src1_ready;                                                                            // rsp_mux_003:sink22_ready -> rsp_demux_029:src1_ready
	wire   [36:0] rsp_demux_029_src1_channel;                                                                          // rsp_demux_029:src1_channel -> rsp_mux_003:sink22_channel
	wire          rsp_demux_029_src1_startofpacket;                                                                    // rsp_demux_029:src1_startofpacket -> rsp_mux_003:sink22_startofpacket
	wire          rsp_demux_029_src1_endofpacket;                                                                      // rsp_demux_029:src1_endofpacket -> rsp_mux_003:sink22_endofpacket
	wire          rsp_demux_029_src2_valid;                                                                            // rsp_demux_029:src2_valid -> rsp_mux_004:sink25_valid
	wire  [136:0] rsp_demux_029_src2_data;                                                                             // rsp_demux_029:src2_data -> rsp_mux_004:sink25_data
	wire          rsp_demux_029_src2_ready;                                                                            // rsp_mux_004:sink25_ready -> rsp_demux_029:src2_ready
	wire   [36:0] rsp_demux_029_src2_channel;                                                                          // rsp_demux_029:src2_channel -> rsp_mux_004:sink25_channel
	wire          rsp_demux_029_src2_startofpacket;                                                                    // rsp_demux_029:src2_startofpacket -> rsp_mux_004:sink25_startofpacket
	wire          rsp_demux_029_src2_endofpacket;                                                                      // rsp_demux_029:src2_endofpacket -> rsp_mux_004:sink25_endofpacket
	wire          rsp_demux_030_src0_valid;                                                                            // rsp_demux_030:src0_valid -> rsp_mux_002:sink26_valid
	wire  [136:0] rsp_demux_030_src0_data;                                                                             // rsp_demux_030:src0_data -> rsp_mux_002:sink26_data
	wire          rsp_demux_030_src0_ready;                                                                            // rsp_mux_002:sink26_ready -> rsp_demux_030:src0_ready
	wire   [36:0] rsp_demux_030_src0_channel;                                                                          // rsp_demux_030:src0_channel -> rsp_mux_002:sink26_channel
	wire          rsp_demux_030_src0_startofpacket;                                                                    // rsp_demux_030:src0_startofpacket -> rsp_mux_002:sink26_startofpacket
	wire          rsp_demux_030_src0_endofpacket;                                                                      // rsp_demux_030:src0_endofpacket -> rsp_mux_002:sink26_endofpacket
	wire          rsp_demux_030_src1_valid;                                                                            // rsp_demux_030:src1_valid -> rsp_mux_003:sink23_valid
	wire  [136:0] rsp_demux_030_src1_data;                                                                             // rsp_demux_030:src1_data -> rsp_mux_003:sink23_data
	wire          rsp_demux_030_src1_ready;                                                                            // rsp_mux_003:sink23_ready -> rsp_demux_030:src1_ready
	wire   [36:0] rsp_demux_030_src1_channel;                                                                          // rsp_demux_030:src1_channel -> rsp_mux_003:sink23_channel
	wire          rsp_demux_030_src1_startofpacket;                                                                    // rsp_demux_030:src1_startofpacket -> rsp_mux_003:sink23_startofpacket
	wire          rsp_demux_030_src1_endofpacket;                                                                      // rsp_demux_030:src1_endofpacket -> rsp_mux_003:sink23_endofpacket
	wire          rsp_demux_030_src2_valid;                                                                            // rsp_demux_030:src2_valid -> rsp_mux_004:sink26_valid
	wire  [136:0] rsp_demux_030_src2_data;                                                                             // rsp_demux_030:src2_data -> rsp_mux_004:sink26_data
	wire          rsp_demux_030_src2_ready;                                                                            // rsp_mux_004:sink26_ready -> rsp_demux_030:src2_ready
	wire   [36:0] rsp_demux_030_src2_channel;                                                                          // rsp_demux_030:src2_channel -> rsp_mux_004:sink26_channel
	wire          rsp_demux_030_src2_startofpacket;                                                                    // rsp_demux_030:src2_startofpacket -> rsp_mux_004:sink26_startofpacket
	wire          rsp_demux_030_src2_endofpacket;                                                                      // rsp_demux_030:src2_endofpacket -> rsp_mux_004:sink26_endofpacket
	wire          rsp_demux_031_src0_valid;                                                                            // rsp_demux_031:src0_valid -> rsp_mux_003:sink24_valid
	wire  [136:0] rsp_demux_031_src0_data;                                                                             // rsp_demux_031:src0_data -> rsp_mux_003:sink24_data
	wire          rsp_demux_031_src0_ready;                                                                            // rsp_mux_003:sink24_ready -> rsp_demux_031:src0_ready
	wire   [36:0] rsp_demux_031_src0_channel;                                                                          // rsp_demux_031:src0_channel -> rsp_mux_003:sink24_channel
	wire          rsp_demux_031_src0_startofpacket;                                                                    // rsp_demux_031:src0_startofpacket -> rsp_mux_003:sink24_startofpacket
	wire          rsp_demux_031_src0_endofpacket;                                                                      // rsp_demux_031:src0_endofpacket -> rsp_mux_003:sink24_endofpacket
	wire          rsp_demux_032_src0_valid;                                                                            // rsp_demux_032:src0_valid -> rsp_mux_003:sink25_valid
	wire  [136:0] rsp_demux_032_src0_data;                                                                             // rsp_demux_032:src0_data -> rsp_mux_003:sink25_data
	wire          rsp_demux_032_src0_ready;                                                                            // rsp_mux_003:sink25_ready -> rsp_demux_032:src0_ready
	wire   [36:0] rsp_demux_032_src0_channel;                                                                          // rsp_demux_032:src0_channel -> rsp_mux_003:sink25_channel
	wire          rsp_demux_032_src0_startofpacket;                                                                    // rsp_demux_032:src0_startofpacket -> rsp_mux_003:sink25_startofpacket
	wire          rsp_demux_032_src0_endofpacket;                                                                      // rsp_demux_032:src0_endofpacket -> rsp_mux_003:sink25_endofpacket
	wire          rsp_demux_032_src1_valid;                                                                            // rsp_demux_032:src1_valid -> rsp_mux_005:sink1_valid
	wire  [136:0] rsp_demux_032_src1_data;                                                                             // rsp_demux_032:src1_data -> rsp_mux_005:sink1_data
	wire          rsp_demux_032_src1_ready;                                                                            // rsp_mux_005:sink1_ready -> rsp_demux_032:src1_ready
	wire   [36:0] rsp_demux_032_src1_channel;                                                                          // rsp_demux_032:src1_channel -> rsp_mux_005:sink1_channel
	wire          rsp_demux_032_src1_startofpacket;                                                                    // rsp_demux_032:src1_startofpacket -> rsp_mux_005:sink1_startofpacket
	wire          rsp_demux_032_src1_endofpacket;                                                                      // rsp_demux_032:src1_endofpacket -> rsp_mux_005:sink1_endofpacket
	wire          rsp_demux_033_src0_valid;                                                                            // rsp_demux_033:src0_valid -> rsp_mux_003:sink26_valid
	wire  [136:0] rsp_demux_033_src0_data;                                                                             // rsp_demux_033:src0_data -> rsp_mux_003:sink26_data
	wire          rsp_demux_033_src0_ready;                                                                            // rsp_mux_003:sink26_ready -> rsp_demux_033:src0_ready
	wire   [36:0] rsp_demux_033_src0_channel;                                                                          // rsp_demux_033:src0_channel -> rsp_mux_003:sink26_channel
	wire          rsp_demux_033_src0_startofpacket;                                                                    // rsp_demux_033:src0_startofpacket -> rsp_mux_003:sink26_startofpacket
	wire          rsp_demux_033_src0_endofpacket;                                                                      // rsp_demux_033:src0_endofpacket -> rsp_mux_003:sink26_endofpacket
	wire          rsp_demux_034_src0_valid;                                                                            // rsp_demux_034:src0_valid -> rsp_mux_003:sink27_valid
	wire  [136:0] rsp_demux_034_src0_data;                                                                             // rsp_demux_034:src0_data -> rsp_mux_003:sink27_data
	wire          rsp_demux_034_src0_ready;                                                                            // rsp_mux_003:sink27_ready -> rsp_demux_034:src0_ready
	wire   [36:0] rsp_demux_034_src0_channel;                                                                          // rsp_demux_034:src0_channel -> rsp_mux_003:sink27_channel
	wire          rsp_demux_034_src0_startofpacket;                                                                    // rsp_demux_034:src0_startofpacket -> rsp_mux_003:sink27_startofpacket
	wire          rsp_demux_034_src0_endofpacket;                                                                      // rsp_demux_034:src0_endofpacket -> rsp_mux_003:sink27_endofpacket
	wire          rsp_demux_035_src0_valid;                                                                            // rsp_demux_035:src0_valid -> rsp_mux_005:sink2_valid
	wire  [136:0] rsp_demux_035_src0_data;                                                                             // rsp_demux_035:src0_data -> rsp_mux_005:sink2_data
	wire          rsp_demux_035_src0_ready;                                                                            // rsp_mux_005:sink2_ready -> rsp_demux_035:src0_ready
	wire   [36:0] rsp_demux_035_src0_channel;                                                                          // rsp_demux_035:src0_channel -> rsp_mux_005:sink2_channel
	wire          rsp_demux_035_src0_startofpacket;                                                                    // rsp_demux_035:src0_startofpacket -> rsp_mux_005:sink2_startofpacket
	wire          rsp_demux_035_src0_endofpacket;                                                                      // rsp_demux_035:src0_endofpacket -> rsp_mux_005:sink2_endofpacket
	wire          rsp_demux_035_src1_valid;                                                                            // rsp_demux_035:src1_valid -> rsp_mux_006:sink1_valid
	wire  [136:0] rsp_demux_035_src1_data;                                                                             // rsp_demux_035:src1_data -> rsp_mux_006:sink1_data
	wire          rsp_demux_035_src1_ready;                                                                            // rsp_mux_006:sink1_ready -> rsp_demux_035:src1_ready
	wire   [36:0] rsp_demux_035_src1_channel;                                                                          // rsp_demux_035:src1_channel -> rsp_mux_006:sink1_channel
	wire          rsp_demux_035_src1_startofpacket;                                                                    // rsp_demux_035:src1_startofpacket -> rsp_mux_006:sink1_startofpacket
	wire          rsp_demux_035_src1_endofpacket;                                                                      // rsp_demux_035:src1_endofpacket -> rsp_mux_006:sink1_endofpacket
	wire          rsp_demux_036_src0_valid;                                                                            // rsp_demux_036:src0_valid -> rsp_mux_002:sink27_valid
	wire  [136:0] rsp_demux_036_src0_data;                                                                             // rsp_demux_036:src0_data -> rsp_mux_002:sink27_data
	wire          rsp_demux_036_src0_ready;                                                                            // rsp_mux_002:sink27_ready -> rsp_demux_036:src0_ready
	wire   [36:0] rsp_demux_036_src0_channel;                                                                          // rsp_demux_036:src0_channel -> rsp_mux_002:sink27_channel
	wire          rsp_demux_036_src0_startofpacket;                                                                    // rsp_demux_036:src0_startofpacket -> rsp_mux_002:sink27_startofpacket
	wire          rsp_demux_036_src0_endofpacket;                                                                      // rsp_demux_036:src0_endofpacket -> rsp_mux_002:sink27_endofpacket
	wire          rsp_demux_036_src1_valid;                                                                            // rsp_demux_036:src1_valid -> rsp_mux_006:sink2_valid
	wire  [136:0] rsp_demux_036_src1_data;                                                                             // rsp_demux_036:src1_data -> rsp_mux_006:sink2_data
	wire          rsp_demux_036_src1_ready;                                                                            // rsp_mux_006:sink2_ready -> rsp_demux_036:src1_ready
	wire   [36:0] rsp_demux_036_src1_channel;                                                                          // rsp_demux_036:src1_channel -> rsp_mux_006:sink2_channel
	wire          rsp_demux_036_src1_startofpacket;                                                                    // rsp_demux_036:src1_startofpacket -> rsp_mux_006:sink2_startofpacket
	wire          rsp_demux_036_src1_endofpacket;                                                                      // rsp_demux_036:src1_endofpacket -> rsp_mux_006:sink2_endofpacket
	wire          cmd_demux_002_src19_valid;                                                                           // cmd_demux_002:src19_valid -> Nios2_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_002_src19_data;                                                                            // cmd_demux_002:src19_data -> Nios2_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_data
	wire          cmd_demux_002_src19_ready;                                                                           // Nios2_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_ready -> cmd_demux_002:src19_ready
	wire   [36:0] cmd_demux_002_src19_channel;                                                                         // cmd_demux_002:src19_channel -> Nios2_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src19_startofpacket;                                                                   // cmd_demux_002:src19_startofpacket -> Nios2_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src19_endofpacket;                                                                     // cmd_demux_002:src19_endofpacket -> Nios2_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_endofpacket
	wire          nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid;                    // Nios2_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_valid -> cmd_mux_023:sink0_valid
	wire  [109:0] nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data;                     // Nios2_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_data -> cmd_mux_023:sink0_data
	wire          nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready;                    // cmd_mux_023:sink0_ready -> Nios2_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_ready
	wire   [36:0] nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel;                  // Nios2_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_channel -> cmd_mux_023:sink0_channel
	wire          nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket;            // Nios2_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire          nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket;              // Nios2_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire          cmd_demux_002_src21_valid;                                                                           // cmd_demux_002:src21_valid -> Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_002_src21_data;                                                                            // cmd_demux_002:src21_data -> Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_002_src21_ready;                                                                           // Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_002:src21_ready
	wire   [36:0] cmd_demux_002_src21_channel;                                                                         // cmd_demux_002:src21_channel -> Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_002_src21_startofpacket;                                                                   // cmd_demux_002:src21_startofpacket -> Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_002_src21_endofpacket;                                                                     // cmd_demux_002:src21_endofpacket -> Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          nios2_data_master_to_sdram_s1_cmd_width_adapter_src_valid;                                           // Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_025:sink0_valid
	wire  [118:0] nios2_data_master_to_sdram_s1_cmd_width_adapter_src_data;                                            // Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_025:sink0_data
	wire          nios2_data_master_to_sdram_s1_cmd_width_adapter_src_ready;                                           // cmd_mux_025:sink0_ready -> Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [36:0] nios2_data_master_to_sdram_s1_cmd_width_adapter_src_channel;                                         // Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_025:sink0_channel
	wire          nios2_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                                   // Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_025:sink0_startofpacket
	wire          nios2_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                                     // Nios2_data_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_025:sink0_endofpacket
	wire          cmd_demux_003_src16_valid;                                                                           // cmd_demux_003:src16_valid -> Nios2_2nd_Core_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_003_src16_data;                                                                            // cmd_demux_003:src16_data -> Nios2_2nd_Core_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_data
	wire          cmd_demux_003_src16_ready;                                                                           // Nios2_2nd_Core_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_ready -> cmd_demux_003:src16_ready
	wire   [36:0] cmd_demux_003_src16_channel;                                                                         // cmd_demux_003:src16_channel -> Nios2_2nd_Core_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src16_startofpacket;                                                                   // cmd_demux_003:src16_startofpacket -> Nios2_2nd_Core_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src16_endofpacket;                                                                     // cmd_demux_003:src16_endofpacket -> Nios2_2nd_Core_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_endofpacket
	wire          nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid;           // Nios2_2nd_Core_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_valid -> cmd_mux_023:sink1_valid
	wire  [109:0] nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data;            // Nios2_2nd_Core_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_data -> cmd_mux_023:sink1_data
	wire          nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready;           // cmd_mux_023:sink1_ready -> Nios2_2nd_Core_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_ready
	wire   [36:0] nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel;         // Nios2_2nd_Core_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_channel -> cmd_mux_023:sink1_channel
	wire          nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket;   // Nios2_2nd_Core_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_023:sink1_startofpacket
	wire          nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket;     // Nios2_2nd_Core_data_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_023:sink1_endofpacket
	wire          cmd_demux_003_src18_valid;                                                                           // cmd_demux_003:src18_valid -> Nios2_2nd_Core_data_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_003_src18_data;                                                                            // cmd_demux_003:src18_data -> Nios2_2nd_Core_data_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_003_src18_ready;                                                                           // Nios2_2nd_Core_data_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_003:src18_ready
	wire   [36:0] cmd_demux_003_src18_channel;                                                                         // cmd_demux_003:src18_channel -> Nios2_2nd_Core_data_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src18_startofpacket;                                                                   // cmd_demux_003:src18_startofpacket -> Nios2_2nd_Core_data_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src18_endofpacket;                                                                     // cmd_demux_003:src18_endofpacket -> Nios2_2nd_Core_data_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_valid;                                  // Nios2_2nd_Core_data_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_025:sink1_valid
	wire  [118:0] nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_data;                                   // Nios2_2nd_Core_data_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_025:sink1_data
	wire          nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_ready;                                  // cmd_mux_025:sink1_ready -> Nios2_2nd_Core_data_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [36:0] nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_channel;                                // Nios2_2nd_Core_data_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_025:sink1_channel
	wire          nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                          // Nios2_2nd_Core_data_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_025:sink1_startofpacket
	wire          nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                            // Nios2_2nd_Core_data_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_025:sink1_endofpacket
	wire          cmd_demux_004_src19_valid;                                                                           // cmd_demux_004:src19_valid -> JTAG_to_FPGA_Bridge_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_004_src19_data;                                                                            // cmd_demux_004:src19_data -> JTAG_to_FPGA_Bridge_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_data
	wire          cmd_demux_004_src19_ready;                                                                           // JTAG_to_FPGA_Bridge_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_ready -> cmd_demux_004:src19_ready
	wire   [36:0] cmd_demux_004_src19_channel;                                                                         // cmd_demux_004:src19_channel -> JTAG_to_FPGA_Bridge_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src19_startofpacket;                                                                   // cmd_demux_004:src19_startofpacket -> JTAG_to_FPGA_Bridge_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_004_src19_endofpacket;                                                                     // cmd_demux_004:src19_endofpacket -> JTAG_to_FPGA_Bridge_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_endofpacket
	wire          jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid;           // JTAG_to_FPGA_Bridge_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_valid -> cmd_mux_023:sink2_valid
	wire  [109:0] jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data;            // JTAG_to_FPGA_Bridge_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_data -> cmd_mux_023:sink2_data
	wire          jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready;           // cmd_mux_023:sink2_ready -> JTAG_to_FPGA_Bridge_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_ready
	wire   [36:0] jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel;         // JTAG_to_FPGA_Bridge_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_channel -> cmd_mux_023:sink2_channel
	wire          jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket;   // JTAG_to_FPGA_Bridge_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_023:sink2_startofpacket
	wire          jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket;     // JTAG_to_FPGA_Bridge_master_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_023:sink2_endofpacket
	wire          cmd_demux_004_src21_valid;                                                                           // cmd_demux_004:src21_valid -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_004_src21_data;                                                                            // cmd_demux_004:src21_data -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_004_src21_ready;                                                                           // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_004:src21_ready
	wire   [36:0] cmd_demux_004_src21_channel;                                                                         // cmd_demux_004:src21_channel -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src21_startofpacket;                                                                   // cmd_demux_004:src21_startofpacket -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_004_src21_endofpacket;                                                                     // cmd_demux_004:src21_endofpacket -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_valid;                                  // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_025:sink2_valid
	wire  [118:0] jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_data;                                   // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_025:sink2_data
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_ready;                                  // cmd_mux_025:sink2_ready -> JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [36:0] jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_channel;                                // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_025:sink2_channel
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                          // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_025:sink2_startofpacket
	wire          jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                            // JTAG_to_FPGA_Bridge_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_025:sink2_endofpacket
	wire          cmd_demux_005_src0_valid;                                                                            // cmd_demux_005:src0_valid -> Nios2_2nd_Core_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_005_src0_data;                                                                             // cmd_demux_005:src0_data -> Nios2_2nd_Core_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_005_src0_ready;                                                                            // Nios2_2nd_Core_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_005:src0_ready
	wire   [36:0] cmd_demux_005_src0_channel;                                                                          // cmd_demux_005:src0_channel -> Nios2_2nd_Core_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_005_src0_startofpacket;                                                                    // cmd_demux_005:src0_startofpacket -> Nios2_2nd_Core_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                                      // cmd_demux_005:src0_endofpacket -> Nios2_2nd_Core_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid;                           // Nios2_2nd_Core_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_025:sink3_valid
	wire  [118:0] nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_data;                            // Nios2_2nd_Core_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_025:sink3_data
	wire          nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready;                           // cmd_mux_025:sink3_ready -> Nios2_2nd_Core_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [36:0] nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel;                         // Nios2_2nd_Core_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_025:sink3_channel
	wire          nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                   // Nios2_2nd_Core_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_025:sink3_startofpacket
	wire          nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                     // Nios2_2nd_Core_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_025:sink3_endofpacket
	wire          cmd_demux_006_src0_valid;                                                                            // cmd_demux_006:src0_valid -> Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [136:0] cmd_demux_006_src0_data;                                                                             // cmd_demux_006:src0_data -> Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_006_src0_ready;                                                                            // Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_006:src0_ready
	wire   [36:0] cmd_demux_006_src0_channel;                                                                          // cmd_demux_006:src0_channel -> Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_006_src0_startofpacket;                                                                    // cmd_demux_006:src0_startofpacket -> Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                                      // cmd_demux_006:src0_endofpacket -> Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid;                                    // Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_025:sink4_valid
	wire  [118:0] nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_data;                                     // Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_025:sink4_data
	wire          nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready;                                    // cmd_mux_025:sink4_ready -> Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [36:0] nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel;                                  // Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_025:sink4_channel
	wire          nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                            // Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_025:sink4_startofpacket
	wire          nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                              // Nios2_instruction_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_025:sink4_endofpacket
	wire          cmd_demux_007_src0_valid;                                                                            // cmd_demux_007:src0_valid -> VGA_Subsystem_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [109:0] cmd_demux_007_src0_data;                                                                             // cmd_demux_007:src0_data -> VGA_Subsystem_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_007_src0_ready;                                                                            // VGA_Subsystem_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_007:src0_ready
	wire   [36:0] cmd_demux_007_src0_channel;                                                                          // cmd_demux_007:src0_channel -> VGA_Subsystem_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src0_startofpacket;                                                                    // cmd_demux_007:src0_startofpacket -> VGA_Subsystem_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                                      // cmd_demux_007:src0_endofpacket -> VGA_Subsystem_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_valid;                              // VGA_Subsystem_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_025:sink5_valid
	wire  [118:0] vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_data;                               // VGA_Subsystem_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_025:sink5_data
	wire          vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_ready;                              // cmd_mux_025:sink5_ready -> VGA_Subsystem_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [36:0] vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_channel;                            // VGA_Subsystem_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_025:sink5_channel
	wire          vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_startofpacket;                      // VGA_Subsystem_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_025:sink5_startofpacket
	wire          vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_endofpacket;                        // VGA_Subsystem_pixel_dma_master_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_025:sink5_endofpacket
	wire          cmd_demux_007_src1_valid;                                                                            // cmd_demux_007:src1_valid -> VGA_Subsystem_pixel_dma_master_to_Onchip_SRAM_s2_cmd_width_adapter:in_valid
	wire  [109:0] cmd_demux_007_src1_data;                                                                             // cmd_demux_007:src1_data -> VGA_Subsystem_pixel_dma_master_to_Onchip_SRAM_s2_cmd_width_adapter:in_data
	wire          cmd_demux_007_src1_ready;                                                                            // VGA_Subsystem_pixel_dma_master_to_Onchip_SRAM_s2_cmd_width_adapter:in_ready -> cmd_demux_007:src1_ready
	wire   [36:0] cmd_demux_007_src1_channel;                                                                          // cmd_demux_007:src1_channel -> VGA_Subsystem_pixel_dma_master_to_Onchip_SRAM_s2_cmd_width_adapter:in_channel
	wire          cmd_demux_007_src1_startofpacket;                                                                    // cmd_demux_007:src1_startofpacket -> VGA_Subsystem_pixel_dma_master_to_Onchip_SRAM_s2_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_007_src1_endofpacket;                                                                      // cmd_demux_007:src1_endofpacket -> VGA_Subsystem_pixel_dma_master_to_Onchip_SRAM_s2_cmd_width_adapter:in_endofpacket
	wire          vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_valid;                        // VGA_Subsystem_pixel_dma_master_to_Onchip_SRAM_s2_cmd_width_adapter:out_valid -> cmd_mux_035:sink2_valid
	wire  [136:0] vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_data;                         // VGA_Subsystem_pixel_dma_master_to_Onchip_SRAM_s2_cmd_width_adapter:out_data -> cmd_mux_035:sink2_data
	wire          vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_ready;                        // cmd_mux_035:sink2_ready -> VGA_Subsystem_pixel_dma_master_to_Onchip_SRAM_s2_cmd_width_adapter:out_ready
	wire   [36:0] vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_channel;                      // VGA_Subsystem_pixel_dma_master_to_Onchip_SRAM_s2_cmd_width_adapter:out_channel -> cmd_mux_035:sink2_channel
	wire          vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_startofpacket;                // VGA_Subsystem_pixel_dma_master_to_Onchip_SRAM_s2_cmd_width_adapter:out_startofpacket -> cmd_mux_035:sink2_startofpacket
	wire          vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_endofpacket;                  // VGA_Subsystem_pixel_dma_master_to_Onchip_SRAM_s2_cmd_width_adapter:out_endofpacket -> cmd_mux_035:sink2_endofpacket
	wire          cmd_demux_008_src0_valid;                                                                            // cmd_demux_008:src0_valid -> ARM_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_008_src0_data;                                                                             // cmd_demux_008:src0_data -> ARM_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_data
	wire          cmd_demux_008_src0_ready;                                                                            // ARM_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_ready -> cmd_demux_008:src0_ready
	wire   [36:0] cmd_demux_008_src0_channel;                                                                          // cmd_demux_008:src0_channel -> ARM_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_008_src0_startofpacket;                                                                    // cmd_demux_008:src0_startofpacket -> ARM_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_008_src0_endofpacket;                                                                      // cmd_demux_008:src0_endofpacket -> ARM_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid;         // ARM_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_valid -> cmd_mux_023:sink3_valid
	wire  [109:0] arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data;          // ARM_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_data -> cmd_mux_023:sink3_data
	wire          arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready;         // cmd_mux_023:sink3_ready -> ARM_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_ready
	wire   [36:0] arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel;       // ARM_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_channel -> cmd_mux_023:sink3_channel
	wire          arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket; // ARM_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_023:sink3_startofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket;   // ARM_A9_HPS_h2f_axi_master_wr_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_023:sink3_endofpacket
	wire          cmd_demux_008_src1_valid;                                                                            // cmd_demux_008:src1_valid -> ARM_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_008_src1_data;                                                                             // cmd_demux_008:src1_data -> ARM_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_008_src1_ready;                                                                            // ARM_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_008:src1_ready
	wire   [36:0] cmd_demux_008_src1_channel;                                                                          // cmd_demux_008:src1_channel -> ARM_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_008_src1_startofpacket;                                                                    // cmd_demux_008:src1_startofpacket -> ARM_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_008_src1_endofpacket;                                                                      // cmd_demux_008:src1_endofpacket -> ARM_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid;                                // ARM_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_025:sink6_valid
	wire  [118:0] arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data;                                 // ARM_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_025:sink6_data
	wire          arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready;                                // cmd_mux_025:sink6_ready -> ARM_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [36:0] arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel;                              // ARM_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_025:sink6_channel
	wire          arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket;                        // ARM_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_025:sink6_startofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket;                          // ARM_A9_HPS_h2f_axi_master_wr_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_025:sink6_endofpacket
	wire          cmd_demux_008_src2_valid;                                                                            // cmd_demux_008:src2_valid -> ARM_A9_HPS_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_008_src2_data;                                                                             // cmd_demux_008:src2_data -> ARM_A9_HPS_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_008_src2_ready;                                                                            // ARM_A9_HPS_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_008:src2_ready
	wire   [36:0] cmd_demux_008_src2_channel;                                                                          // cmd_demux_008:src2_channel -> ARM_A9_HPS_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_008_src2_startofpacket;                                                                    // cmd_demux_008:src2_startofpacket -> ARM_A9_HPS_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_008_src2_endofpacket;                                                                      // cmd_demux_008:src2_endofpacket -> ARM_A9_HPS_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_valid;                          // ARM_A9_HPS_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_026:sink3_valid
	wire  [136:0] arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_data;                           // ARM_A9_HPS_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:out_data -> cmd_mux_026:sink3_data
	wire          arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_ready;                          // cmd_mux_026:sink3_ready -> ARM_A9_HPS_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:out_ready
	wire   [36:0] arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_channel;                        // ARM_A9_HPS_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_026:sink3_channel
	wire          arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket;                  // ARM_A9_HPS_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_026:sink3_startofpacket
	wire          arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket;                    // ARM_A9_HPS_h2f_axi_master_wr_to_Onchip_SRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_026:sink3_endofpacket
	wire          cmd_demux_009_src0_valid;                                                                            // cmd_demux_009:src0_valid -> ARM_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_009_src0_data;                                                                             // cmd_demux_009:src0_data -> ARM_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_data
	wire          cmd_demux_009_src0_ready;                                                                            // ARM_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_ready -> cmd_demux_009:src0_ready
	wire   [36:0] cmd_demux_009_src0_channel;                                                                          // cmd_demux_009:src0_channel -> ARM_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_009_src0_startofpacket;                                                                    // cmd_demux_009:src0_startofpacket -> ARM_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_009_src0_endofpacket;                                                                      // cmd_demux_009:src0_endofpacket -> ARM_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid;         // ARM_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_valid -> cmd_mux_023:sink4_valid
	wire  [109:0] arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data;          // ARM_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_data -> cmd_mux_023:sink4_data
	wire          arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready;         // cmd_mux_023:sink4_ready -> ARM_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_ready
	wire   [36:0] arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel;       // ARM_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_channel -> cmd_mux_023:sink4_channel
	wire          arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket; // ARM_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_023:sink4_startofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket;   // ARM_A9_HPS_h2f_axi_master_rd_to_VGA_Subsystem_char_buffer_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_023:sink4_endofpacket
	wire          cmd_demux_009_src1_valid;                                                                            // cmd_demux_009:src1_valid -> ARM_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_009_src1_data;                                                                             // cmd_demux_009:src1_data -> ARM_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_009_src1_ready;                                                                            // ARM_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_009:src1_ready
	wire   [36:0] cmd_demux_009_src1_channel;                                                                          // cmd_demux_009:src1_channel -> ARM_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_009_src1_startofpacket;                                                                    // cmd_demux_009:src1_startofpacket -> ARM_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_009_src1_endofpacket;                                                                      // cmd_demux_009:src1_endofpacket -> ARM_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid;                                // ARM_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_025:sink7_valid
	wire  [118:0] arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data;                                 // ARM_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_data -> cmd_mux_025:sink7_data
	wire          arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready;                                // cmd_mux_025:sink7_ready -> ARM_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_ready
	wire   [36:0] arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel;                              // ARM_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_025:sink7_channel
	wire          arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket;                        // ARM_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_025:sink7_startofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket;                          // ARM_A9_HPS_h2f_axi_master_rd_to_SDRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_025:sink7_endofpacket
	wire          cmd_demux_009_src2_valid;                                                                            // cmd_demux_009:src2_valid -> ARM_A9_HPS_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:in_valid
	wire  [244:0] cmd_demux_009_src2_data;                                                                             // cmd_demux_009:src2_data -> ARM_A9_HPS_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_009_src2_ready;                                                                            // ARM_A9_HPS_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_009:src2_ready
	wire   [36:0] cmd_demux_009_src2_channel;                                                                          // cmd_demux_009:src2_channel -> ARM_A9_HPS_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_009_src2_startofpacket;                                                                    // cmd_demux_009:src2_startofpacket -> ARM_A9_HPS_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_009_src2_endofpacket;                                                                      // cmd_demux_009:src2_endofpacket -> ARM_A9_HPS_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:in_endofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_valid;                          // ARM_A9_HPS_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_026:sink4_valid
	wire  [136:0] arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_data;                           // ARM_A9_HPS_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:out_data -> cmd_mux_026:sink4_data
	wire          arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_ready;                          // cmd_mux_026:sink4_ready -> ARM_A9_HPS_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:out_ready
	wire   [36:0] arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_channel;                        // ARM_A9_HPS_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_026:sink4_channel
	wire          arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket;                  // ARM_A9_HPS_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_026:sink4_startofpacket
	wire          arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket;                    // ARM_A9_HPS_h2f_axi_master_rd_to_Onchip_SRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_026:sink4_endofpacket
	wire          cmd_demux_010_src1_valid;                                                                            // cmd_demux_010:src1_valid -> Video_In_Subsystem_video_in_dma_master_to_Onchip_SRAM_s1_cmd_width_adapter:in_valid
	wire  [118:0] cmd_demux_010_src1_data;                                                                             // cmd_demux_010:src1_data -> Video_In_Subsystem_video_in_dma_master_to_Onchip_SRAM_s1_cmd_width_adapter:in_data
	wire          cmd_demux_010_src1_ready;                                                                            // Video_In_Subsystem_video_in_dma_master_to_Onchip_SRAM_s1_cmd_width_adapter:in_ready -> cmd_demux_010:src1_ready
	wire   [36:0] cmd_demux_010_src1_channel;                                                                          // cmd_demux_010:src1_channel -> Video_In_Subsystem_video_in_dma_master_to_Onchip_SRAM_s1_cmd_width_adapter:in_channel
	wire          cmd_demux_010_src1_startofpacket;                                                                    // cmd_demux_010:src1_startofpacket -> Video_In_Subsystem_video_in_dma_master_to_Onchip_SRAM_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_010_src1_endofpacket;                                                                      // cmd_demux_010:src1_endofpacket -> Video_In_Subsystem_video_in_dma_master_to_Onchip_SRAM_s1_cmd_width_adapter:in_endofpacket
	wire          video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_valid;                // Video_In_Subsystem_video_in_dma_master_to_Onchip_SRAM_s1_cmd_width_adapter:out_valid -> cmd_mux_026:sink5_valid
	wire  [136:0] video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_data;                 // Video_In_Subsystem_video_in_dma_master_to_Onchip_SRAM_s1_cmd_width_adapter:out_data -> cmd_mux_026:sink5_data
	wire          video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_ready;                // cmd_mux_026:sink5_ready -> Video_In_Subsystem_video_in_dma_master_to_Onchip_SRAM_s1_cmd_width_adapter:out_ready
	wire   [36:0] video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_channel;              // Video_In_Subsystem_video_in_dma_master_to_Onchip_SRAM_s1_cmd_width_adapter:out_channel -> cmd_mux_026:sink5_channel
	wire          video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket;        // Video_In_Subsystem_video_in_dma_master_to_Onchip_SRAM_s1_cmd_width_adapter:out_startofpacket -> cmd_mux_026:sink5_startofpacket
	wire          video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket;          // Video_In_Subsystem_video_in_dma_master_to_Onchip_SRAM_s1_cmd_width_adapter:out_endofpacket -> cmd_mux_026:sink5_endofpacket
	wire          rsp_demux_023_src0_valid;                                                                            // rsp_demux_023:src0_valid -> VGA_Subsystem_char_buffer_slave_to_Nios2_data_master_rsp_width_adapter:in_valid
	wire  [109:0] rsp_demux_023_src0_data;                                                                             // rsp_demux_023:src0_data -> VGA_Subsystem_char_buffer_slave_to_Nios2_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_023_src0_ready;                                                                            // VGA_Subsystem_char_buffer_slave_to_Nios2_data_master_rsp_width_adapter:in_ready -> rsp_demux_023:src0_ready
	wire   [36:0] rsp_demux_023_src0_channel;                                                                          // rsp_demux_023:src0_channel -> VGA_Subsystem_char_buffer_slave_to_Nios2_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_023_src0_startofpacket;                                                                    // rsp_demux_023:src0_startofpacket -> VGA_Subsystem_char_buffer_slave_to_Nios2_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_023_src0_endofpacket;                                                                      // rsp_demux_023:src0_endofpacket -> VGA_Subsystem_char_buffer_slave_to_Nios2_data_master_rsp_width_adapter:in_endofpacket
	wire          vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_valid;                    // VGA_Subsystem_char_buffer_slave_to_Nios2_data_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink19_valid
	wire  [136:0] vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_data;                     // VGA_Subsystem_char_buffer_slave_to_Nios2_data_master_rsp_width_adapter:out_data -> rsp_mux_002:sink19_data
	wire          vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_ready;                    // rsp_mux_002:sink19_ready -> VGA_Subsystem_char_buffer_slave_to_Nios2_data_master_rsp_width_adapter:out_ready
	wire   [36:0] vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_channel;                  // VGA_Subsystem_char_buffer_slave_to_Nios2_data_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink19_channel
	wire          vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_startofpacket;            // VGA_Subsystem_char_buffer_slave_to_Nios2_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink19_startofpacket
	wire          vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_endofpacket;              // VGA_Subsystem_char_buffer_slave_to_Nios2_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink19_endofpacket
	wire          rsp_demux_023_src1_valid;                                                                            // rsp_demux_023:src1_valid -> VGA_Subsystem_char_buffer_slave_to_Nios2_2nd_Core_data_master_rsp_width_adapter:in_valid
	wire  [109:0] rsp_demux_023_src1_data;                                                                             // rsp_demux_023:src1_data -> VGA_Subsystem_char_buffer_slave_to_Nios2_2nd_Core_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_023_src1_ready;                                                                            // VGA_Subsystem_char_buffer_slave_to_Nios2_2nd_Core_data_master_rsp_width_adapter:in_ready -> rsp_demux_023:src1_ready
	wire   [36:0] rsp_demux_023_src1_channel;                                                                          // rsp_demux_023:src1_channel -> VGA_Subsystem_char_buffer_slave_to_Nios2_2nd_Core_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_023_src1_startofpacket;                                                                    // rsp_demux_023:src1_startofpacket -> VGA_Subsystem_char_buffer_slave_to_Nios2_2nd_Core_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_023_src1_endofpacket;                                                                      // rsp_demux_023:src1_endofpacket -> VGA_Subsystem_char_buffer_slave_to_Nios2_2nd_Core_data_master_rsp_width_adapter:in_endofpacket
	wire          vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_valid;           // VGA_Subsystem_char_buffer_slave_to_Nios2_2nd_Core_data_master_rsp_width_adapter:out_valid -> rsp_mux_003:sink16_valid
	wire  [136:0] vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_data;            // VGA_Subsystem_char_buffer_slave_to_Nios2_2nd_Core_data_master_rsp_width_adapter:out_data -> rsp_mux_003:sink16_data
	wire          vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_ready;           // rsp_mux_003:sink16_ready -> VGA_Subsystem_char_buffer_slave_to_Nios2_2nd_Core_data_master_rsp_width_adapter:out_ready
	wire   [36:0] vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_channel;         // VGA_Subsystem_char_buffer_slave_to_Nios2_2nd_Core_data_master_rsp_width_adapter:out_channel -> rsp_mux_003:sink16_channel
	wire          vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_startofpacket;   // VGA_Subsystem_char_buffer_slave_to_Nios2_2nd_Core_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_003:sink16_startofpacket
	wire          vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_endofpacket;     // VGA_Subsystem_char_buffer_slave_to_Nios2_2nd_Core_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_003:sink16_endofpacket
	wire          rsp_demux_023_src2_valid;                                                                            // rsp_demux_023:src2_valid -> VGA_Subsystem_char_buffer_slave_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_valid
	wire  [109:0] rsp_demux_023_src2_data;                                                                             // rsp_demux_023:src2_data -> VGA_Subsystem_char_buffer_slave_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_data
	wire          rsp_demux_023_src2_ready;                                                                            // VGA_Subsystem_char_buffer_slave_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_ready -> rsp_demux_023:src2_ready
	wire   [36:0] rsp_demux_023_src2_channel;                                                                          // rsp_demux_023:src2_channel -> VGA_Subsystem_char_buffer_slave_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_channel
	wire          rsp_demux_023_src2_startofpacket;                                                                    // rsp_demux_023:src2_startofpacket -> VGA_Subsystem_char_buffer_slave_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_023_src2_endofpacket;                                                                      // rsp_demux_023:src2_endofpacket -> VGA_Subsystem_char_buffer_slave_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_endofpacket
	wire          vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid;           // VGA_Subsystem_char_buffer_slave_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_valid -> rsp_mux_004:sink19_valid
	wire  [136:0] vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data;            // VGA_Subsystem_char_buffer_slave_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_data -> rsp_mux_004:sink19_data
	wire          vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready;           // rsp_mux_004:sink19_ready -> VGA_Subsystem_char_buffer_slave_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_ready
	wire   [36:0] vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel;         // VGA_Subsystem_char_buffer_slave_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_channel -> rsp_mux_004:sink19_channel
	wire          vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket;   // VGA_Subsystem_char_buffer_slave_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_startofpacket -> rsp_mux_004:sink19_startofpacket
	wire          vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket;     // VGA_Subsystem_char_buffer_slave_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_endofpacket -> rsp_mux_004:sink19_endofpacket
	wire          rsp_demux_023_src3_valid;                                                                            // rsp_demux_023:src3_valid -> VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [109:0] rsp_demux_023_src3_data;                                                                             // rsp_demux_023:src3_data -> VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_023_src3_ready;                                                                            // VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_023:src3_ready
	wire   [36:0] rsp_demux_023_src3_channel;                                                                          // rsp_demux_023:src3_channel -> VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_023_src3_startofpacket;                                                                    // rsp_demux_023:src3_startofpacket -> VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_023_src3_endofpacket;                                                                      // rsp_demux_023:src3_endofpacket -> VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid;         // VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux_008:sink0_valid
	wire  [244:0] vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data;          // VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux_008:sink0_data
	wire          vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready;         // rsp_mux_008:sink0_ready -> VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [36:0] vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel;       // VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux_008:sink0_channel
	wire          vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket; // VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux_008:sink0_startofpacket
	wire          vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;   // VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux_008:sink0_endofpacket
	wire          rsp_demux_023_src4_valid;                                                                            // rsp_demux_023:src4_valid -> VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [109:0] rsp_demux_023_src4_data;                                                                             // rsp_demux_023:src4_data -> VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_023_src4_ready;                                                                            // VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_023:src4_ready
	wire   [36:0] rsp_demux_023_src4_channel;                                                                          // rsp_demux_023:src4_channel -> VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_023_src4_startofpacket;                                                                    // rsp_demux_023:src4_startofpacket -> VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_023_src4_endofpacket;                                                                      // rsp_demux_023:src4_endofpacket -> VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid;         // VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_009:sink0_valid
	wire  [244:0] vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data;          // VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_009:sink0_data
	wire          vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready;         // rsp_mux_009:sink0_ready -> VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [36:0] vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel;       // VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_009:sink0_channel
	wire          vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket; // VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_009:sink0_startofpacket
	wire          vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;   // VGA_Subsystem_char_buffer_slave_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_009:sink0_endofpacket
	wire          rsp_demux_025_src0_valid;                                                                            // rsp_demux_025:src0_valid -> SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_025_src0_data;                                                                             // rsp_demux_025:src0_data -> SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_025_src0_ready;                                                                            // SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:in_ready -> rsp_demux_025:src0_ready
	wire   [36:0] rsp_demux_025_src0_channel;                                                                          // rsp_demux_025:src0_channel -> SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_025_src0_startofpacket;                                                                    // rsp_demux_025:src0_startofpacket -> SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_025_src0_endofpacket;                                                                      // rsp_demux_025:src0_endofpacket -> SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_nios2_data_master_rsp_width_adapter_src_valid;                                           // SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:out_valid -> rsp_mux_002:sink21_valid
	wire  [136:0] sdram_s1_to_nios2_data_master_rsp_width_adapter_src_data;                                            // SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:out_data -> rsp_mux_002:sink21_data
	wire          sdram_s1_to_nios2_data_master_rsp_width_adapter_src_ready;                                           // rsp_mux_002:sink21_ready -> SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:out_ready
	wire   [36:0] sdram_s1_to_nios2_data_master_rsp_width_adapter_src_channel;                                         // SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:out_channel -> rsp_mux_002:sink21_channel
	wire          sdram_s1_to_nios2_data_master_rsp_width_adapter_src_startofpacket;                                   // SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_002:sink21_startofpacket
	wire          sdram_s1_to_nios2_data_master_rsp_width_adapter_src_endofpacket;                                     // SDRAM_s1_to_Nios2_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_002:sink21_endofpacket
	wire          rsp_demux_025_src1_valid;                                                                            // rsp_demux_025:src1_valid -> SDRAM_s1_to_Nios2_2nd_Core_data_master_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_025_src1_data;                                                                             // rsp_demux_025:src1_data -> SDRAM_s1_to_Nios2_2nd_Core_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_025_src1_ready;                                                                            // SDRAM_s1_to_Nios2_2nd_Core_data_master_rsp_width_adapter:in_ready -> rsp_demux_025:src1_ready
	wire   [36:0] rsp_demux_025_src1_channel;                                                                          // rsp_demux_025:src1_channel -> SDRAM_s1_to_Nios2_2nd_Core_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_025_src1_startofpacket;                                                                    // rsp_demux_025:src1_startofpacket -> SDRAM_s1_to_Nios2_2nd_Core_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_025_src1_endofpacket;                                                                      // rsp_demux_025:src1_endofpacket -> SDRAM_s1_to_Nios2_2nd_Core_data_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_valid;                                  // SDRAM_s1_to_Nios2_2nd_Core_data_master_rsp_width_adapter:out_valid -> rsp_mux_003:sink18_valid
	wire  [136:0] sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_data;                                   // SDRAM_s1_to_Nios2_2nd_Core_data_master_rsp_width_adapter:out_data -> rsp_mux_003:sink18_data
	wire          sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_ready;                                  // rsp_mux_003:sink18_ready -> SDRAM_s1_to_Nios2_2nd_Core_data_master_rsp_width_adapter:out_ready
	wire   [36:0] sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_channel;                                // SDRAM_s1_to_Nios2_2nd_Core_data_master_rsp_width_adapter:out_channel -> rsp_mux_003:sink18_channel
	wire          sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_startofpacket;                          // SDRAM_s1_to_Nios2_2nd_Core_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux_003:sink18_startofpacket
	wire          sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_endofpacket;                            // SDRAM_s1_to_Nios2_2nd_Core_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux_003:sink18_endofpacket
	wire          rsp_demux_025_src2_valid;                                                                            // rsp_demux_025:src2_valid -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_025_src2_data;                                                                             // rsp_demux_025:src2_data -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_data
	wire          rsp_demux_025_src2_ready;                                                                            // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_ready -> rsp_demux_025:src2_ready
	wire   [36:0] rsp_demux_025_src2_channel;                                                                          // rsp_demux_025:src2_channel -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_channel
	wire          rsp_demux_025_src2_startofpacket;                                                                    // rsp_demux_025:src2_startofpacket -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_025_src2_endofpacket;                                                                      // rsp_demux_025:src2_endofpacket -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid;                                  // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_valid -> rsp_mux_004:sink21_valid
	wire  [136:0] sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data;                                   // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_data -> rsp_mux_004:sink21_data
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready;                                  // rsp_mux_004:sink21_ready -> SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_ready
	wire   [36:0] sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel;                                // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_channel -> rsp_mux_004:sink21_channel
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket;                          // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_startofpacket -> rsp_mux_004:sink21_startofpacket
	wire          sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket;                            // SDRAM_s1_to_JTAG_to_FPGA_Bridge_master_rsp_width_adapter:out_endofpacket -> rsp_mux_004:sink21_endofpacket
	wire          rsp_demux_025_src3_valid;                                                                            // rsp_demux_025:src3_valid -> SDRAM_s1_to_Nios2_2nd_Core_instruction_master_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_025_src3_data;                                                                             // rsp_demux_025:src3_data -> SDRAM_s1_to_Nios2_2nd_Core_instruction_master_rsp_width_adapter:in_data
	wire          rsp_demux_025_src3_ready;                                                                            // SDRAM_s1_to_Nios2_2nd_Core_instruction_master_rsp_width_adapter:in_ready -> rsp_demux_025:src3_ready
	wire   [36:0] rsp_demux_025_src3_channel;                                                                          // rsp_demux_025:src3_channel -> SDRAM_s1_to_Nios2_2nd_Core_instruction_master_rsp_width_adapter:in_channel
	wire          rsp_demux_025_src3_startofpacket;                                                                    // rsp_demux_025:src3_startofpacket -> SDRAM_s1_to_Nios2_2nd_Core_instruction_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_025_src3_endofpacket;                                                                      // rsp_demux_025:src3_endofpacket -> SDRAM_s1_to_Nios2_2nd_Core_instruction_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_valid;                           // SDRAM_s1_to_Nios2_2nd_Core_instruction_master_rsp_width_adapter:out_valid -> rsp_mux_005:sink0_valid
	wire  [136:0] sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_data;                            // SDRAM_s1_to_Nios2_2nd_Core_instruction_master_rsp_width_adapter:out_data -> rsp_mux_005:sink0_data
	wire          sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_ready;                           // rsp_mux_005:sink0_ready -> SDRAM_s1_to_Nios2_2nd_Core_instruction_master_rsp_width_adapter:out_ready
	wire   [36:0] sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_channel;                         // SDRAM_s1_to_Nios2_2nd_Core_instruction_master_rsp_width_adapter:out_channel -> rsp_mux_005:sink0_channel
	wire          sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_startofpacket;                   // SDRAM_s1_to_Nios2_2nd_Core_instruction_master_rsp_width_adapter:out_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_endofpacket;                     // SDRAM_s1_to_Nios2_2nd_Core_instruction_master_rsp_width_adapter:out_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_025_src4_valid;                                                                            // rsp_demux_025:src4_valid -> SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_025_src4_data;                                                                             // rsp_demux_025:src4_data -> SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:in_data
	wire          rsp_demux_025_src4_ready;                                                                            // SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:in_ready -> rsp_demux_025:src4_ready
	wire   [36:0] rsp_demux_025_src4_channel;                                                                          // rsp_demux_025:src4_channel -> SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:in_channel
	wire          rsp_demux_025_src4_startofpacket;                                                                    // rsp_demux_025:src4_startofpacket -> SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_025_src4_endofpacket;                                                                      // rsp_demux_025:src4_endofpacket -> SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_valid;                                    // SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:out_valid -> rsp_mux_006:sink0_valid
	wire  [136:0] sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_data;                                     // SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:out_data -> rsp_mux_006:sink0_data
	wire          sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_ready;                                    // rsp_mux_006:sink0_ready -> SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:out_ready
	wire   [36:0] sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_channel;                                  // SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:out_channel -> rsp_mux_006:sink0_channel
	wire          sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_startofpacket;                            // SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:out_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_endofpacket;                              // SDRAM_s1_to_Nios2_instruction_master_rsp_width_adapter:out_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_025_src5_valid;                                                                            // rsp_demux_025:src5_valid -> SDRAM_s1_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_025_src5_data;                                                                             // rsp_demux_025:src5_data -> SDRAM_s1_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:in_data
	wire          rsp_demux_025_src5_ready;                                                                            // SDRAM_s1_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:in_ready -> rsp_demux_025:src5_ready
	wire   [36:0] rsp_demux_025_src5_channel;                                                                          // rsp_demux_025:src5_channel -> SDRAM_s1_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:in_channel
	wire          rsp_demux_025_src5_startofpacket;                                                                    // rsp_demux_025:src5_startofpacket -> SDRAM_s1_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_025_src5_endofpacket;                                                                      // rsp_demux_025:src5_endofpacket -> SDRAM_s1_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_valid;                              // SDRAM_s1_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:out_valid -> rsp_mux_007:sink0_valid
	wire  [109:0] sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_data;                               // SDRAM_s1_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:out_data -> rsp_mux_007:sink0_data
	wire          sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_ready;                              // rsp_mux_007:sink0_ready -> SDRAM_s1_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:out_ready
	wire   [36:0] sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_channel;                            // SDRAM_s1_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:out_channel -> rsp_mux_007:sink0_channel
	wire          sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_startofpacket;                      // SDRAM_s1_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_endofpacket;                        // SDRAM_s1_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_025_src6_valid;                                                                            // rsp_demux_025:src6_valid -> SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_025_src6_data;                                                                             // rsp_demux_025:src6_data -> SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_025_src6_ready;                                                                            // SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_025:src6_ready
	wire   [36:0] rsp_demux_025_src6_channel;                                                                          // rsp_demux_025:src6_channel -> SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_025_src6_startofpacket;                                                                    // rsp_demux_025:src6_startofpacket -> SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_025_src6_endofpacket;                                                                      // rsp_demux_025:src6_endofpacket -> SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid;                                // SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux_008:sink1_valid
	wire  [244:0] sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data;                                 // SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux_008:sink1_data
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready;                                // rsp_mux_008:sink1_ready -> SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [36:0] sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel;                              // SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux_008:sink1_channel
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;                        // SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux_008:sink1_startofpacket
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;                          // SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux_008:sink1_endofpacket
	wire          rsp_demux_025_src7_valid;                                                                            // rsp_demux_025:src7_valid -> SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [118:0] rsp_demux_025_src7_data;                                                                             // rsp_demux_025:src7_data -> SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_025_src7_ready;                                                                            // SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_025:src7_ready
	wire   [36:0] rsp_demux_025_src7_channel;                                                                          // rsp_demux_025:src7_channel -> SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_025_src7_startofpacket;                                                                    // rsp_demux_025:src7_startofpacket -> SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_025_src7_endofpacket;                                                                      // rsp_demux_025:src7_endofpacket -> SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid;                                // SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_009:sink1_valid
	wire  [244:0] sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data;                                 // SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_009:sink1_data
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready;                                // rsp_mux_009:sink1_ready -> SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [36:0] sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel;                              // SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_009:sink1_channel
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;                        // SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_009:sink1_startofpacket
	wire          sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;                          // SDRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_009:sink1_endofpacket
	wire          rsp_demux_026_src3_valid;                                                                            // rsp_demux_026:src3_valid -> Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_026_src3_data;                                                                             // rsp_demux_026:src3_data -> Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_data
	wire          rsp_demux_026_src3_ready;                                                                            // Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_ready -> rsp_demux_026:src3_ready
	wire   [36:0] rsp_demux_026_src3_channel;                                                                          // rsp_demux_026:src3_channel -> Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_channel
	wire          rsp_demux_026_src3_startofpacket;                                                                    // rsp_demux_026:src3_startofpacket -> Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_026_src3_endofpacket;                                                                      // rsp_demux_026:src3_endofpacket -> Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:in_endofpacket
	wire          onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid;                          // Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_valid -> rsp_mux_008:sink2_valid
	wire  [244:0] onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data;                           // Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_data -> rsp_mux_008:sink2_data
	wire          onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready;                          // rsp_mux_008:sink2_ready -> Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_ready
	wire   [36:0] onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel;                        // Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_channel -> rsp_mux_008:sink2_channel
	wire          onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket;                  // Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_startofpacket -> rsp_mux_008:sink2_startofpacket
	wire          onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket;                    // Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_wr_rsp_width_adapter:out_endofpacket -> rsp_mux_008:sink2_endofpacket
	wire          rsp_demux_026_src4_valid;                                                                            // rsp_demux_026:src4_valid -> Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_026_src4_data;                                                                             // rsp_demux_026:src4_data -> Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_data
	wire          rsp_demux_026_src4_ready;                                                                            // Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_ready -> rsp_demux_026:src4_ready
	wire   [36:0] rsp_demux_026_src4_channel;                                                                          // rsp_demux_026:src4_channel -> Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_channel
	wire          rsp_demux_026_src4_startofpacket;                                                                    // rsp_demux_026:src4_startofpacket -> Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_026_src4_endofpacket;                                                                      // rsp_demux_026:src4_endofpacket -> Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:in_endofpacket
	wire          onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid;                          // Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_valid -> rsp_mux_009:sink2_valid
	wire  [244:0] onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data;                           // Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_data -> rsp_mux_009:sink2_data
	wire          onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready;                          // rsp_mux_009:sink2_ready -> Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_ready
	wire   [36:0] onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel;                        // Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_channel -> rsp_mux_009:sink2_channel
	wire          onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket;                  // Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_startofpacket -> rsp_mux_009:sink2_startofpacket
	wire          onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket;                    // Onchip_SRAM_s1_to_ARM_A9_HPS_h2f_axi_master_rd_rsp_width_adapter:out_endofpacket -> rsp_mux_009:sink2_endofpacket
	wire          rsp_demux_026_src5_valid;                                                                            // rsp_demux_026:src5_valid -> Onchip_SRAM_s1_to_Video_In_Subsystem_video_in_dma_master_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_026_src5_data;                                                                             // rsp_demux_026:src5_data -> Onchip_SRAM_s1_to_Video_In_Subsystem_video_in_dma_master_rsp_width_adapter:in_data
	wire          rsp_demux_026_src5_ready;                                                                            // Onchip_SRAM_s1_to_Video_In_Subsystem_video_in_dma_master_rsp_width_adapter:in_ready -> rsp_demux_026:src5_ready
	wire   [36:0] rsp_demux_026_src5_channel;                                                                          // rsp_demux_026:src5_channel -> Onchip_SRAM_s1_to_Video_In_Subsystem_video_in_dma_master_rsp_width_adapter:in_channel
	wire          rsp_demux_026_src5_startofpacket;                                                                    // rsp_demux_026:src5_startofpacket -> Onchip_SRAM_s1_to_Video_In_Subsystem_video_in_dma_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_026_src5_endofpacket;                                                                      // rsp_demux_026:src5_endofpacket -> Onchip_SRAM_s1_to_Video_In_Subsystem_video_in_dma_master_rsp_width_adapter:in_endofpacket
	wire          onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_valid;                // Onchip_SRAM_s1_to_Video_In_Subsystem_video_in_dma_master_rsp_width_adapter:out_valid -> rsp_mux_010:sink1_valid
	wire  [118:0] onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_data;                 // Onchip_SRAM_s1_to_Video_In_Subsystem_video_in_dma_master_rsp_width_adapter:out_data -> rsp_mux_010:sink1_data
	wire          onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_ready;                // rsp_mux_010:sink1_ready -> Onchip_SRAM_s1_to_Video_In_Subsystem_video_in_dma_master_rsp_width_adapter:out_ready
	wire   [36:0] onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_channel;              // Onchip_SRAM_s1_to_Video_In_Subsystem_video_in_dma_master_rsp_width_adapter:out_channel -> rsp_mux_010:sink1_channel
	wire          onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_startofpacket;        // Onchip_SRAM_s1_to_Video_In_Subsystem_video_in_dma_master_rsp_width_adapter:out_startofpacket -> rsp_mux_010:sink1_startofpacket
	wire          onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_endofpacket;          // Onchip_SRAM_s1_to_Video_In_Subsystem_video_in_dma_master_rsp_width_adapter:out_endofpacket -> rsp_mux_010:sink1_endofpacket
	wire          rsp_demux_035_src2_valid;                                                                            // rsp_demux_035:src2_valid -> Onchip_SRAM_s2_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:in_valid
	wire  [136:0] rsp_demux_035_src2_data;                                                                             // rsp_demux_035:src2_data -> Onchip_SRAM_s2_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:in_data
	wire          rsp_demux_035_src2_ready;                                                                            // Onchip_SRAM_s2_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:in_ready -> rsp_demux_035:src2_ready
	wire   [36:0] rsp_demux_035_src2_channel;                                                                          // rsp_demux_035:src2_channel -> Onchip_SRAM_s2_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:in_channel
	wire          rsp_demux_035_src2_startofpacket;                                                                    // rsp_demux_035:src2_startofpacket -> Onchip_SRAM_s2_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_035_src2_endofpacket;                                                                      // rsp_demux_035:src2_endofpacket -> Onchip_SRAM_s2_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:in_endofpacket
	wire          onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_valid;                        // Onchip_SRAM_s2_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:out_valid -> rsp_mux_007:sink1_valid
	wire  [109:0] onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_data;                         // Onchip_SRAM_s2_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:out_data -> rsp_mux_007:sink1_data
	wire          onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_ready;                        // rsp_mux_007:sink1_ready -> Onchip_SRAM_s2_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:out_ready
	wire   [36:0] onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_channel;                      // Onchip_SRAM_s2_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:out_channel -> rsp_mux_007:sink1_channel
	wire          onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_startofpacket;                // Onchip_SRAM_s2_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:out_startofpacket -> rsp_mux_007:sink1_startofpacket
	wire          onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_endofpacket;                  // Onchip_SRAM_s2_to_VGA_Subsystem_pixel_dma_master_rsp_width_adapter:out_endofpacket -> rsp_mux_007:sink1_endofpacket
	wire   [36:0] arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data;                                              // ARM_A9_HPS_h2f_lw_axi_master_wr_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire   [36:0] arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data;                                              // ARM_A9_HPS_h2f_lw_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [36:0] jtag_to_fpga_bridge_master_limiter_cmd_valid_data;                                                   // JTAG_to_FPGA_Bridge_master_limiter:cmd_src_valid -> cmd_demux_004:sink_valid
	wire   [36:0] nios2_2nd_core_instruction_master_limiter_cmd_valid_data;                                            // Nios2_2nd_Core_instruction_master_limiter:cmd_src_valid -> cmd_demux_005:sink_valid
	wire   [36:0] nios2_instruction_master_limiter_cmd_valid_data;                                                     // Nios2_instruction_master_limiter:cmd_src_valid -> cmd_demux_006:sink_valid
	wire   [36:0] vga_subsystem_pixel_dma_master_limiter_cmd_valid_data;                                               // VGA_Subsystem_pixel_dma_master_limiter:cmd_src_valid -> cmd_demux_007:sink_valid
	wire   [36:0] arm_a9_hps_h2f_axi_master_wr_limiter_cmd_valid_data;                                                 // ARM_A9_HPS_h2f_axi_master_wr_limiter:cmd_src_valid -> cmd_demux_008:sink_valid
	wire   [36:0] arm_a9_hps_h2f_axi_master_rd_limiter_cmd_valid_data;                                                 // ARM_A9_HPS_h2f_axi_master_rd_limiter:cmd_src_valid -> cmd_demux_009:sink_valid
	wire          adc_adc_slave_agent_rdata_fifo_out_valid;                                                            // ADC_adc_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] adc_adc_slave_agent_rdata_fifo_out_data;                                                             // ADC_adc_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          adc_adc_slave_agent_rdata_fifo_out_ready;                                                            // avalon_st_adapter:in_0_ready -> ADC_adc_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                                       // avalon_st_adapter:out_0_valid -> ADC_adc_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                                        // avalon_st_adapter:out_0_data -> ADC_adc_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                       // ADC_adc_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                       // avalon_st_adapter:out_0_error -> ADC_adc_slave_agent:rdata_fifo_sink_error
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_out_valid;                                              // Audio_Subsystem_audio_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] audio_subsystem_audio_slave_agent_rdata_fifo_out_data;                                               // Audio_Subsystem_audio_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          audio_subsystem_audio_slave_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter_001:in_0_ready -> Audio_Subsystem_audio_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                                   // avalon_st_adapter_001:out_0_valid -> Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                                    // avalon_st_adapter_001:out_0_data -> Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                                   // Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                                   // avalon_st_adapter_001:out_0_error -> Audio_Subsystem_audio_slave_agent:rdata_fifo_sink_error
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_out_valid;                                         // AV_Config_avalon_av_config_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] av_config_avalon_av_config_slave_agent_rdata_fifo_out_data;                                          // AV_Config_avalon_av_config_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          av_config_avalon_av_config_slave_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_002:in_0_ready -> AV_Config_avalon_av_config_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                                   // avalon_st_adapter_002:out_0_valid -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                                    // avalon_st_adapter_002:out_0_data -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                                   // AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                                   // avalon_st_adapter_002:out_0_error -> AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_error
	wire          irda_avalon_irda_slave_agent_rdata_fifo_out_valid;                                                   // IrDA_avalon_irda_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] irda_avalon_irda_slave_agent_rdata_fifo_out_data;                                                    // IrDA_avalon_irda_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          irda_avalon_irda_slave_agent_rdata_fifo_out_ready;                                                   // avalon_st_adapter_003:in_0_ready -> IrDA_avalon_irda_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                                   // avalon_st_adapter_003:out_0_valid -> IrDA_avalon_irda_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                                    // avalon_st_adapter_003:out_0_data -> IrDA_avalon_irda_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                                   // IrDA_avalon_irda_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                                   // avalon_st_adapter_003:out_0_error -> IrDA_avalon_irda_slave_agent:rdata_fifo_sink_error
	wire          ps2_port_avalon_ps2_slave_agent_rdata_fifo_out_valid;                                                // PS2_Port_avalon_ps2_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] ps2_port_avalon_ps2_slave_agent_rdata_fifo_out_data;                                                 // PS2_Port_avalon_ps2_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          ps2_port_avalon_ps2_slave_agent_rdata_fifo_out_ready;                                                // avalon_st_adapter_004:in_0_ready -> PS2_Port_avalon_ps2_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                                   // avalon_st_adapter_004:out_0_valid -> PS2_Port_avalon_ps2_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                                    // avalon_st_adapter_004:out_0_data -> PS2_Port_avalon_ps2_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                                   // PS2_Port_avalon_ps2_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                                   // avalon_st_adapter_004:out_0_error -> PS2_Port_avalon_ps2_slave_agent:rdata_fifo_sink_error
	wire          ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_out_valid;                                           // PS2_Port_Dual_avalon_ps2_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_out_data;                                            // PS2_Port_Dual_avalon_ps2_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_005:in_0_ready -> PS2_Port_Dual_avalon_ps2_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                                   // avalon_st_adapter_005:out_0_valid -> PS2_Port_Dual_avalon_ps2_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                                    // avalon_st_adapter_005:out_0_data -> PS2_Port_Dual_avalon_ps2_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                                   // PS2_Port_Dual_avalon_ps2_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                                   // avalon_st_adapter_005:out_0_error -> PS2_Port_Dual_avalon_ps2_slave_agent:rdata_fifo_sink_error
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_valid;                                  // VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_data;                                   // VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_006:in_0_ready -> VGA_Subsystem_char_buffer_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                                   // avalon_st_adapter_006:out_0_valid -> VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                                    // avalon_st_adapter_006:out_0_data -> VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                                   // VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                                   // avalon_st_adapter_006:out_0_error -> VGA_Subsystem_char_buffer_control_slave_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_out_valid;                                                      // SysID_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_out_data;                                                       // SysID_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_out_ready;                                                      // avalon_st_adapter_007:in_0_ready -> SysID_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                                   // avalon_st_adapter_007:out_0_valid -> SysID_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                                    // avalon_st_adapter_007:out_0_data -> SysID_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                                   // SysID_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                                   // avalon_st_adapter_007:out_0_error -> SysID_control_slave_agent:rdata_fifo_sink_error
	wire          video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_valid;                          // Video_In_Subsystem_edge_detection_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_data;                           // Video_In_Subsystem_edge_detection_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_008:in_0_ready -> Video_In_Subsystem_edge_detection_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                                   // avalon_st_adapter_008:out_0_valid -> Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                                    // avalon_st_adapter_008:out_0_data -> Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                                   // Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                                   // avalon_st_adapter_008:out_0_error -> Video_In_Subsystem_edge_detection_control_slave_agent:rdata_fifo_sink_error
	wire          leds_s1_agent_rdata_fifo_out_valid;                                                                  // LEDs_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] leds_s1_agent_rdata_fifo_out_data;                                                                   // LEDs_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          leds_s1_agent_rdata_fifo_out_ready;                                                                  // avalon_st_adapter_009:in_0_ready -> LEDs_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                                   // avalon_st_adapter_009:out_0_valid -> LEDs_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                                    // avalon_st_adapter_009:out_0_data -> LEDs_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                                   // LEDs_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                                   // avalon_st_adapter_009:out_0_error -> LEDs_s1_agent:rdata_fifo_sink_error
	wire          hex3_hex0_s1_agent_rdata_fifo_out_valid;                                                             // HEX3_HEX0_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] hex3_hex0_s1_agent_rdata_fifo_out_data;                                                              // HEX3_HEX0_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_010:in_0_data
	wire          hex3_hex0_s1_agent_rdata_fifo_out_ready;                                                             // avalon_st_adapter_010:in_0_ready -> HEX3_HEX0_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                                   // avalon_st_adapter_010:out_0_valid -> HEX3_HEX0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                                    // avalon_st_adapter_010:out_0_data -> HEX3_HEX0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                                   // HEX3_HEX0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                                   // avalon_st_adapter_010:out_0_error -> HEX3_HEX0_s1_agent:rdata_fifo_sink_error
	wire          hex5_hex4_s1_agent_rdata_fifo_out_valid;                                                             // HEX5_HEX4_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] hex5_hex4_s1_agent_rdata_fifo_out_data;                                                              // HEX5_HEX4_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          hex5_hex4_s1_agent_rdata_fifo_out_ready;                                                             // avalon_st_adapter_011:in_0_ready -> HEX5_HEX4_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                                   // avalon_st_adapter_011:out_0_valid -> HEX5_HEX4_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                                    // avalon_st_adapter_011:out_0_data -> HEX5_HEX4_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                                   // HEX5_HEX4_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                                   // avalon_st_adapter_011:out_0_error -> HEX5_HEX4_s1_agent:rdata_fifo_sink_error
	wire          slider_switches_s1_agent_rdata_fifo_out_valid;                                                       // Slider_Switches_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] slider_switches_s1_agent_rdata_fifo_out_data;                                                        // Slider_Switches_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_012:in_0_data
	wire          slider_switches_s1_agent_rdata_fifo_out_ready;                                                       // avalon_st_adapter_012:in_0_ready -> Slider_Switches_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                                   // avalon_st_adapter_012:out_0_valid -> Slider_Switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                                    // avalon_st_adapter_012:out_0_data -> Slider_Switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                                   // Slider_Switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                                   // avalon_st_adapter_012:out_0_error -> Slider_Switches_s1_agent:rdata_fifo_sink_error
	wire          pushbuttons_s1_agent_rdata_fifo_out_valid;                                                           // Pushbuttons_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] pushbuttons_s1_agent_rdata_fifo_out_data;                                                            // Pushbuttons_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_013:in_0_data
	wire          pushbuttons_s1_agent_rdata_fifo_out_ready;                                                           // avalon_st_adapter_013:in_0_ready -> Pushbuttons_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                                   // avalon_st_adapter_013:out_0_valid -> Pushbuttons_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                                    // avalon_st_adapter_013:out_0_data -> Pushbuttons_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                                   // Pushbuttons_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                                   // avalon_st_adapter_013:out_0_error -> Pushbuttons_s1_agent:rdata_fifo_sink_error
	wire          expansion_jp1_s1_agent_rdata_fifo_out_valid;                                                         // Expansion_JP1_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] expansion_jp1_s1_agent_rdata_fifo_out_data;                                                          // Expansion_JP1_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          expansion_jp1_s1_agent_rdata_fifo_out_ready;                                                         // avalon_st_adapter_014:in_0_ready -> Expansion_JP1_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                                   // avalon_st_adapter_014:out_0_valid -> Expansion_JP1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                                    // avalon_st_adapter_014:out_0_data -> Expansion_JP1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                                   // Expansion_JP1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                                   // avalon_st_adapter_014:out_0_error -> Expansion_JP1_s1_agent:rdata_fifo_sink_error
	wire          expansion_jp2_s1_agent_rdata_fifo_out_valid;                                                         // Expansion_JP2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] expansion_jp2_s1_agent_rdata_fifo_out_data;                                                          // Expansion_JP2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_015:in_0_data
	wire          expansion_jp2_s1_agent_rdata_fifo_out_ready;                                                         // avalon_st_adapter_015:in_0_ready -> Expansion_JP2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                                   // avalon_st_adapter_015:out_0_valid -> Expansion_JP2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                                    // avalon_st_adapter_015:out_0_data -> Expansion_JP2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                                   // Expansion_JP2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                                   // avalon_st_adapter_015:out_0_error -> Expansion_JP2_s1_agent:rdata_fifo_sink_error
	wire          interval_timer_s1_agent_rdata_fifo_out_valid;                                                        // Interval_Timer_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] interval_timer_s1_agent_rdata_fifo_out_data;                                                         // Interval_Timer_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_016:in_0_data
	wire          interval_timer_s1_agent_rdata_fifo_out_ready;                                                        // avalon_st_adapter_016:in_0_ready -> Interval_Timer_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                                   // avalon_st_adapter_016:out_0_valid -> Interval_Timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                                    // avalon_st_adapter_016:out_0_data -> Interval_Timer_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                                   // Interval_Timer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                                   // avalon_st_adapter_016:out_0_error -> Interval_Timer_s1_agent:rdata_fifo_sink_error
	wire          interval_timer_2_s1_agent_rdata_fifo_out_valid;                                                      // Interval_Timer_2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] interval_timer_2_s1_agent_rdata_fifo_out_data;                                                       // Interval_Timer_2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_017:in_0_data
	wire          interval_timer_2_s1_agent_rdata_fifo_out_ready;                                                      // avalon_st_adapter_017:in_0_ready -> Interval_Timer_2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                                   // avalon_st_adapter_017:out_0_valid -> Interval_Timer_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                                    // avalon_st_adapter_017:out_0_data -> Interval_Timer_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                                   // Interval_Timer_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                                   // avalon_st_adapter_017:out_0_error -> Interval_Timer_2_s1_agent:rdata_fifo_sink_error
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                    // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_data;                                     // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_018:in_0_data
	wire          jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_018:in_0_ready -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                                   // avalon_st_adapter_018:out_0_valid -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                                    // avalon_st_adapter_018:out_0_data -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                                   // JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                                   // avalon_st_adapter_018:out_0_error -> JTAG_UART_for_ARM_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                    // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_data;                                     // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_019:in_0_data
	wire          jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_019:in_0_ready -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                                   // avalon_st_adapter_019:out_0_valid -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                                    // avalon_st_adapter_019:out_0_data -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                                   // JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                                   // avalon_st_adapter_019:out_0_error -> JTAG_UART_for_ARM_1_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_out_valid;                                         // Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] pixel_dma_addr_translation_slave_agent_rdata_fifo_out_data;                                          // Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_020:in_0_data
	wire          pixel_dma_addr_translation_slave_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_020:in_0_ready -> Pixel_DMA_Addr_Translation_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                                   // avalon_st_adapter_020:out_0_valid -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                                    // avalon_st_adapter_020:out_0_data -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                                   // Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                                   // avalon_st_adapter_020:out_0_error -> Pixel_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_error
	wire          video_in_dma_addr_translation_slave_agent_rdata_fifo_out_valid;                                      // Video_In_DMA_Addr_Translation_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] video_in_dma_addr_translation_slave_agent_rdata_fifo_out_data;                                       // Video_In_DMA_Addr_Translation_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_021:in_0_data
	wire          video_in_dma_addr_translation_slave_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter_021:in_0_ready -> Video_In_DMA_Addr_Translation_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                                   // avalon_st_adapter_021:out_0_valid -> Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                                    // avalon_st_adapter_021:out_0_data -> Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                                   // Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                                   // avalon_st_adapter_021:out_0_error -> Video_In_DMA_Addr_Translation_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                              // JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_022:in_0_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data;                                               // JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_022:in_0_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                              // avalon_st_adapter_022:in_0_ready -> JTAG_UART_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_022_out_0_valid;                                                                   // avalon_st_adapter_022:out_0_valid -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_022_out_0_data;                                                                    // avalon_st_adapter_022:out_0_data -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_022_out_0_ready;                                                                   // JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_022:out_0_ready
	wire    [0:0] avalon_st_adapter_022_out_0_error;                                                                   // avalon_st_adapter_022:out_0_error -> JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_valid;                                          // VGA_Subsystem_char_buffer_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_023:in_0_valid
	wire    [9:0] vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_data;                                           // VGA_Subsystem_char_buffer_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_023:in_0_data
	wire          vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_ready;                                          // avalon_st_adapter_023:in_0_ready -> VGA_Subsystem_char_buffer_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_023_out_0_valid;                                                                   // avalon_st_adapter_023:out_0_valid -> VGA_Subsystem_char_buffer_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_023_out_0_data;                                                                    // avalon_st_adapter_023:out_0_data -> VGA_Subsystem_char_buffer_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_023_out_0_ready;                                                                   // VGA_Subsystem_char_buffer_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_023:out_0_ready
	wire    [0:0] avalon_st_adapter_023_out_0_error;                                                                   // avalon_st_adapter_023:out_0_error -> VGA_Subsystem_char_buffer_slave_agent:rdata_fifo_sink_error
	wire          vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_valid;                                    // VGA_Subsystem_pixel_dma_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_024:in_0_valid
	wire   [33:0] vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_data;                                     // VGA_Subsystem_pixel_dma_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_024:in_0_data
	wire          vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_024:in_0_ready -> VGA_Subsystem_pixel_dma_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_024_out_0_valid;                                                                   // avalon_st_adapter_024:out_0_valid -> VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_024_out_0_data;                                                                    // avalon_st_adapter_024:out_0_data -> VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_024_out_0_ready;                                                                   // VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_024:out_0_ready
	wire    [0:0] avalon_st_adapter_024_out_0_error;                                                                   // avalon_st_adapter_024:out_0_error -> VGA_Subsystem_pixel_dma_control_slave_agent:rdata_fifo_sink_error
	wire          sdram_s1_agent_rdata_fifo_out_valid;                                                                 // SDRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_025:in_0_valid
	wire   [17:0] sdram_s1_agent_rdata_fifo_out_data;                                                                  // SDRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_025:in_0_data
	wire          sdram_s1_agent_rdata_fifo_out_ready;                                                                 // avalon_st_adapter_025:in_0_ready -> SDRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_025_out_0_valid;                                                                   // avalon_st_adapter_025:out_0_valid -> SDRAM_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_025_out_0_data;                                                                    // avalon_st_adapter_025:out_0_data -> SDRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_025_out_0_ready;                                                                   // SDRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_025:out_0_ready
	wire    [0:0] avalon_st_adapter_025_out_0_error;                                                                   // avalon_st_adapter_025:out_0_error -> SDRAM_s1_agent:rdata_fifo_sink_error
	wire          onchip_sram_s1_agent_rdata_fifo_out_valid;                                                           // Onchip_SRAM_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_026:in_0_valid
	wire   [33:0] onchip_sram_s1_agent_rdata_fifo_out_data;                                                            // Onchip_SRAM_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_026:in_0_data
	wire          onchip_sram_s1_agent_rdata_fifo_out_ready;                                                           // avalon_st_adapter_026:in_0_ready -> Onchip_SRAM_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_026_out_0_valid;                                                                   // avalon_st_adapter_026:out_0_valid -> Onchip_SRAM_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_026_out_0_data;                                                                    // avalon_st_adapter_026:out_0_data -> Onchip_SRAM_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_026_out_0_ready;                                                                   // Onchip_SRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_026:out_0_ready
	wire    [0:0] avalon_st_adapter_026_out_0_error;                                                                   // avalon_st_adapter_026:out_0_error -> Onchip_SRAM_s1_agent:rdata_fifo_sink_error
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_out_valid;                            // Video_In_Subsystem_video_in_dma_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_027:in_0_valid
	wire   [33:0] video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_out_data;                             // Video_In_Subsystem_video_in_dma_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_027:in_0_data
	wire          video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_027:in_0_ready -> Video_In_Subsystem_video_in_dma_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_027_out_0_valid;                                                                   // avalon_st_adapter_027:out_0_valid -> Video_In_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_027_out_0_data;                                                                    // avalon_st_adapter_027:out_0_data -> Video_In_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_027_out_0_ready;                                                                   // Video_In_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_027:out_0_ready
	wire    [0:0] avalon_st_adapter_027_out_0_error;                                                                   // avalon_st_adapter_027:out_0_error -> Video_In_Subsystem_video_in_dma_control_slave_agent:rdata_fifo_sink_error
	wire          f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_valid;                                   // F2H_Mem_Window_00000000_windowed_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_028:in_0_valid
	wire   [33:0] f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_data;                                    // F2H_Mem_Window_00000000_windowed_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_028:in_0_data
	wire          f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_028:in_0_ready -> F2H_Mem_Window_00000000_windowed_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_028_out_0_valid;                                                                   // avalon_st_adapter_028:out_0_valid -> F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_028_out_0_data;                                                                    // avalon_st_adapter_028:out_0_data -> F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_028_out_0_ready;                                                                   // F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_028:out_0_ready
	wire    [0:0] avalon_st_adapter_028_out_0_error;                                                                   // avalon_st_adapter_028:out_0_error -> F2H_Mem_Window_00000000_windowed_slave_agent:rdata_fifo_sink_error
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_valid;                                   // F2H_Mem_Window_FF600000_windowed_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_029:in_0_valid
	wire   [33:0] f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_data;                                    // F2H_Mem_Window_FF600000_windowed_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_029:in_0_data
	wire          f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_029:in_0_ready -> F2H_Mem_Window_FF600000_windowed_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_029_out_0_valid;                                                                   // avalon_st_adapter_029:out_0_valid -> F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_029_out_0_data;                                                                    // avalon_st_adapter_029:out_0_data -> F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_029_out_0_ready;                                                                   // F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_029:out_0_ready
	wire    [0:0] avalon_st_adapter_029_out_0_error;                                                                   // avalon_st_adapter_029:out_0_error -> F2H_Mem_Window_FF600000_windowed_slave_agent:rdata_fifo_sink_error
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_valid;                                   // F2H_Mem_Window_FF800000_windowed_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_030:in_0_valid
	wire   [33:0] f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_data;                                    // F2H_Mem_Window_FF800000_windowed_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_030:in_0_data
	wire          f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_ready;                                   // avalon_st_adapter_030:in_0_ready -> F2H_Mem_Window_FF800000_windowed_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_030_out_0_valid;                                                                   // avalon_st_adapter_030:out_0_valid -> F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_030_out_0_data;                                                                    // avalon_st_adapter_030:out_0_data -> F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_030_out_0_ready;                                                                   // F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_030:out_0_ready
	wire    [0:0] avalon_st_adapter_030_out_0_error;                                                                   // avalon_st_adapter_030:out_0_error -> F2H_Mem_Window_FF800000_windowed_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_valid;                                     // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_031:in_0_valid
	wire   [33:0] jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_data;                                      // JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_031:in_0_data
	wire          jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_031:in_0_ready -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_031_out_0_valid;                                                                   // avalon_st_adapter_031:out_0_valid -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_031_out_0_data;                                                                    // avalon_st_adapter_031:out_0_data -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_031_out_0_ready;                                                                   // JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_031:out_0_ready
	wire    [0:0] avalon_st_adapter_031_out_0_error;                                                                   // avalon_st_adapter_031:out_0_error -> JTAG_UART_2nd_Core_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_valid;                                           // Nios2_2nd_Core_debug_mem_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_032:in_0_valid
	wire   [33:0] nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_data;                                            // Nios2_2nd_Core_debug_mem_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_032:in_0_data
	wire          nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_ready;                                           // avalon_st_adapter_032:in_0_ready -> Nios2_2nd_Core_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_032_out_0_valid;                                                                   // avalon_st_adapter_032:out_0_valid -> Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_032_out_0_data;                                                                    // avalon_st_adapter_032:out_0_data -> Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_032_out_0_ready;                                                                   // Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_032:out_0_ready
	wire    [0:0] avalon_st_adapter_032_out_0_error;                                                                   // avalon_st_adapter_032:out_0_error -> Nios2_2nd_Core_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          interval_timer_2nd_core_s1_agent_rdata_fifo_out_valid;                                               // Interval_Timer_2nd_Core_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_033:in_0_valid
	wire   [33:0] interval_timer_2nd_core_s1_agent_rdata_fifo_out_data;                                                // Interval_Timer_2nd_Core_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_033:in_0_data
	wire          interval_timer_2nd_core_s1_agent_rdata_fifo_out_ready;                                               // avalon_st_adapter_033:in_0_ready -> Interval_Timer_2nd_Core_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_033_out_0_valid;                                                                   // avalon_st_adapter_033:out_0_valid -> Interval_Timer_2nd_Core_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_033_out_0_data;                                                                    // avalon_st_adapter_033:out_0_data -> Interval_Timer_2nd_Core_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_033_out_0_ready;                                                                   // Interval_Timer_2nd_Core_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_033:out_0_ready
	wire    [0:0] avalon_st_adapter_033_out_0_error;                                                                   // avalon_st_adapter_033:out_0_error -> Interval_Timer_2nd_Core_s1_agent:rdata_fifo_sink_error
	wire          interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_valid;                                             // Interval_Timer_2nd_Core_2_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_034:in_0_valid
	wire   [33:0] interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_data;                                              // Interval_Timer_2nd_Core_2_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_034:in_0_data
	wire          interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_ready;                                             // avalon_st_adapter_034:in_0_ready -> Interval_Timer_2nd_Core_2_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_034_out_0_valid;                                                                   // avalon_st_adapter_034:out_0_valid -> Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_034_out_0_data;                                                                    // avalon_st_adapter_034:out_0_data -> Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_034_out_0_ready;                                                                   // Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_034:out_0_ready
	wire    [0:0] avalon_st_adapter_034_out_0_error;                                                                   // avalon_st_adapter_034:out_0_error -> Interval_Timer_2nd_Core_2_s1_agent:rdata_fifo_sink_error
	wire          onchip_sram_s2_agent_rdata_fifo_out_valid;                                                           // Onchip_SRAM_s2_agent_rdata_fifo:out_valid -> avalon_st_adapter_035:in_0_valid
	wire   [33:0] onchip_sram_s2_agent_rdata_fifo_out_data;                                                            // Onchip_SRAM_s2_agent_rdata_fifo:out_data -> avalon_st_adapter_035:in_0_data
	wire          onchip_sram_s2_agent_rdata_fifo_out_ready;                                                           // avalon_st_adapter_035:in_0_ready -> Onchip_SRAM_s2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_035_out_0_valid;                                                                   // avalon_st_adapter_035:out_0_valid -> Onchip_SRAM_s2_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_035_out_0_data;                                                                    // avalon_st_adapter_035:out_0_data -> Onchip_SRAM_s2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_035_out_0_ready;                                                                   // Onchip_SRAM_s2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_035:out_0_ready
	wire    [0:0] avalon_st_adapter_035_out_0_error;                                                                   // avalon_st_adapter_035:out_0_error -> Onchip_SRAM_s2_agent:rdata_fifo_sink_error
	wire          nios2_debug_mem_slave_agent_rdata_fifo_out_valid;                                                    // Nios2_debug_mem_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_036:in_0_valid
	wire   [33:0] nios2_debug_mem_slave_agent_rdata_fifo_out_data;                                                     // Nios2_debug_mem_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_036:in_0_data
	wire          nios2_debug_mem_slave_agent_rdata_fifo_out_ready;                                                    // avalon_st_adapter_036:in_0_ready -> Nios2_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_036_out_0_valid;                                                                   // avalon_st_adapter_036:out_0_valid -> Nios2_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_036_out_0_data;                                                                    // avalon_st_adapter_036:out_0_data -> Nios2_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_036_out_0_ready;                                                                   // Nios2_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_036:out_0_ready
	wire    [0:0] avalon_st_adapter_036_out_0_error;                                                                   // avalon_st_adapter_036:out_0_error -> Nios2_debug_mem_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_data_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                               //                       clk.clk
		.reset                  (Nios2_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Nios2_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Nios2_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Nios2_data_master_byteenable),                                         //                          .byteenable
		.av_read                (Nios2_data_master_read),                                               //                          .read
		.av_readdata            (Nios2_data_master_readdata),                                           //                          .readdata
		.av_write               (Nios2_data_master_write),                                              //                          .write
		.av_writedata           (Nios2_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (Nios2_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_readdatavalid       (),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_2nd_core_data_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                        //                       clk.clk
		.reset                  (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_2nd_core_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_2nd_core_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_2nd_core_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_2nd_core_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_2nd_core_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_2nd_core_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_2nd_core_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_2nd_core_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_2nd_core_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_2nd_core_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_2nd_core_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Nios2_2nd_Core_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Nios2_2nd_Core_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Nios2_2nd_Core_data_master_byteenable),                                         //                          .byteenable
		.av_read                (Nios2_2nd_Core_data_master_read),                                               //                          .read
		.av_readdata            (Nios2_2nd_Core_data_master_readdata),                                           //                          .readdata
		.av_write               (Nios2_2nd_Core_data_master_write),                                              //                          .write
		.av_writedata           (Nios2_2nd_Core_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (Nios2_2nd_Core_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_readdatavalid       (),                                                                              //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) jtag_to_fpga_bridge_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                        //                       clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),               //                     reset.reset
		.uav_address            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (JTAG_to_FPGA_Bridge_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (JTAG_to_FPGA_Bridge_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (JTAG_to_FPGA_Bridge_master_byteenable),                                         //                          .byteenable
		.av_read                (JTAG_to_FPGA_Bridge_master_read),                                               //                          .read
		.av_readdata            (JTAG_to_FPGA_Bridge_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (JTAG_to_FPGA_Bridge_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (JTAG_to_FPGA_Bridge_master_write),                                              //                          .write
		.av_writedata           (JTAG_to_FPGA_Bridge_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (2),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) video_in_dma_addr_translation_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                                  //                       clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Video_In_DMA_Addr_Translation_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Video_In_DMA_Addr_Translation_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Video_In_DMA_Addr_Translation_master_byteenable),                                         //                          .byteenable
		.av_read                (Video_In_DMA_Addr_Translation_master_read),                                               //                          .read
		.av_readdata            (Video_In_DMA_Addr_Translation_master_readdata),                                           //                          .readdata
		.av_write               (Video_In_DMA_Addr_Translation_master_write),                                              //                          .write
		.av_writedata           (Video_In_DMA_Addr_Translation_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                                    //               (terminated)
		.av_debugaccess         (1'b0),                                                                                    //               (terminated)
		.uav_clken              (),                                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                                   //               (terminated)
		.av_response            (),                                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (16),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (2),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (2),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (2),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) video_in_subsystem_video_in_dma_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                                    //                       clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address            (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Video_In_Subsystem_video_in_dma_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Video_In_Subsystem_video_in_dma_master_waitrequest),                                        //                          .waitrequest
		.av_write               (Video_In_Subsystem_video_in_dma_master_write),                                              //                          .write
		.av_writedata           (Video_In_Subsystem_video_in_dma_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                      //               (terminated)
		.av_byteenable          (2'b11),                                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                                      //               (terminated)
		.av_read                (1'b0),                                                                                      //               (terminated)
		.av_readdata            (),                                                                                          //               (terminated)
		.av_readdatavalid       (),                                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                                      //               (terminated)
		.uav_clken              (),                                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                                     //               (terminated)
		.av_response            (),                                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_instruction_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                      //                       clk.clk
		.reset                  (Nios2_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Nios2_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Nios2_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (Nios2_instruction_master_read),                                               //                          .read
		.av_readdata            (Nios2_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (Nios2_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (28),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_2nd_core_instruction_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                               //                       clk.clk
		.reset                  (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Nios2_2nd_Core_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Nios2_2nd_Core_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (Nios2_2nd_Core_instruction_master_read),                                               //                          .read
		.av_readdata            (Nios2_2nd_Core_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (Nios2_2nd_Core_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                                 //               (terminated)
		.av_byteenable          (4'b1111),                                                                              //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                                 //               (terminated)
		.av_write               (1'b0),                                                                                 //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                 //               (terminated)
		.av_lock                (1'b0),                                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                                 //               (terminated)
		.uav_clken              (),                                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                                //               (terminated)
		.av_response            (),                                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) vga_subsystem_pixel_dma_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                            //                       clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (VGA_Subsystem_pixel_dma_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (VGA_Subsystem_pixel_dma_master_waitrequest),                                        //                          .waitrequest
		.av_read                (VGA_Subsystem_pixel_dma_master_read),                                               //                          .read
		.av_readdata            (VGA_Subsystem_pixel_dma_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (VGA_Subsystem_pixel_dma_master_readdatavalid),                                      //                          .readdatavalid
		.av_lock                (VGA_Subsystem_pixel_dma_master_lock),                                               //                          .lock
		.av_burstcount          (1'b1),                                                                              //               (terminated)
		.av_byteenable          (1'b1),                                                                              //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                                              //               (terminated)
		.av_write               (1'b0),                                                                              //               (terminated)
		.av_writedata           (8'b00000000),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                              //               (terminated)
		.uav_clken              (),                                                                                  //               (terminated)
		.av_clken               (1'b1),                                                                              //               (terminated)
		.uav_response           (2'b00),                                                                             //               (terminated)
		.av_response            (),                                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (2),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pixel_dma_addr_translation_master_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                               //                       clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                      //                     reset.reset
		.uav_address            (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (Pixel_DMA_Addr_Translation_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (Pixel_DMA_Addr_Translation_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (Pixel_DMA_Addr_Translation_master_byteenable),                                         //                          .byteenable
		.av_read                (Pixel_DMA_Addr_Translation_master_read),                                               //                          .read
		.av_readdata            (Pixel_DMA_Addr_Translation_master_readdata),                                           //                          .readdata
		.av_write               (Pixel_DMA_Addr_Translation_master_write),                                              //                          .write
		.av_writedata           (Pixel_DMA_Addr_Translation_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                                 //               (terminated)
		.av_readdatavalid       (),                                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                                 //               (terminated)
		.uav_clken              (),                                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                                //               (terminated)
		.av_response            (),                                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) adc_adc_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (adc_adc_slave_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (adc_adc_slave_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (adc_adc_slave_agent_m0_read),                                     //                         .read
		.uav_write              (adc_adc_slave_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (adc_adc_slave_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (adc_adc_slave_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (adc_adc_slave_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (adc_adc_slave_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (adc_adc_slave_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (adc_adc_slave_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (adc_adc_slave_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (ADC_adc_slave_address),                                           //      avalon_anti_slave_0.address
		.av_write               (ADC_adc_slave_write),                                             //                         .write
		.av_read                (ADC_adc_slave_read),                                              //                         .read
		.av_readdata            (ADC_adc_slave_readdata),                                          //                         .readdata
		.av_writedata           (ADC_adc_slave_writedata),                                         //                         .writedata
		.av_waitrequest         (ADC_adc_slave_waitrequest),                                       //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_subsystem_audio_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_subsystem_audio_slave_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (audio_subsystem_audio_slave_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (audio_subsystem_audio_slave_agent_m0_read),                       //                         .read
		.uav_write              (audio_subsystem_audio_slave_agent_m0_write),                      //                         .write
		.uav_waitrequest        (audio_subsystem_audio_slave_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (audio_subsystem_audio_slave_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (audio_subsystem_audio_slave_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (audio_subsystem_audio_slave_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (audio_subsystem_audio_slave_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (audio_subsystem_audio_slave_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (audio_subsystem_audio_slave_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (Audio_Subsystem_audio_slave_address),                             //      avalon_anti_slave_0.address
		.av_write               (Audio_Subsystem_audio_slave_write),                               //                         .write
		.av_read                (Audio_Subsystem_audio_slave_read),                                //                         .read
		.av_readdata            (Audio_Subsystem_audio_slave_readdata),                            //                         .readdata
		.av_writedata           (Audio_Subsystem_audio_slave_writedata),                           //                         .writedata
		.av_chipselect          (Audio_Subsystem_audio_slave_chipselect),                          //                         .chipselect
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) av_config_avalon_av_config_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (av_config_avalon_av_config_slave_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (av_config_avalon_av_config_slave_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (av_config_avalon_av_config_slave_agent_m0_read),                  //                         .read
		.uav_write              (av_config_avalon_av_config_slave_agent_m0_write),                 //                         .write
		.uav_waitrequest        (av_config_avalon_av_config_slave_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (av_config_avalon_av_config_slave_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (av_config_avalon_av_config_slave_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (av_config_avalon_av_config_slave_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (av_config_avalon_av_config_slave_agent_m0_writedata),             //                         .writedata
		.uav_lock               (av_config_avalon_av_config_slave_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (av_config_avalon_av_config_slave_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (AV_Config_avalon_av_config_slave_address),                        //      avalon_anti_slave_0.address
		.av_write               (AV_Config_avalon_av_config_slave_write),                          //                         .write
		.av_read                (AV_Config_avalon_av_config_slave_read),                           //                         .read
		.av_readdata            (AV_Config_avalon_av_config_slave_readdata),                       //                         .readdata
		.av_writedata           (AV_Config_avalon_av_config_slave_writedata),                      //                         .writedata
		.av_byteenable          (AV_Config_avalon_av_config_slave_byteenable),                     //                         .byteenable
		.av_waitrequest         (AV_Config_avalon_av_config_slave_waitrequest),                    //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) irda_avalon_irda_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (irda_avalon_irda_slave_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (irda_avalon_irda_slave_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (irda_avalon_irda_slave_agent_m0_read),                            //                         .read
		.uav_write              (irda_avalon_irda_slave_agent_m0_write),                           //                         .write
		.uav_waitrequest        (irda_avalon_irda_slave_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (irda_avalon_irda_slave_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (irda_avalon_irda_slave_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (irda_avalon_irda_slave_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (irda_avalon_irda_slave_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (irda_avalon_irda_slave_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (irda_avalon_irda_slave_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (IrDA_avalon_irda_slave_address),                                  //      avalon_anti_slave_0.address
		.av_write               (IrDA_avalon_irda_slave_write),                                    //                         .write
		.av_read                (IrDA_avalon_irda_slave_read),                                     //                         .read
		.av_readdata            (IrDA_avalon_irda_slave_readdata),                                 //                         .readdata
		.av_writedata           (IrDA_avalon_irda_slave_writedata),                                //                         .writedata
		.av_byteenable          (IrDA_avalon_irda_slave_byteenable),                               //                         .byteenable
		.av_chipselect          (IrDA_avalon_irda_slave_chipselect),                               //                         .chipselect
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                             //                      clk.clk
		.reset                  (JTAG_UART_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ps2_port_avalon_ps2_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ps2_port_avalon_ps2_slave_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (ps2_port_avalon_ps2_slave_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (ps2_port_avalon_ps2_slave_agent_m0_read),                         //                         .read
		.uav_write              (ps2_port_avalon_ps2_slave_agent_m0_write),                        //                         .write
		.uav_waitrequest        (ps2_port_avalon_ps2_slave_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (ps2_port_avalon_ps2_slave_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (ps2_port_avalon_ps2_slave_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (ps2_port_avalon_ps2_slave_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (ps2_port_avalon_ps2_slave_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (ps2_port_avalon_ps2_slave_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (ps2_port_avalon_ps2_slave_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (PS2_Port_avalon_ps2_slave_address),                               //      avalon_anti_slave_0.address
		.av_write               (PS2_Port_avalon_ps2_slave_write),                                 //                         .write
		.av_read                (PS2_Port_avalon_ps2_slave_read),                                  //                         .read
		.av_readdata            (PS2_Port_avalon_ps2_slave_readdata),                              //                         .readdata
		.av_writedata           (PS2_Port_avalon_ps2_slave_writedata),                             //                         .writedata
		.av_byteenable          (PS2_Port_avalon_ps2_slave_byteenable),                            //                         .byteenable
		.av_waitrequest         (PS2_Port_avalon_ps2_slave_waitrequest),                           //                         .waitrequest
		.av_chipselect          (PS2_Port_avalon_ps2_slave_chipselect),                            //                         .chipselect
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ps2_port_dual_avalon_ps2_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ps2_port_dual_avalon_ps2_slave_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (ps2_port_dual_avalon_ps2_slave_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (ps2_port_dual_avalon_ps2_slave_agent_m0_read),                    //                         .read
		.uav_write              (ps2_port_dual_avalon_ps2_slave_agent_m0_write),                   //                         .write
		.uav_waitrequest        (ps2_port_dual_avalon_ps2_slave_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (ps2_port_dual_avalon_ps2_slave_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (ps2_port_dual_avalon_ps2_slave_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (ps2_port_dual_avalon_ps2_slave_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (ps2_port_dual_avalon_ps2_slave_agent_m0_writedata),               //                         .writedata
		.uav_lock               (ps2_port_dual_avalon_ps2_slave_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (ps2_port_dual_avalon_ps2_slave_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (PS2_Port_Dual_avalon_ps2_slave_address),                          //      avalon_anti_slave_0.address
		.av_write               (PS2_Port_Dual_avalon_ps2_slave_write),                            //                         .write
		.av_read                (PS2_Port_Dual_avalon_ps2_slave_read),                             //                         .read
		.av_readdata            (PS2_Port_Dual_avalon_ps2_slave_readdata),                         //                         .readdata
		.av_writedata           (PS2_Port_Dual_avalon_ps2_slave_writedata),                        //                         .writedata
		.av_byteenable          (PS2_Port_Dual_avalon_ps2_slave_byteenable),                       //                         .byteenable
		.av_waitrequest         (PS2_Port_Dual_avalon_ps2_slave_waitrequest),                      //                         .waitrequest
		.av_chipselect          (PS2_Port_Dual_avalon_ps2_slave_chipselect),                       //                         .chipselect
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_subsystem_char_buffer_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (vga_subsystem_char_buffer_control_slave_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (vga_subsystem_char_buffer_control_slave_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (vga_subsystem_char_buffer_control_slave_agent_m0_read),           //                         .read
		.uav_write              (vga_subsystem_char_buffer_control_slave_agent_m0_write),          //                         .write
		.uav_waitrequest        (vga_subsystem_char_buffer_control_slave_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (vga_subsystem_char_buffer_control_slave_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (vga_subsystem_char_buffer_control_slave_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (vga_subsystem_char_buffer_control_slave_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (vga_subsystem_char_buffer_control_slave_agent_m0_writedata),      //                         .writedata
		.uav_lock               (vga_subsystem_char_buffer_control_slave_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (vga_subsystem_char_buffer_control_slave_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (VGA_Subsystem_char_buffer_control_slave_address),                 //      avalon_anti_slave_0.address
		.av_write               (VGA_Subsystem_char_buffer_control_slave_write),                   //                         .write
		.av_read                (VGA_Subsystem_char_buffer_control_slave_read),                    //                         .read
		.av_readdata            (VGA_Subsystem_char_buffer_control_slave_readdata),                //                         .readdata
		.av_writedata           (VGA_Subsystem_char_buffer_control_slave_writedata),               //                         .writedata
		.av_byteenable          (VGA_Subsystem_char_buffer_control_slave_byteenable),              //                         .byteenable
		.av_chipselect          (VGA_Subsystem_char_buffer_control_slave_chipselect),              //                         .chipselect
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_subsystem_char_buffer_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (vga_subsystem_char_buffer_slave_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (vga_subsystem_char_buffer_slave_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (vga_subsystem_char_buffer_slave_agent_m0_read),                   //                         .read
		.uav_write              (vga_subsystem_char_buffer_slave_agent_m0_write),                  //                         .write
		.uav_waitrequest        (vga_subsystem_char_buffer_slave_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (vga_subsystem_char_buffer_slave_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (vga_subsystem_char_buffer_slave_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (vga_subsystem_char_buffer_slave_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (vga_subsystem_char_buffer_slave_agent_m0_writedata),              //                         .writedata
		.uav_lock               (vga_subsystem_char_buffer_slave_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (vga_subsystem_char_buffer_slave_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (VGA_Subsystem_char_buffer_slave_address),                         //      avalon_anti_slave_0.address
		.av_write               (VGA_Subsystem_char_buffer_slave_write),                           //                         .write
		.av_read                (VGA_Subsystem_char_buffer_slave_read),                            //                         .read
		.av_readdata            (VGA_Subsystem_char_buffer_slave_readdata),                        //                         .readdata
		.av_writedata           (VGA_Subsystem_char_buffer_slave_writedata),                       //                         .writedata
		.av_byteenable          (VGA_Subsystem_char_buffer_slave_byteenable),                      //                         .byteenable
		.av_waitrequest         (VGA_Subsystem_char_buffer_slave_waitrequest),                     //                         .waitrequest
		.av_chipselect          (VGA_Subsystem_char_buffer_slave_chipselect),                      //                         .chipselect
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),                               //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),                              //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (SysID_control_slave_address),                                     //      avalon_anti_slave_0.address
		.av_readdata            (SysID_control_slave_readdata),                                    //                         .readdata
		.av_write               (),                                                                //              (terminated)
		.av_read                (),                                                                //              (terminated)
		.av_writedata           (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_debug_mem_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                       //                      clk.clk
		.reset                  (Nios2_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Nios2_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Nios2_debug_mem_slave_write),                  //                         .write
		.av_read                (Nios2_debug_mem_slave_read),                   //                         .read
		.av_readdata            (Nios2_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (Nios2_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (Nios2_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Nios2_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (Nios2_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_in_subsystem_edge_detection_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                                 //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (video_in_subsystem_edge_detection_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_in_subsystem_edge_detection_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_in_subsystem_edge_detection_control_slave_agent_m0_read),          //                         .read
		.uav_write              (video_in_subsystem_edge_detection_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_in_subsystem_edge_detection_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_in_subsystem_edge_detection_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_in_subsystem_edge_detection_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_in_subsystem_edge_detection_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_in_subsystem_edge_detection_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_in_subsystem_edge_detection_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_in_subsystem_edge_detection_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Video_In_Subsystem_edge_detection_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Video_In_Subsystem_edge_detection_control_slave_write),                  //                         .write
		.av_readdata            (Video_In_Subsystem_edge_detection_control_slave_readdata),               //                         .readdata
		.av_writedata           (Video_In_Subsystem_edge_detection_control_slave_writedata),              //                         .writedata
		.av_chipselect          (Video_In_Subsystem_edge_detection_control_slave_chipselect),             //                         .chipselect
		.av_read                (),                                                                       //              (terminated)
		.av_begintransfer       (),                                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                                       //              (terminated)
		.av_burstcount          (),                                                                       //              (terminated)
		.av_byteenable          (),                                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                                   //              (terminated)
		.av_writebyteenable     (),                                                                       //              (terminated)
		.av_lock                (),                                                                       //              (terminated)
		.av_clken               (),                                                                       //              (terminated)
		.uav_clken              (1'b0),                                                                   //              (terminated)
		.av_debugaccess         (),                                                                       //              (terminated)
		.av_outputenable        (),                                                                       //              (terminated)
		.uav_response           (),                                                                       //              (terminated)
		.av_response            (2'b00),                                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_subsystem_pixel_dma_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (vga_subsystem_pixel_dma_control_slave_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (vga_subsystem_pixel_dma_control_slave_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (vga_subsystem_pixel_dma_control_slave_agent_m0_read),             //                         .read
		.uav_write              (vga_subsystem_pixel_dma_control_slave_agent_m0_write),            //                         .write
		.uav_waitrequest        (vga_subsystem_pixel_dma_control_slave_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (vga_subsystem_pixel_dma_control_slave_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (vga_subsystem_pixel_dma_control_slave_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (vga_subsystem_pixel_dma_control_slave_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (vga_subsystem_pixel_dma_control_slave_agent_m0_writedata),        //                         .writedata
		.uav_lock               (vga_subsystem_pixel_dma_control_slave_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (vga_subsystem_pixel_dma_control_slave_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (VGA_Subsystem_pixel_dma_control_slave_address),                   //      avalon_anti_slave_0.address
		.av_write               (VGA_Subsystem_pixel_dma_control_slave_write),                     //                         .write
		.av_read                (VGA_Subsystem_pixel_dma_control_slave_read),                      //                         .read
		.av_readdata            (VGA_Subsystem_pixel_dma_control_slave_readdata),                  //                         .readdata
		.av_writedata           (VGA_Subsystem_pixel_dma_control_slave_writedata),                 //                         .writedata
		.av_byteenable          (VGA_Subsystem_pixel_dma_control_slave_byteenable),                //                         .byteenable
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_s1_agent_m0_address),                                       // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_s1_agent_m0_burstcount),                                    //                         .burstcount
		.uav_read               (sdram_s1_agent_m0_read),                                          //                         .read
		.uav_write              (sdram_s1_agent_m0_write),                                         //                         .write
		.uav_waitrequest        (sdram_s1_agent_m0_waitrequest),                                   //                         .waitrequest
		.uav_readdatavalid      (sdram_s1_agent_m0_readdatavalid),                                 //                         .readdatavalid
		.uav_byteenable         (sdram_s1_agent_m0_byteenable),                                    //                         .byteenable
		.uav_readdata           (sdram_s1_agent_m0_readdata),                                      //                         .readdata
		.uav_writedata          (sdram_s1_agent_m0_writedata),                                     //                         .writedata
		.uav_lock               (sdram_s1_agent_m0_lock),                                          //                         .lock
		.uav_debugaccess        (sdram_s1_agent_m0_debugaccess),                                   //                         .debugaccess
		.av_address             (SDRAM_s1_address),                                                //      avalon_anti_slave_0.address
		.av_write               (SDRAM_s1_write),                                                  //                         .write
		.av_read                (SDRAM_s1_read),                                                   //                         .read
		.av_readdata            (SDRAM_s1_readdata),                                               //                         .readdata
		.av_writedata           (SDRAM_s1_writedata),                                              //                         .writedata
		.av_byteenable          (SDRAM_s1_byteenable),                                             //                         .byteenable
		.av_readdatavalid       (SDRAM_s1_readdatavalid),                                          //                         .readdatavalid
		.av_waitrequest         (SDRAM_s1_waitrequest),                                            //                         .waitrequest
		.av_chipselect          (SDRAM_s1_chipselect),                                             //                         .chipselect
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_sram_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_sram_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_sram_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (onchip_sram_s1_agent_m0_read),                                    //                         .read
		.uav_write              (onchip_sram_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (onchip_sram_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (onchip_sram_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (onchip_sram_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (onchip_sram_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (onchip_sram_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (onchip_sram_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (onchip_sram_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (Onchip_SRAM_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (Onchip_SRAM_s1_write),                                            //                         .write
		.av_readdata            (Onchip_SRAM_s1_readdata),                                         //                         .readdata
		.av_writedata           (Onchip_SRAM_s1_writedata),                                        //                         .writedata
		.av_byteenable          (Onchip_SRAM_s1_byteenable),                                       //                         .byteenable
		.av_chipselect          (Onchip_SRAM_s1_chipselect),                                       //                         .chipselect
		.av_clken               (Onchip_SRAM_s1_clken),                                            //                         .clken
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (leds_s1_agent_m0_address),                                        // avalon_universal_slave_0.address
		.uav_burstcount         (leds_s1_agent_m0_burstcount),                                     //                         .burstcount
		.uav_read               (leds_s1_agent_m0_read),                                           //                         .read
		.uav_write              (leds_s1_agent_m0_write),                                          //                         .write
		.uav_waitrequest        (leds_s1_agent_m0_waitrequest),                                    //                         .waitrequest
		.uav_readdatavalid      (leds_s1_agent_m0_readdatavalid),                                  //                         .readdatavalid
		.uav_byteenable         (leds_s1_agent_m0_byteenable),                                     //                         .byteenable
		.uav_readdata           (leds_s1_agent_m0_readdata),                                       //                         .readdata
		.uav_writedata          (leds_s1_agent_m0_writedata),                                      //                         .writedata
		.uav_lock               (leds_s1_agent_m0_lock),                                           //                         .lock
		.uav_debugaccess        (leds_s1_agent_m0_debugaccess),                                    //                         .debugaccess
		.av_address             (LEDs_s1_address),                                                 //      avalon_anti_slave_0.address
		.av_write               (LEDs_s1_write),                                                   //                         .write
		.av_readdata            (LEDs_s1_readdata),                                                //                         .readdata
		.av_writedata           (LEDs_s1_writedata),                                               //                         .writedata
		.av_chipselect          (LEDs_s1_chipselect),                                              //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex3_hex0_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex3_hex0_s1_agent_m0_address),                                   // avalon_universal_slave_0.address
		.uav_burstcount         (hex3_hex0_s1_agent_m0_burstcount),                                //                         .burstcount
		.uav_read               (hex3_hex0_s1_agent_m0_read),                                      //                         .read
		.uav_write              (hex3_hex0_s1_agent_m0_write),                                     //                         .write
		.uav_waitrequest        (hex3_hex0_s1_agent_m0_waitrequest),                               //                         .waitrequest
		.uav_readdatavalid      (hex3_hex0_s1_agent_m0_readdatavalid),                             //                         .readdatavalid
		.uav_byteenable         (hex3_hex0_s1_agent_m0_byteenable),                                //                         .byteenable
		.uav_readdata           (hex3_hex0_s1_agent_m0_readdata),                                  //                         .readdata
		.uav_writedata          (hex3_hex0_s1_agent_m0_writedata),                                 //                         .writedata
		.uav_lock               (hex3_hex0_s1_agent_m0_lock),                                      //                         .lock
		.uav_debugaccess        (hex3_hex0_s1_agent_m0_debugaccess),                               //                         .debugaccess
		.av_address             (HEX3_HEX0_s1_address),                                            //      avalon_anti_slave_0.address
		.av_write               (HEX3_HEX0_s1_write),                                              //                         .write
		.av_readdata            (HEX3_HEX0_s1_readdata),                                           //                         .readdata
		.av_writedata           (HEX3_HEX0_s1_writedata),                                          //                         .writedata
		.av_chipselect          (HEX3_HEX0_s1_chipselect),                                         //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex5_hex4_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex5_hex4_s1_agent_m0_address),                                   // avalon_universal_slave_0.address
		.uav_burstcount         (hex5_hex4_s1_agent_m0_burstcount),                                //                         .burstcount
		.uav_read               (hex5_hex4_s1_agent_m0_read),                                      //                         .read
		.uav_write              (hex5_hex4_s1_agent_m0_write),                                     //                         .write
		.uav_waitrequest        (hex5_hex4_s1_agent_m0_waitrequest),                               //                         .waitrequest
		.uav_readdatavalid      (hex5_hex4_s1_agent_m0_readdatavalid),                             //                         .readdatavalid
		.uav_byteenable         (hex5_hex4_s1_agent_m0_byteenable),                                //                         .byteenable
		.uav_readdata           (hex5_hex4_s1_agent_m0_readdata),                                  //                         .readdata
		.uav_writedata          (hex5_hex4_s1_agent_m0_writedata),                                 //                         .writedata
		.uav_lock               (hex5_hex4_s1_agent_m0_lock),                                      //                         .lock
		.uav_debugaccess        (hex5_hex4_s1_agent_m0_debugaccess),                               //                         .debugaccess
		.av_address             (HEX5_HEX4_s1_address),                                            //      avalon_anti_slave_0.address
		.av_write               (HEX5_HEX4_s1_write),                                              //                         .write
		.av_readdata            (HEX5_HEX4_s1_readdata),                                           //                         .readdata
		.av_writedata           (HEX5_HEX4_s1_writedata),                                          //                         .writedata
		.av_chipselect          (HEX5_HEX4_s1_chipselect),                                         //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) slider_switches_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (slider_switches_s1_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (slider_switches_s1_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (slider_switches_s1_agent_m0_read),                                //                         .read
		.uav_write              (slider_switches_s1_agent_m0_write),                               //                         .write
		.uav_waitrequest        (slider_switches_s1_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (slider_switches_s1_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (slider_switches_s1_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (slider_switches_s1_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (slider_switches_s1_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (slider_switches_s1_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (slider_switches_s1_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (Slider_Switches_s1_address),                                      //      avalon_anti_slave_0.address
		.av_readdata            (Slider_Switches_s1_readdata),                                     //                         .readdata
		.av_write               (),                                                                //              (terminated)
		.av_read                (),                                                                //              (terminated)
		.av_writedata           (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pushbuttons_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pushbuttons_s1_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (pushbuttons_s1_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (pushbuttons_s1_agent_m0_read),                                    //                         .read
		.uav_write              (pushbuttons_s1_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (pushbuttons_s1_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (pushbuttons_s1_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (pushbuttons_s1_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (pushbuttons_s1_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (pushbuttons_s1_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (pushbuttons_s1_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (pushbuttons_s1_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (Pushbuttons_s1_address),                                          //      avalon_anti_slave_0.address
		.av_write               (Pushbuttons_s1_write),                                            //                         .write
		.av_readdata            (Pushbuttons_s1_readdata),                                         //                         .readdata
		.av_writedata           (Pushbuttons_s1_writedata),                                        //                         .writedata
		.av_chipselect          (Pushbuttons_s1_chipselect),                                       //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) expansion_jp1_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (expansion_jp1_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (expansion_jp1_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (expansion_jp1_s1_agent_m0_read),                                  //                         .read
		.uav_write              (expansion_jp1_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (expansion_jp1_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (expansion_jp1_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (expansion_jp1_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (expansion_jp1_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (expansion_jp1_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (expansion_jp1_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (expansion_jp1_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (Expansion_JP1_s1_address),                                        //      avalon_anti_slave_0.address
		.av_write               (Expansion_JP1_s1_write),                                          //                         .write
		.av_readdata            (Expansion_JP1_s1_readdata),                                       //                         .readdata
		.av_writedata           (Expansion_JP1_s1_writedata),                                      //                         .writedata
		.av_chipselect          (Expansion_JP1_s1_chipselect),                                     //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) expansion_jp2_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (expansion_jp2_s1_agent_m0_address),                               // avalon_universal_slave_0.address
		.uav_burstcount         (expansion_jp2_s1_agent_m0_burstcount),                            //                         .burstcount
		.uav_read               (expansion_jp2_s1_agent_m0_read),                                  //                         .read
		.uav_write              (expansion_jp2_s1_agent_m0_write),                                 //                         .write
		.uav_waitrequest        (expansion_jp2_s1_agent_m0_waitrequest),                           //                         .waitrequest
		.uav_readdatavalid      (expansion_jp2_s1_agent_m0_readdatavalid),                         //                         .readdatavalid
		.uav_byteenable         (expansion_jp2_s1_agent_m0_byteenable),                            //                         .byteenable
		.uav_readdata           (expansion_jp2_s1_agent_m0_readdata),                              //                         .readdata
		.uav_writedata          (expansion_jp2_s1_agent_m0_writedata),                             //                         .writedata
		.uav_lock               (expansion_jp2_s1_agent_m0_lock),                                  //                         .lock
		.uav_debugaccess        (expansion_jp2_s1_agent_m0_debugaccess),                           //                         .debugaccess
		.av_address             (Expansion_JP2_s1_address),                                        //      avalon_anti_slave_0.address
		.av_write               (Expansion_JP2_s1_write),                                          //                         .write
		.av_readdata            (Expansion_JP2_s1_readdata),                                       //                         .readdata
		.av_writedata           (Expansion_JP2_s1_writedata),                                      //                         .writedata
		.av_chipselect          (Expansion_JP2_s1_chipselect),                                     //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interval_timer_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (interval_timer_s1_agent_m0_address),                              // avalon_universal_slave_0.address
		.uav_burstcount         (interval_timer_s1_agent_m0_burstcount),                           //                         .burstcount
		.uav_read               (interval_timer_s1_agent_m0_read),                                 //                         .read
		.uav_write              (interval_timer_s1_agent_m0_write),                                //                         .write
		.uav_waitrequest        (interval_timer_s1_agent_m0_waitrequest),                          //                         .waitrequest
		.uav_readdatavalid      (interval_timer_s1_agent_m0_readdatavalid),                        //                         .readdatavalid
		.uav_byteenable         (interval_timer_s1_agent_m0_byteenable),                           //                         .byteenable
		.uav_readdata           (interval_timer_s1_agent_m0_readdata),                             //                         .readdata
		.uav_writedata          (interval_timer_s1_agent_m0_writedata),                            //                         .writedata
		.uav_lock               (interval_timer_s1_agent_m0_lock),                                 //                         .lock
		.uav_debugaccess        (interval_timer_s1_agent_m0_debugaccess),                          //                         .debugaccess
		.av_address             (Interval_Timer_s1_address),                                       //      avalon_anti_slave_0.address
		.av_write               (Interval_Timer_s1_write),                                         //                         .write
		.av_readdata            (Interval_Timer_s1_readdata),                                      //                         .readdata
		.av_writedata           (Interval_Timer_s1_writedata),                                     //                         .writedata
		.av_chipselect          (Interval_Timer_s1_chipselect),                                    //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interval_timer_2_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (interval_timer_2_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (interval_timer_2_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (interval_timer_2_s1_agent_m0_read),                               //                         .read
		.uav_write              (interval_timer_2_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (interval_timer_2_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (interval_timer_2_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (interval_timer_2_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (interval_timer_2_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (interval_timer_2_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (interval_timer_2_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (interval_timer_2_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (Interval_Timer_2_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (Interval_Timer_2_s1_write),                                       //                         .write
		.av_readdata            (Interval_Timer_2_s1_readdata),                                    //                         .readdata
		.av_writedata           (Interval_Timer_2_s1_writedata),                                   //                         .writedata
		.av_chipselect          (Interval_Timer_2_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_in_subsystem_video_in_dma_control_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                               //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (video_in_subsystem_video_in_dma_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (video_in_subsystem_video_in_dma_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (video_in_subsystem_video_in_dma_control_slave_agent_m0_read),          //                         .read
		.uav_write              (video_in_subsystem_video_in_dma_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (video_in_subsystem_video_in_dma_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (video_in_subsystem_video_in_dma_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (video_in_subsystem_video_in_dma_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (video_in_subsystem_video_in_dma_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (video_in_subsystem_video_in_dma_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (video_in_subsystem_video_in_dma_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (video_in_subsystem_video_in_dma_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Video_In_Subsystem_video_in_dma_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Video_In_Subsystem_video_in_dma_control_slave_write),                  //                         .write
		.av_read                (Video_In_Subsystem_video_in_dma_control_slave_read),                   //                         .read
		.av_readdata            (Video_In_Subsystem_video_in_dma_control_slave_readdata),               //                         .readdata
		.av_writedata           (Video_In_Subsystem_video_in_dma_control_slave_writedata),              //                         .writedata
		.av_byteenable          (Video_In_Subsystem_video_in_dma_control_slave_byteenable),             //                         .byteenable
		.av_begintransfer       (),                                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                                     //              (terminated)
		.av_burstcount          (),                                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                                 //              (terminated)
		.av_writebyteenable     (),                                                                     //              (terminated)
		.av_lock                (),                                                                     //              (terminated)
		.av_chipselect          (),                                                                     //              (terminated)
		.av_clken               (),                                                                     //              (terminated)
		.uav_clken              (1'b0),                                                                 //              (terminated)
		.av_debugaccess         (),                                                                     //              (terminated)
		.av_outputenable        (),                                                                     //              (terminated)
		.uav_response           (),                                                                     //              (terminated)
		.av_response            (2'b00),                                                                //              (terminated)
		.uav_writeresponsevalid (),                                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (28),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) f2h_mem_window_00000000_windowed_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (f2h_mem_window_00000000_windowed_slave_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (f2h_mem_window_00000000_windowed_slave_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (f2h_mem_window_00000000_windowed_slave_agent_m0_read),            //                         .read
		.uav_write              (f2h_mem_window_00000000_windowed_slave_agent_m0_write),           //                         .write
		.uav_waitrequest        (f2h_mem_window_00000000_windowed_slave_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (f2h_mem_window_00000000_windowed_slave_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (f2h_mem_window_00000000_windowed_slave_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (f2h_mem_window_00000000_windowed_slave_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (f2h_mem_window_00000000_windowed_slave_agent_m0_writedata),       //                         .writedata
		.uav_lock               (f2h_mem_window_00000000_windowed_slave_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (f2h_mem_window_00000000_windowed_slave_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (F2H_Mem_Window_00000000_windowed_slave_address),                  //      avalon_anti_slave_0.address
		.av_write               (F2H_Mem_Window_00000000_windowed_slave_write),                    //                         .write
		.av_read                (F2H_Mem_Window_00000000_windowed_slave_read),                     //                         .read
		.av_readdata            (F2H_Mem_Window_00000000_windowed_slave_readdata),                 //                         .readdata
		.av_writedata           (F2H_Mem_Window_00000000_windowed_slave_writedata),                //                         .writedata
		.av_burstcount          (F2H_Mem_Window_00000000_windowed_slave_burstcount),               //                         .burstcount
		.av_byteenable          (F2H_Mem_Window_00000000_windowed_slave_byteenable),               //                         .byteenable
		.av_readdatavalid       (F2H_Mem_Window_00000000_windowed_slave_readdatavalid),            //                         .readdatavalid
		.av_waitrequest         (F2H_Mem_Window_00000000_windowed_slave_waitrequest),              //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) f2h_mem_window_ff600000_windowed_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (f2h_mem_window_ff600000_windowed_slave_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (f2h_mem_window_ff600000_windowed_slave_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (f2h_mem_window_ff600000_windowed_slave_agent_m0_read),            //                         .read
		.uav_write              (f2h_mem_window_ff600000_windowed_slave_agent_m0_write),           //                         .write
		.uav_waitrequest        (f2h_mem_window_ff600000_windowed_slave_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (f2h_mem_window_ff600000_windowed_slave_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (f2h_mem_window_ff600000_windowed_slave_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (f2h_mem_window_ff600000_windowed_slave_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (f2h_mem_window_ff600000_windowed_slave_agent_m0_writedata),       //                         .writedata
		.uav_lock               (f2h_mem_window_ff600000_windowed_slave_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (f2h_mem_window_ff600000_windowed_slave_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (F2H_Mem_Window_FF600000_windowed_slave_address),                  //      avalon_anti_slave_0.address
		.av_write               (F2H_Mem_Window_FF600000_windowed_slave_write),                    //                         .write
		.av_read                (F2H_Mem_Window_FF600000_windowed_slave_read),                     //                         .read
		.av_readdata            (F2H_Mem_Window_FF600000_windowed_slave_readdata),                 //                         .readdata
		.av_writedata           (F2H_Mem_Window_FF600000_windowed_slave_writedata),                //                         .writedata
		.av_burstcount          (F2H_Mem_Window_FF600000_windowed_slave_burstcount),               //                         .burstcount
		.av_byteenable          (F2H_Mem_Window_FF600000_windowed_slave_byteenable),               //                         .byteenable
		.av_readdatavalid       (F2H_Mem_Window_FF600000_windowed_slave_readdatavalid),            //                         .readdatavalid
		.av_waitrequest         (F2H_Mem_Window_FF600000_windowed_slave_waitrequest),              //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (21),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) f2h_mem_window_ff800000_windowed_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (f2h_mem_window_ff800000_windowed_slave_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (f2h_mem_window_ff800000_windowed_slave_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (f2h_mem_window_ff800000_windowed_slave_agent_m0_read),            //                         .read
		.uav_write              (f2h_mem_window_ff800000_windowed_slave_agent_m0_write),           //                         .write
		.uav_waitrequest        (f2h_mem_window_ff800000_windowed_slave_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (f2h_mem_window_ff800000_windowed_slave_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (f2h_mem_window_ff800000_windowed_slave_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (f2h_mem_window_ff800000_windowed_slave_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (f2h_mem_window_ff800000_windowed_slave_agent_m0_writedata),       //                         .writedata
		.uav_lock               (f2h_mem_window_ff800000_windowed_slave_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (f2h_mem_window_ff800000_windowed_slave_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (F2H_Mem_Window_FF800000_windowed_slave_address),                  //      avalon_anti_slave_0.address
		.av_write               (F2H_Mem_Window_FF800000_windowed_slave_write),                    //                         .write
		.av_read                (F2H_Mem_Window_FF800000_windowed_slave_read),                     //                         .read
		.av_readdata            (F2H_Mem_Window_FF800000_windowed_slave_readdata),                 //                         .readdata
		.av_writedata           (F2H_Mem_Window_FF800000_windowed_slave_writedata),                //                         .writedata
		.av_burstcount          (F2H_Mem_Window_FF800000_windowed_slave_burstcount),               //                         .burstcount
		.av_byteenable          (F2H_Mem_Window_FF800000_windowed_slave_byteenable),               //                         .byteenable
		.av_readdatavalid       (F2H_Mem_Window_FF800000_windowed_slave_readdatavalid),            //                         .readdatavalid
		.av_waitrequest         (F2H_Mem_Window_FF800000_windowed_slave_waitrequest),              //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_2nd_core_avalon_jtag_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                      //                      clk.clk
		.reset                  (JTAG_UART_reset_reset_bridge_in_reset_reset),                 //                    reset.reset
		.uav_address            (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (JTAG_UART_2nd_Core_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_2nd_Core_avalon_jtag_slave_write),                  //                         .write
		.av_read                (JTAG_UART_2nd_Core_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (JTAG_UART_2nd_Core_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (JTAG_UART_2nd_Core_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (JTAG_UART_2nd_Core_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (JTAG_UART_2nd_Core_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_2nd_core_debug_mem_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                //                      clk.clk
		.reset                  (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_2nd_core_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_2nd_core_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_2nd_core_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_2nd_core_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_2nd_core_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_2nd_core_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_2nd_core_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_2nd_core_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_2nd_core_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_2nd_core_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_2nd_core_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Nios2_2nd_Core_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (Nios2_2nd_Core_debug_mem_slave_write),                  //                         .write
		.av_read                (Nios2_2nd_Core_debug_mem_slave_read),                   //                         .read
		.av_readdata            (Nios2_2nd_Core_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (Nios2_2nd_Core_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (Nios2_2nd_Core_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (Nios2_2nd_Core_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (Nios2_2nd_Core_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interval_timer_2nd_core_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (interval_timer_2nd_core_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (interval_timer_2nd_core_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (interval_timer_2nd_core_s1_agent_m0_read),                        //                         .read
		.uav_write              (interval_timer_2nd_core_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (interval_timer_2nd_core_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (interval_timer_2nd_core_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (interval_timer_2nd_core_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (interval_timer_2nd_core_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (interval_timer_2nd_core_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (interval_timer_2nd_core_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (interval_timer_2nd_core_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (Interval_Timer_2nd_Core_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (Interval_Timer_2nd_Core_s1_write),                                //                         .write
		.av_readdata            (Interval_Timer_2nd_Core_s1_readdata),                             //                         .readdata
		.av_writedata           (Interval_Timer_2nd_Core_s1_writedata),                            //                         .writedata
		.av_chipselect          (Interval_Timer_2nd_Core_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) interval_timer_2nd_core_2_s1_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (interval_timer_2nd_core_2_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (interval_timer_2nd_core_2_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (interval_timer_2nd_core_2_s1_agent_m0_read),                      //                         .read
		.uav_write              (interval_timer_2nd_core_2_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (interval_timer_2nd_core_2_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (interval_timer_2nd_core_2_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (interval_timer_2nd_core_2_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (interval_timer_2nd_core_2_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (interval_timer_2nd_core_2_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (interval_timer_2nd_core_2_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (interval_timer_2nd_core_2_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (Interval_Timer_2nd_Core_2_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (Interval_Timer_2nd_Core_2_s1_write),                              //                         .write
		.av_readdata            (Interval_Timer_2nd_Core_2_s1_readdata),                           //                         .readdata
		.av_writedata           (Interval_Timer_2nd_Core_2_s1_writedata),                          //                         .writedata
		.av_chipselect          (Interval_Timer_2nd_Core_2_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_for_arm_0_avalon_jtag_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_read),             //                         .read
		.uav_write              (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_write),            //                         .write
		.uav_waitrequest        (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_writedata),        //                         .writedata
		.uav_lock               (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (JTAG_UART_for_ARM_0_avalon_jtag_slave_address),                   //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_for_ARM_0_avalon_jtag_slave_write),                     //                         .write
		.av_read                (JTAG_UART_for_ARM_0_avalon_jtag_slave_read),                      //                         .read
		.av_readdata            (JTAG_UART_for_ARM_0_avalon_jtag_slave_readdata),                  //                         .readdata
		.av_writedata           (JTAG_UART_for_ARM_0_avalon_jtag_slave_writedata),                 //                         .writedata
		.av_waitrequest         (JTAG_UART_for_ARM_0_avalon_jtag_slave_waitrequest),               //                         .waitrequest
		.av_chipselect          (JTAG_UART_for_ARM_0_avalon_jtag_slave_chipselect),                //                         .chipselect
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_for_arm_1_avalon_jtag_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_read),             //                         .read
		.uav_write              (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_write),            //                         .write
		.uav_waitrequest        (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_writedata),        //                         .writedata
		.uav_lock               (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (JTAG_UART_for_ARM_1_avalon_jtag_slave_address),                   //      avalon_anti_slave_0.address
		.av_write               (JTAG_UART_for_ARM_1_avalon_jtag_slave_write),                     //                         .write
		.av_read                (JTAG_UART_for_ARM_1_avalon_jtag_slave_read),                      //                         .read
		.av_readdata            (JTAG_UART_for_ARM_1_avalon_jtag_slave_readdata),                  //                         .readdata
		.av_writedata           (JTAG_UART_for_ARM_1_avalon_jtag_slave_writedata),                 //                         .writedata
		.av_waitrequest         (JTAG_UART_for_ARM_1_avalon_jtag_slave_waitrequest),               //                         .waitrequest
		.av_chipselect          (JTAG_UART_for_ARM_1_avalon_jtag_slave_chipselect),                //                         .chipselect
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pixel_dma_addr_translation_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pixel_dma_addr_translation_slave_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (pixel_dma_addr_translation_slave_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (pixel_dma_addr_translation_slave_agent_m0_read),                  //                         .read
		.uav_write              (pixel_dma_addr_translation_slave_agent_m0_write),                 //                         .write
		.uav_waitrequest        (pixel_dma_addr_translation_slave_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (pixel_dma_addr_translation_slave_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (pixel_dma_addr_translation_slave_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (pixel_dma_addr_translation_slave_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (pixel_dma_addr_translation_slave_agent_m0_writedata),             //                         .writedata
		.uav_lock               (pixel_dma_addr_translation_slave_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (pixel_dma_addr_translation_slave_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (Pixel_DMA_Addr_Translation_slave_address),                        //      avalon_anti_slave_0.address
		.av_write               (Pixel_DMA_Addr_Translation_slave_write),                          //                         .write
		.av_read                (Pixel_DMA_Addr_Translation_slave_read),                           //                         .read
		.av_readdata            (Pixel_DMA_Addr_Translation_slave_readdata),                       //                         .readdata
		.av_writedata           (Pixel_DMA_Addr_Translation_slave_writedata),                      //                         .writedata
		.av_byteenable          (Pixel_DMA_Addr_Translation_slave_byteenable),                     //                         .byteenable
		.av_waitrequest         (Pixel_DMA_Addr_Translation_slave_waitrequest),                    //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) video_in_dma_addr_translation_slave_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (video_in_dma_addr_translation_slave_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount         (video_in_dma_addr_translation_slave_agent_m0_burstcount),         //                         .burstcount
		.uav_read               (video_in_dma_addr_translation_slave_agent_m0_read),               //                         .read
		.uav_write              (video_in_dma_addr_translation_slave_agent_m0_write),              //                         .write
		.uav_waitrequest        (video_in_dma_addr_translation_slave_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid      (video_in_dma_addr_translation_slave_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable         (video_in_dma_addr_translation_slave_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata           (video_in_dma_addr_translation_slave_agent_m0_readdata),           //                         .readdata
		.uav_writedata          (video_in_dma_addr_translation_slave_agent_m0_writedata),          //                         .writedata
		.uav_lock               (video_in_dma_addr_translation_slave_agent_m0_lock),               //                         .lock
		.uav_debugaccess        (video_in_dma_addr_translation_slave_agent_m0_debugaccess),        //                         .debugaccess
		.av_address             (Video_In_DMA_Addr_Translation_slave_address),                     //      avalon_anti_slave_0.address
		.av_write               (Video_In_DMA_Addr_Translation_slave_write),                       //                         .write
		.av_read                (Video_In_DMA_Addr_Translation_slave_read),                        //                         .read
		.av_readdata            (Video_In_DMA_Addr_Translation_slave_readdata),                    //                         .readdata
		.av_writedata           (Video_In_DMA_Addr_Translation_slave_writedata),                   //                         .writedata
		.av_byteenable          (Video_In_DMA_Addr_Translation_slave_byteenable),                  //                         .byteenable
		.av_waitrequest         (Video_In_DMA_Addr_Translation_slave_waitrequest),                 //                         .waitrequest
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_sram_s2_translator (
		.clk                    (System_PLL_sys_clk_clk),                                          //                      clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_sram_s2_agent_m0_address),                                 // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_sram_s2_agent_m0_burstcount),                              //                         .burstcount
		.uav_read               (onchip_sram_s2_agent_m0_read),                                    //                         .read
		.uav_write              (onchip_sram_s2_agent_m0_write),                                   //                         .write
		.uav_waitrequest        (onchip_sram_s2_agent_m0_waitrequest),                             //                         .waitrequest
		.uav_readdatavalid      (onchip_sram_s2_agent_m0_readdatavalid),                           //                         .readdatavalid
		.uav_byteenable         (onchip_sram_s2_agent_m0_byteenable),                              //                         .byteenable
		.uav_readdata           (onchip_sram_s2_agent_m0_readdata),                                //                         .readdata
		.uav_writedata          (onchip_sram_s2_agent_m0_writedata),                               //                         .writedata
		.uav_lock               (onchip_sram_s2_agent_m0_lock),                                    //                         .lock
		.uav_debugaccess        (onchip_sram_s2_agent_m0_debugaccess),                             //                         .debugaccess
		.av_address             (Onchip_SRAM_s2_address),                                          //      avalon_anti_slave_0.address
		.av_write               (Onchip_SRAM_s2_write),                                            //                         .write
		.av_readdata            (Onchip_SRAM_s2_readdata),                                         //                         .readdata
		.av_writedata           (Onchip_SRAM_s2_writedata),                                        //                         .writedata
		.av_byteenable          (Onchip_SRAM_s2_byteenable),                                       //                         .byteenable
		.av_chipselect          (Onchip_SRAM_s2_chipselect),                                       //                         .chipselect
		.av_clken               (Onchip_SRAM_s2_clken),                                            //                         .clken
		.av_read                (),                                                                //              (terminated)
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (21),
		.RDATA_WIDTH               (32),
		.WDATA_WIDTH               (32),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (99),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_QOS_L                 (100),
		.PKT_QOS_H                 (100),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.ID                        (1)
	) arm_a9_hps_h2f_lw_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                                    //              clk.clk
		.aresetn                (~ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                         //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                          //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                 //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                   //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                         //                 .ready
		.write_rp_valid         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                     //         write_rp.valid
		.write_rp_data          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                      //                 .data
		.write_rp_channel       (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                   //                 .channel
		.write_rp_startofpacket (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.write_rp_endofpacket   (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.write_rp_ready         (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                     //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                          //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                           //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                  //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                    //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                          //                 .ready
		.read_rp_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                     //          read_rp.valid
		.read_rp_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                      //                 .data
		.read_rp_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                   //                 .channel
		.read_rp_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),             //                 .startofpacket
		.read_rp_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),               //                 .endofpacket
		.read_rp_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                     //                 .ready
		.awid                   (ARM_A9_HPS_h2f_lw_axi_master_awid),                                         // altera_axi_slave.awid
		.awaddr                 (ARM_A9_HPS_h2f_lw_axi_master_awaddr),                                       //                 .awaddr
		.awlen                  (ARM_A9_HPS_h2f_lw_axi_master_awlen),                                        //                 .awlen
		.awsize                 (ARM_A9_HPS_h2f_lw_axi_master_awsize),                                       //                 .awsize
		.awburst                (ARM_A9_HPS_h2f_lw_axi_master_awburst),                                      //                 .awburst
		.awlock                 (ARM_A9_HPS_h2f_lw_axi_master_awlock),                                       //                 .awlock
		.awcache                (ARM_A9_HPS_h2f_lw_axi_master_awcache),                                      //                 .awcache
		.awprot                 (ARM_A9_HPS_h2f_lw_axi_master_awprot),                                       //                 .awprot
		.awvalid                (ARM_A9_HPS_h2f_lw_axi_master_awvalid),                                      //                 .awvalid
		.awready                (ARM_A9_HPS_h2f_lw_axi_master_awready),                                      //                 .awready
		.wid                    (ARM_A9_HPS_h2f_lw_axi_master_wid),                                          //                 .wid
		.wdata                  (ARM_A9_HPS_h2f_lw_axi_master_wdata),                                        //                 .wdata
		.wstrb                  (ARM_A9_HPS_h2f_lw_axi_master_wstrb),                                        //                 .wstrb
		.wlast                  (ARM_A9_HPS_h2f_lw_axi_master_wlast),                                        //                 .wlast
		.wvalid                 (ARM_A9_HPS_h2f_lw_axi_master_wvalid),                                       //                 .wvalid
		.wready                 (ARM_A9_HPS_h2f_lw_axi_master_wready),                                       //                 .wready
		.bid                    (ARM_A9_HPS_h2f_lw_axi_master_bid),                                          //                 .bid
		.bresp                  (ARM_A9_HPS_h2f_lw_axi_master_bresp),                                        //                 .bresp
		.bvalid                 (ARM_A9_HPS_h2f_lw_axi_master_bvalid),                                       //                 .bvalid
		.bready                 (ARM_A9_HPS_h2f_lw_axi_master_bready),                                       //                 .bready
		.arid                   (ARM_A9_HPS_h2f_lw_axi_master_arid),                                         //                 .arid
		.araddr                 (ARM_A9_HPS_h2f_lw_axi_master_araddr),                                       //                 .araddr
		.arlen                  (ARM_A9_HPS_h2f_lw_axi_master_arlen),                                        //                 .arlen
		.arsize                 (ARM_A9_HPS_h2f_lw_axi_master_arsize),                                       //                 .arsize
		.arburst                (ARM_A9_HPS_h2f_lw_axi_master_arburst),                                      //                 .arburst
		.arlock                 (ARM_A9_HPS_h2f_lw_axi_master_arlock),                                       //                 .arlock
		.arcache                (ARM_A9_HPS_h2f_lw_axi_master_arcache),                                      //                 .arcache
		.arprot                 (ARM_A9_HPS_h2f_lw_axi_master_arprot),                                       //                 .arprot
		.arvalid                (ARM_A9_HPS_h2f_lw_axi_master_arvalid),                                      //                 .arvalid
		.arready                (ARM_A9_HPS_h2f_lw_axi_master_arready),                                      //                 .arready
		.rid                    (ARM_A9_HPS_h2f_lw_axi_master_rid),                                          //                 .rid
		.rdata                  (ARM_A9_HPS_h2f_lw_axi_master_rdata),                                        //                 .rdata
		.rresp                  (ARM_A9_HPS_h2f_lw_axi_master_rresp),                                        //                 .rresp
		.rlast                  (ARM_A9_HPS_h2f_lw_axi_master_rlast),                                        //                 .rlast
		.rvalid                 (ARM_A9_HPS_h2f_lw_axi_master_rvalid),                                       //                 .rvalid
		.rready                 (ARM_A9_HPS_h2f_lw_axi_master_rready),                                       //                 .rready
		.awuser                 (1'b0),                                                                      //      (terminated)
		.aruser                 (1'b0),                                                                      //      (terminated)
		.awqos                  (4'b0000),                                                                   //      (terminated)
		.arqos                  (4'b0000),                                                                   //      (terminated)
		.awregion               (4'b0000),                                                                   //      (terminated)
		.arregion               (4'b0000),                                                                   //      (terminated)
		.wuser                  (1'b0),                                                                      //      (terminated)
		.ruser                  (),                                                                          //      (terminated)
		.buser                  ()                                                                           //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_data_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                               //       clk.clk
		.reset                 (Nios2_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                 //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                              //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                          //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_2nd_core_data_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset                 (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_2nd_core_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_2nd_core_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_2nd_core_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_2nd_core_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_2nd_core_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_2nd_core_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_2nd_core_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_2nd_core_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_2nd_core_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_2nd_core_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_2nd_core_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_2nd_core_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_2nd_core_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_2nd_core_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_2nd_core_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_2nd_core_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                         //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                          //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                       //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                                   //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                         //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_to_fpga_bridge_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                        //       clk.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.av_address            (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (jtag_to_fpga_bridge_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (jtag_to_fpga_bridge_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (jtag_to_fpga_bridge_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (jtag_to_fpga_bridge_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (jtag_to_fpga_bridge_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (jtag_to_fpga_bridge_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (jtag_to_fpga_bridge_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_2nd_core_instruction_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                               //       clk.clk
		.reset                 (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_2nd_core_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_2nd_core_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_2nd_core_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_2nd_core_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_2nd_core_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_2nd_core_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_2nd_core_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_2nd_core_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_2nd_core_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_2nd_core_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_2nd_core_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_2nd_core_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_instruction_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                      //       clk.clk
		.reset                 (Nios2_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (nios2_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (nios2_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (nios2_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (nios2_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (nios2_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (nios2_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_QOS_H                 (73),
		.PKT_QOS_L                 (73),
		.PKT_DATA_SIDEBAND_H       (71),
		.PKT_DATA_SIDEBAND_L       (71),
		.PKT_ADDR_SIDEBAND_H       (70),
		.PKT_ADDR_SIDEBAND_L       (70),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_CACHE_H               (104),
		.PKT_CACHE_L               (101),
		.PKT_THREAD_ID_H           (97),
		.PKT_THREAD_ID_L           (86),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_EXCLUSIVE       (46),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (80),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (37),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (8),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) vga_subsystem_pixel_dma_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                            //       clk.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (vga_subsystem_pixel_dma_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (vga_subsystem_pixel_dma_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (vga_subsystem_pixel_dma_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (vga_subsystem_pixel_dma_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (vga_subsystem_pixel_dma_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (vga_subsystem_pixel_dma_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (vga_subsystem_pixel_dma_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (vga_subsystem_pixel_dma_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (vga_subsystem_pixel_dma_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (vga_subsystem_pixel_dma_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (vga_subsystem_pixel_dma_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (vga_subsystem_pixel_dma_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                                   // (terminated)
	);

	altera_merlin_axi_master_ni #(
		.ID_WIDTH                  (12),
		.ADDR_WIDTH                (30),
		.RDATA_WIDTH               (128),
		.WDATA_WIDTH               (128),
		.ADDR_USER_WIDTH           (1),
		.DATA_USER_WIDTH           (1),
		.AXI_BURST_LENGTH_WIDTH    (4),
		.AXI_LOCK_WIDTH            (2),
		.AXI_VERSION               ("AXI3"),
		.WRITE_ISSUING_CAPABILITY  (8),
		.READ_ISSUING_CAPABILITY   (8),
		.PKT_BEGIN_BURST           (207),
		.PKT_CACHE_H               (239),
		.PKT_CACHE_L               (236),
		.PKT_ADDR_SIDEBAND_H       (205),
		.PKT_ADDR_SIDEBAND_L       (205),
		.PKT_PROTECTION_H          (235),
		.PKT_PROTECTION_L          (233),
		.PKT_BURST_SIZE_H          (202),
		.PKT_BURST_SIZE_L          (200),
		.PKT_BURST_TYPE_H          (204),
		.PKT_BURST_TYPE_L          (203),
		.PKT_RESPONSE_STATUS_L     (240),
		.PKT_RESPONSE_STATUS_H     (241),
		.PKT_BURSTWRAP_H           (199),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_EXCLUSIVE       (181),
		.PKT_TRANS_LOCK            (180),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (209),
		.PKT_DEST_ID_H             (220),
		.PKT_DEST_ID_L             (215),
		.PKT_THREAD_ID_H           (232),
		.PKT_THREAD_ID_L           (221),
		.PKT_QOS_L                 (208),
		.PKT_QOS_H                 (208),
		.PKT_ORI_BURST_SIZE_L      (242),
		.PKT_ORI_BURST_SIZE_H      (244),
		.PKT_DATA_SIDEBAND_H       (206),
		.PKT_DATA_SIDEBAND_L       (206),
		.ST_DATA_W                 (245),
		.ST_CHANNEL_W              (37),
		.ID                        (0)
	) arm_a9_hps_h2f_axi_master_agent (
		.aclk                   (System_PLL_sys_clk_clk),                                                    //              clk.clk
		.aresetn                (~ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //        clk_reset.reset_n
		.write_cp_valid         (arm_a9_hps_h2f_axi_master_agent_write_cp_valid),                            //         write_cp.valid
		.write_cp_data          (arm_a9_hps_h2f_axi_master_agent_write_cp_data),                             //                 .data
		.write_cp_startofpacket (arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket),                    //                 .startofpacket
		.write_cp_endofpacket   (arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket),                      //                 .endofpacket
		.write_cp_ready         (arm_a9_hps_h2f_axi_master_agent_write_cp_ready),                            //                 .ready
		.write_rp_valid         (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_valid),                        //         write_rp.valid
		.write_rp_data          (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_data),                         //                 .data
		.write_rp_channel       (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_channel),                      //                 .channel
		.write_rp_startofpacket (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket),                //                 .startofpacket
		.write_rp_endofpacket   (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),                  //                 .endofpacket
		.write_rp_ready         (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_ready),                        //                 .ready
		.read_cp_valid          (arm_a9_hps_h2f_axi_master_agent_read_cp_valid),                             //          read_cp.valid
		.read_cp_data           (arm_a9_hps_h2f_axi_master_agent_read_cp_data),                              //                 .data
		.read_cp_startofpacket  (arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket),                     //                 .startofpacket
		.read_cp_endofpacket    (arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket),                       //                 .endofpacket
		.read_cp_ready          (arm_a9_hps_h2f_axi_master_agent_read_cp_ready),                             //                 .ready
		.read_rp_valid          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_valid),                        //          read_rp.valid
		.read_rp_data           (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_data),                         //                 .data
		.read_rp_channel        (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_channel),                      //                 .channel
		.read_rp_startofpacket  (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket),                //                 .startofpacket
		.read_rp_endofpacket    (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),                  //                 .endofpacket
		.read_rp_ready          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_ready),                        //                 .ready
		.awid                   (ARM_A9_HPS_h2f_axi_master_awid),                                            // altera_axi_slave.awid
		.awaddr                 (ARM_A9_HPS_h2f_axi_master_awaddr),                                          //                 .awaddr
		.awlen                  (ARM_A9_HPS_h2f_axi_master_awlen),                                           //                 .awlen
		.awsize                 (ARM_A9_HPS_h2f_axi_master_awsize),                                          //                 .awsize
		.awburst                (ARM_A9_HPS_h2f_axi_master_awburst),                                         //                 .awburst
		.awlock                 (ARM_A9_HPS_h2f_axi_master_awlock),                                          //                 .awlock
		.awcache                (ARM_A9_HPS_h2f_axi_master_awcache),                                         //                 .awcache
		.awprot                 (ARM_A9_HPS_h2f_axi_master_awprot),                                          //                 .awprot
		.awvalid                (ARM_A9_HPS_h2f_axi_master_awvalid),                                         //                 .awvalid
		.awready                (ARM_A9_HPS_h2f_axi_master_awready),                                         //                 .awready
		.wid                    (ARM_A9_HPS_h2f_axi_master_wid),                                             //                 .wid
		.wdata                  (ARM_A9_HPS_h2f_axi_master_wdata),                                           //                 .wdata
		.wstrb                  (ARM_A9_HPS_h2f_axi_master_wstrb),                                           //                 .wstrb
		.wlast                  (ARM_A9_HPS_h2f_axi_master_wlast),                                           //                 .wlast
		.wvalid                 (ARM_A9_HPS_h2f_axi_master_wvalid),                                          //                 .wvalid
		.wready                 (ARM_A9_HPS_h2f_axi_master_wready),                                          //                 .wready
		.bid                    (ARM_A9_HPS_h2f_axi_master_bid),                                             //                 .bid
		.bresp                  (ARM_A9_HPS_h2f_axi_master_bresp),                                           //                 .bresp
		.bvalid                 (ARM_A9_HPS_h2f_axi_master_bvalid),                                          //                 .bvalid
		.bready                 (ARM_A9_HPS_h2f_axi_master_bready),                                          //                 .bready
		.arid                   (ARM_A9_HPS_h2f_axi_master_arid),                                            //                 .arid
		.araddr                 (ARM_A9_HPS_h2f_axi_master_araddr),                                          //                 .araddr
		.arlen                  (ARM_A9_HPS_h2f_axi_master_arlen),                                           //                 .arlen
		.arsize                 (ARM_A9_HPS_h2f_axi_master_arsize),                                          //                 .arsize
		.arburst                (ARM_A9_HPS_h2f_axi_master_arburst),                                         //                 .arburst
		.arlock                 (ARM_A9_HPS_h2f_axi_master_arlock),                                          //                 .arlock
		.arcache                (ARM_A9_HPS_h2f_axi_master_arcache),                                         //                 .arcache
		.arprot                 (ARM_A9_HPS_h2f_axi_master_arprot),                                          //                 .arprot
		.arvalid                (ARM_A9_HPS_h2f_axi_master_arvalid),                                         //                 .arvalid
		.arready                (ARM_A9_HPS_h2f_axi_master_arready),                                         //                 .arready
		.rid                    (ARM_A9_HPS_h2f_axi_master_rid),                                             //                 .rid
		.rdata                  (ARM_A9_HPS_h2f_axi_master_rdata),                                           //                 .rdata
		.rresp                  (ARM_A9_HPS_h2f_axi_master_rresp),                                           //                 .rresp
		.rlast                  (ARM_A9_HPS_h2f_axi_master_rlast),                                           //                 .rlast
		.rvalid                 (ARM_A9_HPS_h2f_axi_master_rvalid),                                          //                 .rvalid
		.rready                 (ARM_A9_HPS_h2f_axi_master_rready),                                          //                 .rready
		.awuser                 (1'b0),                                                                      //      (terminated)
		.aruser                 (1'b0),                                                                      //      (terminated)
		.awqos                  (4'b0000),                                                                   //      (terminated)
		.arqos                  (4'b0000),                                                                   //      (terminated)
		.awregion               (4'b0000),                                                                   //      (terminated)
		.arregion               (4'b0000),                                                                   //      (terminated)
		.wuser                  (1'b0),                                                                      //      (terminated)
		.ruser                  (),                                                                          //      (terminated)
		.buser                  ()                                                                           //      (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_QOS_H                 (82),
		.PKT_QOS_L                 (82),
		.PKT_DATA_SIDEBAND_H       (80),
		.PKT_DATA_SIDEBAND_L       (80),
		.PKT_ADDR_SIDEBAND_H       (79),
		.PKT_ADDR_SIDEBAND_L       (79),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_CACHE_H               (113),
		.PKT_CACHE_L               (110),
		.PKT_THREAD_ID_H           (106),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (89),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (37),
		.AV_BURSTCOUNT_W           (2),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (10),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) video_in_subsystem_video_in_dma_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                                    //       clk.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address            (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (video_in_subsystem_video_in_dma_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (video_in_subsystem_video_in_dma_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (video_in_subsystem_video_in_dma_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (video_in_subsystem_video_in_dma_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (video_in_subsystem_video_in_dma_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (video_in_subsystem_video_in_dma_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_010_src_valid),                                                                     //        rp.valid
		.rp_data               (rsp_mux_010_src_data),                                                                      //          .data
		.rp_channel            (rsp_mux_010_src_channel),                                                                   //          .channel
		.rp_startofpacket      (rsp_mux_010_src_startofpacket),                                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_010_src_endofpacket),                                                               //          .endofpacket
		.rp_ready              (rsp_mux_010_src_ready),                                                                     //          .ready
		.av_response           (),                                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (9),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) video_in_dma_addr_translation_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                                  //       clk.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (video_in_dma_addr_translation_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (video_in_dma_addr_translation_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (video_in_dma_addr_translation_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (video_in_dma_addr_translation_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (video_in_dma_addr_translation_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (video_in_dma_addr_translation_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_011_src_valid),                                                                   //        rp.valid
		.rp_data               (rsp_mux_011_src_data),                                                                    //          .data
		.rp_channel            (rsp_mux_011_src_channel),                                                                 //          .channel
		.rp_startofpacket      (rsp_mux_011_src_startofpacket),                                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_011_src_endofpacket),                                                             //          .endofpacket
		.rp_ready              (rsp_mux_011_src_ready),                                                                   //          .ready
		.av_response           (),                                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                                         // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_QOS_H                 (100),
		.PKT_QOS_L                 (100),
		.PKT_DATA_SIDEBAND_H       (98),
		.PKT_DATA_SIDEBAND_L       (98),
		.PKT_ADDR_SIDEBAND_H       (97),
		.PKT_ADDR_SIDEBAND_L       (97),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_CACHE_H               (131),
		.PKT_CACHE_L               (128),
		.PKT_THREAD_ID_H           (124),
		.PKT_THREAD_ID_L           (113),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (7),
		.BURSTWRAP_VALUE           (511),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pixel_dma_addr_translation_master_agent (
		.clk                   (System_PLL_sys_clk_clk),                                                               //       clk.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.av_address            (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pixel_dma_addr_translation_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pixel_dma_addr_translation_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pixel_dma_addr_translation_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pixel_dma_addr_translation_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pixel_dma_addr_translation_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pixel_dma_addr_translation_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_012_src_valid),                                                                //        rp.valid
		.rp_data               (rsp_mux_012_src_data),                                                                 //          .data
		.rp_channel            (rsp_mux_012_src_channel),                                                              //          .channel
		.rp_startofpacket      (rsp_mux_012_src_startofpacket),                                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_012_src_endofpacket),                                                          //          .endofpacket
		.rp_ready              (rsp_mux_012_src_ready),                                                                //          .ready
		.av_response           (),                                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) adc_adc_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (adc_adc_slave_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (adc_adc_slave_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (adc_adc_slave_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (adc_adc_slave_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (adc_adc_slave_agent_m0_lock),                                     //                .lock
		.m0_readdata             (adc_adc_slave_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (adc_adc_slave_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (adc_adc_slave_agent_m0_read),                                     //                .read
		.m0_waitrequest          (adc_adc_slave_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (adc_adc_slave_agent_m0_writedata),                                //                .writedata
		.m0_write                (adc_adc_slave_agent_m0_write),                                    //                .write
		.rp_endofpacket          (adc_adc_slave_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (adc_adc_slave_agent_rp_ready),                                    //                .ready
		.rp_valid                (adc_adc_slave_agent_rp_valid),                                    //                .valid
		.rp_data                 (adc_adc_slave_agent_rp_data),                                     //                .data
		.rp_startofpacket        (adc_adc_slave_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (adc_adc_slave_burst_adapter_source0_ready),                       //              cp.ready
		.cp_valid                (adc_adc_slave_burst_adapter_source0_valid),                       //                .valid
		.cp_data                 (adc_adc_slave_burst_adapter_source0_data),                        //                .data
		.cp_startofpacket        (adc_adc_slave_burst_adapter_source0_startofpacket),               //                .startofpacket
		.cp_endofpacket          (adc_adc_slave_burst_adapter_source0_endofpacket),                 //                .endofpacket
		.cp_channel              (adc_adc_slave_burst_adapter_source0_channel),                     //                .channel
		.rf_sink_ready           (adc_adc_slave_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (adc_adc_slave_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (adc_adc_slave_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (adc_adc_slave_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (adc_adc_slave_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (adc_adc_slave_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (adc_adc_slave_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (adc_adc_slave_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (adc_adc_slave_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (adc_adc_slave_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (adc_adc_slave_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (adc_adc_slave_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (adc_adc_slave_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_adc_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (adc_adc_slave_agent_rf_source_data),                              //        in.data
		.in_valid          (adc_adc_slave_agent_rf_source_valid),                             //          .valid
		.in_ready          (adc_adc_slave_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (adc_adc_slave_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (adc_adc_slave_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (adc_adc_slave_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (adc_adc_slave_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (adc_adc_slave_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (adc_adc_slave_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (adc_adc_slave_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) adc_adc_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (adc_adc_slave_agent_rdata_fifo_src_data),                         //        in.data
		.in_valid          (adc_adc_slave_agent_rdata_fifo_src_valid),                        //          .valid
		.in_ready          (adc_adc_slave_agent_rdata_fifo_src_ready),                        //          .ready
		.out_data          (adc_adc_slave_agent_rdata_fifo_out_data),                         //       out.data
		.out_valid         (adc_adc_slave_agent_rdata_fifo_out_valid),                        //          .valid
		.out_ready         (adc_adc_slave_agent_rdata_fifo_out_ready),                        //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_subsystem_audio_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (audio_subsystem_audio_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (audio_subsystem_audio_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (audio_subsystem_audio_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (audio_subsystem_audio_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (audio_subsystem_audio_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (audio_subsystem_audio_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (audio_subsystem_audio_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (audio_subsystem_audio_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (audio_subsystem_audio_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (audio_subsystem_audio_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (audio_subsystem_audio_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (audio_subsystem_audio_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (audio_subsystem_audio_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (audio_subsystem_audio_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (audio_subsystem_audio_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (audio_subsystem_audio_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (audio_subsystem_audio_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (audio_subsystem_audio_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (audio_subsystem_audio_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (audio_subsystem_audio_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (audio_subsystem_audio_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (audio_subsystem_audio_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (audio_subsystem_audio_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (audio_subsystem_audio_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (audio_subsystem_audio_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (audio_subsystem_audio_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (audio_subsystem_audio_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (audio_subsystem_audio_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (audio_subsystem_audio_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (audio_subsystem_audio_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (audio_subsystem_audio_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (audio_subsystem_audio_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (audio_subsystem_audio_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_subsystem_audio_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (audio_subsystem_audio_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_subsystem_audio_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (audio_subsystem_audio_slave_agent_rf_source_data),                //        in.data
		.in_valid          (audio_subsystem_audio_slave_agent_rf_source_valid),               //          .valid
		.in_ready          (audio_subsystem_audio_slave_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (audio_subsystem_audio_slave_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (audio_subsystem_audio_slave_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (audio_subsystem_audio_slave_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (audio_subsystem_audio_slave_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (audio_subsystem_audio_slave_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (audio_subsystem_audio_slave_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (audio_subsystem_audio_slave_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_subsystem_audio_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (audio_subsystem_audio_slave_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (audio_subsystem_audio_slave_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (audio_subsystem_audio_slave_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (audio_subsystem_audio_slave_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (audio_subsystem_audio_slave_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (audio_subsystem_audio_slave_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) av_config_avalon_av_config_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                               //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (av_config_avalon_av_config_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (av_config_avalon_av_config_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (av_config_avalon_av_config_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (av_config_avalon_av_config_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (av_config_avalon_av_config_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (av_config_avalon_av_config_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (av_config_avalon_av_config_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (av_config_avalon_av_config_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (av_config_avalon_av_config_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (av_config_avalon_av_config_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (av_config_avalon_av_config_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (av_config_avalon_av_config_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (av_config_avalon_av_config_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (av_config_avalon_av_config_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (av_config_avalon_av_config_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (av_config_avalon_av_config_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (av_config_avalon_av_config_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (av_config_avalon_av_config_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (av_config_avalon_av_config_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (av_config_avalon_av_config_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (av_config_avalon_av_config_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (av_config_avalon_av_config_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (av_config_avalon_av_config_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (av_config_avalon_av_config_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (av_config_avalon_av_config_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) av_config_avalon_av_config_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (av_config_avalon_av_config_slave_agent_rf_source_data),             //        in.data
		.in_valid          (av_config_avalon_av_config_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (av_config_avalon_av_config_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (av_config_avalon_av_config_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (av_config_avalon_av_config_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) av_config_avalon_av_config_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (av_config_avalon_av_config_slave_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (av_config_avalon_av_config_slave_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (av_config_avalon_av_config_slave_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) irda_avalon_irda_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (irda_avalon_irda_slave_agent_m0_address),                         //              m0.address
		.m0_burstcount           (irda_avalon_irda_slave_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (irda_avalon_irda_slave_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (irda_avalon_irda_slave_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (irda_avalon_irda_slave_agent_m0_lock),                            //                .lock
		.m0_readdata             (irda_avalon_irda_slave_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (irda_avalon_irda_slave_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (irda_avalon_irda_slave_agent_m0_read),                            //                .read
		.m0_waitrequest          (irda_avalon_irda_slave_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (irda_avalon_irda_slave_agent_m0_writedata),                       //                .writedata
		.m0_write                (irda_avalon_irda_slave_agent_m0_write),                           //                .write
		.rp_endofpacket          (irda_avalon_irda_slave_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (irda_avalon_irda_slave_agent_rp_ready),                           //                .ready
		.rp_valid                (irda_avalon_irda_slave_agent_rp_valid),                           //                .valid
		.rp_data                 (irda_avalon_irda_slave_agent_rp_data),                            //                .data
		.rp_startofpacket        (irda_avalon_irda_slave_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (irda_avalon_irda_slave_burst_adapter_source0_ready),              //              cp.ready
		.cp_valid                (irda_avalon_irda_slave_burst_adapter_source0_valid),              //                .valid
		.cp_data                 (irda_avalon_irda_slave_burst_adapter_source0_data),               //                .data
		.cp_startofpacket        (irda_avalon_irda_slave_burst_adapter_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (irda_avalon_irda_slave_burst_adapter_source0_endofpacket),        //                .endofpacket
		.cp_channel              (irda_avalon_irda_slave_burst_adapter_source0_channel),            //                .channel
		.rf_sink_ready           (irda_avalon_irda_slave_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (irda_avalon_irda_slave_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (irda_avalon_irda_slave_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (irda_avalon_irda_slave_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (irda_avalon_irda_slave_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (irda_avalon_irda_slave_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (irda_avalon_irda_slave_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (irda_avalon_irda_slave_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (irda_avalon_irda_slave_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (irda_avalon_irda_slave_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (irda_avalon_irda_slave_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (irda_avalon_irda_slave_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (irda_avalon_irda_slave_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) irda_avalon_irda_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (irda_avalon_irda_slave_agent_rf_source_data),                     //        in.data
		.in_valid          (irda_avalon_irda_slave_agent_rf_source_valid),                    //          .valid
		.in_ready          (irda_avalon_irda_slave_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (irda_avalon_irda_slave_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (irda_avalon_irda_slave_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (irda_avalon_irda_slave_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (irda_avalon_irda_slave_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (irda_avalon_irda_slave_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (irda_avalon_irda_slave_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (irda_avalon_irda_slave_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) irda_avalon_irda_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (irda_avalon_irda_slave_agent_rdata_fifo_src_data),                //        in.data
		.in_valid          (irda_avalon_irda_slave_agent_rdata_fifo_src_valid),               //          .valid
		.in_ready          (irda_avalon_irda_slave_agent_rdata_fifo_src_ready),               //          .ready
		.out_data          (irda_avalon_irda_slave_agent_rdata_fifo_out_data),                //       out.data
		.out_valid         (irda_avalon_irda_slave_agent_rdata_fifo_out_valid),               //          .valid
		.out_ready         (irda_avalon_irda_slave_agent_rdata_fifo_out_ready),               //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ps2_port_avalon_ps2_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ps2_port_avalon_ps2_slave_agent_m0_address),                      //              m0.address
		.m0_burstcount           (ps2_port_avalon_ps2_slave_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (ps2_port_avalon_ps2_slave_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (ps2_port_avalon_ps2_slave_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (ps2_port_avalon_ps2_slave_agent_m0_lock),                         //                .lock
		.m0_readdata             (ps2_port_avalon_ps2_slave_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (ps2_port_avalon_ps2_slave_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (ps2_port_avalon_ps2_slave_agent_m0_read),                         //                .read
		.m0_waitrequest          (ps2_port_avalon_ps2_slave_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (ps2_port_avalon_ps2_slave_agent_m0_writedata),                    //                .writedata
		.m0_write                (ps2_port_avalon_ps2_slave_agent_m0_write),                        //                .write
		.rp_endofpacket          (ps2_port_avalon_ps2_slave_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (ps2_port_avalon_ps2_slave_agent_rp_ready),                        //                .ready
		.rp_valid                (ps2_port_avalon_ps2_slave_agent_rp_valid),                        //                .valid
		.rp_data                 (ps2_port_avalon_ps2_slave_agent_rp_data),                         //                .data
		.rp_startofpacket        (ps2_port_avalon_ps2_slave_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (ps2_port_avalon_ps2_slave_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (ps2_port_avalon_ps2_slave_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (ps2_port_avalon_ps2_slave_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (ps2_port_avalon_ps2_slave_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (ps2_port_avalon_ps2_slave_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (ps2_port_avalon_ps2_slave_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (ps2_port_avalon_ps2_slave_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (ps2_port_avalon_ps2_slave_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (ps2_port_avalon_ps2_slave_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (ps2_port_avalon_ps2_slave_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (ps2_port_avalon_ps2_slave_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (ps2_port_avalon_ps2_slave_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ps2_port_avalon_ps2_slave_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (ps2_port_avalon_ps2_slave_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ps2_port_avalon_ps2_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ps2_port_avalon_ps2_slave_agent_rf_source_data),                  //        in.data
		.in_valid          (ps2_port_avalon_ps2_slave_agent_rf_source_valid),                 //          .valid
		.in_ready          (ps2_port_avalon_ps2_slave_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (ps2_port_avalon_ps2_slave_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (ps2_port_avalon_ps2_slave_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (ps2_port_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ps2_port_avalon_ps2_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ps2_port_avalon_ps2_slave_agent_rdata_fifo_src_data),             //        in.data
		.in_valid          (ps2_port_avalon_ps2_slave_agent_rdata_fifo_src_valid),            //          .valid
		.in_ready          (ps2_port_avalon_ps2_slave_agent_rdata_fifo_src_ready),            //          .ready
		.out_data          (ps2_port_avalon_ps2_slave_agent_rdata_fifo_out_data),             //       out.data
		.out_valid         (ps2_port_avalon_ps2_slave_agent_rdata_fifo_out_valid),            //          .valid
		.out_ready         (ps2_port_avalon_ps2_slave_agent_rdata_fifo_out_ready),            //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ps2_port_dual_avalon_ps2_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                             //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (ps2_port_dual_avalon_ps2_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ps2_port_dual_avalon_ps2_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ps2_port_dual_avalon_ps2_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ps2_port_dual_avalon_ps2_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ps2_port_dual_avalon_ps2_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (ps2_port_dual_avalon_ps2_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ps2_port_dual_avalon_ps2_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ps2_port_dual_avalon_ps2_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (ps2_port_dual_avalon_ps2_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ps2_port_dual_avalon_ps2_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (ps2_port_dual_avalon_ps2_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (ps2_port_dual_avalon_ps2_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ps2_port_dual_avalon_ps2_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (ps2_port_dual_avalon_ps2_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (ps2_port_dual_avalon_ps2_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (ps2_port_dual_avalon_ps2_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ps2_port_dual_avalon_ps2_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ps2_port_dual_avalon_ps2_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ps2_port_dual_avalon_ps2_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ps2_port_dual_avalon_ps2_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ps2_port_dual_avalon_ps2_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ps2_port_dual_avalon_ps2_slave_agent_rf_source_data),             //        in.data
		.in_valid          (ps2_port_dual_avalon_ps2_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (ps2_port_dual_avalon_ps2_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ps2_port_dual_avalon_ps2_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ps2_port_dual_avalon_ps2_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ps2_port_dual_avalon_ps2_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_src_data),        //        in.data
		.in_valid          (ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_src_valid),       //          .valid
		.in_ready          (ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_src_ready),       //          .ready
		.out_data          (ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_out_data),        //       out.data
		.out_valid         (ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_out_valid),       //          .valid
		.out_ready         (ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_out_ready),       //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_subsystem_char_buffer_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                      //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (vga_subsystem_char_buffer_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vga_subsystem_char_buffer_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vga_subsystem_char_buffer_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vga_subsystem_char_buffer_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vga_subsystem_char_buffer_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (vga_subsystem_char_buffer_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vga_subsystem_char_buffer_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vga_subsystem_char_buffer_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (vga_subsystem_char_buffer_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vga_subsystem_char_buffer_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (vga_subsystem_char_buffer_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (vga_subsystem_char_buffer_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vga_subsystem_char_buffer_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (vga_subsystem_char_buffer_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (vga_subsystem_char_buffer_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (vga_subsystem_char_buffer_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vga_subsystem_char_buffer_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vga_subsystem_char_buffer_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vga_subsystem_char_buffer_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vga_subsystem_char_buffer_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vga_subsystem_char_buffer_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                                           //                .error
		.rdata_fifo_src_ready    (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buffer_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (vga_subsystem_char_buffer_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_subsystem_char_buffer_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_subsystem_char_buffer_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_subsystem_char_buffer_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_subsystem_char_buffer_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_subsystem_char_buffer_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buffer_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                             //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_startofpacket  (1'b0),                                                               // (terminated)
		.in_endofpacket    (1'b0),                                                               // (terminated)
		.out_startofpacket (),                                                                   // (terminated)
		.out_endofpacket   (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                            //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                               //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                               //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),                          //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                              //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                              //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                              //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                               //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (sysid_control_slave_burst_adapter_source0_ready),                 //              cp.ready
		.cp_valid                (sysid_control_slave_burst_adapter_source0_valid),                 //                .valid
		.cp_data                 (sysid_control_slave_burst_adapter_source0_data),                  //                .data
		.cp_startofpacket        (sysid_control_slave_burst_adapter_source0_startofpacket),         //                .startofpacket
		.cp_endofpacket          (sysid_control_slave_burst_adapter_source0_endofpacket),           //                .endofpacket
		.cp_channel              (sysid_control_slave_burst_adapter_source0_channel),               //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),                        //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),                       //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rdata_fifo_src_data),                   //        in.data
		.in_valid          (sysid_control_slave_agent_rdata_fifo_src_valid),                  //          .valid
		.in_ready          (sysid_control_slave_agent_rdata_fifo_src_ready),                  //          .ready
		.out_data          (sysid_control_slave_agent_rdata_fifo_out_data),                   //       out.data
		.out_valid         (sysid_control_slave_agent_rdata_fifo_out_valid),                  //          .valid
		.out_ready         (sysid_control_slave_agent_rdata_fifo_out_ready),                  //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_in_subsystem_edge_detection_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                              //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                     //       clk_reset.reset
		.m0_address              (video_in_subsystem_edge_detection_control_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_in_subsystem_edge_detection_control_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_in_subsystem_edge_detection_control_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_in_subsystem_edge_detection_control_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_in_subsystem_edge_detection_control_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_in_subsystem_edge_detection_control_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_in_subsystem_edge_detection_control_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_in_subsystem_edge_detection_control_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_in_subsystem_edge_detection_control_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_in_subsystem_edge_detection_control_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_in_subsystem_edge_detection_control_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_in_subsystem_edge_detection_control_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_in_subsystem_edge_detection_control_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (video_in_subsystem_edge_detection_control_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (video_in_subsystem_edge_detection_control_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_in_subsystem_edge_detection_control_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_in_subsystem_edge_detection_control_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_in_subsystem_edge_detection_control_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_in_subsystem_edge_detection_control_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_in_subsystem_edge_detection_control_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_in_subsystem_edge_detection_control_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                                                   //                .error
		.rdata_fifo_src_ready    (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                           //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (video_in_subsystem_edge_detection_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_in_subsystem_edge_detection_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_in_subsystem_edge_detection_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_in_subsystem_edge_detection_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_in_subsystem_edge_detection_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_in_subsystem_edge_detection_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                            // (terminated)
		.csr_read          (1'b0),                                                                             // (terminated)
		.csr_write         (1'b0),                                                                             // (terminated)
		.csr_readdata      (),                                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                             // (terminated)
		.almost_full_data  (),                                                                                 // (terminated)
		.almost_empty_data (),                                                                                 // (terminated)
		.in_empty          (1'b0),                                                                             // (terminated)
		.out_empty         (),                                                                                 // (terminated)
		.in_error          (1'b0),                                                                             // (terminated)
		.out_error         (),                                                                                 // (terminated)
		.in_channel        (1'b0),                                                                             // (terminated)
		.out_channel       ()                                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_startofpacket  (1'b0),                                                                       // (terminated)
		.in_endofpacket    (1'b0),                                                                       // (terminated)
		.out_startofpacket (),                                                                           // (terminated)
		.out_endofpacket   (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) leds_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (leds_s1_agent_m0_address),                                        //              m0.address
		.m0_burstcount           (leds_s1_agent_m0_burstcount),                                     //                .burstcount
		.m0_byteenable           (leds_s1_agent_m0_byteenable),                                     //                .byteenable
		.m0_debugaccess          (leds_s1_agent_m0_debugaccess),                                    //                .debugaccess
		.m0_lock                 (leds_s1_agent_m0_lock),                                           //                .lock
		.m0_readdata             (leds_s1_agent_m0_readdata),                                       //                .readdata
		.m0_readdatavalid        (leds_s1_agent_m0_readdatavalid),                                  //                .readdatavalid
		.m0_read                 (leds_s1_agent_m0_read),                                           //                .read
		.m0_waitrequest          (leds_s1_agent_m0_waitrequest),                                    //                .waitrequest
		.m0_writedata            (leds_s1_agent_m0_writedata),                                      //                .writedata
		.m0_write                (leds_s1_agent_m0_write),                                          //                .write
		.rp_endofpacket          (leds_s1_agent_rp_endofpacket),                                    //              rp.endofpacket
		.rp_ready                (leds_s1_agent_rp_ready),                                          //                .ready
		.rp_valid                (leds_s1_agent_rp_valid),                                          //                .valid
		.rp_data                 (leds_s1_agent_rp_data),                                           //                .data
		.rp_startofpacket        (leds_s1_agent_rp_startofpacket),                                  //                .startofpacket
		.cp_ready                (leds_s1_burst_adapter_source0_ready),                             //              cp.ready
		.cp_valid                (leds_s1_burst_adapter_source0_valid),                             //                .valid
		.cp_data                 (leds_s1_burst_adapter_source0_data),                              //                .data
		.cp_startofpacket        (leds_s1_burst_adapter_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (leds_s1_burst_adapter_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (leds_s1_burst_adapter_source0_channel),                           //                .channel
		.rf_sink_ready           (leds_s1_agent_rsp_fifo_out_ready),                                //         rf_sink.ready
		.rf_sink_valid           (leds_s1_agent_rsp_fifo_out_valid),                                //                .valid
		.rf_sink_startofpacket   (leds_s1_agent_rsp_fifo_out_startofpacket),                        //                .startofpacket
		.rf_sink_endofpacket     (leds_s1_agent_rsp_fifo_out_endofpacket),                          //                .endofpacket
		.rf_sink_data            (leds_s1_agent_rsp_fifo_out_data),                                 //                .data
		.rf_source_ready         (leds_s1_agent_rf_source_ready),                                   //       rf_source.ready
		.rf_source_valid         (leds_s1_agent_rf_source_valid),                                   //                .valid
		.rf_source_startofpacket (leds_s1_agent_rf_source_startofpacket),                           //                .startofpacket
		.rf_source_endofpacket   (leds_s1_agent_rf_source_endofpacket),                             //                .endofpacket
		.rf_source_data          (leds_s1_agent_rf_source_data),                                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (leds_s1_agent_rdata_fifo_src_ready),                              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_s1_agent_rdata_fifo_src_valid),                              //                .valid
		.rdata_fifo_src_data     (leds_s1_agent_rdata_fifo_src_data),                               //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rf_source_data),                                    //        in.data
		.in_valid          (leds_s1_agent_rf_source_valid),                                   //          .valid
		.in_ready          (leds_s1_agent_rf_source_ready),                                   //          .ready
		.in_startofpacket  (leds_s1_agent_rf_source_startofpacket),                           //          .startofpacket
		.in_endofpacket    (leds_s1_agent_rf_source_endofpacket),                             //          .endofpacket
		.out_data          (leds_s1_agent_rsp_fifo_out_data),                                 //       out.data
		.out_valid         (leds_s1_agent_rsp_fifo_out_valid),                                //          .valid
		.out_ready         (leds_s1_agent_rsp_fifo_out_ready),                                //          .ready
		.out_startofpacket (leds_s1_agent_rsp_fifo_out_startofpacket),                        //          .startofpacket
		.out_endofpacket   (leds_s1_agent_rsp_fifo_out_endofpacket),                          //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (leds_s1_agent_rdata_fifo_src_data),                               //        in.data
		.in_valid          (leds_s1_agent_rdata_fifo_src_valid),                              //          .valid
		.in_ready          (leds_s1_agent_rdata_fifo_src_ready),                              //          .ready
		.out_data          (leds_s1_agent_rdata_fifo_out_data),                               //       out.data
		.out_valid         (leds_s1_agent_rdata_fifo_out_valid),                              //          .valid
		.out_ready         (leds_s1_agent_rdata_fifo_out_ready),                              //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex3_hex0_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hex3_hex0_s1_agent_m0_address),                                   //              m0.address
		.m0_burstcount           (hex3_hex0_s1_agent_m0_burstcount),                                //                .burstcount
		.m0_byteenable           (hex3_hex0_s1_agent_m0_byteenable),                                //                .byteenable
		.m0_debugaccess          (hex3_hex0_s1_agent_m0_debugaccess),                               //                .debugaccess
		.m0_lock                 (hex3_hex0_s1_agent_m0_lock),                                      //                .lock
		.m0_readdata             (hex3_hex0_s1_agent_m0_readdata),                                  //                .readdata
		.m0_readdatavalid        (hex3_hex0_s1_agent_m0_readdatavalid),                             //                .readdatavalid
		.m0_read                 (hex3_hex0_s1_agent_m0_read),                                      //                .read
		.m0_waitrequest          (hex3_hex0_s1_agent_m0_waitrequest),                               //                .waitrequest
		.m0_writedata            (hex3_hex0_s1_agent_m0_writedata),                                 //                .writedata
		.m0_write                (hex3_hex0_s1_agent_m0_write),                                     //                .write
		.rp_endofpacket          (hex3_hex0_s1_agent_rp_endofpacket),                               //              rp.endofpacket
		.rp_ready                (hex3_hex0_s1_agent_rp_ready),                                     //                .ready
		.rp_valid                (hex3_hex0_s1_agent_rp_valid),                                     //                .valid
		.rp_data                 (hex3_hex0_s1_agent_rp_data),                                      //                .data
		.rp_startofpacket        (hex3_hex0_s1_agent_rp_startofpacket),                             //                .startofpacket
		.cp_ready                (hex3_hex0_s1_burst_adapter_source0_ready),                        //              cp.ready
		.cp_valid                (hex3_hex0_s1_burst_adapter_source0_valid),                        //                .valid
		.cp_data                 (hex3_hex0_s1_burst_adapter_source0_data),                         //                .data
		.cp_startofpacket        (hex3_hex0_s1_burst_adapter_source0_startofpacket),                //                .startofpacket
		.cp_endofpacket          (hex3_hex0_s1_burst_adapter_source0_endofpacket),                  //                .endofpacket
		.cp_channel              (hex3_hex0_s1_burst_adapter_source0_channel),                      //                .channel
		.rf_sink_ready           (hex3_hex0_s1_agent_rsp_fifo_out_ready),                           //         rf_sink.ready
		.rf_sink_valid           (hex3_hex0_s1_agent_rsp_fifo_out_valid),                           //                .valid
		.rf_sink_startofpacket   (hex3_hex0_s1_agent_rsp_fifo_out_startofpacket),                   //                .startofpacket
		.rf_sink_endofpacket     (hex3_hex0_s1_agent_rsp_fifo_out_endofpacket),                     //                .endofpacket
		.rf_sink_data            (hex3_hex0_s1_agent_rsp_fifo_out_data),                            //                .data
		.rf_source_ready         (hex3_hex0_s1_agent_rf_source_ready),                              //       rf_source.ready
		.rf_source_valid         (hex3_hex0_s1_agent_rf_source_valid),                              //                .valid
		.rf_source_startofpacket (hex3_hex0_s1_agent_rf_source_startofpacket),                      //                .startofpacket
		.rf_source_endofpacket   (hex3_hex0_s1_agent_rf_source_endofpacket),                        //                .endofpacket
		.rf_source_data          (hex3_hex0_s1_agent_rf_source_data),                               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (hex3_hex0_s1_agent_rdata_fifo_src_ready),                         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex3_hex0_s1_agent_rdata_fifo_src_valid),                         //                .valid
		.rdata_fifo_src_data     (hex3_hex0_s1_agent_rdata_fifo_src_data),                          //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex3_hex0_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex3_hex0_s1_agent_rf_source_data),                               //        in.data
		.in_valid          (hex3_hex0_s1_agent_rf_source_valid),                              //          .valid
		.in_ready          (hex3_hex0_s1_agent_rf_source_ready),                              //          .ready
		.in_startofpacket  (hex3_hex0_s1_agent_rf_source_startofpacket),                      //          .startofpacket
		.in_endofpacket    (hex3_hex0_s1_agent_rf_source_endofpacket),                        //          .endofpacket
		.out_data          (hex3_hex0_s1_agent_rsp_fifo_out_data),                            //       out.data
		.out_valid         (hex3_hex0_s1_agent_rsp_fifo_out_valid),                           //          .valid
		.out_ready         (hex3_hex0_s1_agent_rsp_fifo_out_ready),                           //          .ready
		.out_startofpacket (hex3_hex0_s1_agent_rsp_fifo_out_startofpacket),                   //          .startofpacket
		.out_endofpacket   (hex3_hex0_s1_agent_rsp_fifo_out_endofpacket),                     //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex3_hex0_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex3_hex0_s1_agent_rdata_fifo_src_data),                          //        in.data
		.in_valid          (hex3_hex0_s1_agent_rdata_fifo_src_valid),                         //          .valid
		.in_ready          (hex3_hex0_s1_agent_rdata_fifo_src_ready),                         //          .ready
		.out_data          (hex3_hex0_s1_agent_rdata_fifo_out_data),                          //       out.data
		.out_valid         (hex3_hex0_s1_agent_rdata_fifo_out_valid),                         //          .valid
		.out_ready         (hex3_hex0_s1_agent_rdata_fifo_out_ready),                         //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hex5_hex4_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hex5_hex4_s1_agent_m0_address),                                   //              m0.address
		.m0_burstcount           (hex5_hex4_s1_agent_m0_burstcount),                                //                .burstcount
		.m0_byteenable           (hex5_hex4_s1_agent_m0_byteenable),                                //                .byteenable
		.m0_debugaccess          (hex5_hex4_s1_agent_m0_debugaccess),                               //                .debugaccess
		.m0_lock                 (hex5_hex4_s1_agent_m0_lock),                                      //                .lock
		.m0_readdata             (hex5_hex4_s1_agent_m0_readdata),                                  //                .readdata
		.m0_readdatavalid        (hex5_hex4_s1_agent_m0_readdatavalid),                             //                .readdatavalid
		.m0_read                 (hex5_hex4_s1_agent_m0_read),                                      //                .read
		.m0_waitrequest          (hex5_hex4_s1_agent_m0_waitrequest),                               //                .waitrequest
		.m0_writedata            (hex5_hex4_s1_agent_m0_writedata),                                 //                .writedata
		.m0_write                (hex5_hex4_s1_agent_m0_write),                                     //                .write
		.rp_endofpacket          (hex5_hex4_s1_agent_rp_endofpacket),                               //              rp.endofpacket
		.rp_ready                (hex5_hex4_s1_agent_rp_ready),                                     //                .ready
		.rp_valid                (hex5_hex4_s1_agent_rp_valid),                                     //                .valid
		.rp_data                 (hex5_hex4_s1_agent_rp_data),                                      //                .data
		.rp_startofpacket        (hex5_hex4_s1_agent_rp_startofpacket),                             //                .startofpacket
		.cp_ready                (hex5_hex4_s1_burst_adapter_source0_ready),                        //              cp.ready
		.cp_valid                (hex5_hex4_s1_burst_adapter_source0_valid),                        //                .valid
		.cp_data                 (hex5_hex4_s1_burst_adapter_source0_data),                         //                .data
		.cp_startofpacket        (hex5_hex4_s1_burst_adapter_source0_startofpacket),                //                .startofpacket
		.cp_endofpacket          (hex5_hex4_s1_burst_adapter_source0_endofpacket),                  //                .endofpacket
		.cp_channel              (hex5_hex4_s1_burst_adapter_source0_channel),                      //                .channel
		.rf_sink_ready           (hex5_hex4_s1_agent_rsp_fifo_out_ready),                           //         rf_sink.ready
		.rf_sink_valid           (hex5_hex4_s1_agent_rsp_fifo_out_valid),                           //                .valid
		.rf_sink_startofpacket   (hex5_hex4_s1_agent_rsp_fifo_out_startofpacket),                   //                .startofpacket
		.rf_sink_endofpacket     (hex5_hex4_s1_agent_rsp_fifo_out_endofpacket),                     //                .endofpacket
		.rf_sink_data            (hex5_hex4_s1_agent_rsp_fifo_out_data),                            //                .data
		.rf_source_ready         (hex5_hex4_s1_agent_rf_source_ready),                              //       rf_source.ready
		.rf_source_valid         (hex5_hex4_s1_agent_rf_source_valid),                              //                .valid
		.rf_source_startofpacket (hex5_hex4_s1_agent_rf_source_startofpacket),                      //                .startofpacket
		.rf_source_endofpacket   (hex5_hex4_s1_agent_rf_source_endofpacket),                        //                .endofpacket
		.rf_source_data          (hex5_hex4_s1_agent_rf_source_data),                               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (hex5_hex4_s1_agent_rdata_fifo_src_ready),                         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex5_hex4_s1_agent_rdata_fifo_src_valid),                         //                .valid
		.rdata_fifo_src_data     (hex5_hex4_s1_agent_rdata_fifo_src_data),                          //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex5_hex4_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex5_hex4_s1_agent_rf_source_data),                               //        in.data
		.in_valid          (hex5_hex4_s1_agent_rf_source_valid),                              //          .valid
		.in_ready          (hex5_hex4_s1_agent_rf_source_ready),                              //          .ready
		.in_startofpacket  (hex5_hex4_s1_agent_rf_source_startofpacket),                      //          .startofpacket
		.in_endofpacket    (hex5_hex4_s1_agent_rf_source_endofpacket),                        //          .endofpacket
		.out_data          (hex5_hex4_s1_agent_rsp_fifo_out_data),                            //       out.data
		.out_valid         (hex5_hex4_s1_agent_rsp_fifo_out_valid),                           //          .valid
		.out_ready         (hex5_hex4_s1_agent_rsp_fifo_out_ready),                           //          .ready
		.out_startofpacket (hex5_hex4_s1_agent_rsp_fifo_out_startofpacket),                   //          .startofpacket
		.out_endofpacket   (hex5_hex4_s1_agent_rsp_fifo_out_endofpacket),                     //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex5_hex4_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hex5_hex4_s1_agent_rdata_fifo_src_data),                          //        in.data
		.in_valid          (hex5_hex4_s1_agent_rdata_fifo_src_valid),                         //          .valid
		.in_ready          (hex5_hex4_s1_agent_rdata_fifo_src_ready),                         //          .ready
		.out_data          (hex5_hex4_s1_agent_rdata_fifo_out_data),                          //       out.data
		.out_valid         (hex5_hex4_s1_agent_rdata_fifo_out_valid),                         //          .valid
		.out_ready         (hex5_hex4_s1_agent_rdata_fifo_out_ready),                         //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) slider_switches_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (slider_switches_s1_agent_m0_address),                             //              m0.address
		.m0_burstcount           (slider_switches_s1_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (slider_switches_s1_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (slider_switches_s1_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (slider_switches_s1_agent_m0_lock),                                //                .lock
		.m0_readdata             (slider_switches_s1_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (slider_switches_s1_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (slider_switches_s1_agent_m0_read),                                //                .read
		.m0_waitrequest          (slider_switches_s1_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (slider_switches_s1_agent_m0_writedata),                           //                .writedata
		.m0_write                (slider_switches_s1_agent_m0_write),                               //                .write
		.rp_endofpacket          (slider_switches_s1_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (slider_switches_s1_agent_rp_ready),                               //                .ready
		.rp_valid                (slider_switches_s1_agent_rp_valid),                               //                .valid
		.rp_data                 (slider_switches_s1_agent_rp_data),                                //                .data
		.rp_startofpacket        (slider_switches_s1_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (slider_switches_s1_burst_adapter_source0_ready),                  //              cp.ready
		.cp_valid                (slider_switches_s1_burst_adapter_source0_valid),                  //                .valid
		.cp_data                 (slider_switches_s1_burst_adapter_source0_data),                   //                .data
		.cp_startofpacket        (slider_switches_s1_burst_adapter_source0_startofpacket),          //                .startofpacket
		.cp_endofpacket          (slider_switches_s1_burst_adapter_source0_endofpacket),            //                .endofpacket
		.cp_channel              (slider_switches_s1_burst_adapter_source0_channel),                //                .channel
		.rf_sink_ready           (slider_switches_s1_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (slider_switches_s1_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (slider_switches_s1_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (slider_switches_s1_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (slider_switches_s1_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (slider_switches_s1_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (slider_switches_s1_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (slider_switches_s1_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (slider_switches_s1_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (slider_switches_s1_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (slider_switches_s1_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (slider_switches_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (slider_switches_s1_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rf_source_data),                         //        in.data
		.in_valid          (slider_switches_s1_agent_rf_source_valid),                        //          .valid
		.in_ready          (slider_switches_s1_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (slider_switches_s1_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (slider_switches_s1_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (slider_switches_s1_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (slider_switches_s1_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (slider_switches_s1_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (slider_switches_s1_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (slider_switches_s1_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) slider_switches_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (slider_switches_s1_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (slider_switches_s1_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (slider_switches_s1_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (slider_switches_s1_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (slider_switches_s1_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (slider_switches_s1_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pushbuttons_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pushbuttons_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (pushbuttons_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (pushbuttons_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (pushbuttons_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (pushbuttons_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (pushbuttons_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (pushbuttons_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (pushbuttons_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (pushbuttons_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (pushbuttons_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (pushbuttons_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (pushbuttons_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (pushbuttons_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (pushbuttons_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (pushbuttons_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (pushbuttons_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (pushbuttons_s1_burst_adapter_source0_ready),                      //              cp.ready
		.cp_valid                (pushbuttons_s1_burst_adapter_source0_valid),                      //                .valid
		.cp_data                 (pushbuttons_s1_burst_adapter_source0_data),                       //                .data
		.cp_startofpacket        (pushbuttons_s1_burst_adapter_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (pushbuttons_s1_burst_adapter_source0_endofpacket),                //                .endofpacket
		.cp_channel              (pushbuttons_s1_burst_adapter_source0_channel),                    //                .channel
		.rf_sink_ready           (pushbuttons_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (pushbuttons_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (pushbuttons_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (pushbuttons_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (pushbuttons_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (pushbuttons_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (pushbuttons_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (pushbuttons_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (pushbuttons_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (pushbuttons_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pushbuttons_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (pushbuttons_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pushbuttons_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (pushbuttons_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (pushbuttons_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (pushbuttons_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (pushbuttons_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (pushbuttons_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (pushbuttons_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (pushbuttons_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (pushbuttons_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (pushbuttons_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pushbuttons_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pushbuttons_s1_agent_rdata_fifo_src_data),                        //        in.data
		.in_valid          (pushbuttons_s1_agent_rdata_fifo_src_valid),                       //          .valid
		.in_ready          (pushbuttons_s1_agent_rdata_fifo_src_ready),                       //          .ready
		.out_data          (pushbuttons_s1_agent_rdata_fifo_out_data),                        //       out.data
		.out_valid         (pushbuttons_s1_agent_rdata_fifo_out_valid),                       //          .valid
		.out_ready         (pushbuttons_s1_agent_rdata_fifo_out_ready),                       //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) expansion_jp1_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (expansion_jp1_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (expansion_jp1_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (expansion_jp1_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (expansion_jp1_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (expansion_jp1_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (expansion_jp1_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (expansion_jp1_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (expansion_jp1_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (expansion_jp1_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (expansion_jp1_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (expansion_jp1_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (expansion_jp1_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (expansion_jp1_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (expansion_jp1_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (expansion_jp1_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (expansion_jp1_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (expansion_jp1_s1_burst_adapter_source0_ready),                    //              cp.ready
		.cp_valid                (expansion_jp1_s1_burst_adapter_source0_valid),                    //                .valid
		.cp_data                 (expansion_jp1_s1_burst_adapter_source0_data),                     //                .data
		.cp_startofpacket        (expansion_jp1_s1_burst_adapter_source0_startofpacket),            //                .startofpacket
		.cp_endofpacket          (expansion_jp1_s1_burst_adapter_source0_endofpacket),              //                .endofpacket
		.cp_channel              (expansion_jp1_s1_burst_adapter_source0_channel),                  //                .channel
		.rf_sink_ready           (expansion_jp1_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (expansion_jp1_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (expansion_jp1_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (expansion_jp1_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (expansion_jp1_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (expansion_jp1_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (expansion_jp1_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (expansion_jp1_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (expansion_jp1_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (expansion_jp1_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (expansion_jp1_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (expansion_jp1_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (expansion_jp1_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) expansion_jp1_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (expansion_jp1_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (expansion_jp1_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (expansion_jp1_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (expansion_jp1_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (expansion_jp1_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (expansion_jp1_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (expansion_jp1_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (expansion_jp1_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (expansion_jp1_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (expansion_jp1_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) expansion_jp1_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (expansion_jp1_s1_agent_rdata_fifo_src_data),                      //        in.data
		.in_valid          (expansion_jp1_s1_agent_rdata_fifo_src_valid),                     //          .valid
		.in_ready          (expansion_jp1_s1_agent_rdata_fifo_src_ready),                     //          .ready
		.out_data          (expansion_jp1_s1_agent_rdata_fifo_out_data),                      //       out.data
		.out_valid         (expansion_jp1_s1_agent_rdata_fifo_out_valid),                     //          .valid
		.out_ready         (expansion_jp1_s1_agent_rdata_fifo_out_ready),                     //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) expansion_jp2_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (expansion_jp2_s1_agent_m0_address),                               //              m0.address
		.m0_burstcount           (expansion_jp2_s1_agent_m0_burstcount),                            //                .burstcount
		.m0_byteenable           (expansion_jp2_s1_agent_m0_byteenable),                            //                .byteenable
		.m0_debugaccess          (expansion_jp2_s1_agent_m0_debugaccess),                           //                .debugaccess
		.m0_lock                 (expansion_jp2_s1_agent_m0_lock),                                  //                .lock
		.m0_readdata             (expansion_jp2_s1_agent_m0_readdata),                              //                .readdata
		.m0_readdatavalid        (expansion_jp2_s1_agent_m0_readdatavalid),                         //                .readdatavalid
		.m0_read                 (expansion_jp2_s1_agent_m0_read),                                  //                .read
		.m0_waitrequest          (expansion_jp2_s1_agent_m0_waitrequest),                           //                .waitrequest
		.m0_writedata            (expansion_jp2_s1_agent_m0_writedata),                             //                .writedata
		.m0_write                (expansion_jp2_s1_agent_m0_write),                                 //                .write
		.rp_endofpacket          (expansion_jp2_s1_agent_rp_endofpacket),                           //              rp.endofpacket
		.rp_ready                (expansion_jp2_s1_agent_rp_ready),                                 //                .ready
		.rp_valid                (expansion_jp2_s1_agent_rp_valid),                                 //                .valid
		.rp_data                 (expansion_jp2_s1_agent_rp_data),                                  //                .data
		.rp_startofpacket        (expansion_jp2_s1_agent_rp_startofpacket),                         //                .startofpacket
		.cp_ready                (expansion_jp2_s1_burst_adapter_source0_ready),                    //              cp.ready
		.cp_valid                (expansion_jp2_s1_burst_adapter_source0_valid),                    //                .valid
		.cp_data                 (expansion_jp2_s1_burst_adapter_source0_data),                     //                .data
		.cp_startofpacket        (expansion_jp2_s1_burst_adapter_source0_startofpacket),            //                .startofpacket
		.cp_endofpacket          (expansion_jp2_s1_burst_adapter_source0_endofpacket),              //                .endofpacket
		.cp_channel              (expansion_jp2_s1_burst_adapter_source0_channel),                  //                .channel
		.rf_sink_ready           (expansion_jp2_s1_agent_rsp_fifo_out_ready),                       //         rf_sink.ready
		.rf_sink_valid           (expansion_jp2_s1_agent_rsp_fifo_out_valid),                       //                .valid
		.rf_sink_startofpacket   (expansion_jp2_s1_agent_rsp_fifo_out_startofpacket),               //                .startofpacket
		.rf_sink_endofpacket     (expansion_jp2_s1_agent_rsp_fifo_out_endofpacket),                 //                .endofpacket
		.rf_sink_data            (expansion_jp2_s1_agent_rsp_fifo_out_data),                        //                .data
		.rf_source_ready         (expansion_jp2_s1_agent_rf_source_ready),                          //       rf_source.ready
		.rf_source_valid         (expansion_jp2_s1_agent_rf_source_valid),                          //                .valid
		.rf_source_startofpacket (expansion_jp2_s1_agent_rf_source_startofpacket),                  //                .startofpacket
		.rf_source_endofpacket   (expansion_jp2_s1_agent_rf_source_endofpacket),                    //                .endofpacket
		.rf_source_data          (expansion_jp2_s1_agent_rf_source_data),                           //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (expansion_jp2_s1_agent_rdata_fifo_src_ready),                     //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (expansion_jp2_s1_agent_rdata_fifo_src_valid),                     //                .valid
		.rdata_fifo_src_data     (expansion_jp2_s1_agent_rdata_fifo_src_data),                      //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) expansion_jp2_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (expansion_jp2_s1_agent_rf_source_data),                           //        in.data
		.in_valid          (expansion_jp2_s1_agent_rf_source_valid),                          //          .valid
		.in_ready          (expansion_jp2_s1_agent_rf_source_ready),                          //          .ready
		.in_startofpacket  (expansion_jp2_s1_agent_rf_source_startofpacket),                  //          .startofpacket
		.in_endofpacket    (expansion_jp2_s1_agent_rf_source_endofpacket),                    //          .endofpacket
		.out_data          (expansion_jp2_s1_agent_rsp_fifo_out_data),                        //       out.data
		.out_valid         (expansion_jp2_s1_agent_rsp_fifo_out_valid),                       //          .valid
		.out_ready         (expansion_jp2_s1_agent_rsp_fifo_out_ready),                       //          .ready
		.out_startofpacket (expansion_jp2_s1_agent_rsp_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (expansion_jp2_s1_agent_rsp_fifo_out_endofpacket),                 //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) expansion_jp2_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (expansion_jp2_s1_agent_rdata_fifo_src_data),                      //        in.data
		.in_valid          (expansion_jp2_s1_agent_rdata_fifo_src_valid),                     //          .valid
		.in_ready          (expansion_jp2_s1_agent_rdata_fifo_src_ready),                     //          .ready
		.out_data          (expansion_jp2_s1_agent_rdata_fifo_out_data),                      //       out.data
		.out_valid         (expansion_jp2_s1_agent_rdata_fifo_out_valid),                     //          .valid
		.out_ready         (expansion_jp2_s1_agent_rdata_fifo_out_ready),                     //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) interval_timer_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (interval_timer_s1_agent_m0_address),                              //              m0.address
		.m0_burstcount           (interval_timer_s1_agent_m0_burstcount),                           //                .burstcount
		.m0_byteenable           (interval_timer_s1_agent_m0_byteenable),                           //                .byteenable
		.m0_debugaccess          (interval_timer_s1_agent_m0_debugaccess),                          //                .debugaccess
		.m0_lock                 (interval_timer_s1_agent_m0_lock),                                 //                .lock
		.m0_readdata             (interval_timer_s1_agent_m0_readdata),                             //                .readdata
		.m0_readdatavalid        (interval_timer_s1_agent_m0_readdatavalid),                        //                .readdatavalid
		.m0_read                 (interval_timer_s1_agent_m0_read),                                 //                .read
		.m0_waitrequest          (interval_timer_s1_agent_m0_waitrequest),                          //                .waitrequest
		.m0_writedata            (interval_timer_s1_agent_m0_writedata),                            //                .writedata
		.m0_write                (interval_timer_s1_agent_m0_write),                                //                .write
		.rp_endofpacket          (interval_timer_s1_agent_rp_endofpacket),                          //              rp.endofpacket
		.rp_ready                (interval_timer_s1_agent_rp_ready),                                //                .ready
		.rp_valid                (interval_timer_s1_agent_rp_valid),                                //                .valid
		.rp_data                 (interval_timer_s1_agent_rp_data),                                 //                .data
		.rp_startofpacket        (interval_timer_s1_agent_rp_startofpacket),                        //                .startofpacket
		.cp_ready                (interval_timer_s1_burst_adapter_source0_ready),                   //              cp.ready
		.cp_valid                (interval_timer_s1_burst_adapter_source0_valid),                   //                .valid
		.cp_data                 (interval_timer_s1_burst_adapter_source0_data),                    //                .data
		.cp_startofpacket        (interval_timer_s1_burst_adapter_source0_startofpacket),           //                .startofpacket
		.cp_endofpacket          (interval_timer_s1_burst_adapter_source0_endofpacket),             //                .endofpacket
		.cp_channel              (interval_timer_s1_burst_adapter_source0_channel),                 //                .channel
		.rf_sink_ready           (interval_timer_s1_agent_rsp_fifo_out_ready),                      //         rf_sink.ready
		.rf_sink_valid           (interval_timer_s1_agent_rsp_fifo_out_valid),                      //                .valid
		.rf_sink_startofpacket   (interval_timer_s1_agent_rsp_fifo_out_startofpacket),              //                .startofpacket
		.rf_sink_endofpacket     (interval_timer_s1_agent_rsp_fifo_out_endofpacket),                //                .endofpacket
		.rf_sink_data            (interval_timer_s1_agent_rsp_fifo_out_data),                       //                .data
		.rf_source_ready         (interval_timer_s1_agent_rf_source_ready),                         //       rf_source.ready
		.rf_source_valid         (interval_timer_s1_agent_rf_source_valid),                         //                .valid
		.rf_source_startofpacket (interval_timer_s1_agent_rf_source_startofpacket),                 //                .startofpacket
		.rf_source_endofpacket   (interval_timer_s1_agent_rf_source_endofpacket),                   //                .endofpacket
		.rf_source_data          (interval_timer_s1_agent_rf_source_data),                          //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (interval_timer_s1_agent_rdata_fifo_src_ready),                    //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interval_timer_s1_agent_rdata_fifo_src_valid),                    //                .valid
		.rdata_fifo_src_data     (interval_timer_s1_agent_rdata_fifo_src_data),                     //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (interval_timer_s1_agent_rf_source_data),                          //        in.data
		.in_valid          (interval_timer_s1_agent_rf_source_valid),                         //          .valid
		.in_ready          (interval_timer_s1_agent_rf_source_ready),                         //          .ready
		.in_startofpacket  (interval_timer_s1_agent_rf_source_startofpacket),                 //          .startofpacket
		.in_endofpacket    (interval_timer_s1_agent_rf_source_endofpacket),                   //          .endofpacket
		.out_data          (interval_timer_s1_agent_rsp_fifo_out_data),                       //       out.data
		.out_valid         (interval_timer_s1_agent_rsp_fifo_out_valid),                      //          .valid
		.out_ready         (interval_timer_s1_agent_rsp_fifo_out_ready),                      //          .ready
		.out_startofpacket (interval_timer_s1_agent_rsp_fifo_out_startofpacket),              //          .startofpacket
		.out_endofpacket   (interval_timer_s1_agent_rsp_fifo_out_endofpacket),                //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (interval_timer_s1_agent_rdata_fifo_src_data),                     //        in.data
		.in_valid          (interval_timer_s1_agent_rdata_fifo_src_valid),                    //          .valid
		.in_ready          (interval_timer_s1_agent_rdata_fifo_src_ready),                    //          .ready
		.out_data          (interval_timer_s1_agent_rdata_fifo_out_data),                     //       out.data
		.out_valid         (interval_timer_s1_agent_rdata_fifo_out_valid),                    //          .valid
		.out_ready         (interval_timer_s1_agent_rdata_fifo_out_ready),                    //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) interval_timer_2_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (interval_timer_2_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (interval_timer_2_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (interval_timer_2_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (interval_timer_2_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (interval_timer_2_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (interval_timer_2_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (interval_timer_2_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (interval_timer_2_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (interval_timer_2_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (interval_timer_2_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (interval_timer_2_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (interval_timer_2_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (interval_timer_2_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (interval_timer_2_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (interval_timer_2_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (interval_timer_2_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (interval_timer_2_s1_burst_adapter_source0_ready),                 //              cp.ready
		.cp_valid                (interval_timer_2_s1_burst_adapter_source0_valid),                 //                .valid
		.cp_data                 (interval_timer_2_s1_burst_adapter_source0_data),                  //                .data
		.cp_startofpacket        (interval_timer_2_s1_burst_adapter_source0_startofpacket),         //                .startofpacket
		.cp_endofpacket          (interval_timer_2_s1_burst_adapter_source0_endofpacket),           //                .endofpacket
		.cp_channel              (interval_timer_2_s1_burst_adapter_source0_channel),               //                .channel
		.rf_sink_ready           (interval_timer_2_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (interval_timer_2_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (interval_timer_2_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (interval_timer_2_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (interval_timer_2_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (interval_timer_2_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (interval_timer_2_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (interval_timer_2_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (interval_timer_2_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (interval_timer_2_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (interval_timer_2_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interval_timer_2_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (interval_timer_2_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (interval_timer_2_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (interval_timer_2_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (interval_timer_2_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (interval_timer_2_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (interval_timer_2_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (interval_timer_2_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (interval_timer_2_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (interval_timer_2_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (interval_timer_2_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (interval_timer_2_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (interval_timer_2_s1_agent_rdata_fifo_src_data),                   //        in.data
		.in_valid          (interval_timer_2_s1_agent_rdata_fifo_src_valid),                  //          .valid
		.in_ready          (interval_timer_2_s1_agent_rdata_fifo_src_ready),                  //          .ready
		.out_data          (interval_timer_2_s1_agent_rdata_fifo_out_data),                   //       out.data
		.out_valid         (interval_timer_2_s1_agent_rdata_fifo_out_valid),                  //          .valid
		.out_ready         (interval_timer_2_s1_agent_rdata_fifo_out_ready),                  //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_for_arm_0_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                    //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_for_arm_0_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                 //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_startofpacket  (1'b0),                                                             // (terminated)
		.in_endofpacket    (1'b0),                                                             // (terminated)
		.out_startofpacket (),                                                                 // (terminated)
		.out_endofpacket   (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_for_arm_1_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                    //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),           //       clk_reset.reset
		.m0_address              (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (jtag_uart_for_arm_1_avalon_jtag_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                 //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_startofpacket  (1'b0),                                                             // (terminated)
		.in_endofpacket    (1'b0),                                                             // (terminated)
		.out_startofpacket (),                                                                 // (terminated)
		.out_endofpacket   (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pixel_dma_addr_translation_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                               //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (pixel_dma_addr_translation_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pixel_dma_addr_translation_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pixel_dma_addr_translation_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pixel_dma_addr_translation_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pixel_dma_addr_translation_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (pixel_dma_addr_translation_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pixel_dma_addr_translation_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pixel_dma_addr_translation_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (pixel_dma_addr_translation_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pixel_dma_addr_translation_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (pixel_dma_addr_translation_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (pixel_dma_addr_translation_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pixel_dma_addr_translation_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (pixel_dma_addr_translation_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (pixel_dma_addr_translation_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (pixel_dma_addr_translation_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pixel_dma_addr_translation_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pixel_dma_addr_translation_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pixel_dma_addr_translation_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pixel_dma_addr_translation_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pixel_dma_addr_translation_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pixel_dma_addr_translation_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pixel_dma_addr_translation_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pixel_dma_addr_translation_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pixel_dma_addr_translation_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pixel_dma_addr_translation_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pixel_dma_addr_translation_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                                    //                .error
		.rdata_fifo_src_ready    (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_dma_addr_translation_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (pixel_dma_addr_translation_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pixel_dma_addr_translation_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pixel_dma_addr_translation_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pixel_dma_addr_translation_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pixel_dma_addr_translation_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pixel_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pixel_dma_addr_translation_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (pixel_dma_addr_translation_slave_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_in_dma_addr_translation_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                  //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (video_in_dma_addr_translation_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (video_in_dma_addr_translation_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (video_in_dma_addr_translation_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (video_in_dma_addr_translation_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (video_in_dma_addr_translation_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (video_in_dma_addr_translation_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (video_in_dma_addr_translation_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (video_in_dma_addr_translation_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (video_in_dma_addr_translation_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (video_in_dma_addr_translation_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (video_in_dma_addr_translation_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (video_in_dma_addr_translation_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (video_in_dma_addr_translation_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (video_in_dma_addr_translation_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (video_in_dma_addr_translation_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (video_in_dma_addr_translation_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (video_in_dma_addr_translation_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (video_in_dma_addr_translation_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (video_in_dma_addr_translation_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (video_in_dma_addr_translation_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (video_in_dma_addr_translation_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (video_in_dma_addr_translation_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (video_in_dma_addr_translation_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (video_in_dma_addr_translation_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (video_in_dma_addr_translation_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (video_in_dma_addr_translation_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (video_in_dma_addr_translation_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_in_dma_addr_translation_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                               //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (video_in_dma_addr_translation_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_in_dma_addr_translation_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_in_dma_addr_translation_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_in_dma_addr_translation_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_in_dma_addr_translation_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_in_dma_addr_translation_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                // (terminated)
		.csr_read          (1'b0),                                                                 // (terminated)
		.csr_write         (1'b0),                                                                 // (terminated)
		.csr_readdata      (),                                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                 // (terminated)
		.almost_full_data  (),                                                                     // (terminated)
		.almost_empty_data (),                                                                     // (terminated)
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.in_error          (1'b0),                                                                 // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_channel        (1'b0),                                                                 // (terminated)
		.out_channel       ()                                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_in_dma_addr_translation_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_data),   //        in.data
		.in_valid          (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_valid),  //          .valid
		.in_ready          (video_in_dma_addr_translation_slave_agent_rdata_fifo_src_ready),  //          .ready
		.out_data          (video_in_dma_addr_translation_slave_agent_rdata_fifo_out_data),   //       out.data
		.out_valid         (video_in_dma_addr_translation_slave_agent_rdata_fifo_out_valid),  //          .valid
		.out_ready         (video_in_dma_addr_translation_slave_agent_rdata_fifo_out_ready),  //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                       //             clk.clk
		.reset                   (JTAG_UART_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_022_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                                      //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_022_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_022_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_022_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_022_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                       //       clk.clk
		.reset             (JTAG_UART_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                 //       clk.clk
		.reset             (JTAG_UART_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_startofpacket  (1'b0),                                                   // (terminated)
		.in_endofpacket    (1'b0),                                                   // (terminated)
		.out_startofpacket (),                                                       // (terminated)
		.out_endofpacket   (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (109),
		.PKT_ORI_BURST_SIZE_L      (107),
		.PKT_RESPONSE_STATUS_H     (106),
		.PKT_RESPONSE_STATUS_L     (105),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (72),
		.PKT_PROTECTION_H          (100),
		.PKT_PROTECTION_L          (98),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (56),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (74),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (80),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (110),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_subsystem_char_buffer_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                              //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (vga_subsystem_char_buffer_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vga_subsystem_char_buffer_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vga_subsystem_char_buffer_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vga_subsystem_char_buffer_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vga_subsystem_char_buffer_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (vga_subsystem_char_buffer_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vga_subsystem_char_buffer_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vga_subsystem_char_buffer_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (vga_subsystem_char_buffer_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vga_subsystem_char_buffer_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (vga_subsystem_char_buffer_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (vga_subsystem_char_buffer_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vga_subsystem_char_buffer_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (vga_subsystem_char_buffer_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (vga_subsystem_char_buffer_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (vga_subsystem_char_buffer_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vga_subsystem_char_buffer_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vga_subsystem_char_buffer_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vga_subsystem_char_buffer_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vga_subsystem_char_buffer_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vga_subsystem_char_buffer_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vga_subsystem_char_buffer_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vga_subsystem_char_buffer_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vga_subsystem_char_buffer_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vga_subsystem_char_buffer_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vga_subsystem_char_buffer_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vga_subsystem_char_buffer_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_023_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_023_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_023_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_023_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (111),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buffer_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (vga_subsystem_char_buffer_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_subsystem_char_buffer_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_subsystem_char_buffer_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_subsystem_char_buffer_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_subsystem_char_buffer_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_subsystem_char_buffer_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_char_buffer_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_data),       //        in.data
		.in_valid          (vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_valid),      //          .valid
		.in_ready          (vga_subsystem_char_buffer_slave_agent_rdata_fifo_src_ready),      //          .ready
		.out_data          (vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_data),       //       out.data
		.out_valid         (vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_valid),      //          .valid
		.out_ready         (vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_ready),      //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_subsystem_pixel_dma_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                 //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (vga_subsystem_pixel_dma_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (vga_subsystem_pixel_dma_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (vga_subsystem_pixel_dma_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (vga_subsystem_pixel_dma_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (vga_subsystem_pixel_dma_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (vga_subsystem_pixel_dma_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (vga_subsystem_pixel_dma_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (vga_subsystem_pixel_dma_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (vga_subsystem_pixel_dma_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (vga_subsystem_pixel_dma_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (vga_subsystem_pixel_dma_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (vga_subsystem_pixel_dma_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (vga_subsystem_pixel_dma_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (vga_subsystem_pixel_dma_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (vga_subsystem_pixel_dma_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (vga_subsystem_pixel_dma_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                                                  //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                                                  //                .valid
		.cp_data                 (cmd_mux_024_src_data),                                                   //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                                            //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                                                //                .channel
		.rf_sink_ready           (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (vga_subsystem_pixel_dma_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (vga_subsystem_pixel_dma_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (vga_subsystem_pixel_dma_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (vga_subsystem_pixel_dma_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_024_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_024_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_024_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_024_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                 //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (vga_subsystem_pixel_dma_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (vga_subsystem_pixel_dma_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (vga_subsystem_pixel_dma_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (vga_subsystem_pixel_dma_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (vga_subsystem_pixel_dma_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                  // (terminated)
		.csr_read          (1'b0),                                                                   // (terminated)
		.csr_write         (1'b0),                                                                   // (terminated)
		.csr_readdata      (),                                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                   // (terminated)
		.almost_full_data  (),                                                                       // (terminated)
		.almost_empty_data (),                                                                       // (terminated)
		.in_empty          (1'b0),                                                                   // (terminated)
		.out_empty         (),                                                                       // (terminated)
		.in_error          (1'b0),                                                                   // (terminated)
		.out_error         (),                                                                       // (terminated)
		.in_channel        (1'b0),                                                                   // (terminated)
		.out_channel       ()                                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                           //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_startofpacket  (1'b0),                                                             // (terminated)
		.in_endofpacket    (1'b0),                                                             // (terminated)
		.out_startofpacket (),                                                                 // (terminated)
		.out_endofpacket   (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (118),
		.PKT_ORI_BURST_SIZE_L      (116),
		.PKT_RESPONSE_STATUS_H     (115),
		.PKT_RESPONSE_STATUS_L     (114),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (81),
		.PKT_PROTECTION_H          (109),
		.PKT_PROTECTION_L          (107),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (88),
		.PKT_SRC_ID_L              (83),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (89),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (119),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sdram_s1_agent_m0_address),                                       //              m0.address
		.m0_burstcount           (sdram_s1_agent_m0_burstcount),                                    //                .burstcount
		.m0_byteenable           (sdram_s1_agent_m0_byteenable),                                    //                .byteenable
		.m0_debugaccess          (sdram_s1_agent_m0_debugaccess),                                   //                .debugaccess
		.m0_lock                 (sdram_s1_agent_m0_lock),                                          //                .lock
		.m0_readdata             (sdram_s1_agent_m0_readdata),                                      //                .readdata
		.m0_readdatavalid        (sdram_s1_agent_m0_readdatavalid),                                 //                .readdatavalid
		.m0_read                 (sdram_s1_agent_m0_read),                                          //                .read
		.m0_waitrequest          (sdram_s1_agent_m0_waitrequest),                                   //                .waitrequest
		.m0_writedata            (sdram_s1_agent_m0_writedata),                                     //                .writedata
		.m0_write                (sdram_s1_agent_m0_write),                                         //                .write
		.rp_endofpacket          (sdram_s1_agent_rp_endofpacket),                                   //              rp.endofpacket
		.rp_ready                (sdram_s1_agent_rp_ready),                                         //                .ready
		.rp_valid                (sdram_s1_agent_rp_valid),                                         //                .valid
		.rp_data                 (sdram_s1_agent_rp_data),                                          //                .data
		.rp_startofpacket        (sdram_s1_agent_rp_startofpacket),                                 //                .startofpacket
		.cp_ready                (sdram_s1_burst_adapter_source0_ready),                            //              cp.ready
		.cp_valid                (sdram_s1_burst_adapter_source0_valid),                            //                .valid
		.cp_data                 (sdram_s1_burst_adapter_source0_data),                             //                .data
		.cp_startofpacket        (sdram_s1_burst_adapter_source0_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (sdram_s1_burst_adapter_source0_endofpacket),                      //                .endofpacket
		.cp_channel              (sdram_s1_burst_adapter_source0_channel),                          //                .channel
		.rf_sink_ready           (sdram_s1_agent_rsp_fifo_out_ready),                               //         rf_sink.ready
		.rf_sink_valid           (sdram_s1_agent_rsp_fifo_out_valid),                               //                .valid
		.rf_sink_startofpacket   (sdram_s1_agent_rsp_fifo_out_startofpacket),                       //                .startofpacket
		.rf_sink_endofpacket     (sdram_s1_agent_rsp_fifo_out_endofpacket),                         //                .endofpacket
		.rf_sink_data            (sdram_s1_agent_rsp_fifo_out_data),                                //                .data
		.rf_source_ready         (sdram_s1_agent_rf_source_ready),                                  //       rf_source.ready
		.rf_source_valid         (sdram_s1_agent_rf_source_valid),                                  //                .valid
		.rf_source_startofpacket (sdram_s1_agent_rf_source_startofpacket),                          //                .startofpacket
		.rf_source_endofpacket   (sdram_s1_agent_rf_source_endofpacket),                            //                .endofpacket
		.rf_source_data          (sdram_s1_agent_rf_source_data),                                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_025_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_025_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_025_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_025_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (sdram_s1_agent_rdata_fifo_src_ready),                             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_s1_agent_rdata_fifo_src_valid),                             //                .valid
		.rdata_fifo_src_data     (sdram_s1_agent_rdata_fifo_src_data),                              //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (120),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rf_source_data),                                   //        in.data
		.in_valid          (sdram_s1_agent_rf_source_valid),                                  //          .valid
		.in_ready          (sdram_s1_agent_rf_source_ready),                                  //          .ready
		.in_startofpacket  (sdram_s1_agent_rf_source_startofpacket),                          //          .startofpacket
		.in_endofpacket    (sdram_s1_agent_rf_source_endofpacket),                            //          .endofpacket
		.out_data          (sdram_s1_agent_rsp_fifo_out_data),                                //       out.data
		.out_valid         (sdram_s1_agent_rsp_fifo_out_valid),                               //          .valid
		.out_ready         (sdram_s1_agent_rsp_fifo_out_ready),                               //          .ready
		.out_startofpacket (sdram_s1_agent_rsp_fifo_out_startofpacket),                       //          .startofpacket
		.out_endofpacket   (sdram_s1_agent_rsp_fifo_out_endofpacket),                         //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_s1_agent_rdata_fifo_src_data),                              //        in.data
		.in_valid          (sdram_s1_agent_rdata_fifo_src_valid),                             //          .valid
		.in_ready          (sdram_s1_agent_rdata_fifo_src_ready),                             //          .ready
		.out_data          (sdram_s1_agent_rdata_fifo_out_data),                              //       out.data
		.out_valid         (sdram_s1_agent_rdata_fifo_out_valid),                             //          .valid
		.out_ready         (sdram_s1_agent_rdata_fifo_out_ready),                             //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_sram_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (onchip_sram_s1_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (onchip_sram_s1_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (onchip_sram_s1_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (onchip_sram_s1_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (onchip_sram_s1_agent_m0_lock),                                    //                .lock
		.m0_readdata             (onchip_sram_s1_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (onchip_sram_s1_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (onchip_sram_s1_agent_m0_read),                                    //                .read
		.m0_waitrequest          (onchip_sram_s1_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (onchip_sram_s1_agent_m0_writedata),                               //                .writedata
		.m0_write                (onchip_sram_s1_agent_m0_write),                                   //                .write
		.rp_endofpacket          (onchip_sram_s1_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (onchip_sram_s1_agent_rp_ready),                                   //                .ready
		.rp_valid                (onchip_sram_s1_agent_rp_valid),                                   //                .valid
		.rp_data                 (onchip_sram_s1_agent_rp_data),                                    //                .data
		.rp_startofpacket        (onchip_sram_s1_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (onchip_sram_s1_burst_adapter_source0_ready),                      //              cp.ready
		.cp_valid                (onchip_sram_s1_burst_adapter_source0_valid),                      //                .valid
		.cp_data                 (onchip_sram_s1_burst_adapter_source0_data),                       //                .data
		.cp_startofpacket        (onchip_sram_s1_burst_adapter_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (onchip_sram_s1_burst_adapter_source0_endofpacket),                //                .endofpacket
		.cp_channel              (onchip_sram_s1_burst_adapter_source0_channel),                    //                .channel
		.rf_sink_ready           (onchip_sram_s1_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (onchip_sram_s1_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (onchip_sram_s1_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (onchip_sram_s1_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (onchip_sram_s1_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (onchip_sram_s1_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (onchip_sram_s1_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (onchip_sram_s1_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (onchip_sram_s1_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (onchip_sram_s1_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_026_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_026_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_026_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_026_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (onchip_sram_s1_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_sram_s1_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (onchip_sram_s1_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_sram_s1_agent_rf_source_data),                             //        in.data
		.in_valid          (onchip_sram_s1_agent_rf_source_valid),                            //          .valid
		.in_ready          (onchip_sram_s1_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (onchip_sram_s1_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (onchip_sram_s1_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (onchip_sram_s1_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (onchip_sram_s1_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (onchip_sram_s1_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (onchip_sram_s1_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (onchip_sram_s1_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_sram_s1_agent_rdata_fifo_src_data),                        //        in.data
		.in_valid          (onchip_sram_s1_agent_rdata_fifo_src_valid),                       //          .valid
		.in_ready          (onchip_sram_s1_agent_rdata_fifo_src_ready),                       //          .ready
		.out_data          (onchip_sram_s1_agent_rdata_fifo_out_data),                        //       out.data
		.out_valid         (onchip_sram_s1_agent_rdata_fifo_out_valid),                       //          .valid
		.out_ready         (onchip_sram_s1_agent_rdata_fifo_out_ready),                       //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) video_in_subsystem_video_in_dma_control_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                         //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (video_in_subsystem_video_in_dma_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (video_in_subsystem_video_in_dma_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (video_in_subsystem_video_in_dma_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (video_in_subsystem_video_in_dma_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (video_in_subsystem_video_in_dma_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (video_in_subsystem_video_in_dma_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (video_in_subsystem_video_in_dma_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (video_in_subsystem_video_in_dma_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (video_in_subsystem_video_in_dma_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (video_in_subsystem_video_in_dma_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (video_in_subsystem_video_in_dma_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (video_in_subsystem_video_in_dma_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (video_in_subsystem_video_in_dma_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (video_in_subsystem_video_in_dma_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (video_in_subsystem_video_in_dma_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (video_in_subsystem_video_in_dma_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_027_src_ready),                                                          //              cp.ready
		.cp_valid                (cmd_mux_027_src_valid),                                                          //                .valid
		.cp_data                 (cmd_mux_027_src_data),                                                           //                .data
		.cp_startofpacket        (cmd_mux_027_src_startofpacket),                                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_027_src_endofpacket),                                                    //                .endofpacket
		.cp_channel              (cmd_mux_027_src_channel),                                                        //                .channel
		.rf_sink_ready           (video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (video_in_subsystem_video_in_dma_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (video_in_subsystem_video_in_dma_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (video_in_subsystem_video_in_dma_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (video_in_subsystem_video_in_dma_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (video_in_subsystem_video_in_dma_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_027_out_0_ready),                                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_027_out_0_valid),                                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_027_out_0_data),                                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_027_out_0_error),                                              //                .error
		.rdata_fifo_src_ready    (video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                         //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (video_in_subsystem_video_in_dma_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (video_in_subsystem_video_in_dma_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (video_in_subsystem_video_in_dma_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (video_in_subsystem_video_in_dma_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (video_in_subsystem_video_in_dma_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (video_in_subsystem_video_in_dma_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                          // (terminated)
		.csr_read          (1'b0),                                                                           // (terminated)
		.csr_write         (1'b0),                                                                           // (terminated)
		.csr_readdata      (),                                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                           // (terminated)
		.almost_full_data  (),                                                                               // (terminated)
		.almost_empty_data (),                                                                               // (terminated)
		.in_empty          (1'b0),                                                                           // (terminated)
		.out_empty         (),                                                                               // (terminated)
		.in_error          (1'b0),                                                                           // (terminated)
		.out_error         (),                                                                               // (terminated)
		.in_channel        (1'b0),                                                                           // (terminated)
		.out_channel       ()                                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                                    // (terminated)
		.csr_read          (1'b0),                                                                     // (terminated)
		.csr_write         (1'b0),                                                                     // (terminated)
		.csr_readdata      (),                                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                     // (terminated)
		.almost_full_data  (),                                                                         // (terminated)
		.almost_empty_data (),                                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                                     // (terminated)
		.out_startofpacket (),                                                                         // (terminated)
		.out_endofpacket   (),                                                                         // (terminated)
		.in_empty          (1'b0),                                                                     // (terminated)
		.out_empty         (),                                                                         // (terminated)
		.in_error          (1'b0),                                                                     // (terminated)
		.out_error         (),                                                                         // (terminated)
		.in_channel        (1'b0),                                                                     // (terminated)
		.out_channel       ()                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) f2h_mem_window_00000000_windowed_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                  //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (f2h_mem_window_00000000_windowed_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (f2h_mem_window_00000000_windowed_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (f2h_mem_window_00000000_windowed_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (f2h_mem_window_00000000_windowed_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (f2h_mem_window_00000000_windowed_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (f2h_mem_window_00000000_windowed_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (f2h_mem_window_00000000_windowed_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (f2h_mem_window_00000000_windowed_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (f2h_mem_window_00000000_windowed_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (f2h_mem_window_00000000_windowed_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (f2h_mem_window_00000000_windowed_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (f2h_mem_window_00000000_windowed_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (f2h_mem_window_00000000_windowed_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (f2h_mem_window_00000000_windowed_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (f2h_mem_window_00000000_windowed_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (f2h_mem_window_00000000_windowed_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_028_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_028_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_028_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_028_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_028_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_028_src_channel),                                                 //                .channel
		.rf_sink_ready           (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (f2h_mem_window_00000000_windowed_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (f2h_mem_window_00000000_windowed_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (f2h_mem_window_00000000_windowed_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (f2h_mem_window_00000000_windowed_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (f2h_mem_window_00000000_windowed_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_028_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_028_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_028_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_028_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                  //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (f2h_mem_window_00000000_windowed_slave_agent_rf_source_data),             //        in.data
		.in_valid          (f2h_mem_window_00000000_windowed_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (f2h_mem_window_00000000_windowed_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (f2h_mem_window_00000000_windowed_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (f2h_mem_window_00000000_windowed_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (f2h_mem_window_00000000_windowed_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_startofpacket  (1'b0),                                                              // (terminated)
		.in_endofpacket    (1'b0),                                                              // (terminated)
		.out_startofpacket (),                                                                  // (terminated)
		.out_endofpacket   (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) f2h_mem_window_ff600000_windowed_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                  //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (f2h_mem_window_ff600000_windowed_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (f2h_mem_window_ff600000_windowed_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (f2h_mem_window_ff600000_windowed_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (f2h_mem_window_ff600000_windowed_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (f2h_mem_window_ff600000_windowed_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (f2h_mem_window_ff600000_windowed_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (f2h_mem_window_ff600000_windowed_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (f2h_mem_window_ff600000_windowed_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (f2h_mem_window_ff600000_windowed_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (f2h_mem_window_ff600000_windowed_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (f2h_mem_window_ff600000_windowed_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (f2h_mem_window_ff600000_windowed_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (f2h_mem_window_ff600000_windowed_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (f2h_mem_window_ff600000_windowed_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (f2h_mem_window_ff600000_windowed_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (f2h_mem_window_ff600000_windowed_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_029_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_029_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_029_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_029_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_029_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_029_src_channel),                                                 //                .channel
		.rf_sink_ready           (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_029_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_029_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_029_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_029_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                  //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_data),             //        in.data
		.in_valid          (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (f2h_mem_window_ff600000_windowed_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (f2h_mem_window_ff600000_windowed_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_startofpacket  (1'b0),                                                              // (terminated)
		.in_endofpacket    (1'b0),                                                              // (terminated)
		.out_startofpacket (),                                                                  // (terminated)
		.out_endofpacket   (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) f2h_mem_window_ff800000_windowed_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                  //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (f2h_mem_window_ff800000_windowed_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (f2h_mem_window_ff800000_windowed_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (f2h_mem_window_ff800000_windowed_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (f2h_mem_window_ff800000_windowed_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (f2h_mem_window_ff800000_windowed_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (f2h_mem_window_ff800000_windowed_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (f2h_mem_window_ff800000_windowed_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (f2h_mem_window_ff800000_windowed_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (f2h_mem_window_ff800000_windowed_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (f2h_mem_window_ff800000_windowed_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (f2h_mem_window_ff800000_windowed_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (f2h_mem_window_ff800000_windowed_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (f2h_mem_window_ff800000_windowed_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (f2h_mem_window_ff800000_windowed_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (f2h_mem_window_ff800000_windowed_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (f2h_mem_window_ff800000_windowed_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_030_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_030_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_030_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_030_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_030_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_030_src_channel),                                                 //                .channel
		.rf_sink_ready           (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_030_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_030_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_030_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_030_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                  //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_data),             //        in.data
		.in_valid          (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (f2h_mem_window_ff800000_windowed_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (f2h_mem_window_ff800000_windowed_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_startofpacket  (1'b0),                                                              // (terminated)
		.in_endofpacket    (1'b0),                                                              // (terminated)
		.out_startofpacket (),                                                                  // (terminated)
		.out_endofpacket   (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_2nd_core_avalon_jtag_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                                //             clk.clk
		.reset                   (JTAG_UART_reset_reset_bridge_in_reset_reset),                           //       clk_reset.reset
		.m0_address              (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_2nd_core_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_031_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_031_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_031_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_031_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_031_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_031_src_channel),                                               //                .channel
		.rf_sink_ready           (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_031_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_031_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_031_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_031_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                                //       clk.clk
		.reset             (JTAG_UART_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_data           (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_2nd_core_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_2nd_core_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (JTAG_UART_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.in_data           (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_2nd_core_debug_mem_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_2nd_core_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_2nd_core_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_2nd_core_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_2nd_core_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_2nd_core_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_2nd_core_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_2nd_core_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_2nd_core_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_2nd_core_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_2nd_core_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_2nd_core_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_2nd_core_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_2nd_core_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_2nd_core_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_2nd_core_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_2nd_core_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_032_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_032_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_032_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_032_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_032_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_032_src_channel),                                         //                .channel
		.rf_sink_ready           (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_2nd_core_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_2nd_core_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_2nd_core_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_2nd_core_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_2nd_core_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_032_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_032_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_032_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_032_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_2nd_core_debug_mem_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_2nd_core_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_2nd_core_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_2nd_core_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_2nd_core_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_2nd_core_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_2nd_core_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_2nd_core_debug_mem_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                    //       clk.clk
		.reset             (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) interval_timer_2nd_core_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (interval_timer_2nd_core_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (interval_timer_2nd_core_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (interval_timer_2nd_core_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (interval_timer_2nd_core_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (interval_timer_2nd_core_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (interval_timer_2nd_core_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (interval_timer_2nd_core_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (interval_timer_2nd_core_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (interval_timer_2nd_core_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (interval_timer_2nd_core_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (interval_timer_2nd_core_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (interval_timer_2nd_core_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (interval_timer_2nd_core_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (interval_timer_2nd_core_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (interval_timer_2nd_core_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (interval_timer_2nd_core_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_033_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_033_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_033_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_033_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_033_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_033_src_channel),                                         //                .channel
		.rf_sink_ready           (interval_timer_2nd_core_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (interval_timer_2nd_core_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (interval_timer_2nd_core_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (interval_timer_2nd_core_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (interval_timer_2nd_core_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (interval_timer_2nd_core_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (interval_timer_2nd_core_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (interval_timer_2nd_core_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (interval_timer_2nd_core_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (interval_timer_2nd_core_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_033_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_033_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_033_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_033_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (interval_timer_2nd_core_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interval_timer_2nd_core_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (interval_timer_2nd_core_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2nd_core_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (interval_timer_2nd_core_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (interval_timer_2nd_core_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (interval_timer_2nd_core_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (interval_timer_2nd_core_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (interval_timer_2nd_core_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (interval_timer_2nd_core_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (interval_timer_2nd_core_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (interval_timer_2nd_core_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (interval_timer_2nd_core_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (interval_timer_2nd_core_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2nd_core_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (interval_timer_2nd_core_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (interval_timer_2nd_core_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (interval_timer_2nd_core_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (interval_timer_2nd_core_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (interval_timer_2nd_core_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (interval_timer_2nd_core_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) interval_timer_2nd_core_2_s1_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (interval_timer_2nd_core_2_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (interval_timer_2nd_core_2_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (interval_timer_2nd_core_2_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (interval_timer_2nd_core_2_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (interval_timer_2nd_core_2_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (interval_timer_2nd_core_2_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (interval_timer_2nd_core_2_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (interval_timer_2nd_core_2_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (interval_timer_2nd_core_2_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (interval_timer_2nd_core_2_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (interval_timer_2nd_core_2_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (interval_timer_2nd_core_2_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (interval_timer_2nd_core_2_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (interval_timer_2nd_core_2_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (interval_timer_2nd_core_2_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (interval_timer_2nd_core_2_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_034_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_034_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_034_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_034_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_034_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_034_src_channel),                                         //                .channel
		.rf_sink_ready           (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (interval_timer_2nd_core_2_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (interval_timer_2nd_core_2_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (interval_timer_2nd_core_2_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (interval_timer_2nd_core_2_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (interval_timer_2nd_core_2_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_034_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_034_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_034_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_034_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2nd_core_2_s1_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (interval_timer_2nd_core_2_s1_agent_rf_source_data),               //        in.data
		.in_valid          (interval_timer_2nd_core_2_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (interval_timer_2nd_core_2_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (interval_timer_2nd_core_2_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (interval_timer_2nd_core_2_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (interval_timer_2nd_core_2_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) interval_timer_2nd_core_2_s1_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_data),          //        in.data
		.in_valid          (interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_valid),         //          .valid
		.in_ready          (interval_timer_2nd_core_2_s1_agent_rdata_fifo_src_ready),         //          .ready
		.out_data          (interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_data),          //       out.data
		.out_valid         (interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_valid),         //          .valid
		.out_ready         (interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_ready),         //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_sram_s2_agent (
		.clk                     (System_PLL_sys_clk_clk),                                          //             clk.clk
		.reset                   (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (onchip_sram_s2_agent_m0_address),                                 //              m0.address
		.m0_burstcount           (onchip_sram_s2_agent_m0_burstcount),                              //                .burstcount
		.m0_byteenable           (onchip_sram_s2_agent_m0_byteenable),                              //                .byteenable
		.m0_debugaccess          (onchip_sram_s2_agent_m0_debugaccess),                             //                .debugaccess
		.m0_lock                 (onchip_sram_s2_agent_m0_lock),                                    //                .lock
		.m0_readdata             (onchip_sram_s2_agent_m0_readdata),                                //                .readdata
		.m0_readdatavalid        (onchip_sram_s2_agent_m0_readdatavalid),                           //                .readdatavalid
		.m0_read                 (onchip_sram_s2_agent_m0_read),                                    //                .read
		.m0_waitrequest          (onchip_sram_s2_agent_m0_waitrequest),                             //                .waitrequest
		.m0_writedata            (onchip_sram_s2_agent_m0_writedata),                               //                .writedata
		.m0_write                (onchip_sram_s2_agent_m0_write),                                   //                .write
		.rp_endofpacket          (onchip_sram_s2_agent_rp_endofpacket),                             //              rp.endofpacket
		.rp_ready                (onchip_sram_s2_agent_rp_ready),                                   //                .ready
		.rp_valid                (onchip_sram_s2_agent_rp_valid),                                   //                .valid
		.rp_data                 (onchip_sram_s2_agent_rp_data),                                    //                .data
		.rp_startofpacket        (onchip_sram_s2_agent_rp_startofpacket),                           //                .startofpacket
		.cp_ready                (onchip_sram_s2_burst_adapter_source0_ready),                      //              cp.ready
		.cp_valid                (onchip_sram_s2_burst_adapter_source0_valid),                      //                .valid
		.cp_data                 (onchip_sram_s2_burst_adapter_source0_data),                       //                .data
		.cp_startofpacket        (onchip_sram_s2_burst_adapter_source0_startofpacket),              //                .startofpacket
		.cp_endofpacket          (onchip_sram_s2_burst_adapter_source0_endofpacket),                //                .endofpacket
		.cp_channel              (onchip_sram_s2_burst_adapter_source0_channel),                    //                .channel
		.rf_sink_ready           (onchip_sram_s2_agent_rsp_fifo_out_ready),                         //         rf_sink.ready
		.rf_sink_valid           (onchip_sram_s2_agent_rsp_fifo_out_valid),                         //                .valid
		.rf_sink_startofpacket   (onchip_sram_s2_agent_rsp_fifo_out_startofpacket),                 //                .startofpacket
		.rf_sink_endofpacket     (onchip_sram_s2_agent_rsp_fifo_out_endofpacket),                   //                .endofpacket
		.rf_sink_data            (onchip_sram_s2_agent_rsp_fifo_out_data),                          //                .data
		.rf_source_ready         (onchip_sram_s2_agent_rf_source_ready),                            //       rf_source.ready
		.rf_source_valid         (onchip_sram_s2_agent_rf_source_valid),                            //                .valid
		.rf_source_startofpacket (onchip_sram_s2_agent_rf_source_startofpacket),                    //                .startofpacket
		.rf_source_endofpacket   (onchip_sram_s2_agent_rf_source_endofpacket),                      //                .endofpacket
		.rf_source_data          (onchip_sram_s2_agent_rf_source_data),                             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_035_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_035_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_035_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_035_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (onchip_sram_s2_agent_rdata_fifo_src_ready),                       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_sram_s2_agent_rdata_fifo_src_valid),                       //                .valid
		.rdata_fifo_src_data     (onchip_sram_s2_agent_rdata_fifo_src_data),                        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s2_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_sram_s2_agent_rf_source_data),                             //        in.data
		.in_valid          (onchip_sram_s2_agent_rf_source_valid),                            //          .valid
		.in_ready          (onchip_sram_s2_agent_rf_source_ready),                            //          .ready
		.in_startofpacket  (onchip_sram_s2_agent_rf_source_startofpacket),                    //          .startofpacket
		.in_endofpacket    (onchip_sram_s2_agent_rf_source_endofpacket),                      //          .endofpacket
		.out_data          (onchip_sram_s2_agent_rsp_fifo_out_data),                          //       out.data
		.out_valid         (onchip_sram_s2_agent_rsp_fifo_out_valid),                         //          .valid
		.out_ready         (onchip_sram_s2_agent_rsp_fifo_out_ready),                         //          .ready
		.out_startofpacket (onchip_sram_s2_agent_rsp_fifo_out_startofpacket),                 //          .startofpacket
		.out_endofpacket   (onchip_sram_s2_agent_rsp_fifo_out_endofpacket),                   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_sram_s2_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset             (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_sram_s2_agent_rdata_fifo_src_data),                        //        in.data
		.in_valid          (onchip_sram_s2_agent_rdata_fifo_src_valid),                       //          .valid
		.in_ready          (onchip_sram_s2_agent_rdata_fifo_src_ready),                       //          .ready
		.out_data          (onchip_sram_s2_agent_rdata_fifo_out_data),                        //       out.data
		.out_valid         (onchip_sram_s2_agent_rdata_fifo_out_valid),                       //          .valid
		.out_ready         (onchip_sram_s2_agent_rdata_fifo_out_ready),                       //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (136),
		.PKT_ORI_BURST_SIZE_L      (134),
		.PKT_RESPONSE_STATUS_H     (133),
		.PKT_RESPONSE_STATUS_L     (132),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (99),
		.PKT_PROTECTION_H          (127),
		.PKT_PROTECTION_L          (125),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (37),
		.ST_DATA_W                 (137),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_debug_mem_slave_agent (
		.clk                     (System_PLL_sys_clk_clk),                                 //             clk.clk
		.reset                   (Nios2_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_036_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_036_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_036_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_036_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_036_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_036_src_channel),                                //                .channel
		.rf_sink_ready           (nios2_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_036_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_036_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_036_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_036_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (nios2_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (138),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_debug_mem_slave_agent_rsp_fifo (
		.clk               (System_PLL_sys_clk_clk),                                 //       clk.clk
		.reset             (Nios2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_debug_mem_slave_agent_rdata_fifo (
		.clk               (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset             (Nios2_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (nios2_debug_mem_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (nios2_debug_mem_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (nios2_debug_mem_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (nios2_debug_mem_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (nios2_debug_mem_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (nios2_debug_mem_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	Computer_System_mm_interconnect_0_router router (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_ready),                        //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_valid),                        //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_data),                         //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_write_cp_endofpacket),                  //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                         //       src.ready
		.src_valid          (router_src_valid),                                                         //          .valid
		.src_data           (router_src_data),                                                          //          .data
		.src_channel        (router_src_channel),                                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router router_001 (
		.sink_ready         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_ready),                         //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_valid),                         //          .valid
		.sink_data          (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_data),                          //          .data
		.sink_startofpacket (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_lw_axi_master_agent_read_cp_endofpacket),                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                                     //       src.ready
		.src_valid          (router_001_src_valid),                                                     //          .valid
		.src_data           (router_001_src_data),                                                      //          .data
		.src_channel        (router_001_src_channel),                                                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (nios2_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                   //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_002_src_ready),                     //       src.ready
		.src_valid          (router_002_src_valid),                     //          .valid
		.src_data           (router_002_src_data),                      //          .data
		.src_channel        (router_002_src_channel),                   //          .channel
		.src_startofpacket  (router_002_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (nios2_2nd_core_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_2nd_core_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_2nd_core_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_2nd_core_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_2nd_core_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                            //       clk.clk
		.reset              (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (jtag_to_fpga_bridge_master_agent_cp_ready),                       //      sink.ready
		.sink_valid         (jtag_to_fpga_bridge_master_agent_cp_valid),                       //          .valid
		.sink_data          (jtag_to_fpga_bridge_master_agent_cp_data),                        //          .data
		.sink_startofpacket (jtag_to_fpga_bridge_master_agent_cp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (jtag_to_fpga_bridge_master_agent_cp_endofpacket),                 //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                            //       src.ready
		.src_valid          (router_004_src_valid),                                            //          .valid
		.src_data           (router_004_src_data),                                             //          .data
		.src_channel        (router_004_src_channel),                                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (nios2_2nd_core_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_2nd_core_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_2nd_core_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_2nd_core_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_2nd_core_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                   //       clk.clk
		.reset              (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_005_src_ready),                                     //       src.ready
		.src_valid          (router_005_src_valid),                                     //          .valid
		.src_data           (router_005_src_data),                                      //          .data
		.src_channel        (router_005_src_channel),                                   //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (nios2_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                          //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_006_src_ready),                            //       src.ready
		.src_valid          (router_006_src_valid),                            //          .valid
		.src_data           (router_006_src_data),                             //          .data
		.src_channel        (router_006_src_channel),                          //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (vga_subsystem_pixel_dma_master_agent_cp_ready),                   //      sink.ready
		.sink_valid         (vga_subsystem_pixel_dma_master_agent_cp_valid),                   //          .valid
		.sink_data          (vga_subsystem_pixel_dma_master_agent_cp_data),                    //          .data
		.sink_startofpacket (vga_subsystem_pixel_dma_master_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (vga_subsystem_pixel_dma_master_agent_cp_endofpacket),             //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                            //       src.ready
		.src_valid          (router_007_src_valid),                                            //          .valid
		.src_data           (router_007_src_data),                                             //          .data
		.src_channel        (router_007_src_channel),                                          //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (arm_a9_hps_h2f_axi_master_agent_write_cp_ready),                           //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_axi_master_agent_write_cp_valid),                           //          .valid
		.sink_data          (arm_a9_hps_h2f_axi_master_agent_write_cp_data),                            //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_agent_write_cp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_agent_write_cp_endofpacket),                     //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                                     //       src.ready
		.src_valid          (router_008_src_valid),                                                     //          .valid
		.src_data           (router_008_src_data),                                                      //          .data
		.src_channel        (router_008_src_channel),                                                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_008 router_009 (
		.sink_ready         (arm_a9_hps_h2f_axi_master_agent_read_cp_ready),                            //      sink.ready
		.sink_valid         (arm_a9_hps_h2f_axi_master_agent_read_cp_valid),                            //          .valid
		.sink_data          (arm_a9_hps_h2f_axi_master_agent_read_cp_data),                             //          .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_agent_read_cp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_agent_read_cp_endofpacket),                      //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                                     //       src.ready
		.src_valid          (router_009_src_valid),                                                     //          .valid
		.src_data           (router_009_src_data),                                                      //          .data
		.src_channel        (router_009_src_channel),                                                   //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                                //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (video_in_subsystem_video_in_dma_master_agent_cp_ready),           //      sink.ready
		.sink_valid         (video_in_subsystem_video_in_dma_master_agent_cp_valid),           //          .valid
		.sink_data          (video_in_subsystem_video_in_dma_master_agent_cp_data),            //          .data
		.sink_startofpacket (video_in_subsystem_video_in_dma_master_agent_cp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (video_in_subsystem_video_in_dma_master_agent_cp_endofpacket),     //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                            //       src.ready
		.src_valid          (router_010_src_valid),                                            //          .valid
		.src_data           (router_010_src_data),                                             //          .data
		.src_channel        (router_010_src_channel),                                          //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_011 router_011 (
		.sink_ready         (video_in_dma_addr_translation_master_agent_cp_ready),             //      sink.ready
		.sink_valid         (video_in_dma_addr_translation_master_agent_cp_valid),             //          .valid
		.sink_data          (video_in_dma_addr_translation_master_agent_cp_data),              //          .data
		.sink_startofpacket (video_in_dma_addr_translation_master_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (video_in_dma_addr_translation_master_agent_cp_endofpacket),       //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                            //       src.ready
		.src_valid          (router_011_src_valid),                                            //          .valid
		.src_data           (router_011_src_data),                                             //          .data
		.src_channel        (router_011_src_channel),                                          //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_012 router_012 (
		.sink_ready         (pixel_dma_addr_translation_master_agent_cp_ready),                //      sink.ready
		.sink_valid         (pixel_dma_addr_translation_master_agent_cp_valid),                //          .valid
		.sink_data          (pixel_dma_addr_translation_master_agent_cp_data),                 //          .data
		.sink_startofpacket (pixel_dma_addr_translation_master_agent_cp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (pixel_dma_addr_translation_master_agent_cp_endofpacket),          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                            //       src.ready
		.src_valid          (router_012_src_valid),                                            //          .valid
		.src_data           (router_012_src_data),                                             //          .data
		.src_channel        (router_012_src_channel),                                          //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (adc_adc_slave_agent_rp_ready),                                    //      sink.ready
		.sink_valid         (adc_adc_slave_agent_rp_valid),                                    //          .valid
		.sink_data          (adc_adc_slave_agent_rp_data),                                     //          .data
		.sink_startofpacket (adc_adc_slave_agent_rp_startofpacket),                            //          .startofpacket
		.sink_endofpacket   (adc_adc_slave_agent_rp_endofpacket),                              //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                            //       src.ready
		.src_valid          (router_013_src_valid),                                            //          .valid
		.src_data           (router_013_src_data),                                             //          .data
		.src_channel        (router_013_src_channel),                                          //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_014 (
		.sink_ready         (audio_subsystem_audio_slave_agent_rp_ready),                      //      sink.ready
		.sink_valid         (audio_subsystem_audio_slave_agent_rp_valid),                      //          .valid
		.sink_data          (audio_subsystem_audio_slave_agent_rp_data),                       //          .data
		.sink_startofpacket (audio_subsystem_audio_slave_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (audio_subsystem_audio_slave_agent_rp_endofpacket),                //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                            //       src.ready
		.src_valid          (router_014_src_valid),                                            //          .valid
		.src_data           (router_014_src_data),                                             //          .data
		.src_channel        (router_014_src_channel),                                          //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_015 (
		.sink_ready         (av_config_avalon_av_config_slave_agent_rp_ready),                 //      sink.ready
		.sink_valid         (av_config_avalon_av_config_slave_agent_rp_valid),                 //          .valid
		.sink_data          (av_config_avalon_av_config_slave_agent_rp_data),                  //          .data
		.sink_startofpacket (av_config_avalon_av_config_slave_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (av_config_avalon_av_config_slave_agent_rp_endofpacket),           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                            //       src.ready
		.src_valid          (router_015_src_valid),                                            //          .valid
		.src_data           (router_015_src_data),                                             //          .data
		.src_channel        (router_015_src_channel),                                          //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_016 (
		.sink_ready         (irda_avalon_irda_slave_agent_rp_ready),                           //      sink.ready
		.sink_valid         (irda_avalon_irda_slave_agent_rp_valid),                           //          .valid
		.sink_data          (irda_avalon_irda_slave_agent_rp_data),                            //          .data
		.sink_startofpacket (irda_avalon_irda_slave_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (irda_avalon_irda_slave_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                            //       src.ready
		.src_valid          (router_016_src_valid),                                            //          .valid
		.src_data           (router_016_src_data),                                             //          .data
		.src_channel        (router_016_src_channel),                                          //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_017 (
		.sink_ready         (ps2_port_avalon_ps2_slave_agent_rp_ready),                        //      sink.ready
		.sink_valid         (ps2_port_avalon_ps2_slave_agent_rp_valid),                        //          .valid
		.sink_data          (ps2_port_avalon_ps2_slave_agent_rp_data),                         //          .data
		.sink_startofpacket (ps2_port_avalon_ps2_slave_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (ps2_port_avalon_ps2_slave_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                                            //       src.ready
		.src_valid          (router_017_src_valid),                                            //          .valid
		.src_data           (router_017_src_data),                                             //          .data
		.src_channel        (router_017_src_channel),                                          //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_018 (
		.sink_ready         (ps2_port_dual_avalon_ps2_slave_agent_rp_ready),                   //      sink.ready
		.sink_valid         (ps2_port_dual_avalon_ps2_slave_agent_rp_valid),                   //          .valid
		.sink_data          (ps2_port_dual_avalon_ps2_slave_agent_rp_data),                    //          .data
		.sink_startofpacket (ps2_port_dual_avalon_ps2_slave_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (ps2_port_dual_avalon_ps2_slave_agent_rp_endofpacket),             //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                                            //       src.ready
		.src_valid          (router_018_src_valid),                                            //          .valid
		.src_data           (router_018_src_data),                                             //          .data
		.src_channel        (router_018_src_channel),                                          //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_019 (
		.sink_ready         (vga_subsystem_char_buffer_control_slave_agent_rp_ready),          //      sink.ready
		.sink_valid         (vga_subsystem_char_buffer_control_slave_agent_rp_valid),          //          .valid
		.sink_data          (vga_subsystem_char_buffer_control_slave_agent_rp_data),           //          .data
		.sink_startofpacket (vga_subsystem_char_buffer_control_slave_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (vga_subsystem_char_buffer_control_slave_agent_rp_endofpacket),    //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                                            //       src.ready
		.src_valid          (router_019_src_valid),                                            //          .valid
		.src_data           (router_019_src_data),                                             //          .data
		.src_channel        (router_019_src_channel),                                          //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_020 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),                              //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),                              //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),                               //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                                            //       src.ready
		.src_valid          (router_020_src_valid),                                            //          .valid
		.src_data           (router_020_src_data),                                             //          .data
		.src_channel        (router_020_src_channel),                                          //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_021 (
		.sink_ready         (video_in_subsystem_edge_detection_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_in_subsystem_edge_detection_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_in_subsystem_edge_detection_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_in_subsystem_edge_detection_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_in_subsystem_edge_detection_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                                 //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_021_src_ready),                                                   //       src.ready
		.src_valid          (router_021_src_valid),                                                   //          .valid
		.src_data           (router_021_src_data),                                                    //          .data
		.src_channel        (router_021_src_channel),                                                 //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                                           //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                                              //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_022 (
		.sink_ready         (leds_s1_agent_rp_ready),                                          //      sink.ready
		.sink_valid         (leds_s1_agent_rp_valid),                                          //          .valid
		.sink_data          (leds_s1_agent_rp_data),                                           //          .data
		.sink_startofpacket (leds_s1_agent_rp_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (leds_s1_agent_rp_endofpacket),                                    //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                                            //       src.ready
		.src_valid          (router_022_src_valid),                                            //          .valid
		.src_data           (router_022_src_data),                                             //          .data
		.src_channel        (router_022_src_channel),                                          //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_023 (
		.sink_ready         (hex3_hex0_s1_agent_rp_ready),                                     //      sink.ready
		.sink_valid         (hex3_hex0_s1_agent_rp_valid),                                     //          .valid
		.sink_data          (hex3_hex0_s1_agent_rp_data),                                      //          .data
		.sink_startofpacket (hex3_hex0_s1_agent_rp_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (hex3_hex0_s1_agent_rp_endofpacket),                               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                                            //       src.ready
		.src_valid          (router_023_src_valid),                                            //          .valid
		.src_data           (router_023_src_data),                                             //          .data
		.src_channel        (router_023_src_channel),                                          //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_024 (
		.sink_ready         (hex5_hex4_s1_agent_rp_ready),                                     //      sink.ready
		.sink_valid         (hex5_hex4_s1_agent_rp_valid),                                     //          .valid
		.sink_data          (hex5_hex4_s1_agent_rp_data),                                      //          .data
		.sink_startofpacket (hex5_hex4_s1_agent_rp_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (hex5_hex4_s1_agent_rp_endofpacket),                               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                                            //       src.ready
		.src_valid          (router_024_src_valid),                                            //          .valid
		.src_data           (router_024_src_data),                                             //          .data
		.src_channel        (router_024_src_channel),                                          //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_025 (
		.sink_ready         (slider_switches_s1_agent_rp_ready),                               //      sink.ready
		.sink_valid         (slider_switches_s1_agent_rp_valid),                               //          .valid
		.sink_data          (slider_switches_s1_agent_rp_data),                                //          .data
		.sink_startofpacket (slider_switches_s1_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (slider_switches_s1_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                                            //       src.ready
		.src_valid          (router_025_src_valid),                                            //          .valid
		.src_data           (router_025_src_data),                                             //          .data
		.src_channel        (router_025_src_channel),                                          //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_026 (
		.sink_ready         (pushbuttons_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (pushbuttons_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (pushbuttons_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (pushbuttons_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (pushbuttons_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                                            //       src.ready
		.src_valid          (router_026_src_valid),                                            //          .valid
		.src_data           (router_026_src_data),                                             //          .data
		.src_channel        (router_026_src_channel),                                          //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_027 (
		.sink_ready         (expansion_jp1_s1_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (expansion_jp1_s1_agent_rp_valid),                                 //          .valid
		.sink_data          (expansion_jp1_s1_agent_rp_data),                                  //          .data
		.sink_startofpacket (expansion_jp1_s1_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (expansion_jp1_s1_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                                            //       src.ready
		.src_valid          (router_027_src_valid),                                            //          .valid
		.src_data           (router_027_src_data),                                             //          .data
		.src_channel        (router_027_src_channel),                                          //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_013 router_028 (
		.sink_ready         (expansion_jp2_s1_agent_rp_ready),                                 //      sink.ready
		.sink_valid         (expansion_jp2_s1_agent_rp_valid),                                 //          .valid
		.sink_data          (expansion_jp2_s1_agent_rp_data),                                  //          .data
		.sink_startofpacket (expansion_jp2_s1_agent_rp_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (expansion_jp2_s1_agent_rp_endofpacket),                           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                                            //       src.ready
		.src_valid          (router_028_src_valid),                                            //          .valid
		.src_data           (router_028_src_data),                                             //          .data
		.src_channel        (router_028_src_channel),                                          //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_029 router_029 (
		.sink_ready         (interval_timer_s1_agent_rp_ready),                                //      sink.ready
		.sink_valid         (interval_timer_s1_agent_rp_valid),                                //          .valid
		.sink_data          (interval_timer_s1_agent_rp_data),                                 //          .data
		.sink_startofpacket (interval_timer_s1_agent_rp_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (interval_timer_s1_agent_rp_endofpacket),                          //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                                            //       src.ready
		.src_valid          (router_029_src_valid),                                            //          .valid
		.src_data           (router_029_src_data),                                             //          .data
		.src_channel        (router_029_src_channel),                                          //          .channel
		.src_startofpacket  (router_029_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_029 router_030 (
		.sink_ready         (interval_timer_2_s1_agent_rp_ready),                              //      sink.ready
		.sink_valid         (interval_timer_2_s1_agent_rp_valid),                              //          .valid
		.sink_data          (interval_timer_2_s1_agent_rp_data),                               //          .data
		.sink_startofpacket (interval_timer_2_s1_agent_rp_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (interval_timer_2_s1_agent_rp_endofpacket),                        //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_030_src_ready),                                            //       src.ready
		.src_valid          (router_030_src_valid),                                            //          .valid
		.src_data           (router_030_src_data),                                             //          .data
		.src_channel        (router_030_src_channel),                                          //          .channel
		.src_startofpacket  (router_030_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_031 router_031 (
		.sink_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_ready),            //      sink.ready
		.sink_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_valid),            //          .valid
		.sink_data          (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_data),             //          .data
		.sink_startofpacket (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rp_endofpacket),      //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_031_src_ready),                                            //       src.ready
		.src_valid          (router_031_src_valid),                                            //          .valid
		.src_data           (router_031_src_data),                                             //          .data
		.src_channel        (router_031_src_channel),                                          //          .channel
		.src_startofpacket  (router_031_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_031 router_032 (
		.sink_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_ready),            //      sink.ready
		.sink_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_valid),            //          .valid
		.sink_data          (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_data),             //          .data
		.sink_startofpacket (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rp_endofpacket),      //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_032_src_ready),                                            //       src.ready
		.src_valid          (router_032_src_valid),                                            //          .valid
		.src_data           (router_032_src_data),                                             //          .data
		.src_channel        (router_032_src_channel),                                          //          .channel
		.src_startofpacket  (router_032_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_031 router_033 (
		.sink_ready         (pixel_dma_addr_translation_slave_agent_rp_ready),                 //      sink.ready
		.sink_valid         (pixel_dma_addr_translation_slave_agent_rp_valid),                 //          .valid
		.sink_data          (pixel_dma_addr_translation_slave_agent_rp_data),                  //          .data
		.sink_startofpacket (pixel_dma_addr_translation_slave_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pixel_dma_addr_translation_slave_agent_rp_endofpacket),           //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_033_src_ready),                                            //       src.ready
		.src_valid          (router_033_src_valid),                                            //          .valid
		.src_data           (router_033_src_data),                                             //          .data
		.src_channel        (router_033_src_channel),                                          //          .channel
		.src_startofpacket  (router_033_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_031 router_034 (
		.sink_ready         (video_in_dma_addr_translation_slave_agent_rp_ready),              //      sink.ready
		.sink_valid         (video_in_dma_addr_translation_slave_agent_rp_valid),              //          .valid
		.sink_data          (video_in_dma_addr_translation_slave_agent_rp_data),               //          .data
		.sink_startofpacket (video_in_dma_addr_translation_slave_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (video_in_dma_addr_translation_slave_agent_rp_endofpacket),        //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_034_src_ready),                                            //       src.ready
		.src_valid          (router_034_src_valid),                                            //          .valid
		.src_data           (router_034_src_data),                                             //          .data
		.src_channel        (router_034_src_channel),                                          //          .channel
		.src_startofpacket  (router_034_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_034_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_035 router_035 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                             //       clk.clk
		.reset              (JTAG_UART_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_035_src_ready),                               //       src.ready
		.src_valid          (router_035_src_valid),                               //          .valid
		.src_data           (router_035_src_data),                                //          .data
		.src_channel        (router_035_src_channel),                             //          .channel
		.src_startofpacket  (router_035_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_035_src_endofpacket)                          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_036 router_036 (
		.sink_ready         (vga_subsystem_char_buffer_slave_agent_rp_ready),                  //      sink.ready
		.sink_valid         (vga_subsystem_char_buffer_slave_agent_rp_valid),                  //          .valid
		.sink_data          (vga_subsystem_char_buffer_slave_agent_rp_data),                   //          .data
		.sink_startofpacket (vga_subsystem_char_buffer_slave_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (vga_subsystem_char_buffer_slave_agent_rp_endofpacket),            //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_036_src_ready),                                            //       src.ready
		.src_valid          (router_036_src_valid),                                            //          .valid
		.src_data           (router_036_src_data),                                             //          .data
		.src_channel        (router_036_src_channel),                                          //          .channel
		.src_startofpacket  (router_036_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_036_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_037 router_037 (
		.sink_ready         (vga_subsystem_pixel_dma_control_slave_agent_rp_ready),            //      sink.ready
		.sink_valid         (vga_subsystem_pixel_dma_control_slave_agent_rp_valid),            //          .valid
		.sink_data          (vga_subsystem_pixel_dma_control_slave_agent_rp_data),             //          .data
		.sink_startofpacket (vga_subsystem_pixel_dma_control_slave_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (vga_subsystem_pixel_dma_control_slave_agent_rp_endofpacket),      //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_037_src_ready),                                            //       src.ready
		.src_valid          (router_037_src_valid),                                            //          .valid
		.src_data           (router_037_src_data),                                             //          .data
		.src_channel        (router_037_src_channel),                                          //          .channel
		.src_startofpacket  (router_037_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_037_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_038 router_038 (
		.sink_ready         (sdram_s1_agent_rp_ready),                                         //      sink.ready
		.sink_valid         (sdram_s1_agent_rp_valid),                                         //          .valid
		.sink_data          (sdram_s1_agent_rp_data),                                          //          .data
		.sink_startofpacket (sdram_s1_agent_rp_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (sdram_s1_agent_rp_endofpacket),                                   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_038_src_ready),                                            //       src.ready
		.src_valid          (router_038_src_valid),                                            //          .valid
		.src_data           (router_038_src_data),                                             //          .data
		.src_channel        (router_038_src_channel),                                          //          .channel
		.src_startofpacket  (router_038_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_038_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_039 router_039 (
		.sink_ready         (onchip_sram_s1_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (onchip_sram_s1_agent_rp_valid),                                   //          .valid
		.sink_data          (onchip_sram_s1_agent_rp_data),                                    //          .data
		.sink_startofpacket (onchip_sram_s1_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (onchip_sram_s1_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_039_src_ready),                                            //       src.ready
		.src_valid          (router_039_src_valid),                                            //          .valid
		.src_data           (router_039_src_data),                                             //          .data
		.src_channel        (router_039_src_channel),                                          //          .channel
		.src_startofpacket  (router_039_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_039_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_040 router_040 (
		.sink_ready         (video_in_subsystem_video_in_dma_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (video_in_subsystem_video_in_dma_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (video_in_subsystem_video_in_dma_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (video_in_subsystem_video_in_dma_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (video_in_subsystem_video_in_dma_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                               //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_040_src_ready),                                                 //       src.ready
		.src_valid          (router_040_src_valid),                                                 //          .valid
		.src_data           (router_040_src_data),                                                  //          .data
		.src_channel        (router_040_src_channel),                                               //          .channel
		.src_startofpacket  (router_040_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_040_src_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_041 router_041 (
		.sink_ready         (f2h_mem_window_00000000_windowed_slave_agent_rp_ready),           //      sink.ready
		.sink_valid         (f2h_mem_window_00000000_windowed_slave_agent_rp_valid),           //          .valid
		.sink_data          (f2h_mem_window_00000000_windowed_slave_agent_rp_data),            //          .data
		.sink_startofpacket (f2h_mem_window_00000000_windowed_slave_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (f2h_mem_window_00000000_windowed_slave_agent_rp_endofpacket),     //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_041_src_ready),                                            //       src.ready
		.src_valid          (router_041_src_valid),                                            //          .valid
		.src_data           (router_041_src_data),                                             //          .data
		.src_channel        (router_041_src_channel),                                          //          .channel
		.src_startofpacket  (router_041_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_041_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_041 router_042 (
		.sink_ready         (f2h_mem_window_ff600000_windowed_slave_agent_rp_ready),           //      sink.ready
		.sink_valid         (f2h_mem_window_ff600000_windowed_slave_agent_rp_valid),           //          .valid
		.sink_data          (f2h_mem_window_ff600000_windowed_slave_agent_rp_data),            //          .data
		.sink_startofpacket (f2h_mem_window_ff600000_windowed_slave_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (f2h_mem_window_ff600000_windowed_slave_agent_rp_endofpacket),     //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_042_src_ready),                                            //       src.ready
		.src_valid          (router_042_src_valid),                                            //          .valid
		.src_data           (router_042_src_data),                                             //          .data
		.src_channel        (router_042_src_channel),                                          //          .channel
		.src_startofpacket  (router_042_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_042_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_041 router_043 (
		.sink_ready         (f2h_mem_window_ff800000_windowed_slave_agent_rp_ready),           //      sink.ready
		.sink_valid         (f2h_mem_window_ff800000_windowed_slave_agent_rp_valid),           //          .valid
		.sink_data          (f2h_mem_window_ff800000_windowed_slave_agent_rp_data),            //          .data
		.sink_startofpacket (f2h_mem_window_ff800000_windowed_slave_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (f2h_mem_window_ff800000_windowed_slave_agent_rp_endofpacket),     //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_043_src_ready),                                            //       src.ready
		.src_valid          (router_043_src_valid),                                            //          .valid
		.src_data           (router_043_src_data),                                             //          .data
		.src_channel        (router_043_src_channel),                                          //          .channel
		.src_startofpacket  (router_043_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_043_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_044 router_044 (
		.sink_ready         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_2nd_core_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                      //       clk.clk
		.reset              (JTAG_UART_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.src_ready          (router_044_src_ready),                                        //       src.ready
		.src_valid          (router_044_src_valid),                                        //          .valid
		.src_data           (router_044_src_data),                                         //          .data
		.src_channel        (router_044_src_channel),                                      //          .channel
		.src_startofpacket  (router_044_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_044_src_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_045 router_045 (
		.sink_ready         (nios2_2nd_core_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_2nd_core_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_2nd_core_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_2nd_core_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_2nd_core_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                //       clk.clk
		.reset              (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_045_src_ready),                                  //       src.ready
		.src_valid          (router_045_src_valid),                                  //          .valid
		.src_data           (router_045_src_data),                                   //          .data
		.src_channel        (router_045_src_channel),                                //          .channel
		.src_startofpacket  (router_045_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_045_src_endofpacket)                             //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_044 router_046 (
		.sink_ready         (interval_timer_2nd_core_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (interval_timer_2nd_core_s1_agent_rp_valid),                       //          .valid
		.sink_data          (interval_timer_2nd_core_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (interval_timer_2nd_core_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (interval_timer_2nd_core_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_046_src_ready),                                            //       src.ready
		.src_valid          (router_046_src_valid),                                            //          .valid
		.src_data           (router_046_src_data),                                             //          .data
		.src_channel        (router_046_src_channel),                                          //          .channel
		.src_startofpacket  (router_046_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_046_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_044 router_047 (
		.sink_ready         (interval_timer_2nd_core_2_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (interval_timer_2nd_core_2_s1_agent_rp_valid),                     //          .valid
		.sink_data          (interval_timer_2nd_core_2_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (interval_timer_2nd_core_2_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (interval_timer_2nd_core_2_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_047_src_ready),                                            //       src.ready
		.src_valid          (router_047_src_valid),                                            //          .valid
		.src_data           (router_047_src_data),                                             //          .data
		.src_channel        (router_047_src_channel),                                          //          .channel
		.src_startofpacket  (router_047_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_047_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_048 router_048 (
		.sink_ready         (onchip_sram_s2_agent_rp_ready),                                   //      sink.ready
		.sink_valid         (onchip_sram_s2_agent_rp_valid),                                   //          .valid
		.sink_data          (onchip_sram_s2_agent_rp_data),                                    //          .data
		.sink_startofpacket (onchip_sram_s2_agent_rp_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (onchip_sram_s2_agent_rp_endofpacket),                             //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_048_src_ready),                                            //       src.ready
		.src_valid          (router_048_src_valid),                                            //          .valid
		.src_data           (router_048_src_data),                                             //          .data
		.src_channel        (router_048_src_channel),                                          //          .channel
		.src_startofpacket  (router_048_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_048_src_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_router_049 router_049 (
		.sink_ready         (nios2_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (System_PLL_sys_clk_clk),                       //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_049_src_ready),                         //       src.ready
		.src_valid          (router_049_src_valid),                         //          .valid
		.src_data           (router_049_src_data),                          //          .data
		.src_channel        (router_049_src_channel),                       //          .channel
		.src_startofpacket  (router_049_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_049_src_endofpacket)                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.VALID_WIDTH               (37),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_wr_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                         //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                         //          .valid
		.cmd_sink_data          (router_src_data),                                                          //          .data
		.cmd_sink_channel       (router_src_channel),                                                       //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                                 //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                   //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                        //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                        //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                      //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                         //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (3),
		.PIPELINED                 (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.VALID_WIDTH               (37),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_lw_axi_master_rd_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                                     //          .valid
		.cmd_sink_data          (router_001_src_data),                                                      //          .data
		.cmd_sink_channel       (router_001_src_channel),                                                   //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                                             //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                               //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                                    //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                                  //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_ready),                    //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_valid),                    //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_data),                     //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_channel),                  //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_startofpacket),            //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_rsp_src_endofpacket),              //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data)                    // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.VALID_WIDTH               (37),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) jtag_to_fpga_bridge_master_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_004_src_ready),                                            //  cmd_sink.ready
		.cmd_sink_valid         (router_004_src_valid),                                            //          .valid
		.cmd_sink_data          (router_004_src_data),                                             //          .data
		.cmd_sink_channel       (router_004_src_channel),                                          //          .channel
		.cmd_sink_startofpacket (router_004_src_startofpacket),                                    //          .startofpacket
		.cmd_sink_endofpacket   (router_004_src_endofpacket),                                      //          .endofpacket
		.cmd_src_ready          (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),                //   cmd_src.ready
		.cmd_src_data           (jtag_to_fpga_bridge_master_limiter_cmd_src_data),                 //          .data
		.cmd_src_channel        (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),              //          .channel
		.cmd_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket),        //          .startofpacket
		.cmd_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),          //          .endofpacket
		.rsp_sink_ready         (rsp_mux_004_src_ready),                                           //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_004_src_valid),                                           //          .valid
		.rsp_sink_channel       (rsp_mux_004_src_channel),                                         //          .channel
		.rsp_sink_data          (rsp_mux_004_src_data),                                            //          .data
		.rsp_sink_startofpacket (rsp_mux_004_src_startofpacket),                                   //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_004_src_endofpacket),                                     //          .endofpacket
		.rsp_src_ready          (jtag_to_fpga_bridge_master_limiter_rsp_src_ready),                //   rsp_src.ready
		.rsp_src_valid          (jtag_to_fpga_bridge_master_limiter_rsp_src_valid),                //          .valid
		.rsp_src_data           (jtag_to_fpga_bridge_master_limiter_rsp_src_data),                 //          .data
		.rsp_src_channel        (jtag_to_fpga_bridge_master_limiter_rsp_src_channel),              //          .channel
		.rsp_src_startofpacket  (jtag_to_fpga_bridge_master_limiter_rsp_src_startofpacket),        //          .startofpacket
		.rsp_src_endofpacket    (jtag_to_fpga_bridge_master_limiter_rsp_src_endofpacket),          //          .endofpacket
		.cmd_src_valid          (jtag_to_fpga_bridge_master_limiter_cmd_valid_data)                // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.VALID_WIDTH               (37),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_2nd_core_instruction_master_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset                  (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_005_src_ready),                                            //  cmd_sink.ready
		.cmd_sink_valid         (router_005_src_valid),                                            //          .valid
		.cmd_sink_data          (router_005_src_data),                                             //          .data
		.cmd_sink_channel       (router_005_src_channel),                                          //          .channel
		.cmd_sink_startofpacket (router_005_src_startofpacket),                                    //          .startofpacket
		.cmd_sink_endofpacket   (router_005_src_endofpacket),                                      //          .endofpacket
		.cmd_src_ready          (nios2_2nd_core_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_2nd_core_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_2nd_core_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_2nd_core_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_2nd_core_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_005_src_ready),                                           //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_005_src_valid),                                           //          .valid
		.rsp_sink_channel       (rsp_mux_005_src_channel),                                         //          .channel
		.rsp_sink_data          (rsp_mux_005_src_data),                                            //          .data
		.rsp_sink_startofpacket (rsp_mux_005_src_startofpacket),                                   //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_005_src_endofpacket),                                     //          .endofpacket
		.rsp_src_ready          (nios2_2nd_core_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_2nd_core_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_2nd_core_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_2nd_core_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_2nd_core_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_2nd_core_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_2nd_core_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (112),
		.PKT_DEST_ID_L             (107),
		.PKT_SRC_ID_H              (106),
		.PKT_SRC_ID_L              (101),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.VALID_WIDTH               (37),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) nios2_instruction_master_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                 //       clk.clk
		.reset                  (Nios2_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_006_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_006_src_valid),                                   //          .valid
		.cmd_sink_data          (router_006_src_data),                                    //          .data
		.cmd_sink_channel       (router_006_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_006_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_006_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (nios2_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (nios2_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (nios2_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (nios2_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (nios2_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_006_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_006_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_006_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_006_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_006_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_006_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (nios2_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (nios2_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (nios2_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (nios2_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (nios2_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (nios2_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (nios2_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (80),
		.PKT_SRC_ID_H              (79),
		.PKT_SRC_ID_L              (74),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (37),
		.VALID_WIDTH               (37),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) vga_subsystem_pixel_dma_master_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset                  (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_007_src_ready),                                            //  cmd_sink.ready
		.cmd_sink_valid         (router_007_src_valid),                                            //          .valid
		.cmd_sink_data          (router_007_src_data),                                             //          .data
		.cmd_sink_channel       (router_007_src_channel),                                          //          .channel
		.cmd_sink_startofpacket (router_007_src_startofpacket),                                    //          .startofpacket
		.cmd_sink_endofpacket   (router_007_src_endofpacket),                                      //          .endofpacket
		.cmd_src_ready          (vga_subsystem_pixel_dma_master_limiter_cmd_src_ready),            //   cmd_src.ready
		.cmd_src_data           (vga_subsystem_pixel_dma_master_limiter_cmd_src_data),             //          .data
		.cmd_src_channel        (vga_subsystem_pixel_dma_master_limiter_cmd_src_channel),          //          .channel
		.cmd_src_startofpacket  (vga_subsystem_pixel_dma_master_limiter_cmd_src_startofpacket),    //          .startofpacket
		.cmd_src_endofpacket    (vga_subsystem_pixel_dma_master_limiter_cmd_src_endofpacket),      //          .endofpacket
		.rsp_sink_ready         (rsp_mux_007_src_ready),                                           //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_007_src_valid),                                           //          .valid
		.rsp_sink_channel       (rsp_mux_007_src_channel),                                         //          .channel
		.rsp_sink_data          (rsp_mux_007_src_data),                                            //          .data
		.rsp_sink_startofpacket (rsp_mux_007_src_startofpacket),                                   //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_007_src_endofpacket),                                     //          .endofpacket
		.rsp_src_ready          (vga_subsystem_pixel_dma_master_limiter_rsp_src_ready),            //   rsp_src.ready
		.rsp_src_valid          (vga_subsystem_pixel_dma_master_limiter_rsp_src_valid),            //          .valid
		.rsp_src_data           (vga_subsystem_pixel_dma_master_limiter_rsp_src_data),             //          .data
		.rsp_src_channel        (vga_subsystem_pixel_dma_master_limiter_rsp_src_channel),          //          .channel
		.rsp_src_startofpacket  (vga_subsystem_pixel_dma_master_limiter_rsp_src_startofpacket),    //          .startofpacket
		.rsp_src_endofpacket    (vga_subsystem_pixel_dma_master_limiter_rsp_src_endofpacket),      //          .endofpacket
		.cmd_src_valid          (vga_subsystem_pixel_dma_master_limiter_cmd_valid_data)            // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (220),
		.PKT_DEST_ID_L             (215),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (209),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (245),
		.ST_CHANNEL_W              (37),
		.VALID_WIDTH               (37),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_axi_master_wr_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_008_src_ready),                                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_008_src_valid),                                                     //          .valid
		.cmd_sink_data          (router_008_src_data),                                                      //          .data
		.cmd_sink_channel       (router_008_src_channel),                                                   //          .channel
		.cmd_sink_startofpacket (router_008_src_startofpacket),                                             //          .startofpacket
		.cmd_sink_endofpacket   (router_008_src_endofpacket),                                               //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_ready),                       //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_data),                        //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_channel),                     //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket),               //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),                 //          .endofpacket
		.rsp_sink_ready         (rsp_mux_008_src_ready),                                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_008_src_valid),                                                    //          .valid
		.rsp_sink_channel       (rsp_mux_008_src_channel),                                                  //          .channel
		.rsp_sink_data          (rsp_mux_008_src_data),                                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_008_src_startofpacket),                                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_008_src_endofpacket),                                              //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_ready),                       //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_valid),                       //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_data),                        //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_channel),                     //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_startofpacket),               //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_axi_master_wr_limiter_rsp_src_endofpacket),                 //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_valid_data)                       // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (220),
		.PKT_DEST_ID_L             (215),
		.PKT_SRC_ID_H              (214),
		.PKT_SRC_ID_L              (209),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (182),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.MAX_OUTSTANDING_RESPONSES (9),
		.PIPELINED                 (0),
		.ST_DATA_W                 (245),
		.ST_CHANNEL_W              (37),
		.VALID_WIDTH               (37),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) arm_a9_hps_h2f_axi_master_rd_limiter (
		.clk                    (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                  (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_009_src_ready),                                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_009_src_valid),                                                     //          .valid
		.cmd_sink_data          (router_009_src_data),                                                      //          .data
		.cmd_sink_channel       (router_009_src_channel),                                                   //          .channel
		.cmd_sink_startofpacket (router_009_src_startofpacket),                                             //          .startofpacket
		.cmd_sink_endofpacket   (router_009_src_endofpacket),                                               //          .endofpacket
		.cmd_src_ready          (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_ready),                       //   cmd_src.ready
		.cmd_src_data           (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_data),                        //          .data
		.cmd_src_channel        (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_channel),                     //          .channel
		.cmd_src_startofpacket  (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket),               //          .startofpacket
		.cmd_src_endofpacket    (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),                 //          .endofpacket
		.rsp_sink_ready         (rsp_mux_009_src_ready),                                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_009_src_valid),                                                    //          .valid
		.rsp_sink_channel       (rsp_mux_009_src_channel),                                                  //          .channel
		.rsp_sink_data          (rsp_mux_009_src_data),                                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_009_src_startofpacket),                                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_009_src_endofpacket),                                              //          .endofpacket
		.rsp_src_ready          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_ready),                       //   rsp_src.ready
		.rsp_src_valid          (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_valid),                       //          .valid
		.rsp_src_data           (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_data),                        //          .data
		.rsp_src_channel        (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_channel),                     //          .channel
		.rsp_src_startofpacket  (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_startofpacket),               //          .startofpacket
		.rsp_src_endofpacket    (arm_a9_hps_h2f_axi_master_rd_limiter_rsp_src_endofpacket),                 //          .endofpacket
		.cmd_src_valid          (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_valid_data)                       // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) adc_adc_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                               //          .ready
		.source0_valid         (adc_adc_slave_burst_adapter_source0_valid),                       //   source0.valid
		.source0_data          (adc_adc_slave_burst_adapter_source0_data),                        //          .data
		.source0_channel       (adc_adc_slave_burst_adapter_source0_channel),                     //          .channel
		.source0_startofpacket (adc_adc_slave_burst_adapter_source0_startofpacket),               //          .startofpacket
		.source0_endofpacket   (adc_adc_slave_burst_adapter_source0_endofpacket),                 //          .endofpacket
		.source0_ready         (adc_adc_slave_burst_adapter_source0_ready)                        //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) audio_subsystem_audio_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_001_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_001_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_001_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_001_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_001_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_001_src_ready),                                           //          .ready
		.source0_valid         (audio_subsystem_audio_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (audio_subsystem_audio_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (audio_subsystem_audio_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (audio_subsystem_audio_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (audio_subsystem_audio_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (audio_subsystem_audio_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) av_config_avalon_av_config_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                               //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                                //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                                 //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                              //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                                          //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                                //          .ready
		.source0_valid         (av_config_avalon_av_config_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (av_config_avalon_av_config_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (av_config_avalon_av_config_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (av_config_avalon_av_config_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (av_config_avalon_av_config_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (av_config_avalon_av_config_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) irda_avalon_irda_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                           //          .ready
		.source0_valid         (irda_avalon_irda_slave_burst_adapter_source0_valid),              //   source0.valid
		.source0_data          (irda_avalon_irda_slave_burst_adapter_source0_data),               //          .data
		.source0_channel       (irda_avalon_irda_slave_burst_adapter_source0_channel),            //          .channel
		.source0_startofpacket (irda_avalon_irda_slave_burst_adapter_source0_startofpacket),      //          .startofpacket
		.source0_endofpacket   (irda_avalon_irda_slave_burst_adapter_source0_endofpacket),        //          .endofpacket
		.source0_ready         (irda_avalon_irda_slave_burst_adapter_source0_ready)               //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ps2_port_avalon_ps2_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                           //          .ready
		.source0_valid         (ps2_port_avalon_ps2_slave_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (ps2_port_avalon_ps2_slave_burst_adapter_source0_data),            //          .data
		.source0_channel       (ps2_port_avalon_ps2_slave_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (ps2_port_avalon_ps2_slave_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (ps2_port_avalon_ps2_slave_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (ps2_port_avalon_ps2_slave_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) ps2_port_dual_avalon_ps2_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                             //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (cmd_mux_005_src_valid),                                              //     sink0.valid
		.sink0_data            (cmd_mux_005_src_data),                                               //          .data
		.sink0_channel         (cmd_mux_005_src_channel),                                            //          .channel
		.sink0_startofpacket   (cmd_mux_005_src_startofpacket),                                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_005_src_endofpacket),                                        //          .endofpacket
		.sink0_ready           (cmd_mux_005_src_ready),                                              //          .ready
		.source0_valid         (ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ps2_port_dual_avalon_ps2_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) vga_subsystem_char_buffer_control_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                      //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                                       //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                                        //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                                                     //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                                               //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                                                 //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                                       //          .ready
		.source0_valid         (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vga_subsystem_char_buffer_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sysid_control_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                           //          .ready
		.source0_valid         (sysid_control_slave_burst_adapter_source0_valid),                 //   source0.valid
		.source0_data          (sysid_control_slave_burst_adapter_source0_data),                  //          .data
		.source0_channel       (sysid_control_slave_burst_adapter_source0_channel),               //          .channel
		.source0_startofpacket (sysid_control_slave_burst_adapter_source0_startofpacket),         //          .startofpacket
		.source0_endofpacket   (sysid_control_slave_burst_adapter_source0_endofpacket),           //          .endofpacket
		.source0_ready         (sysid_control_slave_burst_adapter_source0_ready)                  //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_in_subsystem_edge_detection_control_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                              //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                     // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                                                               //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                                                //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                                                             //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                                                         //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                                                               //          .ready
		.source0_valid         (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_in_subsystem_edge_detection_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) leds_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                                           //          .ready
		.source0_valid         (leds_s1_burst_adapter_source0_valid),                             //   source0.valid
		.source0_data          (leds_s1_burst_adapter_source0_data),                              //          .data
		.source0_channel       (leds_s1_burst_adapter_source0_channel),                           //          .channel
		.source0_startofpacket (leds_s1_burst_adapter_source0_startofpacket),                     //          .startofpacket
		.source0_endofpacket   (leds_s1_burst_adapter_source0_endofpacket),                       //          .endofpacket
		.source0_ready         (leds_s1_burst_adapter_source0_ready)                              //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hex3_hex0_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_010_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_010_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_010_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_010_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_010_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_010_src_ready),                                           //          .ready
		.source0_valid         (hex3_hex0_s1_burst_adapter_source0_valid),                        //   source0.valid
		.source0_data          (hex3_hex0_s1_burst_adapter_source0_data),                         //          .data
		.source0_channel       (hex3_hex0_s1_burst_adapter_source0_channel),                      //          .channel
		.source0_startofpacket (hex3_hex0_s1_burst_adapter_source0_startofpacket),                //          .startofpacket
		.source0_endofpacket   (hex3_hex0_s1_burst_adapter_source0_endofpacket),                  //          .endofpacket
		.source0_ready         (hex3_hex0_s1_burst_adapter_source0_ready)                         //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) hex5_hex4_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_011_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_011_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_011_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_011_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_011_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_011_src_ready),                                           //          .ready
		.source0_valid         (hex5_hex4_s1_burst_adapter_source0_valid),                        //   source0.valid
		.source0_data          (hex5_hex4_s1_burst_adapter_source0_data),                         //          .data
		.source0_channel       (hex5_hex4_s1_burst_adapter_source0_channel),                      //          .channel
		.source0_startofpacket (hex5_hex4_s1_burst_adapter_source0_startofpacket),                //          .startofpacket
		.source0_endofpacket   (hex5_hex4_s1_burst_adapter_source0_endofpacket),                  //          .endofpacket
		.source0_ready         (hex5_hex4_s1_burst_adapter_source0_ready)                         //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) slider_switches_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_012_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_012_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_012_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_012_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_012_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_012_src_ready),                                           //          .ready
		.source0_valid         (slider_switches_s1_burst_adapter_source0_valid),                  //   source0.valid
		.source0_data          (slider_switches_s1_burst_adapter_source0_data),                   //          .data
		.source0_channel       (slider_switches_s1_burst_adapter_source0_channel),                //          .channel
		.source0_startofpacket (slider_switches_s1_burst_adapter_source0_startofpacket),          //          .startofpacket
		.source0_endofpacket   (slider_switches_s1_burst_adapter_source0_endofpacket),            //          .endofpacket
		.source0_ready         (slider_switches_s1_burst_adapter_source0_ready)                   //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pushbuttons_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_013_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_013_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_013_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_013_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_013_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_013_src_ready),                                           //          .ready
		.source0_valid         (pushbuttons_s1_burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (pushbuttons_s1_burst_adapter_source0_data),                       //          .data
		.source0_channel       (pushbuttons_s1_burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (pushbuttons_s1_burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (pushbuttons_s1_burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (pushbuttons_s1_burst_adapter_source0_ready)                       //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) expansion_jp1_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_014_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_014_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_014_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_014_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_014_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_014_src_ready),                                           //          .ready
		.source0_valid         (expansion_jp1_s1_burst_adapter_source0_valid),                    //   source0.valid
		.source0_data          (expansion_jp1_s1_burst_adapter_source0_data),                     //          .data
		.source0_channel       (expansion_jp1_s1_burst_adapter_source0_channel),                  //          .channel
		.source0_startofpacket (expansion_jp1_s1_burst_adapter_source0_startofpacket),            //          .startofpacket
		.source0_endofpacket   (expansion_jp1_s1_burst_adapter_source0_endofpacket),              //          .endofpacket
		.source0_ready         (expansion_jp1_s1_burst_adapter_source0_ready)                     //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) expansion_jp2_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_015_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_015_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_015_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_015_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_015_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_015_src_ready),                                           //          .ready
		.source0_valid         (expansion_jp2_s1_burst_adapter_source0_valid),                    //   source0.valid
		.source0_data          (expansion_jp2_s1_burst_adapter_source0_data),                     //          .data
		.source0_channel       (expansion_jp2_s1_burst_adapter_source0_channel),                  //          .channel
		.source0_startofpacket (expansion_jp2_s1_burst_adapter_source0_startofpacket),            //          .startofpacket
		.source0_endofpacket   (expansion_jp2_s1_burst_adapter_source0_endofpacket),              //          .endofpacket
		.source0_ready         (expansion_jp2_s1_burst_adapter_source0_ready)                     //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) interval_timer_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_016_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_016_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_016_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_016_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_016_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_016_src_ready),                                           //          .ready
		.source0_valid         (interval_timer_s1_burst_adapter_source0_valid),                   //   source0.valid
		.source0_data          (interval_timer_s1_burst_adapter_source0_data),                    //          .data
		.source0_channel       (interval_timer_s1_burst_adapter_source0_channel),                 //          .channel
		.source0_startofpacket (interval_timer_s1_burst_adapter_source0_startofpacket),           //          .startofpacket
		.source0_endofpacket   (interval_timer_s1_burst_adapter_source0_endofpacket),             //          .endofpacket
		.source0_ready         (interval_timer_s1_burst_adapter_source0_ready)                    //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) interval_timer_2_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_017_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_017_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_017_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_017_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_017_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_017_src_ready),                                           //          .ready
		.source0_valid         (interval_timer_2_s1_burst_adapter_source0_valid),                 //   source0.valid
		.source0_data          (interval_timer_2_s1_burst_adapter_source0_data),                  //          .data
		.source0_channel       (interval_timer_2_s1_burst_adapter_source0_channel),               //          .channel
		.source0_startofpacket (interval_timer_2_s1_burst_adapter_source0_startofpacket),         //          .startofpacket
		.source0_endofpacket   (interval_timer_2_s1_burst_adapter_source0_endofpacket),           //          .endofpacket
		.source0_ready         (interval_timer_2_s1_burst_adapter_source0_ready)                  //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                    //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_018_src_valid),                                                     //     sink0.valid
		.sink0_data            (cmd_mux_018_src_data),                                                      //          .data
		.sink0_channel         (cmd_mux_018_src_channel),                                                   //          .channel
		.sink0_startofpacket   (cmd_mux_018_src_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_018_src_endofpacket),                                               //          .endofpacket
		.sink0_ready           (cmd_mux_018_src_ready),                                                     //          .ready
		.source0_valid         (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_for_arm_0_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                    //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),           // cr0_reset.reset
		.sink0_valid           (cmd_mux_019_src_valid),                                                     //     sink0.valid
		.sink0_data            (cmd_mux_019_src_data),                                                      //          .data
		.sink0_channel         (cmd_mux_019_src_channel),                                                   //          .channel
		.sink0_startofpacket   (cmd_mux_019_src_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_019_src_endofpacket),                                               //          .endofpacket
		.sink0_ready           (cmd_mux_019_src_ready),                                                     //          .ready
		.source0_valid         (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_for_arm_1_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) pixel_dma_addr_translation_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                               //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (cmd_mux_020_src_valid),                                                //     sink0.valid
		.sink0_data            (cmd_mux_020_src_data),                                                 //          .data
		.sink0_channel         (cmd_mux_020_src_channel),                                              //          .channel
		.sink0_startofpacket   (cmd_mux_020_src_startofpacket),                                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_020_src_endofpacket),                                          //          .endofpacket
		.sink0_ready           (cmd_mux_020_src_ready),                                                //          .ready
		.source0_valid         (pixel_dma_addr_translation_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pixel_dma_addr_translation_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (pixel_dma_addr_translation_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pixel_dma_addr_translation_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pixel_dma_addr_translation_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pixel_dma_addr_translation_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) video_in_dma_addr_translation_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                                  //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.sink0_valid           (cmd_mux_021_src_valid),                                                   //     sink0.valid
		.sink0_data            (cmd_mux_021_src_data),                                                    //          .data
		.sink0_channel         (cmd_mux_021_src_channel),                                                 //          .channel
		.sink0_startofpacket   (cmd_mux_021_src_startofpacket),                                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_021_src_endofpacket),                                             //          .endofpacket
		.sink0_ready           (cmd_mux_021_src_ready),                                                   //          .ready
		.source0_valid         (video_in_dma_addr_translation_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (video_in_dma_addr_translation_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (video_in_dma_addr_translation_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (video_in_dma_addr_translation_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (video_in_dma_addr_translation_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (video_in_dma_addr_translation_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (72),
		.PKT_BYTE_CNT_H            (55),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (67),
		.PKT_BURST_SIZE_L          (65),
		.PKT_BURST_TYPE_H          (69),
		.PKT_BURST_TYPE_L          (68),
		.PKT_BURSTWRAP_H           (64),
		.PKT_BURSTWRAP_L           (56),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (110),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (64),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) vga_subsystem_char_buffer_slave_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                              //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (cmd_mux_023_src_valid),                                               //     sink0.valid
		.sink0_data            (cmd_mux_023_src_data),                                                //          .data
		.sink0_channel         (cmd_mux_023_src_channel),                                             //          .channel
		.sink0_startofpacket   (cmd_mux_023_src_startofpacket),                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_023_src_endofpacket),                                         //          .endofpacket
		.sink0_ready           (cmd_mux_023_src_ready),                                               //          .ready
		.source0_valid         (vga_subsystem_char_buffer_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vga_subsystem_char_buffer_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (vga_subsystem_char_buffer_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vga_subsystem_char_buffer_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vga_subsystem_char_buffer_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vga_subsystem_char_buffer_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (81),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (76),
		.PKT_BURST_SIZE_L          (74),
		.PKT_BURST_TYPE_H          (78),
		.PKT_BURST_TYPE_L          (77),
		.PKT_BURSTWRAP_H           (73),
		.PKT_BURSTWRAP_L           (65),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (119),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (73),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) sdram_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_025_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_025_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_025_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_025_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_025_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_025_src_ready),                                           //          .ready
		.source0_valid         (sdram_s1_burst_adapter_source0_valid),                            //   source0.valid
		.source0_data          (sdram_s1_burst_adapter_source0_data),                             //          .data
		.source0_channel       (sdram_s1_burst_adapter_source0_channel),                          //          .channel
		.source0_startofpacket (sdram_s1_burst_adapter_source0_startofpacket),                    //          .startofpacket
		.source0_endofpacket   (sdram_s1_burst_adapter_source0_endofpacket),                      //          .endofpacket
		.source0_ready         (sdram_s1_burst_adapter_source0_ready)                             //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (0),
		.BURSTWRAP_CONST_VALUE     (0),
		.ADAPTER_VERSION           ("13.1")
	) onchip_sram_s1_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_026_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_026_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_026_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_026_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_026_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_026_src_ready),                                           //          .ready
		.source0_valid         (onchip_sram_s1_burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (onchip_sram_s1_burst_adapter_source0_data),                       //          .data
		.source0_channel       (onchip_sram_s1_burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (onchip_sram_s1_burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (onchip_sram_s1_burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (onchip_sram_s1_burst_adapter_source0_ready)                       //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (99),
		.PKT_BYTE_CNT_H            (82),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (94),
		.PKT_BURST_SIZE_L          (92),
		.PKT_BURST_TYPE_H          (96),
		.PKT_BURST_TYPE_L          (95),
		.PKT_BURSTWRAP_H           (91),
		.PKT_BURSTWRAP_L           (83),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (1),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (137),
		.ST_CHANNEL_W              (37),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (91),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) onchip_sram_s2_burst_adapter (
		.clk                   (System_PLL_sys_clk_clk),                                          //       cr0.clk
		.reset                 (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (cmd_mux_035_src_valid),                                           //     sink0.valid
		.sink0_data            (cmd_mux_035_src_data),                                            //          .data
		.sink0_channel         (cmd_mux_035_src_channel),                                         //          .channel
		.sink0_startofpacket   (cmd_mux_035_src_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket     (cmd_mux_035_src_endofpacket),                                     //          .endofpacket
		.sink0_ready           (cmd_mux_035_src_ready),                                           //          .ready
		.source0_valid         (onchip_sram_s2_burst_adapter_source0_valid),                      //   source0.valid
		.source0_data          (onchip_sram_s2_burst_adapter_source0_data),                       //          .data
		.source0_channel       (onchip_sram_s2_burst_adapter_source0_channel),                    //          .channel
		.source0_startofpacket (onchip_sram_s2_burst_adapter_source0_startofpacket),              //          .startofpacket
		.source0_endofpacket   (onchip_sram_s2_burst_adapter_source0_endofpacket),                //          .endofpacket
		.source0_ready         (onchip_sram_s2_burst_adapter_source0_ready)                       //          .ready
	);

	Computer_System_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (arm_a9_hps_h2f_lw_axi_master_wr_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                                     //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                                     //           .valid
		.src0_data           (cmd_demux_src0_data),                                                      //           .data
		.src0_channel        (cmd_demux_src0_channel),                                                   //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                                             //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                                               //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                                     //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                                     //           .valid
		.src1_data           (cmd_demux_src1_data),                                                      //           .data
		.src1_channel        (cmd_demux_src1_channel),                                                   //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                                             //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                                               //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                                     //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                                     //           .valid
		.src2_data           (cmd_demux_src2_data),                                                      //           .data
		.src2_channel        (cmd_demux_src2_channel),                                                   //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                                             //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                                               //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                                     //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                                     //           .valid
		.src3_data           (cmd_demux_src3_data),                                                      //           .data
		.src3_channel        (cmd_demux_src3_channel),                                                   //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                                             //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                                               //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                                     //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                                     //           .valid
		.src4_data           (cmd_demux_src4_data),                                                      //           .data
		.src4_channel        (cmd_demux_src4_channel),                                                   //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                                             //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                                               //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                                     //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                                     //           .valid
		.src5_data           (cmd_demux_src5_data),                                                      //           .data
		.src5_channel        (cmd_demux_src5_channel),                                                   //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                                             //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                                               //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                                     //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                                     //           .valid
		.src6_data           (cmd_demux_src6_data),                                                      //           .data
		.src6_channel        (cmd_demux_src6_channel),                                                   //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                                             //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                                               //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                                     //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                                     //           .valid
		.src7_data           (cmd_demux_src7_data),                                                      //           .data
		.src7_channel        (cmd_demux_src7_channel),                                                   //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                                             //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                                               //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                                     //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                                     //           .valid
		.src8_data           (cmd_demux_src8_data),                                                      //           .data
		.src8_channel        (cmd_demux_src8_channel),                                                   //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                                             //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                                               //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                                     //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                                     //           .valid
		.src9_data           (cmd_demux_src9_data),                                                      //           .data
		.src9_channel        (cmd_demux_src9_channel),                                                   //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                                             //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                                               //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                                    //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                                    //           .valid
		.src10_data          (cmd_demux_src10_data),                                                     //           .data
		.src10_channel       (cmd_demux_src10_channel),                                                  //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                                            //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                                              //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                                    //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                                    //           .valid
		.src11_data          (cmd_demux_src11_data),                                                     //           .data
		.src11_channel       (cmd_demux_src11_channel),                                                  //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                                            //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                                              //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                                                    //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                                                    //           .valid
		.src12_data          (cmd_demux_src12_data),                                                     //           .data
		.src12_channel       (cmd_demux_src12_channel),                                                  //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                                            //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                                              //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                                                    //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                                                    //           .valid
		.src13_data          (cmd_demux_src13_data),                                                     //           .data
		.src13_channel       (cmd_demux_src13_channel),                                                  //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                                            //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                                              //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                                                    //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                                                    //           .valid
		.src14_data          (cmd_demux_src14_data),                                                     //           .data
		.src14_channel       (cmd_demux_src14_channel),                                                  //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                                            //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                                              //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                                                    //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                                                    //           .valid
		.src15_data          (cmd_demux_src15_data),                                                     //           .data
		.src15_channel       (cmd_demux_src15_channel),                                                  //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                                            //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                                              //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                                                    //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                                                    //           .valid
		.src16_data          (cmd_demux_src16_data),                                                     //           .data
		.src16_channel       (cmd_demux_src16_channel),                                                  //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                                            //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                                              //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                                                    //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                                                    //           .valid
		.src17_data          (cmd_demux_src17_data),                                                     //           .data
		.src17_channel       (cmd_demux_src17_channel),                                                  //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                                            //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                                              //           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                                                    //      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                                                    //           .valid
		.src18_data          (cmd_demux_src18_data),                                                     //           .data
		.src18_channel       (cmd_demux_src18_channel),                                                  //           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                                            //           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                                              //           .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                                                    //      src19.ready
		.src19_valid         (cmd_demux_src19_valid),                                                    //           .valid
		.src19_data          (cmd_demux_src19_data),                                                     //           .data
		.src19_channel       (cmd_demux_src19_channel),                                                  //           .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                                            //           .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                                              //           .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                                                    //      src20.ready
		.src20_valid         (cmd_demux_src20_valid),                                                    //           .valid
		.src20_data          (cmd_demux_src20_data),                                                     //           .data
		.src20_channel       (cmd_demux_src20_channel),                                                  //           .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                                            //           .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                                              //           .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                                                    //      src21.ready
		.src21_valid         (cmd_demux_src21_valid),                                                    //           .valid
		.src21_data          (cmd_demux_src21_data),                                                     //           .data
		.src21_channel       (cmd_demux_src21_channel),                                                  //           .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                                            //           .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket)                                               //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                 (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_ready),                    //       sink.ready
		.sink_channel        (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_channel),                  //           .channel
		.sink_data           (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_data),                     //           .data
		.sink_startofpacket  (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_startofpacket),            //           .startofpacket
		.sink_endofpacket    (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_src_endofpacket),              //           .endofpacket
		.sink_valid          (arm_a9_hps_h2f_lw_axi_master_rd_limiter_cmd_valid_data),                   // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                                 //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                                 //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                                  //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                               //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                                         //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                                           //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                                 //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                                 //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                                  //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                               //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                                         //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                                           //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                                 //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                                 //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                                  //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                               //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                                         //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                                           //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                                 //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                                 //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                                  //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                               //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                                         //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                                           //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                                 //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                                 //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                                  //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                               //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                                         //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                                           //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                                 //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                                 //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                                  //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                               //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                                         //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                                           //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                                 //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                                 //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                                  //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                               //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                                         //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                                           //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                                 //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                                 //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                                  //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                               //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                                         //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                                           //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                                 //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                                 //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                                  //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                               //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                                         //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                                           //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                                 //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                                 //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                                  //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                               //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                                         //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                                           //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                                //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                                //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                                 //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                              //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                                        //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                                          //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                                //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                                //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                                 //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                              //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                                        //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                                          //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                                                //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                                                //           .valid
		.src12_data          (cmd_demux_001_src12_data),                                                 //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                                              //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                                        //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                                          //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                                                //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                                                //           .valid
		.src13_data          (cmd_demux_001_src13_data),                                                 //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                                              //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                                        //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),                                          //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                                                //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                                                //           .valid
		.src14_data          (cmd_demux_001_src14_data),                                                 //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                                              //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),                                        //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),                                          //           .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                                                //      src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                                                //           .valid
		.src15_data          (cmd_demux_001_src15_data),                                                 //           .data
		.src15_channel       (cmd_demux_001_src15_channel),                                              //           .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),                                        //           .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),                                          //           .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                                                //      src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                                                //           .valid
		.src16_data          (cmd_demux_001_src16_data),                                                 //           .data
		.src16_channel       (cmd_demux_001_src16_channel),                                              //           .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),                                        //           .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),                                          //           .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                                                //      src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                                                //           .valid
		.src17_data          (cmd_demux_001_src17_data),                                                 //           .data
		.src17_channel       (cmd_demux_001_src17_channel),                                              //           .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),                                        //           .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),                                          //           .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                                                //      src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                                                //           .valid
		.src18_data          (cmd_demux_001_src18_data),                                                 //           .data
		.src18_channel       (cmd_demux_001_src18_channel),                                              //           .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),                                        //           .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),                                          //           .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                                                //      src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                                                //           .valid
		.src19_data          (cmd_demux_001_src19_data),                                                 //           .data
		.src19_channel       (cmd_demux_001_src19_channel),                                              //           .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),                                        //           .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),                                          //           .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),                                                //      src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),                                                //           .valid
		.src20_data          (cmd_demux_001_src20_data),                                                 //           .data
		.src20_channel       (cmd_demux_001_src20_channel),                                              //           .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),                                        //           .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket),                                          //           .endofpacket
		.src21_ready         (cmd_demux_001_src21_ready),                                                //      src21.ready
		.src21_valid         (cmd_demux_001_src21_valid),                                                //           .valid
		.src21_data          (cmd_demux_001_src21_data),                                                 //           .data
		.src21_channel       (cmd_demux_001_src21_channel),                                              //           .channel
		.src21_startofpacket (cmd_demux_001_src21_startofpacket),                                        //           .startofpacket
		.src21_endofpacket   (cmd_demux_001_src21_endofpacket)                                           //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_002_src_ready),                    //      sink.ready
		.sink_channel        (router_002_src_channel),                  //          .channel
		.sink_data           (router_002_src_data),                     //          .data
		.sink_startofpacket  (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket    (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid          (router_002_src_valid),                    //          .valid
		.src0_ready          (cmd_demux_002_src0_ready),                //      src0.ready
		.src0_valid          (cmd_demux_002_src0_valid),                //          .valid
		.src0_data           (cmd_demux_002_src0_data),                 //          .data
		.src0_channel        (cmd_demux_002_src0_channel),              //          .channel
		.src0_startofpacket  (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket    (cmd_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready          (cmd_demux_002_src1_ready),                //      src1.ready
		.src1_valid          (cmd_demux_002_src1_valid),                //          .valid
		.src1_data           (cmd_demux_002_src1_data),                 //          .data
		.src1_channel        (cmd_demux_002_src1_channel),              //          .channel
		.src1_startofpacket  (cmd_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket    (cmd_demux_002_src1_endofpacket),          //          .endofpacket
		.src2_ready          (cmd_demux_002_src2_ready),                //      src2.ready
		.src2_valid          (cmd_demux_002_src2_valid),                //          .valid
		.src2_data           (cmd_demux_002_src2_data),                 //          .data
		.src2_channel        (cmd_demux_002_src2_channel),              //          .channel
		.src2_startofpacket  (cmd_demux_002_src2_startofpacket),        //          .startofpacket
		.src2_endofpacket    (cmd_demux_002_src2_endofpacket),          //          .endofpacket
		.src3_ready          (cmd_demux_002_src3_ready),                //      src3.ready
		.src3_valid          (cmd_demux_002_src3_valid),                //          .valid
		.src3_data           (cmd_demux_002_src3_data),                 //          .data
		.src3_channel        (cmd_demux_002_src3_channel),              //          .channel
		.src3_startofpacket  (cmd_demux_002_src3_startofpacket),        //          .startofpacket
		.src3_endofpacket    (cmd_demux_002_src3_endofpacket),          //          .endofpacket
		.src4_ready          (cmd_demux_002_src4_ready),                //      src4.ready
		.src4_valid          (cmd_demux_002_src4_valid),                //          .valid
		.src4_data           (cmd_demux_002_src4_data),                 //          .data
		.src4_channel        (cmd_demux_002_src4_channel),              //          .channel
		.src4_startofpacket  (cmd_demux_002_src4_startofpacket),        //          .startofpacket
		.src4_endofpacket    (cmd_demux_002_src4_endofpacket),          //          .endofpacket
		.src5_ready          (cmd_demux_002_src5_ready),                //      src5.ready
		.src5_valid          (cmd_demux_002_src5_valid),                //          .valid
		.src5_data           (cmd_demux_002_src5_data),                 //          .data
		.src5_channel        (cmd_demux_002_src5_channel),              //          .channel
		.src5_startofpacket  (cmd_demux_002_src5_startofpacket),        //          .startofpacket
		.src5_endofpacket    (cmd_demux_002_src5_endofpacket),          //          .endofpacket
		.src6_ready          (cmd_demux_002_src6_ready),                //      src6.ready
		.src6_valid          (cmd_demux_002_src6_valid),                //          .valid
		.src6_data           (cmd_demux_002_src6_data),                 //          .data
		.src6_channel        (cmd_demux_002_src6_channel),              //          .channel
		.src6_startofpacket  (cmd_demux_002_src6_startofpacket),        //          .startofpacket
		.src6_endofpacket    (cmd_demux_002_src6_endofpacket),          //          .endofpacket
		.src7_ready          (cmd_demux_002_src7_ready),                //      src7.ready
		.src7_valid          (cmd_demux_002_src7_valid),                //          .valid
		.src7_data           (cmd_demux_002_src7_data),                 //          .data
		.src7_channel        (cmd_demux_002_src7_channel),              //          .channel
		.src7_startofpacket  (cmd_demux_002_src7_startofpacket),        //          .startofpacket
		.src7_endofpacket    (cmd_demux_002_src7_endofpacket),          //          .endofpacket
		.src8_ready          (cmd_demux_002_src8_ready),                //      src8.ready
		.src8_valid          (cmd_demux_002_src8_valid),                //          .valid
		.src8_data           (cmd_demux_002_src8_data),                 //          .data
		.src8_channel        (cmd_demux_002_src8_channel),              //          .channel
		.src8_startofpacket  (cmd_demux_002_src8_startofpacket),        //          .startofpacket
		.src8_endofpacket    (cmd_demux_002_src8_endofpacket),          //          .endofpacket
		.src9_ready          (cmd_demux_002_src9_ready),                //      src9.ready
		.src9_valid          (cmd_demux_002_src9_valid),                //          .valid
		.src9_data           (cmd_demux_002_src9_data),                 //          .data
		.src9_channel        (cmd_demux_002_src9_channel),              //          .channel
		.src9_startofpacket  (cmd_demux_002_src9_startofpacket),        //          .startofpacket
		.src9_endofpacket    (cmd_demux_002_src9_endofpacket),          //          .endofpacket
		.src10_ready         (cmd_demux_002_src10_ready),               //     src10.ready
		.src10_valid         (cmd_demux_002_src10_valid),               //          .valid
		.src10_data          (cmd_demux_002_src10_data),                //          .data
		.src10_channel       (cmd_demux_002_src10_channel),             //          .channel
		.src10_startofpacket (cmd_demux_002_src10_startofpacket),       //          .startofpacket
		.src10_endofpacket   (cmd_demux_002_src10_endofpacket),         //          .endofpacket
		.src11_ready         (cmd_demux_002_src11_ready),               //     src11.ready
		.src11_valid         (cmd_demux_002_src11_valid),               //          .valid
		.src11_data          (cmd_demux_002_src11_data),                //          .data
		.src11_channel       (cmd_demux_002_src11_channel),             //          .channel
		.src11_startofpacket (cmd_demux_002_src11_startofpacket),       //          .startofpacket
		.src11_endofpacket   (cmd_demux_002_src11_endofpacket),         //          .endofpacket
		.src12_ready         (cmd_demux_002_src12_ready),               //     src12.ready
		.src12_valid         (cmd_demux_002_src12_valid),               //          .valid
		.src12_data          (cmd_demux_002_src12_data),                //          .data
		.src12_channel       (cmd_demux_002_src12_channel),             //          .channel
		.src12_startofpacket (cmd_demux_002_src12_startofpacket),       //          .startofpacket
		.src12_endofpacket   (cmd_demux_002_src12_endofpacket),         //          .endofpacket
		.src13_ready         (cmd_demux_002_src13_ready),               //     src13.ready
		.src13_valid         (cmd_demux_002_src13_valid),               //          .valid
		.src13_data          (cmd_demux_002_src13_data),                //          .data
		.src13_channel       (cmd_demux_002_src13_channel),             //          .channel
		.src13_startofpacket (cmd_demux_002_src13_startofpacket),       //          .startofpacket
		.src13_endofpacket   (cmd_demux_002_src13_endofpacket),         //          .endofpacket
		.src14_ready         (cmd_demux_002_src14_ready),               //     src14.ready
		.src14_valid         (cmd_demux_002_src14_valid),               //          .valid
		.src14_data          (cmd_demux_002_src14_data),                //          .data
		.src14_channel       (cmd_demux_002_src14_channel),             //          .channel
		.src14_startofpacket (cmd_demux_002_src14_startofpacket),       //          .startofpacket
		.src14_endofpacket   (cmd_demux_002_src14_endofpacket),         //          .endofpacket
		.src15_ready         (cmd_demux_002_src15_ready),               //     src15.ready
		.src15_valid         (cmd_demux_002_src15_valid),               //          .valid
		.src15_data          (cmd_demux_002_src15_data),                //          .data
		.src15_channel       (cmd_demux_002_src15_channel),             //          .channel
		.src15_startofpacket (cmd_demux_002_src15_startofpacket),       //          .startofpacket
		.src15_endofpacket   (cmd_demux_002_src15_endofpacket),         //          .endofpacket
		.src16_ready         (cmd_demux_002_src16_ready),               //     src16.ready
		.src16_valid         (cmd_demux_002_src16_valid),               //          .valid
		.src16_data          (cmd_demux_002_src16_data),                //          .data
		.src16_channel       (cmd_demux_002_src16_channel),             //          .channel
		.src16_startofpacket (cmd_demux_002_src16_startofpacket),       //          .startofpacket
		.src16_endofpacket   (cmd_demux_002_src16_endofpacket),         //          .endofpacket
		.src17_ready         (cmd_demux_002_src17_ready),               //     src17.ready
		.src17_valid         (cmd_demux_002_src17_valid),               //          .valid
		.src17_data          (cmd_demux_002_src17_data),                //          .data
		.src17_channel       (cmd_demux_002_src17_channel),             //          .channel
		.src17_startofpacket (cmd_demux_002_src17_startofpacket),       //          .startofpacket
		.src17_endofpacket   (cmd_demux_002_src17_endofpacket),         //          .endofpacket
		.src18_ready         (cmd_demux_002_src18_ready),               //     src18.ready
		.src18_valid         (cmd_demux_002_src18_valid),               //          .valid
		.src18_data          (cmd_demux_002_src18_data),                //          .data
		.src18_channel       (cmd_demux_002_src18_channel),             //          .channel
		.src18_startofpacket (cmd_demux_002_src18_startofpacket),       //          .startofpacket
		.src18_endofpacket   (cmd_demux_002_src18_endofpacket),         //          .endofpacket
		.src19_ready         (cmd_demux_002_src19_ready),               //     src19.ready
		.src19_valid         (cmd_demux_002_src19_valid),               //          .valid
		.src19_data          (cmd_demux_002_src19_data),                //          .data
		.src19_channel       (cmd_demux_002_src19_channel),             //          .channel
		.src19_startofpacket (cmd_demux_002_src19_startofpacket),       //          .startofpacket
		.src19_endofpacket   (cmd_demux_002_src19_endofpacket),         //          .endofpacket
		.src20_ready         (cmd_demux_002_src20_ready),               //     src20.ready
		.src20_valid         (cmd_demux_002_src20_valid),               //          .valid
		.src20_data          (cmd_demux_002_src20_data),                //          .data
		.src20_channel       (cmd_demux_002_src20_channel),             //          .channel
		.src20_startofpacket (cmd_demux_002_src20_startofpacket),       //          .startofpacket
		.src20_endofpacket   (cmd_demux_002_src20_endofpacket),         //          .endofpacket
		.src21_ready         (cmd_demux_002_src21_ready),               //     src21.ready
		.src21_valid         (cmd_demux_002_src21_valid),               //          .valid
		.src21_data          (cmd_demux_002_src21_data),                //          .data
		.src21_channel       (cmd_demux_002_src21_channel),             //          .channel
		.src21_startofpacket (cmd_demux_002_src21_startofpacket),       //          .startofpacket
		.src21_endofpacket   (cmd_demux_002_src21_endofpacket),         //          .endofpacket
		.src22_ready         (cmd_demux_002_src22_ready),               //     src22.ready
		.src22_valid         (cmd_demux_002_src22_valid),               //          .valid
		.src22_data          (cmd_demux_002_src22_data),                //          .data
		.src22_channel       (cmd_demux_002_src22_channel),             //          .channel
		.src22_startofpacket (cmd_demux_002_src22_startofpacket),       //          .startofpacket
		.src22_endofpacket   (cmd_demux_002_src22_endofpacket),         //          .endofpacket
		.src23_ready         (cmd_demux_002_src23_ready),               //     src23.ready
		.src23_valid         (cmd_demux_002_src23_valid),               //          .valid
		.src23_data          (cmd_demux_002_src23_data),                //          .data
		.src23_channel       (cmd_demux_002_src23_channel),             //          .channel
		.src23_startofpacket (cmd_demux_002_src23_startofpacket),       //          .startofpacket
		.src23_endofpacket   (cmd_demux_002_src23_endofpacket),         //          .endofpacket
		.src24_ready         (cmd_demux_002_src24_ready),               //     src24.ready
		.src24_valid         (cmd_demux_002_src24_valid),               //          .valid
		.src24_data          (cmd_demux_002_src24_data),                //          .data
		.src24_channel       (cmd_demux_002_src24_channel),             //          .channel
		.src24_startofpacket (cmd_demux_002_src24_startofpacket),       //          .startofpacket
		.src24_endofpacket   (cmd_demux_002_src24_endofpacket),         //          .endofpacket
		.src25_ready         (cmd_demux_002_src25_ready),               //     src25.ready
		.src25_valid         (cmd_demux_002_src25_valid),               //          .valid
		.src25_data          (cmd_demux_002_src25_data),                //          .data
		.src25_channel       (cmd_demux_002_src25_channel),             //          .channel
		.src25_startofpacket (cmd_demux_002_src25_startofpacket),       //          .startofpacket
		.src25_endofpacket   (cmd_demux_002_src25_endofpacket),         //          .endofpacket
		.src26_ready         (cmd_demux_002_src26_ready),               //     src26.ready
		.src26_valid         (cmd_demux_002_src26_valid),               //          .valid
		.src26_data          (cmd_demux_002_src26_data),                //          .data
		.src26_channel       (cmd_demux_002_src26_channel),             //          .channel
		.src26_startofpacket (cmd_demux_002_src26_startofpacket),       //          .startofpacket
		.src26_endofpacket   (cmd_demux_002_src26_endofpacket),         //          .endofpacket
		.src27_ready         (cmd_demux_002_src27_ready),               //     src27.ready
		.src27_valid         (cmd_demux_002_src27_valid),               //          .valid
		.src27_data          (cmd_demux_002_src27_data),                //          .data
		.src27_channel       (cmd_demux_002_src27_channel),             //          .channel
		.src27_startofpacket (cmd_demux_002_src27_startofpacket),       //          .startofpacket
		.src27_endofpacket   (cmd_demux_002_src27_endofpacket)          //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_002 cmd_demux_003 (
		.clk                 (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset               (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_003_src_ready),                             //      sink.ready
		.sink_channel        (router_003_src_channel),                           //          .channel
		.sink_data           (router_003_src_data),                              //          .data
		.sink_startofpacket  (router_003_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket    (router_003_src_endofpacket),                       //          .endofpacket
		.sink_valid          (router_003_src_valid),                             //          .valid
		.src0_ready          (cmd_demux_003_src0_ready),                         //      src0.ready
		.src0_valid          (cmd_demux_003_src0_valid),                         //          .valid
		.src0_data           (cmd_demux_003_src0_data),                          //          .data
		.src0_channel        (cmd_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket  (cmd_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket    (cmd_demux_003_src0_endofpacket),                   //          .endofpacket
		.src1_ready          (cmd_demux_003_src1_ready),                         //      src1.ready
		.src1_valid          (cmd_demux_003_src1_valid),                         //          .valid
		.src1_data           (cmd_demux_003_src1_data),                          //          .data
		.src1_channel        (cmd_demux_003_src1_channel),                       //          .channel
		.src1_startofpacket  (cmd_demux_003_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket    (cmd_demux_003_src1_endofpacket),                   //          .endofpacket
		.src2_ready          (cmd_demux_003_src2_ready),                         //      src2.ready
		.src2_valid          (cmd_demux_003_src2_valid),                         //          .valid
		.src2_data           (cmd_demux_003_src2_data),                          //          .data
		.src2_channel        (cmd_demux_003_src2_channel),                       //          .channel
		.src2_startofpacket  (cmd_demux_003_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket    (cmd_demux_003_src2_endofpacket),                   //          .endofpacket
		.src3_ready          (cmd_demux_003_src3_ready),                         //      src3.ready
		.src3_valid          (cmd_demux_003_src3_valid),                         //          .valid
		.src3_data           (cmd_demux_003_src3_data),                          //          .data
		.src3_channel        (cmd_demux_003_src3_channel),                       //          .channel
		.src3_startofpacket  (cmd_demux_003_src3_startofpacket),                 //          .startofpacket
		.src3_endofpacket    (cmd_demux_003_src3_endofpacket),                   //          .endofpacket
		.src4_ready          (cmd_demux_003_src4_ready),                         //      src4.ready
		.src4_valid          (cmd_demux_003_src4_valid),                         //          .valid
		.src4_data           (cmd_demux_003_src4_data),                          //          .data
		.src4_channel        (cmd_demux_003_src4_channel),                       //          .channel
		.src4_startofpacket  (cmd_demux_003_src4_startofpacket),                 //          .startofpacket
		.src4_endofpacket    (cmd_demux_003_src4_endofpacket),                   //          .endofpacket
		.src5_ready          (cmd_demux_003_src5_ready),                         //      src5.ready
		.src5_valid          (cmd_demux_003_src5_valid),                         //          .valid
		.src5_data           (cmd_demux_003_src5_data),                          //          .data
		.src5_channel        (cmd_demux_003_src5_channel),                       //          .channel
		.src5_startofpacket  (cmd_demux_003_src5_startofpacket),                 //          .startofpacket
		.src5_endofpacket    (cmd_demux_003_src5_endofpacket),                   //          .endofpacket
		.src6_ready          (cmd_demux_003_src6_ready),                         //      src6.ready
		.src6_valid          (cmd_demux_003_src6_valid),                         //          .valid
		.src6_data           (cmd_demux_003_src6_data),                          //          .data
		.src6_channel        (cmd_demux_003_src6_channel),                       //          .channel
		.src6_startofpacket  (cmd_demux_003_src6_startofpacket),                 //          .startofpacket
		.src6_endofpacket    (cmd_demux_003_src6_endofpacket),                   //          .endofpacket
		.src7_ready          (cmd_demux_003_src7_ready),                         //      src7.ready
		.src7_valid          (cmd_demux_003_src7_valid),                         //          .valid
		.src7_data           (cmd_demux_003_src7_data),                          //          .data
		.src7_channel        (cmd_demux_003_src7_channel),                       //          .channel
		.src7_startofpacket  (cmd_demux_003_src7_startofpacket),                 //          .startofpacket
		.src7_endofpacket    (cmd_demux_003_src7_endofpacket),                   //          .endofpacket
		.src8_ready          (cmd_demux_003_src8_ready),                         //      src8.ready
		.src8_valid          (cmd_demux_003_src8_valid),                         //          .valid
		.src8_data           (cmd_demux_003_src8_data),                          //          .data
		.src8_channel        (cmd_demux_003_src8_channel),                       //          .channel
		.src8_startofpacket  (cmd_demux_003_src8_startofpacket),                 //          .startofpacket
		.src8_endofpacket    (cmd_demux_003_src8_endofpacket),                   //          .endofpacket
		.src9_ready          (cmd_demux_003_src9_ready),                         //      src9.ready
		.src9_valid          (cmd_demux_003_src9_valid),                         //          .valid
		.src9_data           (cmd_demux_003_src9_data),                          //          .data
		.src9_channel        (cmd_demux_003_src9_channel),                       //          .channel
		.src9_startofpacket  (cmd_demux_003_src9_startofpacket),                 //          .startofpacket
		.src9_endofpacket    (cmd_demux_003_src9_endofpacket),                   //          .endofpacket
		.src10_ready         (cmd_demux_003_src10_ready),                        //     src10.ready
		.src10_valid         (cmd_demux_003_src10_valid),                        //          .valid
		.src10_data          (cmd_demux_003_src10_data),                         //          .data
		.src10_channel       (cmd_demux_003_src10_channel),                      //          .channel
		.src10_startofpacket (cmd_demux_003_src10_startofpacket),                //          .startofpacket
		.src10_endofpacket   (cmd_demux_003_src10_endofpacket),                  //          .endofpacket
		.src11_ready         (cmd_demux_003_src11_ready),                        //     src11.ready
		.src11_valid         (cmd_demux_003_src11_valid),                        //          .valid
		.src11_data          (cmd_demux_003_src11_data),                         //          .data
		.src11_channel       (cmd_demux_003_src11_channel),                      //          .channel
		.src11_startofpacket (cmd_demux_003_src11_startofpacket),                //          .startofpacket
		.src11_endofpacket   (cmd_demux_003_src11_endofpacket),                  //          .endofpacket
		.src12_ready         (cmd_demux_003_src12_ready),                        //     src12.ready
		.src12_valid         (cmd_demux_003_src12_valid),                        //          .valid
		.src12_data          (cmd_demux_003_src12_data),                         //          .data
		.src12_channel       (cmd_demux_003_src12_channel),                      //          .channel
		.src12_startofpacket (cmd_demux_003_src12_startofpacket),                //          .startofpacket
		.src12_endofpacket   (cmd_demux_003_src12_endofpacket),                  //          .endofpacket
		.src13_ready         (cmd_demux_003_src13_ready),                        //     src13.ready
		.src13_valid         (cmd_demux_003_src13_valid),                        //          .valid
		.src13_data          (cmd_demux_003_src13_data),                         //          .data
		.src13_channel       (cmd_demux_003_src13_channel),                      //          .channel
		.src13_startofpacket (cmd_demux_003_src13_startofpacket),                //          .startofpacket
		.src13_endofpacket   (cmd_demux_003_src13_endofpacket),                  //          .endofpacket
		.src14_ready         (cmd_demux_003_src14_ready),                        //     src14.ready
		.src14_valid         (cmd_demux_003_src14_valid),                        //          .valid
		.src14_data          (cmd_demux_003_src14_data),                         //          .data
		.src14_channel       (cmd_demux_003_src14_channel),                      //          .channel
		.src14_startofpacket (cmd_demux_003_src14_startofpacket),                //          .startofpacket
		.src14_endofpacket   (cmd_demux_003_src14_endofpacket),                  //          .endofpacket
		.src15_ready         (cmd_demux_003_src15_ready),                        //     src15.ready
		.src15_valid         (cmd_demux_003_src15_valid),                        //          .valid
		.src15_data          (cmd_demux_003_src15_data),                         //          .data
		.src15_channel       (cmd_demux_003_src15_channel),                      //          .channel
		.src15_startofpacket (cmd_demux_003_src15_startofpacket),                //          .startofpacket
		.src15_endofpacket   (cmd_demux_003_src15_endofpacket),                  //          .endofpacket
		.src16_ready         (cmd_demux_003_src16_ready),                        //     src16.ready
		.src16_valid         (cmd_demux_003_src16_valid),                        //          .valid
		.src16_data          (cmd_demux_003_src16_data),                         //          .data
		.src16_channel       (cmd_demux_003_src16_channel),                      //          .channel
		.src16_startofpacket (cmd_demux_003_src16_startofpacket),                //          .startofpacket
		.src16_endofpacket   (cmd_demux_003_src16_endofpacket),                  //          .endofpacket
		.src17_ready         (cmd_demux_003_src17_ready),                        //     src17.ready
		.src17_valid         (cmd_demux_003_src17_valid),                        //          .valid
		.src17_data          (cmd_demux_003_src17_data),                         //          .data
		.src17_channel       (cmd_demux_003_src17_channel),                      //          .channel
		.src17_startofpacket (cmd_demux_003_src17_startofpacket),                //          .startofpacket
		.src17_endofpacket   (cmd_demux_003_src17_endofpacket),                  //          .endofpacket
		.src18_ready         (cmd_demux_003_src18_ready),                        //     src18.ready
		.src18_valid         (cmd_demux_003_src18_valid),                        //          .valid
		.src18_data          (cmd_demux_003_src18_data),                         //          .data
		.src18_channel       (cmd_demux_003_src18_channel),                      //          .channel
		.src18_startofpacket (cmd_demux_003_src18_startofpacket),                //          .startofpacket
		.src18_endofpacket   (cmd_demux_003_src18_endofpacket),                  //          .endofpacket
		.src19_ready         (cmd_demux_003_src19_ready),                        //     src19.ready
		.src19_valid         (cmd_demux_003_src19_valid),                        //          .valid
		.src19_data          (cmd_demux_003_src19_data),                         //          .data
		.src19_channel       (cmd_demux_003_src19_channel),                      //          .channel
		.src19_startofpacket (cmd_demux_003_src19_startofpacket),                //          .startofpacket
		.src19_endofpacket   (cmd_demux_003_src19_endofpacket),                  //          .endofpacket
		.src20_ready         (cmd_demux_003_src20_ready),                        //     src20.ready
		.src20_valid         (cmd_demux_003_src20_valid),                        //          .valid
		.src20_data          (cmd_demux_003_src20_data),                         //          .data
		.src20_channel       (cmd_demux_003_src20_channel),                      //          .channel
		.src20_startofpacket (cmd_demux_003_src20_startofpacket),                //          .startofpacket
		.src20_endofpacket   (cmd_demux_003_src20_endofpacket),                  //          .endofpacket
		.src21_ready         (cmd_demux_003_src21_ready),                        //     src21.ready
		.src21_valid         (cmd_demux_003_src21_valid),                        //          .valid
		.src21_data          (cmd_demux_003_src21_data),                         //          .data
		.src21_channel       (cmd_demux_003_src21_channel),                      //          .channel
		.src21_startofpacket (cmd_demux_003_src21_startofpacket),                //          .startofpacket
		.src21_endofpacket   (cmd_demux_003_src21_endofpacket),                  //          .endofpacket
		.src22_ready         (cmd_demux_003_src22_ready),                        //     src22.ready
		.src22_valid         (cmd_demux_003_src22_valid),                        //          .valid
		.src22_data          (cmd_demux_003_src22_data),                         //          .data
		.src22_channel       (cmd_demux_003_src22_channel),                      //          .channel
		.src22_startofpacket (cmd_demux_003_src22_startofpacket),                //          .startofpacket
		.src22_endofpacket   (cmd_demux_003_src22_endofpacket),                  //          .endofpacket
		.src23_ready         (cmd_demux_003_src23_ready),                        //     src23.ready
		.src23_valid         (cmd_demux_003_src23_valid),                        //          .valid
		.src23_data          (cmd_demux_003_src23_data),                         //          .data
		.src23_channel       (cmd_demux_003_src23_channel),                      //          .channel
		.src23_startofpacket (cmd_demux_003_src23_startofpacket),                //          .startofpacket
		.src23_endofpacket   (cmd_demux_003_src23_endofpacket),                  //          .endofpacket
		.src24_ready         (cmd_demux_003_src24_ready),                        //     src24.ready
		.src24_valid         (cmd_demux_003_src24_valid),                        //          .valid
		.src24_data          (cmd_demux_003_src24_data),                         //          .data
		.src24_channel       (cmd_demux_003_src24_channel),                      //          .channel
		.src24_startofpacket (cmd_demux_003_src24_startofpacket),                //          .startofpacket
		.src24_endofpacket   (cmd_demux_003_src24_endofpacket),                  //          .endofpacket
		.src25_ready         (cmd_demux_003_src25_ready),                        //     src25.ready
		.src25_valid         (cmd_demux_003_src25_valid),                        //          .valid
		.src25_data          (cmd_demux_003_src25_data),                         //          .data
		.src25_channel       (cmd_demux_003_src25_channel),                      //          .channel
		.src25_startofpacket (cmd_demux_003_src25_startofpacket),                //          .startofpacket
		.src25_endofpacket   (cmd_demux_003_src25_endofpacket),                  //          .endofpacket
		.src26_ready         (cmd_demux_003_src26_ready),                        //     src26.ready
		.src26_valid         (cmd_demux_003_src26_valid),                        //          .valid
		.src26_data          (cmd_demux_003_src26_data),                         //          .data
		.src26_channel       (cmd_demux_003_src26_channel),                      //          .channel
		.src26_startofpacket (cmd_demux_003_src26_startofpacket),                //          .startofpacket
		.src26_endofpacket   (cmd_demux_003_src26_endofpacket),                  //          .endofpacket
		.src27_ready         (cmd_demux_003_src27_ready),                        //     src27.ready
		.src27_valid         (cmd_demux_003_src27_valid),                        //          .valid
		.src27_data          (cmd_demux_003_src27_data),                         //          .data
		.src27_channel       (cmd_demux_003_src27_channel),                      //          .channel
		.src27_startofpacket (cmd_demux_003_src27_startofpacket),                //          .startofpacket
		.src27_endofpacket   (cmd_demux_003_src27_endofpacket)                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_004 cmd_demux_004 (
		.clk                 (System_PLL_sys_clk_clk),                                          //        clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (jtag_to_fpga_bridge_master_limiter_cmd_src_ready),                //       sink.ready
		.sink_channel        (jtag_to_fpga_bridge_master_limiter_cmd_src_channel),              //           .channel
		.sink_data           (jtag_to_fpga_bridge_master_limiter_cmd_src_data),                 //           .data
		.sink_startofpacket  (jtag_to_fpga_bridge_master_limiter_cmd_src_startofpacket),        //           .startofpacket
		.sink_endofpacket    (jtag_to_fpga_bridge_master_limiter_cmd_src_endofpacket),          //           .endofpacket
		.sink_valid          (jtag_to_fpga_bridge_master_limiter_cmd_valid_data),               // sink_valid.data
		.src0_ready          (cmd_demux_004_src0_ready),                                        //       src0.ready
		.src0_valid          (cmd_demux_004_src0_valid),                                        //           .valid
		.src0_data           (cmd_demux_004_src0_data),                                         //           .data
		.src0_channel        (cmd_demux_004_src0_channel),                                      //           .channel
		.src0_startofpacket  (cmd_demux_004_src0_startofpacket),                                //           .startofpacket
		.src0_endofpacket    (cmd_demux_004_src0_endofpacket),                                  //           .endofpacket
		.src1_ready          (cmd_demux_004_src1_ready),                                        //       src1.ready
		.src1_valid          (cmd_demux_004_src1_valid),                                        //           .valid
		.src1_data           (cmd_demux_004_src1_data),                                         //           .data
		.src1_channel        (cmd_demux_004_src1_channel),                                      //           .channel
		.src1_startofpacket  (cmd_demux_004_src1_startofpacket),                                //           .startofpacket
		.src1_endofpacket    (cmd_demux_004_src1_endofpacket),                                  //           .endofpacket
		.src2_ready          (cmd_demux_004_src2_ready),                                        //       src2.ready
		.src2_valid          (cmd_demux_004_src2_valid),                                        //           .valid
		.src2_data           (cmd_demux_004_src2_data),                                         //           .data
		.src2_channel        (cmd_demux_004_src2_channel),                                      //           .channel
		.src2_startofpacket  (cmd_demux_004_src2_startofpacket),                                //           .startofpacket
		.src2_endofpacket    (cmd_demux_004_src2_endofpacket),                                  //           .endofpacket
		.src3_ready          (cmd_demux_004_src3_ready),                                        //       src3.ready
		.src3_valid          (cmd_demux_004_src3_valid),                                        //           .valid
		.src3_data           (cmd_demux_004_src3_data),                                         //           .data
		.src3_channel        (cmd_demux_004_src3_channel),                                      //           .channel
		.src3_startofpacket  (cmd_demux_004_src3_startofpacket),                                //           .startofpacket
		.src3_endofpacket    (cmd_demux_004_src3_endofpacket),                                  //           .endofpacket
		.src4_ready          (cmd_demux_004_src4_ready),                                        //       src4.ready
		.src4_valid          (cmd_demux_004_src4_valid),                                        //           .valid
		.src4_data           (cmd_demux_004_src4_data),                                         //           .data
		.src4_channel        (cmd_demux_004_src4_channel),                                      //           .channel
		.src4_startofpacket  (cmd_demux_004_src4_startofpacket),                                //           .startofpacket
		.src4_endofpacket    (cmd_demux_004_src4_endofpacket),                                  //           .endofpacket
		.src5_ready          (cmd_demux_004_src5_ready),                                        //       src5.ready
		.src5_valid          (cmd_demux_004_src5_valid),                                        //           .valid
		.src5_data           (cmd_demux_004_src5_data),                                         //           .data
		.src5_channel        (cmd_demux_004_src5_channel),                                      //           .channel
		.src5_startofpacket  (cmd_demux_004_src5_startofpacket),                                //           .startofpacket
		.src5_endofpacket    (cmd_demux_004_src5_endofpacket),                                  //           .endofpacket
		.src6_ready          (cmd_demux_004_src6_ready),                                        //       src6.ready
		.src6_valid          (cmd_demux_004_src6_valid),                                        //           .valid
		.src6_data           (cmd_demux_004_src6_data),                                         //           .data
		.src6_channel        (cmd_demux_004_src6_channel),                                      //           .channel
		.src6_startofpacket  (cmd_demux_004_src6_startofpacket),                                //           .startofpacket
		.src6_endofpacket    (cmd_demux_004_src6_endofpacket),                                  //           .endofpacket
		.src7_ready          (cmd_demux_004_src7_ready),                                        //       src7.ready
		.src7_valid          (cmd_demux_004_src7_valid),                                        //           .valid
		.src7_data           (cmd_demux_004_src7_data),                                         //           .data
		.src7_channel        (cmd_demux_004_src7_channel),                                      //           .channel
		.src7_startofpacket  (cmd_demux_004_src7_startofpacket),                                //           .startofpacket
		.src7_endofpacket    (cmd_demux_004_src7_endofpacket),                                  //           .endofpacket
		.src8_ready          (cmd_demux_004_src8_ready),                                        //       src8.ready
		.src8_valid          (cmd_demux_004_src8_valid),                                        //           .valid
		.src8_data           (cmd_demux_004_src8_data),                                         //           .data
		.src8_channel        (cmd_demux_004_src8_channel),                                      //           .channel
		.src8_startofpacket  (cmd_demux_004_src8_startofpacket),                                //           .startofpacket
		.src8_endofpacket    (cmd_demux_004_src8_endofpacket),                                  //           .endofpacket
		.src9_ready          (cmd_demux_004_src9_ready),                                        //       src9.ready
		.src9_valid          (cmd_demux_004_src9_valid),                                        //           .valid
		.src9_data           (cmd_demux_004_src9_data),                                         //           .data
		.src9_channel        (cmd_demux_004_src9_channel),                                      //           .channel
		.src9_startofpacket  (cmd_demux_004_src9_startofpacket),                                //           .startofpacket
		.src9_endofpacket    (cmd_demux_004_src9_endofpacket),                                  //           .endofpacket
		.src10_ready         (cmd_demux_004_src10_ready),                                       //      src10.ready
		.src10_valid         (cmd_demux_004_src10_valid),                                       //           .valid
		.src10_data          (cmd_demux_004_src10_data),                                        //           .data
		.src10_channel       (cmd_demux_004_src10_channel),                                     //           .channel
		.src10_startofpacket (cmd_demux_004_src10_startofpacket),                               //           .startofpacket
		.src10_endofpacket   (cmd_demux_004_src10_endofpacket),                                 //           .endofpacket
		.src11_ready         (cmd_demux_004_src11_ready),                                       //      src11.ready
		.src11_valid         (cmd_demux_004_src11_valid),                                       //           .valid
		.src11_data          (cmd_demux_004_src11_data),                                        //           .data
		.src11_channel       (cmd_demux_004_src11_channel),                                     //           .channel
		.src11_startofpacket (cmd_demux_004_src11_startofpacket),                               //           .startofpacket
		.src11_endofpacket   (cmd_demux_004_src11_endofpacket),                                 //           .endofpacket
		.src12_ready         (cmd_demux_004_src12_ready),                                       //      src12.ready
		.src12_valid         (cmd_demux_004_src12_valid),                                       //           .valid
		.src12_data          (cmd_demux_004_src12_data),                                        //           .data
		.src12_channel       (cmd_demux_004_src12_channel),                                     //           .channel
		.src12_startofpacket (cmd_demux_004_src12_startofpacket),                               //           .startofpacket
		.src12_endofpacket   (cmd_demux_004_src12_endofpacket),                                 //           .endofpacket
		.src13_ready         (cmd_demux_004_src13_ready),                                       //      src13.ready
		.src13_valid         (cmd_demux_004_src13_valid),                                       //           .valid
		.src13_data          (cmd_demux_004_src13_data),                                        //           .data
		.src13_channel       (cmd_demux_004_src13_channel),                                     //           .channel
		.src13_startofpacket (cmd_demux_004_src13_startofpacket),                               //           .startofpacket
		.src13_endofpacket   (cmd_demux_004_src13_endofpacket),                                 //           .endofpacket
		.src14_ready         (cmd_demux_004_src14_ready),                                       //      src14.ready
		.src14_valid         (cmd_demux_004_src14_valid),                                       //           .valid
		.src14_data          (cmd_demux_004_src14_data),                                        //           .data
		.src14_channel       (cmd_demux_004_src14_channel),                                     //           .channel
		.src14_startofpacket (cmd_demux_004_src14_startofpacket),                               //           .startofpacket
		.src14_endofpacket   (cmd_demux_004_src14_endofpacket),                                 //           .endofpacket
		.src15_ready         (cmd_demux_004_src15_ready),                                       //      src15.ready
		.src15_valid         (cmd_demux_004_src15_valid),                                       //           .valid
		.src15_data          (cmd_demux_004_src15_data),                                        //           .data
		.src15_channel       (cmd_demux_004_src15_channel),                                     //           .channel
		.src15_startofpacket (cmd_demux_004_src15_startofpacket),                               //           .startofpacket
		.src15_endofpacket   (cmd_demux_004_src15_endofpacket),                                 //           .endofpacket
		.src16_ready         (cmd_demux_004_src16_ready),                                       //      src16.ready
		.src16_valid         (cmd_demux_004_src16_valid),                                       //           .valid
		.src16_data          (cmd_demux_004_src16_data),                                        //           .data
		.src16_channel       (cmd_demux_004_src16_channel),                                     //           .channel
		.src16_startofpacket (cmd_demux_004_src16_startofpacket),                               //           .startofpacket
		.src16_endofpacket   (cmd_demux_004_src16_endofpacket),                                 //           .endofpacket
		.src17_ready         (cmd_demux_004_src17_ready),                                       //      src17.ready
		.src17_valid         (cmd_demux_004_src17_valid),                                       //           .valid
		.src17_data          (cmd_demux_004_src17_data),                                        //           .data
		.src17_channel       (cmd_demux_004_src17_channel),                                     //           .channel
		.src17_startofpacket (cmd_demux_004_src17_startofpacket),                               //           .startofpacket
		.src17_endofpacket   (cmd_demux_004_src17_endofpacket),                                 //           .endofpacket
		.src18_ready         (cmd_demux_004_src18_ready),                                       //      src18.ready
		.src18_valid         (cmd_demux_004_src18_valid),                                       //           .valid
		.src18_data          (cmd_demux_004_src18_data),                                        //           .data
		.src18_channel       (cmd_demux_004_src18_channel),                                     //           .channel
		.src18_startofpacket (cmd_demux_004_src18_startofpacket),                               //           .startofpacket
		.src18_endofpacket   (cmd_demux_004_src18_endofpacket),                                 //           .endofpacket
		.src19_ready         (cmd_demux_004_src19_ready),                                       //      src19.ready
		.src19_valid         (cmd_demux_004_src19_valid),                                       //           .valid
		.src19_data          (cmd_demux_004_src19_data),                                        //           .data
		.src19_channel       (cmd_demux_004_src19_channel),                                     //           .channel
		.src19_startofpacket (cmd_demux_004_src19_startofpacket),                               //           .startofpacket
		.src19_endofpacket   (cmd_demux_004_src19_endofpacket),                                 //           .endofpacket
		.src20_ready         (cmd_demux_004_src20_ready),                                       //      src20.ready
		.src20_valid         (cmd_demux_004_src20_valid),                                       //           .valid
		.src20_data          (cmd_demux_004_src20_data),                                        //           .data
		.src20_channel       (cmd_demux_004_src20_channel),                                     //           .channel
		.src20_startofpacket (cmd_demux_004_src20_startofpacket),                               //           .startofpacket
		.src20_endofpacket   (cmd_demux_004_src20_endofpacket),                                 //           .endofpacket
		.src21_ready         (cmd_demux_004_src21_ready),                                       //      src21.ready
		.src21_valid         (cmd_demux_004_src21_valid),                                       //           .valid
		.src21_data          (cmd_demux_004_src21_data),                                        //           .data
		.src21_channel       (cmd_demux_004_src21_channel),                                     //           .channel
		.src21_startofpacket (cmd_demux_004_src21_startofpacket),                               //           .startofpacket
		.src21_endofpacket   (cmd_demux_004_src21_endofpacket),                                 //           .endofpacket
		.src22_ready         (cmd_demux_004_src22_ready),                                       //      src22.ready
		.src22_valid         (cmd_demux_004_src22_valid),                                       //           .valid
		.src22_data          (cmd_demux_004_src22_data),                                        //           .data
		.src22_channel       (cmd_demux_004_src22_channel),                                     //           .channel
		.src22_startofpacket (cmd_demux_004_src22_startofpacket),                               //           .startofpacket
		.src22_endofpacket   (cmd_demux_004_src22_endofpacket),                                 //           .endofpacket
		.src23_ready         (cmd_demux_004_src23_ready),                                       //      src23.ready
		.src23_valid         (cmd_demux_004_src23_valid),                                       //           .valid
		.src23_data          (cmd_demux_004_src23_data),                                        //           .data
		.src23_channel       (cmd_demux_004_src23_channel),                                     //           .channel
		.src23_startofpacket (cmd_demux_004_src23_startofpacket),                               //           .startofpacket
		.src23_endofpacket   (cmd_demux_004_src23_endofpacket),                                 //           .endofpacket
		.src24_ready         (cmd_demux_004_src24_ready),                                       //      src24.ready
		.src24_valid         (cmd_demux_004_src24_valid),                                       //           .valid
		.src24_data          (cmd_demux_004_src24_data),                                        //           .data
		.src24_channel       (cmd_demux_004_src24_channel),                                     //           .channel
		.src24_startofpacket (cmd_demux_004_src24_startofpacket),                               //           .startofpacket
		.src24_endofpacket   (cmd_demux_004_src24_endofpacket),                                 //           .endofpacket
		.src25_ready         (cmd_demux_004_src25_ready),                                       //      src25.ready
		.src25_valid         (cmd_demux_004_src25_valid),                                       //           .valid
		.src25_data          (cmd_demux_004_src25_data),                                        //           .data
		.src25_channel       (cmd_demux_004_src25_channel),                                     //           .channel
		.src25_startofpacket (cmd_demux_004_src25_startofpacket),                               //           .startofpacket
		.src25_endofpacket   (cmd_demux_004_src25_endofpacket),                                 //           .endofpacket
		.src26_ready         (cmd_demux_004_src26_ready),                                       //      src26.ready
		.src26_valid         (cmd_demux_004_src26_valid),                                       //           .valid
		.src26_data          (cmd_demux_004_src26_data),                                        //           .data
		.src26_channel       (cmd_demux_004_src26_channel),                                     //           .channel
		.src26_startofpacket (cmd_demux_004_src26_startofpacket),                               //           .startofpacket
		.src26_endofpacket   (cmd_demux_004_src26_endofpacket)                                  //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_005 cmd_demux_005 (
		.clk                (System_PLL_sys_clk_clk),                                          //        clk.clk
		.reset              (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (nios2_2nd_core_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_2nd_core_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_2nd_core_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_2nd_core_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_2nd_core_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_2nd_core_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_005_src0_ready),                                        //       src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                                        //           .valid
		.src0_data          (cmd_demux_005_src0_data),                                         //           .data
		.src0_channel       (cmd_demux_005_src0_channel),                                      //           .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                                //           .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket),                                  //           .endofpacket
		.src1_ready         (cmd_demux_005_src1_ready),                                        //       src1.ready
		.src1_valid         (cmd_demux_005_src1_valid),                                        //           .valid
		.src1_data          (cmd_demux_005_src1_data),                                         //           .data
		.src1_channel       (cmd_demux_005_src1_channel),                                      //           .channel
		.src1_startofpacket (cmd_demux_005_src1_startofpacket),                                //           .startofpacket
		.src1_endofpacket   (cmd_demux_005_src1_endofpacket),                                  //           .endofpacket
		.src2_ready         (cmd_demux_005_src2_ready),                                        //       src2.ready
		.src2_valid         (cmd_demux_005_src2_valid),                                        //           .valid
		.src2_data          (cmd_demux_005_src2_data),                                         //           .data
		.src2_channel       (cmd_demux_005_src2_channel),                                      //           .channel
		.src2_startofpacket (cmd_demux_005_src2_startofpacket),                                //           .startofpacket
		.src2_endofpacket   (cmd_demux_005_src2_endofpacket)                                   //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_005 cmd_demux_006 (
		.clk                (System_PLL_sys_clk_clk),                                 //        clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (nios2_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (nios2_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (nios2_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (nios2_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (nios2_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (nios2_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_006_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_006_src0_data),                                //           .data
		.src0_channel       (cmd_demux_006_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_006_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_006_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_006_src1_data),                                //           .data
		.src1_channel       (cmd_demux_006_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_006_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_006_src1_endofpacket),                         //           .endofpacket
		.src2_ready         (cmd_demux_006_src2_ready),                               //       src2.ready
		.src2_valid         (cmd_demux_006_src2_valid),                               //           .valid
		.src2_data          (cmd_demux_006_src2_data),                                //           .data
		.src2_channel       (cmd_demux_006_src2_channel),                             //           .channel
		.src2_startofpacket (cmd_demux_006_src2_startofpacket),                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_006_src2_endofpacket)                          //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_007 cmd_demux_007 (
		.clk                (System_PLL_sys_clk_clk),                                          //        clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (vga_subsystem_pixel_dma_master_limiter_cmd_src_ready),            //       sink.ready
		.sink_channel       (vga_subsystem_pixel_dma_master_limiter_cmd_src_channel),          //           .channel
		.sink_data          (vga_subsystem_pixel_dma_master_limiter_cmd_src_data),             //           .data
		.sink_startofpacket (vga_subsystem_pixel_dma_master_limiter_cmd_src_startofpacket),    //           .startofpacket
		.sink_endofpacket   (vga_subsystem_pixel_dma_master_limiter_cmd_src_endofpacket),      //           .endofpacket
		.sink_valid         (vga_subsystem_pixel_dma_master_limiter_cmd_valid_data),           // sink_valid.data
		.src0_ready         (cmd_demux_007_src0_ready),                                        //       src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                                        //           .valid
		.src0_data          (cmd_demux_007_src0_data),                                         //           .data
		.src0_channel       (cmd_demux_007_src0_channel),                                      //           .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),                                //           .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket),                                  //           .endofpacket
		.src1_ready         (cmd_demux_007_src1_ready),                                        //       src1.ready
		.src1_valid         (cmd_demux_007_src1_valid),                                        //           .valid
		.src1_data          (cmd_demux_007_src1_data),                                         //           .data
		.src1_channel       (cmd_demux_007_src1_channel),                                      //           .channel
		.src1_startofpacket (cmd_demux_007_src1_startofpacket),                                //           .startofpacket
		.src1_endofpacket   (cmd_demux_007_src1_endofpacket)                                   //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_008 cmd_demux_008 (
		.clk                (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_ready),                       //       sink.ready
		.sink_channel       (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_channel),                     //           .channel
		.sink_data          (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_data),                        //           .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_startofpacket),               //           .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_src_endofpacket),                 //           .endofpacket
		.sink_valid         (arm_a9_hps_h2f_axi_master_wr_limiter_cmd_valid_data),                      // sink_valid.data
		.src0_ready         (cmd_demux_008_src0_ready),                                                 //       src0.ready
		.src0_valid         (cmd_demux_008_src0_valid),                                                 //           .valid
		.src0_data          (cmd_demux_008_src0_data),                                                  //           .data
		.src0_channel       (cmd_demux_008_src0_channel),                                               //           .channel
		.src0_startofpacket (cmd_demux_008_src0_startofpacket),                                         //           .startofpacket
		.src0_endofpacket   (cmd_demux_008_src0_endofpacket),                                           //           .endofpacket
		.src1_ready         (cmd_demux_008_src1_ready),                                                 //       src1.ready
		.src1_valid         (cmd_demux_008_src1_valid),                                                 //           .valid
		.src1_data          (cmd_demux_008_src1_data),                                                  //           .data
		.src1_channel       (cmd_demux_008_src1_channel),                                               //           .channel
		.src1_startofpacket (cmd_demux_008_src1_startofpacket),                                         //           .startofpacket
		.src1_endofpacket   (cmd_demux_008_src1_endofpacket),                                           //           .endofpacket
		.src2_ready         (cmd_demux_008_src2_ready),                                                 //       src2.ready
		.src2_valid         (cmd_demux_008_src2_valid),                                                 //           .valid
		.src2_data          (cmd_demux_008_src2_data),                                                  //           .data
		.src2_channel       (cmd_demux_008_src2_channel),                                               //           .channel
		.src2_startofpacket (cmd_demux_008_src2_startofpacket),                                         //           .startofpacket
		.src2_endofpacket   (cmd_demux_008_src2_endofpacket)                                            //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_008 cmd_demux_009 (
		.clk                (System_PLL_sys_clk_clk),                                                   //        clk.clk
		.reset              (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_ready),                       //       sink.ready
		.sink_channel       (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_channel),                     //           .channel
		.sink_data          (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_data),                        //           .data
		.sink_startofpacket (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_startofpacket),               //           .startofpacket
		.sink_endofpacket   (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_src_endofpacket),                 //           .endofpacket
		.sink_valid         (arm_a9_hps_h2f_axi_master_rd_limiter_cmd_valid_data),                      // sink_valid.data
		.src0_ready         (cmd_demux_009_src0_ready),                                                 //       src0.ready
		.src0_valid         (cmd_demux_009_src0_valid),                                                 //           .valid
		.src0_data          (cmd_demux_009_src0_data),                                                  //           .data
		.src0_channel       (cmd_demux_009_src0_channel),                                               //           .channel
		.src0_startofpacket (cmd_demux_009_src0_startofpacket),                                         //           .startofpacket
		.src0_endofpacket   (cmd_demux_009_src0_endofpacket),                                           //           .endofpacket
		.src1_ready         (cmd_demux_009_src1_ready),                                                 //       src1.ready
		.src1_valid         (cmd_demux_009_src1_valid),                                                 //           .valid
		.src1_data          (cmd_demux_009_src1_data),                                                  //           .data
		.src1_channel       (cmd_demux_009_src1_channel),                                               //           .channel
		.src1_startofpacket (cmd_demux_009_src1_startofpacket),                                         //           .startofpacket
		.src1_endofpacket   (cmd_demux_009_src1_endofpacket),                                           //           .endofpacket
		.src2_ready         (cmd_demux_009_src2_ready),                                                 //       src2.ready
		.src2_valid         (cmd_demux_009_src2_valid),                                                 //           .valid
		.src2_data          (cmd_demux_009_src2_data),                                                  //           .data
		.src2_channel       (cmd_demux_009_src2_channel),                                               //           .channel
		.src2_startofpacket (cmd_demux_009_src2_startofpacket),                                         //           .startofpacket
		.src2_endofpacket   (cmd_demux_009_src2_endofpacket)                                            //           .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_010 cmd_demux_010 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                            //      sink.ready
		.sink_channel       (router_010_src_channel),                                          //          .channel
		.sink_data          (router_010_src_data),                                             //          .data
		.sink_startofpacket (router_010_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_010_src_valid),                                            //          .valid
		.src0_ready         (cmd_demux_010_src0_ready),                                        //      src0.ready
		.src0_valid         (cmd_demux_010_src0_valid),                                        //          .valid
		.src0_data          (cmd_demux_010_src0_data),                                         //          .data
		.src0_channel       (cmd_demux_010_src0_channel),                                      //          .channel
		.src0_startofpacket (cmd_demux_010_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (cmd_demux_010_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (cmd_demux_010_src1_ready),                                        //      src1.ready
		.src1_valid         (cmd_demux_010_src1_valid),                                        //          .valid
		.src1_data          (cmd_demux_010_src1_data),                                         //          .data
		.src1_channel       (cmd_demux_010_src1_channel),                                      //          .channel
		.src1_startofpacket (cmd_demux_010_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (cmd_demux_010_src1_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_011 cmd_demux_011 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                            //      sink.ready
		.sink_channel       (router_011_src_channel),                                          //          .channel
		.sink_data          (router_011_src_data),                                             //          .data
		.sink_startofpacket (router_011_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_011_src_valid),                                            //          .valid
		.src0_ready         (cmd_demux_011_src0_ready),                                        //      src0.ready
		.src0_valid         (cmd_demux_011_src0_valid),                                        //          .valid
		.src0_data          (cmd_demux_011_src0_data),                                         //          .data
		.src0_channel       (cmd_demux_011_src0_channel),                                      //          .channel
		.src0_startofpacket (cmd_demux_011_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (cmd_demux_011_src0_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_011 cmd_demux_012 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                            //      sink.ready
		.sink_channel       (router_012_src_channel),                                          //          .channel
		.sink_data          (router_012_src_data),                                             //          .data
		.sink_startofpacket (router_012_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_012_src_valid),                                            //          .valid
		.src0_ready         (cmd_demux_012_src0_ready),                                        //      src0.ready
		.src0_valid         (cmd_demux_012_src0_valid),                                        //          .valid
		.src0_data          (cmd_demux_012_src0_data),                                         //          .data
		.src0_channel       (cmd_demux_012_src0_channel),                                      //          .channel
		.src0_startofpacket (cmd_demux_012_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (cmd_demux_012_src0_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                               //       src.ready
		.src_valid           (cmd_mux_src_valid),                                               //          .valid
		.src_data            (cmd_mux_src_data),                                                //          .data
		.src_channel         (cmd_mux_src_channel),                                             //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                         //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src0_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                        //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                      //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                         //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                                  //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                                        //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                                        //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                                      //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                                         //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                                  //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                                        //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                                        //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                                      //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                                         //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket),                                  //          .endofpacket
		.sink4_ready         (cmd_demux_004_src0_ready),                                        //     sink4.ready
		.sink4_valid         (cmd_demux_004_src0_valid),                                        //          .valid
		.sink4_channel       (cmd_demux_004_src0_channel),                                      //          .channel
		.sink4_data          (cmd_demux_004_src0_data),                                         //          .data
		.sink4_startofpacket (cmd_demux_004_src0_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src0_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                           //          .valid
		.src_data            (cmd_mux_001_src_data),                                            //          .data
		.src_channel         (cmd_mux_001_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src1_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                                        //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                                      //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                                         //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket),                                  //          .endofpacket
		.sink2_ready         (cmd_demux_002_src1_ready),                                        //     sink2.ready
		.sink2_valid         (cmd_demux_002_src1_valid),                                        //          .valid
		.sink2_channel       (cmd_demux_002_src1_channel),                                      //          .channel
		.sink2_data          (cmd_demux_002_src1_data),                                         //          .data
		.sink2_startofpacket (cmd_demux_002_src1_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src1_endofpacket),                                  //          .endofpacket
		.sink3_ready         (cmd_demux_003_src1_ready),                                        //     sink3.ready
		.sink3_valid         (cmd_demux_003_src1_valid),                                        //          .valid
		.sink3_channel       (cmd_demux_003_src1_channel),                                      //          .channel
		.sink3_data          (cmd_demux_003_src1_data),                                         //          .data
		.sink3_startofpacket (cmd_demux_003_src1_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src1_endofpacket),                                  //          .endofpacket
		.sink4_ready         (cmd_demux_004_src1_ready),                                        //     sink4.ready
		.sink4_valid         (cmd_demux_004_src1_valid),                                        //          .valid
		.sink4_channel       (cmd_demux_004_src1_channel),                                      //          .channel
		.sink4_data          (cmd_demux_004_src1_data),                                         //          .data
		.sink4_startofpacket (cmd_demux_004_src1_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src1_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                           //          .valid
		.src_data            (cmd_mux_002_src_data),                                            //          .data
		.src_channel         (cmd_mux_002_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src2_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                                        //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                                      //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                                         //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket),                                  //          .endofpacket
		.sink2_ready         (cmd_demux_002_src2_ready),                                        //     sink2.ready
		.sink2_valid         (cmd_demux_002_src2_valid),                                        //          .valid
		.sink2_channel       (cmd_demux_002_src2_channel),                                      //          .channel
		.sink2_data          (cmd_demux_002_src2_data),                                         //          .data
		.sink2_startofpacket (cmd_demux_002_src2_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src2_endofpacket),                                  //          .endofpacket
		.sink3_ready         (cmd_demux_003_src2_ready),                                        //     sink3.ready
		.sink3_valid         (cmd_demux_003_src2_valid),                                        //          .valid
		.sink3_channel       (cmd_demux_003_src2_channel),                                      //          .channel
		.sink3_data          (cmd_demux_003_src2_data),                                         //          .data
		.sink3_startofpacket (cmd_demux_003_src2_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src2_endofpacket),                                  //          .endofpacket
		.sink4_ready         (cmd_demux_004_src2_ready),                                        //     sink4.ready
		.sink4_valid         (cmd_demux_004_src2_valid),                                        //          .valid
		.sink4_channel       (cmd_demux_004_src2_channel),                                      //          .channel
		.sink4_data          (cmd_demux_004_src2_data),                                         //          .data
		.sink4_startofpacket (cmd_demux_004_src2_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src2_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                           //          .valid
		.src_data            (cmd_mux_003_src_data),                                            //          .data
		.src_channel         (cmd_mux_003_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src3_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src3_ready),                                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src3_valid),                                        //          .valid
		.sink1_channel       (cmd_demux_001_src3_channel),                                      //          .channel
		.sink1_data          (cmd_demux_001_src3_data),                                         //          .data
		.sink1_startofpacket (cmd_demux_001_src3_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src3_endofpacket),                                  //          .endofpacket
		.sink2_ready         (cmd_demux_002_src3_ready),                                        //     sink2.ready
		.sink2_valid         (cmd_demux_002_src3_valid),                                        //          .valid
		.sink2_channel       (cmd_demux_002_src3_channel),                                      //          .channel
		.sink2_data          (cmd_demux_002_src3_data),                                         //          .data
		.sink2_startofpacket (cmd_demux_002_src3_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src3_endofpacket),                                  //          .endofpacket
		.sink3_ready         (cmd_demux_003_src3_ready),                                        //     sink3.ready
		.sink3_valid         (cmd_demux_003_src3_valid),                                        //          .valid
		.sink3_channel       (cmd_demux_003_src3_channel),                                      //          .channel
		.sink3_data          (cmd_demux_003_src3_data),                                         //          .data
		.sink3_startofpacket (cmd_demux_003_src3_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src3_endofpacket),                                  //          .endofpacket
		.sink4_ready         (cmd_demux_004_src3_ready),                                        //     sink4.ready
		.sink4_valid         (cmd_demux_004_src3_valid),                                        //          .valid
		.sink4_channel       (cmd_demux_004_src3_channel),                                      //          .channel
		.sink4_data          (cmd_demux_004_src3_data),                                         //          .data
		.sink4_startofpacket (cmd_demux_004_src3_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src3_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                           //          .valid
		.src_data            (cmd_mux_004_src_data),                                            //          .data
		.src_channel         (cmd_mux_004_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src4_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket),                                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src4_ready),                                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src4_valid),                                        //          .valid
		.sink1_channel       (cmd_demux_001_src4_channel),                                      //          .channel
		.sink1_data          (cmd_demux_001_src4_data),                                         //          .data
		.sink1_startofpacket (cmd_demux_001_src4_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src4_endofpacket),                                  //          .endofpacket
		.sink2_ready         (cmd_demux_002_src4_ready),                                        //     sink2.ready
		.sink2_valid         (cmd_demux_002_src4_valid),                                        //          .valid
		.sink2_channel       (cmd_demux_002_src4_channel),                                      //          .channel
		.sink2_data          (cmd_demux_002_src4_data),                                         //          .data
		.sink2_startofpacket (cmd_demux_002_src4_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src4_endofpacket),                                  //          .endofpacket
		.sink3_ready         (cmd_demux_003_src4_ready),                                        //     sink3.ready
		.sink3_valid         (cmd_demux_003_src4_valid),                                        //          .valid
		.sink3_channel       (cmd_demux_003_src4_channel),                                      //          .channel
		.sink3_data          (cmd_demux_003_src4_data),                                         //          .data
		.sink3_startofpacket (cmd_demux_003_src4_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src4_endofpacket),                                  //          .endofpacket
		.sink4_ready         (cmd_demux_004_src4_ready),                                        //     sink4.ready
		.sink4_valid         (cmd_demux_004_src4_valid),                                        //          .valid
		.sink4_channel       (cmd_demux_004_src4_channel),                                      //          .channel
		.sink4_data          (cmd_demux_004_src4_data),                                         //          .data
		.sink4_startofpacket (cmd_demux_004_src4_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                           //          .valid
		.src_data            (cmd_mux_005_src_data),                                            //          .data
		.src_channel         (cmd_mux_005_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src5_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket),                                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src5_ready),                                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src5_valid),                                        //          .valid
		.sink1_channel       (cmd_demux_001_src5_channel),                                      //          .channel
		.sink1_data          (cmd_demux_001_src5_data),                                         //          .data
		.sink1_startofpacket (cmd_demux_001_src5_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src5_endofpacket),                                  //          .endofpacket
		.sink2_ready         (cmd_demux_002_src5_ready),                                        //     sink2.ready
		.sink2_valid         (cmd_demux_002_src5_valid),                                        //          .valid
		.sink2_channel       (cmd_demux_002_src5_channel),                                      //          .channel
		.sink2_data          (cmd_demux_002_src5_data),                                         //          .data
		.sink2_startofpacket (cmd_demux_002_src5_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src5_endofpacket),                                  //          .endofpacket
		.sink3_ready         (cmd_demux_003_src5_ready),                                        //     sink3.ready
		.sink3_valid         (cmd_demux_003_src5_valid),                                        //          .valid
		.sink3_channel       (cmd_demux_003_src5_channel),                                      //          .channel
		.sink3_data          (cmd_demux_003_src5_data),                                         //          .data
		.sink3_startofpacket (cmd_demux_003_src5_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src5_endofpacket),                                  //          .endofpacket
		.sink4_ready         (cmd_demux_004_src5_ready),                                        //     sink4.ready
		.sink4_valid         (cmd_demux_004_src5_valid),                                        //          .valid
		.sink4_channel       (cmd_demux_004_src5_channel),                                      //          .channel
		.sink4_data          (cmd_demux_004_src5_data),                                         //          .data
		.sink4_startofpacket (cmd_demux_004_src5_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src5_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                           //          .valid
		.src_data            (cmd_mux_006_src_data),                                            //          .data
		.src_channel         (cmd_mux_006_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src6_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket),                                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src6_ready),                                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src6_valid),                                        //          .valid
		.sink1_channel       (cmd_demux_001_src6_channel),                                      //          .channel
		.sink1_data          (cmd_demux_001_src6_data),                                         //          .data
		.sink1_startofpacket (cmd_demux_001_src6_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src6_endofpacket),                                  //          .endofpacket
		.sink2_ready         (cmd_demux_002_src6_ready),                                        //     sink2.ready
		.sink2_valid         (cmd_demux_002_src6_valid),                                        //          .valid
		.sink2_channel       (cmd_demux_002_src6_channel),                                      //          .channel
		.sink2_data          (cmd_demux_002_src6_data),                                         //          .data
		.sink2_startofpacket (cmd_demux_002_src6_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src6_endofpacket),                                  //          .endofpacket
		.sink3_ready         (cmd_demux_003_src6_ready),                                        //     sink3.ready
		.sink3_valid         (cmd_demux_003_src6_valid),                                        //          .valid
		.sink3_channel       (cmd_demux_003_src6_channel),                                      //          .channel
		.sink3_data          (cmd_demux_003_src6_data),                                         //          .data
		.sink3_startofpacket (cmd_demux_003_src6_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src6_endofpacket),                                  //          .endofpacket
		.sink4_ready         (cmd_demux_004_src6_ready),                                        //     sink4.ready
		.sink4_valid         (cmd_demux_004_src6_valid),                                        //          .valid
		.sink4_channel       (cmd_demux_004_src6_channel),                                      //          .channel
		.sink4_data          (cmd_demux_004_src6_data),                                         //          .data
		.sink4_startofpacket (cmd_demux_004_src6_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src6_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                           //          .valid
		.src_data            (cmd_mux_007_src_data),                                            //          .data
		.src_channel         (cmd_mux_007_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src7_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket),                                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src7_ready),                                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src7_valid),                                        //          .valid
		.sink1_channel       (cmd_demux_001_src7_channel),                                      //          .channel
		.sink1_data          (cmd_demux_001_src7_data),                                         //          .data
		.sink1_startofpacket (cmd_demux_001_src7_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src7_endofpacket),                                  //          .endofpacket
		.sink2_ready         (cmd_demux_002_src7_ready),                                        //     sink2.ready
		.sink2_valid         (cmd_demux_002_src7_valid),                                        //          .valid
		.sink2_channel       (cmd_demux_002_src7_channel),                                      //          .channel
		.sink2_data          (cmd_demux_002_src7_data),                                         //          .data
		.sink2_startofpacket (cmd_demux_002_src7_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src7_endofpacket),                                  //          .endofpacket
		.sink3_ready         (cmd_demux_003_src7_ready),                                        //     sink3.ready
		.sink3_valid         (cmd_demux_003_src7_valid),                                        //          .valid
		.sink3_channel       (cmd_demux_003_src7_channel),                                      //          .channel
		.sink3_data          (cmd_demux_003_src7_data),                                         //          .data
		.sink3_startofpacket (cmd_demux_003_src7_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src7_endofpacket),                                  //          .endofpacket
		.sink4_ready         (cmd_demux_004_src7_ready),                                        //     sink4.ready
		.sink4_valid         (cmd_demux_004_src7_valid),                                        //          .valid
		.sink4_channel       (cmd_demux_004_src7_channel),                                      //          .channel
		.sink4_data          (cmd_demux_004_src7_data),                                         //          .data
		.sink4_startofpacket (cmd_demux_004_src7_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src7_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                           //          .valid
		.src_data            (cmd_mux_008_src_data),                                            //          .data
		.src_channel         (cmd_mux_008_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src8_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src8_ready),                                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src8_valid),                                        //          .valid
		.sink1_channel       (cmd_demux_001_src8_channel),                                      //          .channel
		.sink1_data          (cmd_demux_001_src8_data),                                         //          .data
		.sink1_startofpacket (cmd_demux_001_src8_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src8_endofpacket),                                  //          .endofpacket
		.sink2_ready         (cmd_demux_002_src8_ready),                                        //     sink2.ready
		.sink2_valid         (cmd_demux_002_src8_valid),                                        //          .valid
		.sink2_channel       (cmd_demux_002_src8_channel),                                      //          .channel
		.sink2_data          (cmd_demux_002_src8_data),                                         //          .data
		.sink2_startofpacket (cmd_demux_002_src8_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src8_endofpacket),                                  //          .endofpacket
		.sink3_ready         (cmd_demux_003_src8_ready),                                        //     sink3.ready
		.sink3_valid         (cmd_demux_003_src8_valid),                                        //          .valid
		.sink3_channel       (cmd_demux_003_src8_channel),                                      //          .channel
		.sink3_data          (cmd_demux_003_src8_data),                                         //          .data
		.sink3_startofpacket (cmd_demux_003_src8_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src8_endofpacket),                                  //          .endofpacket
		.sink4_ready         (cmd_demux_004_src8_ready),                                        //     sink4.ready
		.sink4_valid         (cmd_demux_004_src8_valid),                                        //          .valid
		.sink4_channel       (cmd_demux_004_src8_channel),                                      //          .channel
		.sink4_data          (cmd_demux_004_src8_data),                                         //          .data
		.sink4_startofpacket (cmd_demux_004_src8_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src8_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                           //          .valid
		.src_data            (cmd_mux_009_src_data),                                            //          .data
		.src_channel         (cmd_mux_009_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                            //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                            //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                                          //          .channel
		.sink0_data          (cmd_demux_src9_data),                                             //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket),                                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src9_ready),                                        //     sink1.ready
		.sink1_valid         (cmd_demux_001_src9_valid),                                        //          .valid
		.sink1_channel       (cmd_demux_001_src9_channel),                                      //          .channel
		.sink1_data          (cmd_demux_001_src9_data),                                         //          .data
		.sink1_startofpacket (cmd_demux_001_src9_startofpacket),                                //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src9_endofpacket),                                  //          .endofpacket
		.sink2_ready         (cmd_demux_002_src9_ready),                                        //     sink2.ready
		.sink2_valid         (cmd_demux_002_src9_valid),                                        //          .valid
		.sink2_channel       (cmd_demux_002_src9_channel),                                      //          .channel
		.sink2_data          (cmd_demux_002_src9_data),                                         //          .data
		.sink2_startofpacket (cmd_demux_002_src9_startofpacket),                                //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src9_endofpacket),                                  //          .endofpacket
		.sink3_ready         (cmd_demux_003_src9_ready),                                        //     sink3.ready
		.sink3_valid         (cmd_demux_003_src9_valid),                                        //          .valid
		.sink3_channel       (cmd_demux_003_src9_channel),                                      //          .channel
		.sink3_data          (cmd_demux_003_src9_data),                                         //          .data
		.sink3_startofpacket (cmd_demux_003_src9_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src9_endofpacket),                                  //          .endofpacket
		.sink4_ready         (cmd_demux_004_src9_ready),                                        //     sink4.ready
		.sink4_valid         (cmd_demux_004_src9_valid),                                        //          .valid
		.sink4_channel       (cmd_demux_004_src9_channel),                                      //          .channel
		.sink4_data          (cmd_demux_004_src9_data),                                         //          .data
		.sink4_startofpacket (cmd_demux_004_src9_startofpacket),                                //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src9_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                           //          .valid
		.src_data            (cmd_mux_010_src_data),                                            //          .data
		.src_channel         (cmd_mux_010_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src10_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket),                                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src10_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src10_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_001_src10_channel),                                     //          .channel
		.sink1_data          (cmd_demux_001_src10_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_001_src10_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src10_endofpacket),                                 //          .endofpacket
		.sink2_ready         (cmd_demux_002_src10_ready),                                       //     sink2.ready
		.sink2_valid         (cmd_demux_002_src10_valid),                                       //          .valid
		.sink2_channel       (cmd_demux_002_src10_channel),                                     //          .channel
		.sink2_data          (cmd_demux_002_src10_data),                                        //          .data
		.sink2_startofpacket (cmd_demux_002_src10_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src10_endofpacket),                                 //          .endofpacket
		.sink3_ready         (cmd_demux_003_src10_ready),                                       //     sink3.ready
		.sink3_valid         (cmd_demux_003_src10_valid),                                       //          .valid
		.sink3_channel       (cmd_demux_003_src10_channel),                                     //          .channel
		.sink3_data          (cmd_demux_003_src10_data),                                        //          .data
		.sink3_startofpacket (cmd_demux_003_src10_startofpacket),                               //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src10_endofpacket),                                 //          .endofpacket
		.sink4_ready         (cmd_demux_004_src10_ready),                                       //     sink4.ready
		.sink4_valid         (cmd_demux_004_src10_valid),                                       //          .valid
		.sink4_channel       (cmd_demux_004_src10_channel),                                     //          .channel
		.sink4_data          (cmd_demux_004_src10_data),                                        //          .data
		.sink4_startofpacket (cmd_demux_004_src10_startofpacket),                               //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src10_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                           //          .valid
		.src_data            (cmd_mux_011_src_data),                                            //          .data
		.src_channel         (cmd_mux_011_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src11_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket),                                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src11_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src11_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_001_src11_channel),                                     //          .channel
		.sink1_data          (cmd_demux_001_src11_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_001_src11_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src11_endofpacket),                                 //          .endofpacket
		.sink2_ready         (cmd_demux_002_src11_ready),                                       //     sink2.ready
		.sink2_valid         (cmd_demux_002_src11_valid),                                       //          .valid
		.sink2_channel       (cmd_demux_002_src11_channel),                                     //          .channel
		.sink2_data          (cmd_demux_002_src11_data),                                        //          .data
		.sink2_startofpacket (cmd_demux_002_src11_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src11_endofpacket),                                 //          .endofpacket
		.sink3_ready         (cmd_demux_003_src11_ready),                                       //     sink3.ready
		.sink3_valid         (cmd_demux_003_src11_valid),                                       //          .valid
		.sink3_channel       (cmd_demux_003_src11_channel),                                     //          .channel
		.sink3_data          (cmd_demux_003_src11_data),                                        //          .data
		.sink3_startofpacket (cmd_demux_003_src11_startofpacket),                               //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src11_endofpacket),                                 //          .endofpacket
		.sink4_ready         (cmd_demux_004_src11_ready),                                       //     sink4.ready
		.sink4_valid         (cmd_demux_004_src11_valid),                                       //          .valid
		.sink4_channel       (cmd_demux_004_src11_channel),                                     //          .channel
		.sink4_data          (cmd_demux_004_src11_data),                                        //          .data
		.sink4_startofpacket (cmd_demux_004_src11_startofpacket),                               //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src11_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                           //          .valid
		.src_data            (cmd_mux_012_src_data),                                            //          .data
		.src_channel         (cmd_mux_012_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src12_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src12_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src12_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_001_src12_channel),                                     //          .channel
		.sink1_data          (cmd_demux_001_src12_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_001_src12_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src12_endofpacket),                                 //          .endofpacket
		.sink2_ready         (cmd_demux_002_src12_ready),                                       //     sink2.ready
		.sink2_valid         (cmd_demux_002_src12_valid),                                       //          .valid
		.sink2_channel       (cmd_demux_002_src12_channel),                                     //          .channel
		.sink2_data          (cmd_demux_002_src12_data),                                        //          .data
		.sink2_startofpacket (cmd_demux_002_src12_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src12_endofpacket),                                 //          .endofpacket
		.sink3_ready         (cmd_demux_003_src12_ready),                                       //     sink3.ready
		.sink3_valid         (cmd_demux_003_src12_valid),                                       //          .valid
		.sink3_channel       (cmd_demux_003_src12_channel),                                     //          .channel
		.sink3_data          (cmd_demux_003_src12_data),                                        //          .data
		.sink3_startofpacket (cmd_demux_003_src12_startofpacket),                               //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src12_endofpacket),                                 //          .endofpacket
		.sink4_ready         (cmd_demux_004_src12_ready),                                       //     sink4.ready
		.sink4_valid         (cmd_demux_004_src12_valid),                                       //          .valid
		.sink4_channel       (cmd_demux_004_src12_channel),                                     //          .channel
		.sink4_data          (cmd_demux_004_src12_data),                                        //          .data
		.sink4_startofpacket (cmd_demux_004_src12_startofpacket),                               //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src12_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                           //          .valid
		.src_data            (cmd_mux_013_src_data),                                            //          .data
		.src_channel         (cmd_mux_013_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src13_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket),                                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src13_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src13_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_001_src13_channel),                                     //          .channel
		.sink1_data          (cmd_demux_001_src13_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_001_src13_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src13_endofpacket),                                 //          .endofpacket
		.sink2_ready         (cmd_demux_002_src13_ready),                                       //     sink2.ready
		.sink2_valid         (cmd_demux_002_src13_valid),                                       //          .valid
		.sink2_channel       (cmd_demux_002_src13_channel),                                     //          .channel
		.sink2_data          (cmd_demux_002_src13_data),                                        //          .data
		.sink2_startofpacket (cmd_demux_002_src13_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src13_endofpacket),                                 //          .endofpacket
		.sink3_ready         (cmd_demux_003_src13_ready),                                       //     sink3.ready
		.sink3_valid         (cmd_demux_003_src13_valid),                                       //          .valid
		.sink3_channel       (cmd_demux_003_src13_channel),                                     //          .channel
		.sink3_data          (cmd_demux_003_src13_data),                                        //          .data
		.sink3_startofpacket (cmd_demux_003_src13_startofpacket),                               //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src13_endofpacket),                                 //          .endofpacket
		.sink4_ready         (cmd_demux_004_src13_ready),                                       //     sink4.ready
		.sink4_valid         (cmd_demux_004_src13_valid),                                       //          .valid
		.sink4_channel       (cmd_demux_004_src13_channel),                                     //          .channel
		.sink4_data          (cmd_demux_004_src13_data),                                        //          .data
		.sink4_startofpacket (cmd_demux_004_src13_startofpacket),                               //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src13_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                           //          .valid
		.src_data            (cmd_mux_014_src_data),                                            //          .data
		.src_channel         (cmd_mux_014_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src14_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket),                                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src14_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src14_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_001_src14_channel),                                     //          .channel
		.sink1_data          (cmd_demux_001_src14_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_001_src14_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src14_endofpacket),                                 //          .endofpacket
		.sink2_ready         (cmd_demux_002_src14_ready),                                       //     sink2.ready
		.sink2_valid         (cmd_demux_002_src14_valid),                                       //          .valid
		.sink2_channel       (cmd_demux_002_src14_channel),                                     //          .channel
		.sink2_data          (cmd_demux_002_src14_data),                                        //          .data
		.sink2_startofpacket (cmd_demux_002_src14_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src14_endofpacket),                                 //          .endofpacket
		.sink3_ready         (cmd_demux_003_src14_ready),                                       //     sink3.ready
		.sink3_valid         (cmd_demux_003_src14_valid),                                       //          .valid
		.sink3_channel       (cmd_demux_003_src14_channel),                                     //          .channel
		.sink3_data          (cmd_demux_003_src14_data),                                        //          .data
		.sink3_startofpacket (cmd_demux_003_src14_startofpacket),                               //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src14_endofpacket),                                 //          .endofpacket
		.sink4_ready         (cmd_demux_004_src14_ready),                                       //     sink4.ready
		.sink4_valid         (cmd_demux_004_src14_valid),                                       //          .valid
		.sink4_channel       (cmd_demux_004_src14_channel),                                     //          .channel
		.sink4_data          (cmd_demux_004_src14_data),                                        //          .data
		.sink4_startofpacket (cmd_demux_004_src14_startofpacket),                               //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src14_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                           //          .valid
		.src_data            (cmd_mux_015_src_data),                                            //          .data
		.src_channel         (cmd_mux_015_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src15_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket),                                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src15_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src15_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_001_src15_channel),                                     //          .channel
		.sink1_data          (cmd_demux_001_src15_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_001_src15_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src15_endofpacket),                                 //          .endofpacket
		.sink2_ready         (cmd_demux_002_src15_ready),                                       //     sink2.ready
		.sink2_valid         (cmd_demux_002_src15_valid),                                       //          .valid
		.sink2_channel       (cmd_demux_002_src15_channel),                                     //          .channel
		.sink2_data          (cmd_demux_002_src15_data),                                        //          .data
		.sink2_startofpacket (cmd_demux_002_src15_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src15_endofpacket),                                 //          .endofpacket
		.sink3_ready         (cmd_demux_003_src15_ready),                                       //     sink3.ready
		.sink3_valid         (cmd_demux_003_src15_valid),                                       //          .valid
		.sink3_channel       (cmd_demux_003_src15_channel),                                     //          .channel
		.sink3_data          (cmd_demux_003_src15_data),                                        //          .data
		.sink3_startofpacket (cmd_demux_003_src15_startofpacket),                               //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src15_endofpacket),                                 //          .endofpacket
		.sink4_ready         (cmd_demux_004_src15_ready),                                       //     sink4.ready
		.sink4_valid         (cmd_demux_004_src15_valid),                                       //          .valid
		.sink4_channel       (cmd_demux_004_src15_channel),                                     //          .channel
		.sink4_data          (cmd_demux_004_src15_data),                                        //          .data
		.sink4_startofpacket (cmd_demux_004_src15_startofpacket),                               //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src15_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_016 cmd_mux_016 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                                           //          .valid
		.src_data            (cmd_mux_016_src_data),                                            //          .data
		.src_channel         (cmd_mux_016_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src16_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket),                                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src16_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src16_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_001_src16_channel),                                     //          .channel
		.sink1_data          (cmd_demux_001_src16_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_001_src16_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src16_endofpacket),                                 //          .endofpacket
		.sink2_ready         (cmd_demux_002_src16_ready),                                       //     sink2.ready
		.sink2_valid         (cmd_demux_002_src16_valid),                                       //          .valid
		.sink2_channel       (cmd_demux_002_src16_channel),                                     //          .channel
		.sink2_data          (cmd_demux_002_src16_data),                                        //          .data
		.sink2_startofpacket (cmd_demux_002_src16_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src16_endofpacket),                                 //          .endofpacket
		.sink3_ready         (cmd_demux_004_src16_ready),                                       //     sink3.ready
		.sink3_valid         (cmd_demux_004_src16_valid),                                       //          .valid
		.sink3_channel       (cmd_demux_004_src16_channel),                                     //          .channel
		.sink3_data          (cmd_demux_004_src16_data),                                        //          .data
		.sink3_startofpacket (cmd_demux_004_src16_startofpacket),                               //          .startofpacket
		.sink3_endofpacket   (cmd_demux_004_src16_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_016 cmd_mux_017 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                                           //          .valid
		.src_data            (cmd_mux_017_src_data),                                            //          .data
		.src_channel         (cmd_mux_017_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src17_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket),                                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src17_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src17_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_001_src17_channel),                                     //          .channel
		.sink1_data          (cmd_demux_001_src17_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_001_src17_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src17_endofpacket),                                 //          .endofpacket
		.sink2_ready         (cmd_demux_002_src17_ready),                                       //     sink2.ready
		.sink2_valid         (cmd_demux_002_src17_valid),                                       //          .valid
		.sink2_channel       (cmd_demux_002_src17_channel),                                     //          .channel
		.sink2_data          (cmd_demux_002_src17_data),                                        //          .data
		.sink2_startofpacket (cmd_demux_002_src17_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src17_endofpacket),                                 //          .endofpacket
		.sink3_ready         (cmd_demux_004_src17_ready),                                       //     sink3.ready
		.sink3_valid         (cmd_demux_004_src17_valid),                                       //          .valid
		.sink3_channel       (cmd_demux_004_src17_channel),                                     //          .channel
		.sink3_data          (cmd_demux_004_src17_data),                                        //          .data
		.sink3_startofpacket (cmd_demux_004_src17_startofpacket),                               //          .startofpacket
		.sink3_endofpacket   (cmd_demux_004_src17_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_018 cmd_mux_018 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                                           //          .valid
		.src_data            (cmd_mux_018_src_data),                                            //          .data
		.src_channel         (cmd_mux_018_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src18_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket),                                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src18_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src18_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_001_src18_channel),                                     //          .channel
		.sink1_data          (cmd_demux_001_src18_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_001_src18_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src18_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_018 cmd_mux_019 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                                           //          .valid
		.src_data            (cmd_mux_019_src_data),                                            //          .data
		.src_channel         (cmd_mux_019_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src19_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket),                                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src19_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src19_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_001_src19_channel),                                     //          .channel
		.sink1_data          (cmd_demux_001_src19_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_001_src19_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src19_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_018 cmd_mux_020 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                                           //          .valid
		.src_data            (cmd_mux_020_src_data),                                            //          .data
		.src_channel         (cmd_mux_020_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src20_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket),                                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src20_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src20_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_001_src20_channel),                                     //          .channel
		.sink1_data          (cmd_demux_001_src20_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_001_src20_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src20_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_018 cmd_mux_021 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                                           //          .valid
		.src_data            (cmd_mux_021_src_data),                                            //          .data
		.src_channel         (cmd_mux_021_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                                           //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                                           //          .valid
		.sink0_channel       (cmd_demux_src21_channel),                                         //          .channel
		.sink0_data          (cmd_demux_src21_data),                                            //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket),                                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src21_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src21_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_001_src21_channel),                                     //          .channel
		.sink1_data          (cmd_demux_001_src21_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_001_src21_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src21_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_018 cmd_mux_022 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (JTAG_UART_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                       //          .valid
		.src_data            (cmd_mux_022_src_data),                        //          .data
		.src_channel         (cmd_mux_022_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_002_src18_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_002_src18_valid),                   //          .valid
		.sink0_channel       (cmd_demux_002_src18_channel),                 //          .channel
		.sink0_data          (cmd_demux_002_src18_data),                    //          .data
		.sink0_startofpacket (cmd_demux_002_src18_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src18_endofpacket),             //          .endofpacket
		.sink1_ready         (cmd_demux_004_src18_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_004_src18_valid),                   //          .valid
		.sink1_channel       (cmd_demux_004_src18_channel),                 //          .channel
		.sink1_data          (cmd_demux_004_src18_data),                    //          .data
		.sink1_startofpacket (cmd_demux_004_src18_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src18_endofpacket)              //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_023 cmd_mux_023 (
		.clk                 (System_PLL_sys_clk_clk),                                                                              //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                                                                               //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                                                                               //          .valid
		.src_data            (cmd_mux_023_src_data),                                                                                //          .data
		.src_channel         (cmd_mux_023_src_channel),                                                                             //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),                                                                       //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                                                                         //          .endofpacket
		.sink0_ready         (nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready),                    //     sink0.ready
		.sink0_valid         (nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid),                    //          .valid
		.sink0_channel       (nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel),                  //          .channel
		.sink0_data          (nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data),                     //          .data
		.sink0_startofpacket (nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket),              //          .endofpacket
		.sink1_ready         (nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready),           //     sink1.ready
		.sink1_valid         (nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid),           //          .valid
		.sink1_channel       (nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel),         //          .channel
		.sink1_data          (nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data),            //          .data
		.sink1_startofpacket (nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink1_endofpacket   (nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink2_ready         (jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready),           //     sink2.ready
		.sink2_valid         (jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid),           //          .valid
		.sink2_channel       (jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel),         //          .channel
		.sink2_data          (jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data),            //          .data
		.sink2_startofpacket (jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink2_endofpacket   (jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink3_ready         (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready),         //     sink3.ready
		.sink3_valid         (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink3_channel       (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink3_data          (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.sink3_startofpacket (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink3_endofpacket   (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink4_ready         (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready),         //     sink4.ready
		.sink4_valid         (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink4_channel       (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink4_data          (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.sink4_startofpacket (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink4_endofpacket   (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_016 cmd_mux_024 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                                           //          .valid
		.src_data            (cmd_mux_024_src_data),                                            //          .data
		.src_channel         (cmd_mux_024_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_002_src20_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src20_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_002_src20_channel),                                     //          .channel
		.sink0_data          (cmd_demux_002_src20_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_002_src20_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src20_endofpacket),                                 //          .endofpacket
		.sink1_ready         (cmd_demux_003_src17_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src17_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_003_src17_channel),                                     //          .channel
		.sink1_data          (cmd_demux_003_src17_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_003_src17_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src17_endofpacket),                                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src20_ready),                                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src20_valid),                                       //          .valid
		.sink2_channel       (cmd_demux_004_src20_channel),                                     //          .channel
		.sink2_data          (cmd_demux_004_src20_data),                                        //          .data
		.sink2_startofpacket (cmd_demux_004_src20_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src20_endofpacket),                                 //          .endofpacket
		.sink3_ready         (cmd_demux_012_src0_ready),                                        //     sink3.ready
		.sink3_valid         (cmd_demux_012_src0_valid),                                        //          .valid
		.sink3_channel       (cmd_demux_012_src0_channel),                                      //          .channel
		.sink3_data          (cmd_demux_012_src0_data),                                         //          .data
		.sink3_startofpacket (cmd_demux_012_src0_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_012_src0_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_025 cmd_mux_025 (
		.clk                 (System_PLL_sys_clk_clk),                                                            //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.src_ready           (cmd_mux_025_src_ready),                                                             //       src.ready
		.src_valid           (cmd_mux_025_src_valid),                                                             //          .valid
		.src_data            (cmd_mux_025_src_data),                                                              //          .data
		.src_channel         (cmd_mux_025_src_channel),                                                           //          .channel
		.src_startofpacket   (cmd_mux_025_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket     (cmd_mux_025_src_endofpacket),                                                       //          .endofpacket
		.sink0_ready         (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_ready),                         //     sink0.ready
		.sink0_valid         (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_valid),                         //          .valid
		.sink0_channel       (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_channel),                       //          .channel
		.sink0_data          (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_data),                          //          .data
		.sink0_startofpacket (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),                   //          .endofpacket
		.sink1_ready         (nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_ready),                //     sink1.ready
		.sink1_valid         (nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_valid),                //          .valid
		.sink1_channel       (nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_channel),              //          .channel
		.sink1_data          (nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_data),                 //          .data
		.sink1_startofpacket (nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),          //          .endofpacket
		.sink2_ready         (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_ready),                //     sink2.ready
		.sink2_valid         (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_valid),                //          .valid
		.sink2_channel       (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_channel),              //          .channel
		.sink2_data          (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_data),                 //          .data
		.sink2_startofpacket (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),        //          .startofpacket
		.sink2_endofpacket   (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),          //          .endofpacket
		.sink3_ready         (nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready),         //     sink3.ready
		.sink3_valid         (nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink3_channel       (nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink3_data          (nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.sink3_startofpacket (nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink3_endofpacket   (nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink4_ready         (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready),                  //     sink4.ready
		.sink4_valid         (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid),                  //          .valid
		.sink4_channel       (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel),                //          .channel
		.sink4_data          (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_data),                   //          .data
		.sink4_startofpacket (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),          //          .startofpacket
		.sink4_endofpacket   (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),            //          .endofpacket
		.sink5_ready         (vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_ready),            //     sink5.ready
		.sink5_valid         (vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_valid),            //          .valid
		.sink5_channel       (vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_channel),          //          .channel
		.sink5_data          (vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_data),             //          .data
		.sink5_startofpacket (vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_startofpacket),    //          .startofpacket
		.sink5_endofpacket   (vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),      //          .endofpacket
		.sink6_ready         (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready),              //     sink6.ready
		.sink6_valid         (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid),              //          .valid
		.sink6_channel       (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel),            //          .channel
		.sink6_data          (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data),               //          .data
		.sink6_startofpacket (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.sink6_endofpacket   (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket),        //          .endofpacket
		.sink7_ready         (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready),              //     sink7.ready
		.sink7_valid         (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid),              //          .valid
		.sink7_channel       (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel),            //          .channel
		.sink7_data          (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data),               //          .data
		.sink7_startofpacket (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket),      //          .startofpacket
		.sink7_endofpacket   (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket),        //          .endofpacket
		.sink8_ready         (cmd_demux_010_src0_ready),                                                          //     sink8.ready
		.sink8_valid         (cmd_demux_010_src0_valid),                                                          //          .valid
		.sink8_channel       (cmd_demux_010_src0_channel),                                                        //          .channel
		.sink8_data          (cmd_demux_010_src0_data),                                                           //          .data
		.sink8_startofpacket (cmd_demux_010_src0_startofpacket),                                                  //          .startofpacket
		.sink8_endofpacket   (cmd_demux_010_src0_endofpacket)                                                     //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_026 cmd_mux_026 (
		.clk                 (System_PLL_sys_clk_clk),                                                                       //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready           (cmd_mux_026_src_ready),                                                                        //       src.ready
		.src_valid           (cmd_mux_026_src_valid),                                                                        //          .valid
		.src_data            (cmd_mux_026_src_data),                                                                         //          .data
		.src_channel         (cmd_mux_026_src_channel),                                                                      //          .channel
		.src_startofpacket   (cmd_mux_026_src_startofpacket),                                                                //          .startofpacket
		.src_endofpacket     (cmd_mux_026_src_endofpacket),                                                                  //          .endofpacket
		.sink0_ready         (cmd_demux_002_src22_ready),                                                                    //     sink0.ready
		.sink0_valid         (cmd_demux_002_src22_valid),                                                                    //          .valid
		.sink0_channel       (cmd_demux_002_src22_channel),                                                                  //          .channel
		.sink0_data          (cmd_demux_002_src22_data),                                                                     //          .data
		.sink0_startofpacket (cmd_demux_002_src22_startofpacket),                                                            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src22_endofpacket),                                                              //          .endofpacket
		.sink1_ready         (cmd_demux_003_src19_ready),                                                                    //     sink1.ready
		.sink1_valid         (cmd_demux_003_src19_valid),                                                                    //          .valid
		.sink1_channel       (cmd_demux_003_src19_channel),                                                                  //          .channel
		.sink1_data          (cmd_demux_003_src19_data),                                                                     //          .data
		.sink1_startofpacket (cmd_demux_003_src19_startofpacket),                                                            //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src19_endofpacket),                                                              //          .endofpacket
		.sink2_ready         (cmd_demux_004_src22_ready),                                                                    //     sink2.ready
		.sink2_valid         (cmd_demux_004_src22_valid),                                                                    //          .valid
		.sink2_channel       (cmd_demux_004_src22_channel),                                                                  //          .channel
		.sink2_data          (cmd_demux_004_src22_data),                                                                     //          .data
		.sink2_startofpacket (cmd_demux_004_src22_startofpacket),                                                            //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src22_endofpacket),                                                              //          .endofpacket
		.sink3_ready         (arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_ready),                   //     sink3.ready
		.sink3_valid         (arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_valid),                   //          .valid
		.sink3_channel       (arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_channel),                 //          .channel
		.sink3_data          (arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_data),                    //          .data
		.sink3_startofpacket (arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket),           //          .startofpacket
		.sink3_endofpacket   (arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket),             //          .endofpacket
		.sink4_ready         (arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_ready),                   //     sink4.ready
		.sink4_valid         (arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_valid),                   //          .valid
		.sink4_channel       (arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_channel),                 //          .channel
		.sink4_data          (arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_data),                    //          .data
		.sink4_startofpacket (arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket),           //          .startofpacket
		.sink4_endofpacket   (arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket),             //          .endofpacket
		.sink5_ready         (video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_ready),         //     sink5.ready
		.sink5_valid         (video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_valid),         //          .valid
		.sink5_channel       (video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink5_data          (video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_data),          //          .data
		.sink5_startofpacket (video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink5_endofpacket   (video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_016 cmd_mux_027 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_027_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_027_src_valid),                                           //          .valid
		.src_data            (cmd_mux_027_src_data),                                            //          .data
		.src_channel         (cmd_mux_027_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_027_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_027_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_002_src23_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src23_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_002_src23_channel),                                     //          .channel
		.sink0_data          (cmd_demux_002_src23_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_002_src23_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src23_endofpacket),                                 //          .endofpacket
		.sink1_ready         (cmd_demux_003_src20_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src20_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_003_src20_channel),                                     //          .channel
		.sink1_data          (cmd_demux_003_src20_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_003_src20_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src20_endofpacket),                                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src23_ready),                                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src23_valid),                                       //          .valid
		.sink2_channel       (cmd_demux_004_src23_channel),                                     //          .channel
		.sink2_data          (cmd_demux_004_src23_data),                                        //          .data
		.sink2_startofpacket (cmd_demux_004_src23_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src23_endofpacket),                                 //          .endofpacket
		.sink3_ready         (cmd_demux_011_src0_ready),                                        //     sink3.ready
		.sink3_valid         (cmd_demux_011_src0_valid),                                        //          .valid
		.sink3_channel       (cmd_demux_011_src0_channel),                                      //          .channel
		.sink3_data          (cmd_demux_011_src0_data),                                         //          .data
		.sink3_startofpacket (cmd_demux_011_src0_startofpacket),                                //          .startofpacket
		.sink3_endofpacket   (cmd_demux_011_src0_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_028 cmd_mux_028 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_028_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_028_src_valid),                                           //          .valid
		.src_data            (cmd_mux_028_src_data),                                            //          .data
		.src_channel         (cmd_mux_028_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_028_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_028_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_002_src24_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src24_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_002_src24_channel),                                     //          .channel
		.sink0_data          (cmd_demux_002_src24_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_002_src24_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src24_endofpacket),                                 //          .endofpacket
		.sink1_ready         (cmd_demux_003_src21_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src21_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_003_src21_channel),                                     //          .channel
		.sink1_data          (cmd_demux_003_src21_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_003_src21_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src21_endofpacket),                                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src24_ready),                                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src24_valid),                                       //          .valid
		.sink2_channel       (cmd_demux_004_src24_channel),                                     //          .channel
		.sink2_data          (cmd_demux_004_src24_data),                                        //          .data
		.sink2_startofpacket (cmd_demux_004_src24_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src24_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_028 cmd_mux_029 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_029_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_029_src_valid),                                           //          .valid
		.src_data            (cmd_mux_029_src_data),                                            //          .data
		.src_channel         (cmd_mux_029_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_029_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_029_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_002_src25_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src25_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_002_src25_channel),                                     //          .channel
		.sink0_data          (cmd_demux_002_src25_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_002_src25_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src25_endofpacket),                                 //          .endofpacket
		.sink1_ready         (cmd_demux_003_src22_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src22_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_003_src22_channel),                                     //          .channel
		.sink1_data          (cmd_demux_003_src22_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_003_src22_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src22_endofpacket),                                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src25_ready),                                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src25_valid),                                       //          .valid
		.sink2_channel       (cmd_demux_004_src25_channel),                                     //          .channel
		.sink2_data          (cmd_demux_004_src25_data),                                        //          .data
		.sink2_startofpacket (cmd_demux_004_src25_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src25_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_028 cmd_mux_030 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_030_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_030_src_valid),                                           //          .valid
		.src_data            (cmd_mux_030_src_data),                                            //          .data
		.src_channel         (cmd_mux_030_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_030_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_030_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_002_src26_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_002_src26_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_002_src26_channel),                                     //          .channel
		.sink0_data          (cmd_demux_002_src26_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_002_src26_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src26_endofpacket),                                 //          .endofpacket
		.sink1_ready         (cmd_demux_003_src23_ready),                                       //     sink1.ready
		.sink1_valid         (cmd_demux_003_src23_valid),                                       //          .valid
		.sink1_channel       (cmd_demux_003_src23_channel),                                     //          .channel
		.sink1_data          (cmd_demux_003_src23_data),                                        //          .data
		.sink1_startofpacket (cmd_demux_003_src23_startofpacket),                               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src23_endofpacket),                                 //          .endofpacket
		.sink2_ready         (cmd_demux_004_src26_ready),                                       //     sink2.ready
		.sink2_valid         (cmd_demux_004_src26_valid),                                       //          .valid
		.sink2_channel       (cmd_demux_004_src26_channel),                                     //          .channel
		.sink2_data          (cmd_demux_004_src26_data),                                        //          .data
		.sink2_startofpacket (cmd_demux_004_src26_startofpacket),                               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src26_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_031 cmd_mux_031 (
		.clk                 (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset               (JTAG_UART_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_031_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_031_src_valid),                       //          .valid
		.src_data            (cmd_mux_031_src_data),                        //          .data
		.src_channel         (cmd_mux_031_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_031_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_031_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_003_src24_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_003_src24_valid),                   //          .valid
		.sink0_channel       (cmd_demux_003_src24_channel),                 //          .channel
		.sink0_data          (cmd_demux_003_src24_data),                    //          .data
		.sink0_startofpacket (cmd_demux_003_src24_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src24_endofpacket)              //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_018 cmd_mux_032 (
		.clk                 (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset               (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_032_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_032_src_valid),                            //          .valid
		.src_data            (cmd_mux_032_src_data),                             //          .data
		.src_channel         (cmd_mux_032_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_032_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_032_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_003_src25_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_003_src25_valid),                        //          .valid
		.sink0_channel       (cmd_demux_003_src25_channel),                      //          .channel
		.sink0_data          (cmd_demux_003_src25_data),                         //          .data
		.sink0_startofpacket (cmd_demux_003_src25_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src25_endofpacket),                  //          .endofpacket
		.sink1_ready         (cmd_demux_005_src1_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_005_src1_valid),                         //          .valid
		.sink1_channel       (cmd_demux_005_src1_channel),                       //          .channel
		.sink1_data          (cmd_demux_005_src1_data),                          //          .data
		.sink1_startofpacket (cmd_demux_005_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_005_src1_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_031 cmd_mux_033 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_033_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_033_src_valid),                                           //          .valid
		.src_data            (cmd_mux_033_src_data),                                            //          .data
		.src_channel         (cmd_mux_033_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_033_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_033_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_003_src26_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_003_src26_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_003_src26_channel),                                     //          .channel
		.sink0_data          (cmd_demux_003_src26_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_003_src26_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src26_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_031 cmd_mux_034 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_034_src_ready),                                           //       src.ready
		.src_valid           (cmd_mux_034_src_valid),                                           //          .valid
		.src_data            (cmd_mux_034_src_data),                                            //          .data
		.src_channel         (cmd_mux_034_src_channel),                                         //          .channel
		.src_startofpacket   (cmd_mux_034_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (cmd_mux_034_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (cmd_demux_003_src27_ready),                                       //     sink0.ready
		.sink0_valid         (cmd_demux_003_src27_valid),                                       //          .valid
		.sink0_channel       (cmd_demux_003_src27_channel),                                     //          .channel
		.sink0_data          (cmd_demux_003_src27_data),                                        //          .data
		.sink0_startofpacket (cmd_demux_003_src27_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src27_endofpacket)                                  //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_028 cmd_mux_035 (
		.clk                 (System_PLL_sys_clk_clk),                                                               //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready           (cmd_mux_035_src_ready),                                                                //       src.ready
		.src_valid           (cmd_mux_035_src_valid),                                                                //          .valid
		.src_data            (cmd_mux_035_src_data),                                                                 //          .data
		.src_channel         (cmd_mux_035_src_channel),                                                              //          .channel
		.src_startofpacket   (cmd_mux_035_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_035_src_endofpacket),                                                          //          .endofpacket
		.sink0_ready         (cmd_demux_005_src2_ready),                                                             //     sink0.ready
		.sink0_valid         (cmd_demux_005_src2_valid),                                                             //          .valid
		.sink0_channel       (cmd_demux_005_src2_channel),                                                           //          .channel
		.sink0_data          (cmd_demux_005_src2_data),                                                              //          .data
		.sink0_startofpacket (cmd_demux_005_src2_startofpacket),                                                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_005_src2_endofpacket),                                                       //          .endofpacket
		.sink1_ready         (cmd_demux_006_src1_ready),                                                             //     sink1.ready
		.sink1_valid         (cmd_demux_006_src1_valid),                                                             //          .valid
		.sink1_channel       (cmd_demux_006_src1_channel),                                                           //          .channel
		.sink1_data          (cmd_demux_006_src1_data),                                                              //          .data
		.sink1_startofpacket (cmd_demux_006_src1_startofpacket),                                                     //          .startofpacket
		.sink1_endofpacket   (cmd_demux_006_src1_endofpacket),                                                       //          .endofpacket
		.sink2_ready         (vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_valid),         //          .valid
		.sink2_channel       (vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_channel),       //          .channel
		.sink2_data          (vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_data),          //          .data
		.sink2_startofpacket (vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_mux_018 cmd_mux_036 (
		.clk                 (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset               (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_036_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_036_src_valid),                   //          .valid
		.src_data            (cmd_mux_036_src_data),                    //          .data
		.src_channel         (cmd_mux_036_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_036_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_036_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_002_src27_ready),               //     sink0.ready
		.sink0_valid         (cmd_demux_002_src27_valid),               //          .valid
		.sink0_channel       (cmd_demux_002_src27_channel),             //          .channel
		.sink0_data          (cmd_demux_002_src27_data),                //          .data
		.sink0_startofpacket (cmd_demux_002_src27_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src27_endofpacket),         //          .endofpacket
		.sink1_ready         (cmd_demux_006_src2_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_006_src2_valid),                //          .valid
		.sink1_channel       (cmd_demux_006_src2_channel),              //          .channel
		.sink1_data          (cmd_demux_006_src2_data),                 //          .data
		.sink1_startofpacket (cmd_demux_006_src2_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_006_src2_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                            //      sink.ready
		.sink_channel       (router_013_src_channel),                                          //          .channel
		.sink_data          (router_013_src_data),                                             //          .data
		.sink_startofpacket (router_013_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_013_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                            //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                            //          .valid
		.src0_data          (rsp_demux_src0_data),                                             //          .data
		.src0_channel       (rsp_demux_src0_channel),                                          //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                      //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                            //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                            //          .valid
		.src1_data          (rsp_demux_src1_data),                                             //          .data
		.src1_channel       (rsp_demux_src1_channel),                                          //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                    //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                      //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                            //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                            //          .valid
		.src2_data          (rsp_demux_src2_data),                                             //          .data
		.src2_channel       (rsp_demux_src2_channel),                                          //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                                    //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                                      //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                                            //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                                            //          .valid
		.src3_data          (rsp_demux_src3_data),                                             //          .data
		.src3_channel       (rsp_demux_src3_channel),                                          //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                                    //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket),                                      //          .endofpacket
		.src4_ready         (rsp_demux_src4_ready),                                            //      src4.ready
		.src4_valid         (rsp_demux_src4_valid),                                            //          .valid
		.src4_data          (rsp_demux_src4_data),                                             //          .data
		.src4_channel       (rsp_demux_src4_channel),                                          //          .channel
		.src4_startofpacket (rsp_demux_src4_startofpacket),                                    //          .startofpacket
		.src4_endofpacket   (rsp_demux_src4_endofpacket)                                       //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                            //      sink.ready
		.sink_channel       (router_014_src_channel),                                          //          .channel
		.sink_data          (router_014_src_data),                                             //          .data
		.sink_startofpacket (router_014_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_014_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_001_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_001_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_001_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_001_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_001_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_001_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_001_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_001_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_001_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_001_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_001_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_001_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_001_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                            //      sink.ready
		.sink_channel       (router_015_src_channel),                                          //          .channel
		.sink_data          (router_015_src_data),                                             //          .data
		.sink_startofpacket (router_015_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_015_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_002_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_002_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_002_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_002_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_002_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_002_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_002_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_002_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_002_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_002_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_002_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_002_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_002_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_002_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_002_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_002_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_002_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_002_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_002_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                            //      sink.ready
		.sink_channel       (router_016_src_channel),                                          //          .channel
		.sink_data          (router_016_src_data),                                             //          .data
		.sink_startofpacket (router_016_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_016_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_003_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_003_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_003_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_003_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_003_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_003_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_003_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_003_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_003_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_003_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_003_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_003_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_003_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_003_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_003_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_003_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_003_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_003_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_003_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                                            //      sink.ready
		.sink_channel       (router_017_src_channel),                                          //          .channel
		.sink_data          (router_017_src_data),                                             //          .data
		.sink_startofpacket (router_017_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_017_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_004_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_004_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_004_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_004_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_004_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_004_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_004_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_004_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_004_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_004_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_004_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_004_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_004_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_004_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                                            //      sink.ready
		.sink_channel       (router_018_src_channel),                                          //          .channel
		.sink_data          (router_018_src_data),                                             //          .data
		.sink_startofpacket (router_018_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_018_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_005_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_005_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_005_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_005_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_005_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_005_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_005_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_005_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_005_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_005_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_005_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_005_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_005_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_005_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                                            //      sink.ready
		.sink_channel       (router_019_src_channel),                                          //          .channel
		.sink_data          (router_019_src_data),                                             //          .data
		.sink_startofpacket (router_019_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_019_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_006_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_006_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_006_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_006_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_006_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_006_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_006_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_006_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_006_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_006_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_006_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_006_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_006_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_006_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_006_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_006_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_006_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_006_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_006_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                                            //      sink.ready
		.sink_channel       (router_020_src_channel),                                          //          .channel
		.sink_data          (router_020_src_data),                                             //          .data
		.sink_startofpacket (router_020_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_020_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_007_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_007_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_007_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_007_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_007_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_007_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_007_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_007_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_007_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_007_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_007_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_007_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_007_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_007_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_007_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_007_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_007_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_007_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_007_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                                            //      sink.ready
		.sink_channel       (router_021_src_channel),                                          //          .channel
		.sink_data          (router_021_src_data),                                             //          .data
		.sink_startofpacket (router_021_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_021_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_008_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_008_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_008_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_008_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_008_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_008_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_008_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_008_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_008_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_008_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_008_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_008_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_008_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_008_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_008_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_008_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_008_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_008_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_008_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                                            //      sink.ready
		.sink_channel       (router_022_src_channel),                                          //          .channel
		.sink_data          (router_022_src_data),                                             //          .data
		.sink_startofpacket (router_022_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_022_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_009_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_009_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_009_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_009_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_009_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_009_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_009_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_009_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_009_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_009_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_009_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_009_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_009_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_009_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_009_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_009_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_009_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_009_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_009_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                                            //      sink.ready
		.sink_channel       (router_023_src_channel),                                          //          .channel
		.sink_data          (router_023_src_data),                                             //          .data
		.sink_startofpacket (router_023_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_023_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_010_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_010_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_010_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_010_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_010_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_010_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_010_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_010_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_010_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_010_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_010_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_010_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_010_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_010_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_010_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_010_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_010_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_010_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_010_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                                            //      sink.ready
		.sink_channel       (router_024_src_channel),                                          //          .channel
		.sink_data          (router_024_src_data),                                             //          .data
		.sink_startofpacket (router_024_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_024_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_011_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_011_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_011_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_011_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_011_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_011_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_011_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_011_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_011_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_011_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_011_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_011_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_011_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_011_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_011_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_011_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_011_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_011_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_011_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                                            //      sink.ready
		.sink_channel       (router_025_src_channel),                                          //          .channel
		.sink_data          (router_025_src_data),                                             //          .data
		.sink_startofpacket (router_025_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_025_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_012_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_012_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_012_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_012_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_012_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_012_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_012_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_012_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_012_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_012_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_012_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_012_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_012_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_012_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_012_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_012_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_012_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_012_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_012_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_012_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                                            //      sink.ready
		.sink_channel       (router_026_src_channel),                                          //          .channel
		.sink_data          (router_026_src_data),                                             //          .data
		.sink_startofpacket (router_026_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_026_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_013_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_013_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_013_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_013_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_013_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_013_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_013_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_013_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_013_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_013_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_013_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_013_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_013_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_013_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_013_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_013_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_013_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_013_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_013_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_013_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_013_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_013_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_013_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_013_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_013_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                                            //      sink.ready
		.sink_channel       (router_027_src_channel),                                          //          .channel
		.sink_data          (router_027_src_data),                                             //          .data
		.sink_startofpacket (router_027_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_027_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_014_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_014_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_014_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_014_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_014_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_014_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_014_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_014_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_014_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_014_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_014_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_014_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_014_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_014_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_014_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_014_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_014_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_014_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_014_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_014_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_014_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_014_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_014_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_014_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_014_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                                            //      sink.ready
		.sink_channel       (router_028_src_channel),                                          //          .channel
		.sink_data          (router_028_src_data),                                             //          .data
		.sink_startofpacket (router_028_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_028_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_015_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_015_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_015_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_015_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_015_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_015_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_015_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_015_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_015_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_015_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_015_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_015_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_015_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_015_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_015_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_015_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_015_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_015_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_015_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_015_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_015_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_015_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_015_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_015_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_015_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_016 rsp_demux_016 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                                            //      sink.ready
		.sink_channel       (router_029_src_channel),                                          //          .channel
		.sink_data          (router_029_src_data),                                             //          .data
		.sink_startofpacket (router_029_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_029_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_016_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_016_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_016_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_016_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_016_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_016_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_016_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_016_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_016_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_016_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_016_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_016_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_016_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_016_src3_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_016 rsp_demux_017 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                                            //      sink.ready
		.sink_channel       (router_030_src_channel),                                          //          .channel
		.sink_data          (router_030_src_data),                                             //          .data
		.sink_startofpacket (router_030_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_030_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_017_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_017_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_017_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_017_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_017_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_017_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_017_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_017_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_017_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_017_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_017_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_017_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_017_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_017_src3_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_018 rsp_demux_018 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                                            //      sink.ready
		.sink_channel       (router_031_src_channel),                                          //          .channel
		.sink_data          (router_031_src_data),                                             //          .data
		.sink_startofpacket (router_031_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_031_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_018_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_018_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_018_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_018_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_018_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_018_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_018_src1_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_018 rsp_demux_019 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                                            //      sink.ready
		.sink_channel       (router_032_src_channel),                                          //          .channel
		.sink_data          (router_032_src_data),                                             //          .data
		.sink_startofpacket (router_032_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_032_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_019_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_019_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_019_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_018 rsp_demux_020 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_033_src_ready),                                            //      sink.ready
		.sink_channel       (router_033_src_channel),                                          //          .channel
		.sink_data          (router_033_src_data),                                             //          .data
		.sink_startofpacket (router_033_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_033_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_033_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_020_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_020_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_020_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_018 rsp_demux_021 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_034_src_ready),                                            //      sink.ready
		.sink_channel       (router_034_src_channel),                                          //          .channel
		.sink_data          (router_034_src_data),                                             //          .data
		.sink_startofpacket (router_034_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_034_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_034_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_021_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_021_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_021_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_021_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_021_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_021_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_021_src1_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_018 rsp_demux_022 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (JTAG_UART_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_035_src_ready),                        //      sink.ready
		.sink_channel       (router_035_src_channel),                      //          .channel
		.sink_data          (router_035_src_data),                         //          .data
		.sink_startofpacket (router_035_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_035_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_035_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_022_src0_data),                     //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_022_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_022_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_022_src1_data),                     //          .data
		.src1_channel       (rsp_demux_022_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_022_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_022_src1_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_023 rsp_demux_023 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_036_src_ready),                                            //      sink.ready
		.sink_channel       (router_036_src_channel),                                          //          .channel
		.sink_data          (router_036_src_data),                                             //          .data
		.sink_startofpacket (router_036_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_036_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_036_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_023_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_023_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_023_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_023_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_023_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_023_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_023_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_023_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_023_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_023_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_023_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_023_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_023_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_023_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_023_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_023_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_023_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_023_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_023_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_023_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_023_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_023_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_023_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_023_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_023_src4_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_016 rsp_demux_024 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_037_src_ready),                                            //      sink.ready
		.sink_channel       (router_037_src_channel),                                          //          .channel
		.sink_data          (router_037_src_data),                                             //          .data
		.sink_startofpacket (router_037_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_037_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_037_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_024_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_024_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_024_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_024_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_024_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_024_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_024_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_024_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_024_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_024_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_024_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_024_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_024_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_024_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_024_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_024_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_024_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_024_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_024_src3_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_025 rsp_demux_025 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_038_src_ready),                                            //      sink.ready
		.sink_channel       (router_038_src_channel),                                          //          .channel
		.sink_data          (router_038_src_data),                                             //          .data
		.sink_startofpacket (router_038_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_038_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_038_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_025_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_025_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_025_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_025_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_025_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_025_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_025_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_025_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_025_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_025_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_025_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_025_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_025_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_025_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_025_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_025_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_025_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_025_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_025_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_025_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_025_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_025_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_025_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_025_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_025_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_025_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_025_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_025_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_025_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_025_src4_endofpacket),                                  //          .endofpacket
		.src5_ready         (rsp_demux_025_src5_ready),                                        //      src5.ready
		.src5_valid         (rsp_demux_025_src5_valid),                                        //          .valid
		.src5_data          (rsp_demux_025_src5_data),                                         //          .data
		.src5_channel       (rsp_demux_025_src5_channel),                                      //          .channel
		.src5_startofpacket (rsp_demux_025_src5_startofpacket),                                //          .startofpacket
		.src5_endofpacket   (rsp_demux_025_src5_endofpacket),                                  //          .endofpacket
		.src6_ready         (rsp_demux_025_src6_ready),                                        //      src6.ready
		.src6_valid         (rsp_demux_025_src6_valid),                                        //          .valid
		.src6_data          (rsp_demux_025_src6_data),                                         //          .data
		.src6_channel       (rsp_demux_025_src6_channel),                                      //          .channel
		.src6_startofpacket (rsp_demux_025_src6_startofpacket),                                //          .startofpacket
		.src6_endofpacket   (rsp_demux_025_src6_endofpacket),                                  //          .endofpacket
		.src7_ready         (rsp_demux_025_src7_ready),                                        //      src7.ready
		.src7_valid         (rsp_demux_025_src7_valid),                                        //          .valid
		.src7_data          (rsp_demux_025_src7_data),                                         //          .data
		.src7_channel       (rsp_demux_025_src7_channel),                                      //          .channel
		.src7_startofpacket (rsp_demux_025_src7_startofpacket),                                //          .startofpacket
		.src7_endofpacket   (rsp_demux_025_src7_endofpacket),                                  //          .endofpacket
		.src8_ready         (rsp_demux_025_src8_ready),                                        //      src8.ready
		.src8_valid         (rsp_demux_025_src8_valid),                                        //          .valid
		.src8_data          (rsp_demux_025_src8_data),                                         //          .data
		.src8_channel       (rsp_demux_025_src8_channel),                                      //          .channel
		.src8_startofpacket (rsp_demux_025_src8_startofpacket),                                //          .startofpacket
		.src8_endofpacket   (rsp_demux_025_src8_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_026 rsp_demux_026 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_039_src_ready),                                            //      sink.ready
		.sink_channel       (router_039_src_channel),                                          //          .channel
		.sink_data          (router_039_src_data),                                             //          .data
		.sink_startofpacket (router_039_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_039_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_039_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_026_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_026_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_026_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_026_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_026_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_026_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_026_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_026_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_026_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_026_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_026_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_026_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_026_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_026_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_026_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_026_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_026_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_026_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_026_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_026_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_026_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_026_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_026_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_026_src3_endofpacket),                                  //          .endofpacket
		.src4_ready         (rsp_demux_026_src4_ready),                                        //      src4.ready
		.src4_valid         (rsp_demux_026_src4_valid),                                        //          .valid
		.src4_data          (rsp_demux_026_src4_data),                                         //          .data
		.src4_channel       (rsp_demux_026_src4_channel),                                      //          .channel
		.src4_startofpacket (rsp_demux_026_src4_startofpacket),                                //          .startofpacket
		.src4_endofpacket   (rsp_demux_026_src4_endofpacket),                                  //          .endofpacket
		.src5_ready         (rsp_demux_026_src5_ready),                                        //      src5.ready
		.src5_valid         (rsp_demux_026_src5_valid),                                        //          .valid
		.src5_data          (rsp_demux_026_src5_data),                                         //          .data
		.src5_channel       (rsp_demux_026_src5_channel),                                      //          .channel
		.src5_startofpacket (rsp_demux_026_src5_startofpacket),                                //          .startofpacket
		.src5_endofpacket   (rsp_demux_026_src5_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_016 rsp_demux_027 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_040_src_ready),                                            //      sink.ready
		.sink_channel       (router_040_src_channel),                                          //          .channel
		.sink_data          (router_040_src_data),                                             //          .data
		.sink_startofpacket (router_040_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_040_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_040_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_027_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_027_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_027_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_027_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_027_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_027_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_027_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_027_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_027_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_027_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_027_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_027_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_027_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_027_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_027_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_027_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_027_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_027_src2_endofpacket),                                  //          .endofpacket
		.src3_ready         (rsp_demux_027_src3_ready),                                        //      src3.ready
		.src3_valid         (rsp_demux_027_src3_valid),                                        //          .valid
		.src3_data          (rsp_demux_027_src3_data),                                         //          .data
		.src3_channel       (rsp_demux_027_src3_channel),                                      //          .channel
		.src3_startofpacket (rsp_demux_027_src3_startofpacket),                                //          .startofpacket
		.src3_endofpacket   (rsp_demux_027_src3_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_028 rsp_demux_028 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_041_src_ready),                                            //      sink.ready
		.sink_channel       (router_041_src_channel),                                          //          .channel
		.sink_data          (router_041_src_data),                                             //          .data
		.sink_startofpacket (router_041_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_041_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_041_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_028_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_028_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_028_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_028_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_028_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_028_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_028_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_028_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_028_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_028_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_028_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_028_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_028_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_028_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_028_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_028_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_028_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_028_src2_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_028 rsp_demux_029 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_042_src_ready),                                            //      sink.ready
		.sink_channel       (router_042_src_channel),                                          //          .channel
		.sink_data          (router_042_src_data),                                             //          .data
		.sink_startofpacket (router_042_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_042_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_042_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_029_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_029_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_029_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_029_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_029_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_029_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_029_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_029_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_029_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_029_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_029_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_029_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_029_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_029_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_029_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_029_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_029_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_029_src2_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_028 rsp_demux_030 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_043_src_ready),                                            //      sink.ready
		.sink_channel       (router_043_src_channel),                                          //          .channel
		.sink_data          (router_043_src_data),                                             //          .data
		.sink_startofpacket (router_043_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_043_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_043_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_030_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_030_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_030_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_030_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_030_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_030_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_030_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_030_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_030_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_030_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_030_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_030_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_030_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_030_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_030_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_030_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_030_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_030_src2_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_011 rsp_demux_031 (
		.clk                (System_PLL_sys_clk_clk),                      //       clk.clk
		.reset              (JTAG_UART_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_044_src_ready),                        //      sink.ready
		.sink_channel       (router_044_src_channel),                      //          .channel
		.sink_data          (router_044_src_data),                         //          .data
		.sink_startofpacket (router_044_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_044_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_044_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_031_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_031_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_031_src0_data),                     //          .data
		.src0_channel       (rsp_demux_031_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_031_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_031_src0_endofpacket)               //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_018 rsp_demux_032 (
		.clk                (System_PLL_sys_clk_clk),                           //       clk.clk
		.reset              (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_045_src_ready),                             //      sink.ready
		.sink_channel       (router_045_src_channel),                           //          .channel
		.sink_data          (router_045_src_data),                              //          .data
		.sink_startofpacket (router_045_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_045_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_045_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_032_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_032_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_032_src0_data),                          //          .data
		.src0_channel       (rsp_demux_032_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_032_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_032_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_032_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_032_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_032_src1_data),                          //          .data
		.src1_channel       (rsp_demux_032_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_032_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_032_src1_endofpacket)                    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_011 rsp_demux_033 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_046_src_ready),                                            //      sink.ready
		.sink_channel       (router_046_src_channel),                                          //          .channel
		.sink_data          (router_046_src_data),                                             //          .data
		.sink_startofpacket (router_046_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_046_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_046_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_033_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_033_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_033_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_033_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_033_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_033_src0_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_cmd_demux_011 rsp_demux_034 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_047_src_ready),                                            //      sink.ready
		.sink_channel       (router_047_src_channel),                                          //          .channel
		.sink_data          (router_047_src_data),                                             //          .data
		.sink_startofpacket (router_047_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_047_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_047_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_034_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_034_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_034_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_034_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_034_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_034_src0_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_028 rsp_demux_035 (
		.clk                (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset              (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_048_src_ready),                                            //      sink.ready
		.sink_channel       (router_048_src_channel),                                          //          .channel
		.sink_data          (router_048_src_data),                                             //          .data
		.sink_startofpacket (router_048_src_startofpacket),                                    //          .startofpacket
		.sink_endofpacket   (router_048_src_endofpacket),                                      //          .endofpacket
		.sink_valid         (router_048_src_valid),                                            //          .valid
		.src0_ready         (rsp_demux_035_src0_ready),                                        //      src0.ready
		.src0_valid         (rsp_demux_035_src0_valid),                                        //          .valid
		.src0_data          (rsp_demux_035_src0_data),                                         //          .data
		.src0_channel       (rsp_demux_035_src0_channel),                                      //          .channel
		.src0_startofpacket (rsp_demux_035_src0_startofpacket),                                //          .startofpacket
		.src0_endofpacket   (rsp_demux_035_src0_endofpacket),                                  //          .endofpacket
		.src1_ready         (rsp_demux_035_src1_ready),                                        //      src1.ready
		.src1_valid         (rsp_demux_035_src1_valid),                                        //          .valid
		.src1_data          (rsp_demux_035_src1_data),                                         //          .data
		.src1_channel       (rsp_demux_035_src1_channel),                                      //          .channel
		.src1_startofpacket (rsp_demux_035_src1_startofpacket),                                //          .startofpacket
		.src1_endofpacket   (rsp_demux_035_src1_endofpacket),                                  //          .endofpacket
		.src2_ready         (rsp_demux_035_src2_ready),                                        //      src2.ready
		.src2_valid         (rsp_demux_035_src2_valid),                                        //          .valid
		.src2_data          (rsp_demux_035_src2_data),                                         //          .data
		.src2_channel       (rsp_demux_035_src2_channel),                                      //          .channel
		.src2_startofpacket (rsp_demux_035_src2_startofpacket),                                //          .startofpacket
		.src2_endofpacket   (rsp_demux_035_src2_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_demux_018 rsp_demux_036 (
		.clk                (System_PLL_sys_clk_clk),                  //       clk.clk
		.reset              (Nios2_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_049_src_ready),                    //      sink.ready
		.sink_channel       (router_049_src_channel),                  //          .channel
		.sink_data          (router_049_src_data),                     //          .data
		.sink_startofpacket (router_049_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_049_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_049_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_036_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_036_src0_valid),                //          .valid
		.src0_data          (rsp_demux_036_src0_data),                 //          .data
		.src0_channel       (rsp_demux_036_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_036_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_036_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_036_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_036_src1_valid),                //          .valid
		.src1_data          (rsp_demux_036_src1_data),                 //          .data
		.src1_channel       (rsp_demux_036_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_036_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_036_src1_endofpacket)           //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                        //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                        //          .valid
		.src_data             (rsp_mux_src_data),                                                         //          .data
		.src_channel          (rsp_mux_src_channel),                                                      //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                                     //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                                     //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                                   //          .channel
		.sink0_data           (rsp_demux_src0_data),                                                      //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                                               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                                 //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                               //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                                 //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                               //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                                 //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                               //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                               //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                               //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                 //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                               //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                 //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                               //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                                 //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                               //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                                 //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                               //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                                 //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                               //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                  //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                           //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                                                 //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                                                 //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                                               //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                                  //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                                         //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                                           //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                                 //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                                 //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                               //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                                  //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                         //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                                           //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                                 //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                                 //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                               //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                                  //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                         //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                                           //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                                                 //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                                                 //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                                               //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                                                  //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                                         //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                                           //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                                                 //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                                                 //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                                               //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                                                  //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                                         //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                                           //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                                                 //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                                                 //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                                               //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                                                  //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                                         //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                                           //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                                                 //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                                                 //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                                               //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                                                  //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                                         //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                                           //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                                                 //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                                                 //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                                               //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                                                  //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                                         //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                                           //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                                                 //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                                                 //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                                               //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                                                  //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                                         //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                                           //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                                                 //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                                                 //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                                               //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                                                  //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),                                         //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                                           //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                                                 //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                                                 //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                                               //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                                                  //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),                                         //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                                                    //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                                                    //          .valid
		.src_data             (rsp_mux_001_src_data),                                                     //          .data
		.src_channel          (rsp_mux_001_src_channel),                                                  //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                                              //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                                                     //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                                                     //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                                                   //          .channel
		.sink0_data           (rsp_demux_src1_data),                                                      //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),                                             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),                                               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src1_ready),                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src1_valid),                                                 //          .valid
		.sink1_channel        (rsp_demux_001_src1_channel),                                               //          .channel
		.sink1_data           (rsp_demux_001_src1_data),                                                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src1_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src1_endofpacket),                                           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src1_ready),                                                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src1_valid),                                                 //          .valid
		.sink2_channel        (rsp_demux_002_src1_channel),                                               //          .channel
		.sink2_data           (rsp_demux_002_src1_data),                                                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src1_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src1_endofpacket),                                           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src1_ready),                                                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src1_valid),                                                 //          .valid
		.sink3_channel        (rsp_demux_003_src1_channel),                                               //          .channel
		.sink3_data           (rsp_demux_003_src1_data),                                                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src1_startofpacket),                                         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src1_endofpacket),                                           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src1_ready),                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src1_valid),                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src1_channel),                                               //          .channel
		.sink4_data           (rsp_demux_004_src1_data),                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src1_startofpacket),                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src1_endofpacket),                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src1_ready),                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src1_valid),                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src1_channel),                                               //          .channel
		.sink5_data           (rsp_demux_005_src1_data),                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src1_startofpacket),                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src1_endofpacket),                                           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src1_ready),                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src1_valid),                                                 //          .valid
		.sink6_channel        (rsp_demux_006_src1_channel),                                               //          .channel
		.sink6_data           (rsp_demux_006_src1_data),                                                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src1_startofpacket),                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src1_endofpacket),                                           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src1_ready),                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src1_valid),                                                 //          .valid
		.sink7_channel        (rsp_demux_007_src1_channel),                                               //          .channel
		.sink7_data           (rsp_demux_007_src1_data),                                                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src1_startofpacket),                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src1_endofpacket),                                           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                                                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                                                 //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                                               //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                                                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),                                         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                                           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                                                 //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                                               //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                                                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                                           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                                                 //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                                               //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                                                  //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),                                           //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                                                 //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                                                 //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),                                               //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                                                  //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),                                         //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket),                                           //          .endofpacket
		.sink12_ready         (rsp_demux_012_src1_ready),                                                 //    sink12.ready
		.sink12_valid         (rsp_demux_012_src1_valid),                                                 //          .valid
		.sink12_channel       (rsp_demux_012_src1_channel),                                               //          .channel
		.sink12_data          (rsp_demux_012_src1_data),                                                  //          .data
		.sink12_startofpacket (rsp_demux_012_src1_startofpacket),                                         //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src1_endofpacket),                                           //          .endofpacket
		.sink13_ready         (rsp_demux_013_src1_ready),                                                 //    sink13.ready
		.sink13_valid         (rsp_demux_013_src1_valid),                                                 //          .valid
		.sink13_channel       (rsp_demux_013_src1_channel),                                               //          .channel
		.sink13_data          (rsp_demux_013_src1_data),                                                  //          .data
		.sink13_startofpacket (rsp_demux_013_src1_startofpacket),                                         //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src1_endofpacket),                                           //          .endofpacket
		.sink14_ready         (rsp_demux_014_src1_ready),                                                 //    sink14.ready
		.sink14_valid         (rsp_demux_014_src1_valid),                                                 //          .valid
		.sink14_channel       (rsp_demux_014_src1_channel),                                               //          .channel
		.sink14_data          (rsp_demux_014_src1_data),                                                  //          .data
		.sink14_startofpacket (rsp_demux_014_src1_startofpacket),                                         //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src1_endofpacket),                                           //          .endofpacket
		.sink15_ready         (rsp_demux_015_src1_ready),                                                 //    sink15.ready
		.sink15_valid         (rsp_demux_015_src1_valid),                                                 //          .valid
		.sink15_channel       (rsp_demux_015_src1_channel),                                               //          .channel
		.sink15_data          (rsp_demux_015_src1_data),                                                  //          .data
		.sink15_startofpacket (rsp_demux_015_src1_startofpacket),                                         //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src1_endofpacket),                                           //          .endofpacket
		.sink16_ready         (rsp_demux_016_src1_ready),                                                 //    sink16.ready
		.sink16_valid         (rsp_demux_016_src1_valid),                                                 //          .valid
		.sink16_channel       (rsp_demux_016_src1_channel),                                               //          .channel
		.sink16_data          (rsp_demux_016_src1_data),                                                  //          .data
		.sink16_startofpacket (rsp_demux_016_src1_startofpacket),                                         //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src1_endofpacket),                                           //          .endofpacket
		.sink17_ready         (rsp_demux_017_src1_ready),                                                 //    sink17.ready
		.sink17_valid         (rsp_demux_017_src1_valid),                                                 //          .valid
		.sink17_channel       (rsp_demux_017_src1_channel),                                               //          .channel
		.sink17_data          (rsp_demux_017_src1_data),                                                  //          .data
		.sink17_startofpacket (rsp_demux_017_src1_startofpacket),                                         //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src1_endofpacket),                                           //          .endofpacket
		.sink18_ready         (rsp_demux_018_src1_ready),                                                 //    sink18.ready
		.sink18_valid         (rsp_demux_018_src1_valid),                                                 //          .valid
		.sink18_channel       (rsp_demux_018_src1_channel),                                               //          .channel
		.sink18_data          (rsp_demux_018_src1_data),                                                  //          .data
		.sink18_startofpacket (rsp_demux_018_src1_startofpacket),                                         //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src1_endofpacket),                                           //          .endofpacket
		.sink19_ready         (rsp_demux_019_src1_ready),                                                 //    sink19.ready
		.sink19_valid         (rsp_demux_019_src1_valid),                                                 //          .valid
		.sink19_channel       (rsp_demux_019_src1_channel),                                               //          .channel
		.sink19_data          (rsp_demux_019_src1_data),                                                  //          .data
		.sink19_startofpacket (rsp_demux_019_src1_startofpacket),                                         //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src1_endofpacket),                                           //          .endofpacket
		.sink20_ready         (rsp_demux_020_src1_ready),                                                 //    sink20.ready
		.sink20_valid         (rsp_demux_020_src1_valid),                                                 //          .valid
		.sink20_channel       (rsp_demux_020_src1_channel),                                               //          .channel
		.sink20_data          (rsp_demux_020_src1_data),                                                  //          .data
		.sink20_startofpacket (rsp_demux_020_src1_startofpacket),                                         //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src1_endofpacket),                                           //          .endofpacket
		.sink21_ready         (rsp_demux_021_src1_ready),                                                 //    sink21.ready
		.sink21_valid         (rsp_demux_021_src1_valid),                                                 //          .valid
		.sink21_channel       (rsp_demux_021_src1_channel),                                               //          .channel
		.sink21_data          (rsp_demux_021_src1_data),                                                  //          .data
		.sink21_startofpacket (rsp_demux_021_src1_startofpacket),                                         //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src1_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                  (System_PLL_sys_clk_clk),                                                                   //       clk.clk
		.reset                (Nios2_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.src_ready            (rsp_mux_002_src_ready),                                                                    //       src.ready
		.src_valid            (rsp_mux_002_src_valid),                                                                    //          .valid
		.src_data             (rsp_mux_002_src_data),                                                                     //          .data
		.src_channel          (rsp_mux_002_src_channel),                                                                  //          .channel
		.src_startofpacket    (rsp_mux_002_src_startofpacket),                                                            //          .startofpacket
		.src_endofpacket      (rsp_mux_002_src_endofpacket),                                                              //          .endofpacket
		.sink0_ready          (rsp_demux_src2_ready),                                                                     //     sink0.ready
		.sink0_valid          (rsp_demux_src2_valid),                                                                     //          .valid
		.sink0_channel        (rsp_demux_src2_channel),                                                                   //          .channel
		.sink0_data           (rsp_demux_src2_data),                                                                      //          .data
		.sink0_startofpacket  (rsp_demux_src2_startofpacket),                                                             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src2_endofpacket),                                                               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src2_ready),                                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src2_valid),                                                                 //          .valid
		.sink1_channel        (rsp_demux_001_src2_channel),                                                               //          .channel
		.sink1_data           (rsp_demux_001_src2_data),                                                                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src2_startofpacket),                                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src2_endofpacket),                                                           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src2_ready),                                                                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src2_valid),                                                                 //          .valid
		.sink2_channel        (rsp_demux_002_src2_channel),                                                               //          .channel
		.sink2_data           (rsp_demux_002_src2_data),                                                                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src2_startofpacket),                                                         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src2_endofpacket),                                                           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src2_ready),                                                                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src2_valid),                                                                 //          .valid
		.sink3_channel        (rsp_demux_003_src2_channel),                                                               //          .channel
		.sink3_data           (rsp_demux_003_src2_data),                                                                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src2_startofpacket),                                                         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src2_endofpacket),                                                           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src2_ready),                                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src2_valid),                                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src2_channel),                                                               //          .channel
		.sink4_data           (rsp_demux_004_src2_data),                                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src2_startofpacket),                                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src2_endofpacket),                                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src2_ready),                                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src2_valid),                                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src2_channel),                                                               //          .channel
		.sink5_data           (rsp_demux_005_src2_data),                                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src2_startofpacket),                                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src2_endofpacket),                                                           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src2_ready),                                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src2_valid),                                                                 //          .valid
		.sink6_channel        (rsp_demux_006_src2_channel),                                                               //          .channel
		.sink6_data           (rsp_demux_006_src2_data),                                                                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src2_startofpacket),                                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src2_endofpacket),                                                           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src2_ready),                                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src2_valid),                                                                 //          .valid
		.sink7_channel        (rsp_demux_007_src2_channel),                                                               //          .channel
		.sink7_data           (rsp_demux_007_src2_data),                                                                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src2_startofpacket),                                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src2_endofpacket),                                                           //          .endofpacket
		.sink8_ready          (rsp_demux_008_src2_ready),                                                                 //     sink8.ready
		.sink8_valid          (rsp_demux_008_src2_valid),                                                                 //          .valid
		.sink8_channel        (rsp_demux_008_src2_channel),                                                               //          .channel
		.sink8_data           (rsp_demux_008_src2_data),                                                                  //          .data
		.sink8_startofpacket  (rsp_demux_008_src2_startofpacket),                                                         //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src2_endofpacket),                                                           //          .endofpacket
		.sink9_ready          (rsp_demux_009_src2_ready),                                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src2_valid),                                                                 //          .valid
		.sink9_channel        (rsp_demux_009_src2_channel),                                                               //          .channel
		.sink9_data           (rsp_demux_009_src2_data),                                                                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src2_startofpacket),                                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src2_endofpacket),                                                           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src2_ready),                                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src2_valid),                                                                 //          .valid
		.sink10_channel       (rsp_demux_010_src2_channel),                                                               //          .channel
		.sink10_data          (rsp_demux_010_src2_data),                                                                  //          .data
		.sink10_startofpacket (rsp_demux_010_src2_startofpacket),                                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src2_endofpacket),                                                           //          .endofpacket
		.sink11_ready         (rsp_demux_011_src2_ready),                                                                 //    sink11.ready
		.sink11_valid         (rsp_demux_011_src2_valid),                                                                 //          .valid
		.sink11_channel       (rsp_demux_011_src2_channel),                                                               //          .channel
		.sink11_data          (rsp_demux_011_src2_data),                                                                  //          .data
		.sink11_startofpacket (rsp_demux_011_src2_startofpacket),                                                         //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src2_endofpacket),                                                           //          .endofpacket
		.sink12_ready         (rsp_demux_012_src2_ready),                                                                 //    sink12.ready
		.sink12_valid         (rsp_demux_012_src2_valid),                                                                 //          .valid
		.sink12_channel       (rsp_demux_012_src2_channel),                                                               //          .channel
		.sink12_data          (rsp_demux_012_src2_data),                                                                  //          .data
		.sink12_startofpacket (rsp_demux_012_src2_startofpacket),                                                         //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src2_endofpacket),                                                           //          .endofpacket
		.sink13_ready         (rsp_demux_013_src2_ready),                                                                 //    sink13.ready
		.sink13_valid         (rsp_demux_013_src2_valid),                                                                 //          .valid
		.sink13_channel       (rsp_demux_013_src2_channel),                                                               //          .channel
		.sink13_data          (rsp_demux_013_src2_data),                                                                  //          .data
		.sink13_startofpacket (rsp_demux_013_src2_startofpacket),                                                         //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src2_endofpacket),                                                           //          .endofpacket
		.sink14_ready         (rsp_demux_014_src2_ready),                                                                 //    sink14.ready
		.sink14_valid         (rsp_demux_014_src2_valid),                                                                 //          .valid
		.sink14_channel       (rsp_demux_014_src2_channel),                                                               //          .channel
		.sink14_data          (rsp_demux_014_src2_data),                                                                  //          .data
		.sink14_startofpacket (rsp_demux_014_src2_startofpacket),                                                         //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src2_endofpacket),                                                           //          .endofpacket
		.sink15_ready         (rsp_demux_015_src2_ready),                                                                 //    sink15.ready
		.sink15_valid         (rsp_demux_015_src2_valid),                                                                 //          .valid
		.sink15_channel       (rsp_demux_015_src2_channel),                                                               //          .channel
		.sink15_data          (rsp_demux_015_src2_data),                                                                  //          .data
		.sink15_startofpacket (rsp_demux_015_src2_startofpacket),                                                         //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src2_endofpacket),                                                           //          .endofpacket
		.sink16_ready         (rsp_demux_016_src2_ready),                                                                 //    sink16.ready
		.sink16_valid         (rsp_demux_016_src2_valid),                                                                 //          .valid
		.sink16_channel       (rsp_demux_016_src2_channel),                                                               //          .channel
		.sink16_data          (rsp_demux_016_src2_data),                                                                  //          .data
		.sink16_startofpacket (rsp_demux_016_src2_startofpacket),                                                         //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src2_endofpacket),                                                           //          .endofpacket
		.sink17_ready         (rsp_demux_017_src2_ready),                                                                 //    sink17.ready
		.sink17_valid         (rsp_demux_017_src2_valid),                                                                 //          .valid
		.sink17_channel       (rsp_demux_017_src2_channel),                                                               //          .channel
		.sink17_data          (rsp_demux_017_src2_data),                                                                  //          .data
		.sink17_startofpacket (rsp_demux_017_src2_startofpacket),                                                         //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src2_endofpacket),                                                           //          .endofpacket
		.sink18_ready         (rsp_demux_022_src0_ready),                                                                 //    sink18.ready
		.sink18_valid         (rsp_demux_022_src0_valid),                                                                 //          .valid
		.sink18_channel       (rsp_demux_022_src0_channel),                                                               //          .channel
		.sink18_data          (rsp_demux_022_src0_data),                                                                  //          .data
		.sink18_startofpacket (rsp_demux_022_src0_startofpacket),                                                         //          .startofpacket
		.sink18_endofpacket   (rsp_demux_022_src0_endofpacket),                                                           //          .endofpacket
		.sink19_ready         (vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_ready),         //    sink19.ready
		.sink19_valid         (vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink19_channel       (vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink19_data          (vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_data),          //          .data
		.sink19_startofpacket (vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink19_endofpacket   (vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink20_ready         (rsp_demux_024_src0_ready),                                                                 //    sink20.ready
		.sink20_valid         (rsp_demux_024_src0_valid),                                                                 //          .valid
		.sink20_channel       (rsp_demux_024_src0_channel),                                                               //          .channel
		.sink20_data          (rsp_demux_024_src0_data),                                                                  //          .data
		.sink20_startofpacket (rsp_demux_024_src0_startofpacket),                                                         //          .startofpacket
		.sink20_endofpacket   (rsp_demux_024_src0_endofpacket),                                                           //          .endofpacket
		.sink21_ready         (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_ready),                                //    sink21.ready
		.sink21_valid         (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_valid),                                //          .valid
		.sink21_channel       (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_channel),                              //          .channel
		.sink21_data          (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_data),                                 //          .data
		.sink21_startofpacket (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_startofpacket),                        //          .startofpacket
		.sink21_endofpacket   (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_endofpacket),                          //          .endofpacket
		.sink22_ready         (rsp_demux_026_src0_ready),                                                                 //    sink22.ready
		.sink22_valid         (rsp_demux_026_src0_valid),                                                                 //          .valid
		.sink22_channel       (rsp_demux_026_src0_channel),                                                               //          .channel
		.sink22_data          (rsp_demux_026_src0_data),                                                                  //          .data
		.sink22_startofpacket (rsp_demux_026_src0_startofpacket),                                                         //          .startofpacket
		.sink22_endofpacket   (rsp_demux_026_src0_endofpacket),                                                           //          .endofpacket
		.sink23_ready         (rsp_demux_027_src0_ready),                                                                 //    sink23.ready
		.sink23_valid         (rsp_demux_027_src0_valid),                                                                 //          .valid
		.sink23_channel       (rsp_demux_027_src0_channel),                                                               //          .channel
		.sink23_data          (rsp_demux_027_src0_data),                                                                  //          .data
		.sink23_startofpacket (rsp_demux_027_src0_startofpacket),                                                         //          .startofpacket
		.sink23_endofpacket   (rsp_demux_027_src0_endofpacket),                                                           //          .endofpacket
		.sink24_ready         (rsp_demux_028_src0_ready),                                                                 //    sink24.ready
		.sink24_valid         (rsp_demux_028_src0_valid),                                                                 //          .valid
		.sink24_channel       (rsp_demux_028_src0_channel),                                                               //          .channel
		.sink24_data          (rsp_demux_028_src0_data),                                                                  //          .data
		.sink24_startofpacket (rsp_demux_028_src0_startofpacket),                                                         //          .startofpacket
		.sink24_endofpacket   (rsp_demux_028_src0_endofpacket),                                                           //          .endofpacket
		.sink25_ready         (rsp_demux_029_src0_ready),                                                                 //    sink25.ready
		.sink25_valid         (rsp_demux_029_src0_valid),                                                                 //          .valid
		.sink25_channel       (rsp_demux_029_src0_channel),                                                               //          .channel
		.sink25_data          (rsp_demux_029_src0_data),                                                                  //          .data
		.sink25_startofpacket (rsp_demux_029_src0_startofpacket),                                                         //          .startofpacket
		.sink25_endofpacket   (rsp_demux_029_src0_endofpacket),                                                           //          .endofpacket
		.sink26_ready         (rsp_demux_030_src0_ready),                                                                 //    sink26.ready
		.sink26_valid         (rsp_demux_030_src0_valid),                                                                 //          .valid
		.sink26_channel       (rsp_demux_030_src0_channel),                                                               //          .channel
		.sink26_data          (rsp_demux_030_src0_data),                                                                  //          .data
		.sink26_startofpacket (rsp_demux_030_src0_startofpacket),                                                         //          .startofpacket
		.sink26_endofpacket   (rsp_demux_030_src0_endofpacket),                                                           //          .endofpacket
		.sink27_ready         (rsp_demux_036_src0_ready),                                                                 //    sink27.ready
		.sink27_valid         (rsp_demux_036_src0_valid),                                                                 //          .valid
		.sink27_channel       (rsp_demux_036_src0_channel),                                                               //          .channel
		.sink27_data          (rsp_demux_036_src0_data),                                                                  //          .data
		.sink27_startofpacket (rsp_demux_036_src0_startofpacket),                                                         //          .startofpacket
		.sink27_endofpacket   (rsp_demux_036_src0_endofpacket)                                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_002 rsp_mux_003 (
		.clk                  (System_PLL_sys_clk_clk),                                                                            //       clk.clk
		.reset                (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.src_ready            (rsp_mux_003_src_ready),                                                                             //       src.ready
		.src_valid            (rsp_mux_003_src_valid),                                                                             //          .valid
		.src_data             (rsp_mux_003_src_data),                                                                              //          .data
		.src_channel          (rsp_mux_003_src_channel),                                                                           //          .channel
		.src_startofpacket    (rsp_mux_003_src_startofpacket),                                                                     //          .startofpacket
		.src_endofpacket      (rsp_mux_003_src_endofpacket),                                                                       //          .endofpacket
		.sink0_ready          (rsp_demux_src3_ready),                                                                              //     sink0.ready
		.sink0_valid          (rsp_demux_src3_valid),                                                                              //          .valid
		.sink0_channel        (rsp_demux_src3_channel),                                                                            //          .channel
		.sink0_data           (rsp_demux_src3_data),                                                                               //          .data
		.sink0_startofpacket  (rsp_demux_src3_startofpacket),                                                                      //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src3_endofpacket),                                                                        //          .endofpacket
		.sink1_ready          (rsp_demux_001_src3_ready),                                                                          //     sink1.ready
		.sink1_valid          (rsp_demux_001_src3_valid),                                                                          //          .valid
		.sink1_channel        (rsp_demux_001_src3_channel),                                                                        //          .channel
		.sink1_data           (rsp_demux_001_src3_data),                                                                           //          .data
		.sink1_startofpacket  (rsp_demux_001_src3_startofpacket),                                                                  //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src3_endofpacket),                                                                    //          .endofpacket
		.sink2_ready          (rsp_demux_002_src3_ready),                                                                          //     sink2.ready
		.sink2_valid          (rsp_demux_002_src3_valid),                                                                          //          .valid
		.sink2_channel        (rsp_demux_002_src3_channel),                                                                        //          .channel
		.sink2_data           (rsp_demux_002_src3_data),                                                                           //          .data
		.sink2_startofpacket  (rsp_demux_002_src3_startofpacket),                                                                  //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src3_endofpacket),                                                                    //          .endofpacket
		.sink3_ready          (rsp_demux_003_src3_ready),                                                                          //     sink3.ready
		.sink3_valid          (rsp_demux_003_src3_valid),                                                                          //          .valid
		.sink3_channel        (rsp_demux_003_src3_channel),                                                                        //          .channel
		.sink3_data           (rsp_demux_003_src3_data),                                                                           //          .data
		.sink3_startofpacket  (rsp_demux_003_src3_startofpacket),                                                                  //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src3_endofpacket),                                                                    //          .endofpacket
		.sink4_ready          (rsp_demux_004_src3_ready),                                                                          //     sink4.ready
		.sink4_valid          (rsp_demux_004_src3_valid),                                                                          //          .valid
		.sink4_channel        (rsp_demux_004_src3_channel),                                                                        //          .channel
		.sink4_data           (rsp_demux_004_src3_data),                                                                           //          .data
		.sink4_startofpacket  (rsp_demux_004_src3_startofpacket),                                                                  //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src3_endofpacket),                                                                    //          .endofpacket
		.sink5_ready          (rsp_demux_005_src3_ready),                                                                          //     sink5.ready
		.sink5_valid          (rsp_demux_005_src3_valid),                                                                          //          .valid
		.sink5_channel        (rsp_demux_005_src3_channel),                                                                        //          .channel
		.sink5_data           (rsp_demux_005_src3_data),                                                                           //          .data
		.sink5_startofpacket  (rsp_demux_005_src3_startofpacket),                                                                  //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src3_endofpacket),                                                                    //          .endofpacket
		.sink6_ready          (rsp_demux_006_src3_ready),                                                                          //     sink6.ready
		.sink6_valid          (rsp_demux_006_src3_valid),                                                                          //          .valid
		.sink6_channel        (rsp_demux_006_src3_channel),                                                                        //          .channel
		.sink6_data           (rsp_demux_006_src3_data),                                                                           //          .data
		.sink6_startofpacket  (rsp_demux_006_src3_startofpacket),                                                                  //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src3_endofpacket),                                                                    //          .endofpacket
		.sink7_ready          (rsp_demux_007_src3_ready),                                                                          //     sink7.ready
		.sink7_valid          (rsp_demux_007_src3_valid),                                                                          //          .valid
		.sink7_channel        (rsp_demux_007_src3_channel),                                                                        //          .channel
		.sink7_data           (rsp_demux_007_src3_data),                                                                           //          .data
		.sink7_startofpacket  (rsp_demux_007_src3_startofpacket),                                                                  //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src3_endofpacket),                                                                    //          .endofpacket
		.sink8_ready          (rsp_demux_008_src3_ready),                                                                          //     sink8.ready
		.sink8_valid          (rsp_demux_008_src3_valid),                                                                          //          .valid
		.sink8_channel        (rsp_demux_008_src3_channel),                                                                        //          .channel
		.sink8_data           (rsp_demux_008_src3_data),                                                                           //          .data
		.sink8_startofpacket  (rsp_demux_008_src3_startofpacket),                                                                  //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src3_endofpacket),                                                                    //          .endofpacket
		.sink9_ready          (rsp_demux_009_src3_ready),                                                                          //     sink9.ready
		.sink9_valid          (rsp_demux_009_src3_valid),                                                                          //          .valid
		.sink9_channel        (rsp_demux_009_src3_channel),                                                                        //          .channel
		.sink9_data           (rsp_demux_009_src3_data),                                                                           //          .data
		.sink9_startofpacket  (rsp_demux_009_src3_startofpacket),                                                                  //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src3_endofpacket),                                                                    //          .endofpacket
		.sink10_ready         (rsp_demux_010_src3_ready),                                                                          //    sink10.ready
		.sink10_valid         (rsp_demux_010_src3_valid),                                                                          //          .valid
		.sink10_channel       (rsp_demux_010_src3_channel),                                                                        //          .channel
		.sink10_data          (rsp_demux_010_src3_data),                                                                           //          .data
		.sink10_startofpacket (rsp_demux_010_src3_startofpacket),                                                                  //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src3_endofpacket),                                                                    //          .endofpacket
		.sink11_ready         (rsp_demux_011_src3_ready),                                                                          //    sink11.ready
		.sink11_valid         (rsp_demux_011_src3_valid),                                                                          //          .valid
		.sink11_channel       (rsp_demux_011_src3_channel),                                                                        //          .channel
		.sink11_data          (rsp_demux_011_src3_data),                                                                           //          .data
		.sink11_startofpacket (rsp_demux_011_src3_startofpacket),                                                                  //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src3_endofpacket),                                                                    //          .endofpacket
		.sink12_ready         (rsp_demux_012_src3_ready),                                                                          //    sink12.ready
		.sink12_valid         (rsp_demux_012_src3_valid),                                                                          //          .valid
		.sink12_channel       (rsp_demux_012_src3_channel),                                                                        //          .channel
		.sink12_data          (rsp_demux_012_src3_data),                                                                           //          .data
		.sink12_startofpacket (rsp_demux_012_src3_startofpacket),                                                                  //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src3_endofpacket),                                                                    //          .endofpacket
		.sink13_ready         (rsp_demux_013_src3_ready),                                                                          //    sink13.ready
		.sink13_valid         (rsp_demux_013_src3_valid),                                                                          //          .valid
		.sink13_channel       (rsp_demux_013_src3_channel),                                                                        //          .channel
		.sink13_data          (rsp_demux_013_src3_data),                                                                           //          .data
		.sink13_startofpacket (rsp_demux_013_src3_startofpacket),                                                                  //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src3_endofpacket),                                                                    //          .endofpacket
		.sink14_ready         (rsp_demux_014_src3_ready),                                                                          //    sink14.ready
		.sink14_valid         (rsp_demux_014_src3_valid),                                                                          //          .valid
		.sink14_channel       (rsp_demux_014_src3_channel),                                                                        //          .channel
		.sink14_data          (rsp_demux_014_src3_data),                                                                           //          .data
		.sink14_startofpacket (rsp_demux_014_src3_startofpacket),                                                                  //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src3_endofpacket),                                                                    //          .endofpacket
		.sink15_ready         (rsp_demux_015_src3_ready),                                                                          //    sink15.ready
		.sink15_valid         (rsp_demux_015_src3_valid),                                                                          //          .valid
		.sink15_channel       (rsp_demux_015_src3_channel),                                                                        //          .channel
		.sink15_data          (rsp_demux_015_src3_data),                                                                           //          .data
		.sink15_startofpacket (rsp_demux_015_src3_startofpacket),                                                                  //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src3_endofpacket),                                                                    //          .endofpacket
		.sink16_ready         (vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_ready),         //    sink16.ready
		.sink16_valid         (vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink16_channel       (vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink16_data          (vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_data),          //          .data
		.sink16_startofpacket (vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink16_endofpacket   (vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink17_ready         (rsp_demux_024_src1_ready),                                                                          //    sink17.ready
		.sink17_valid         (rsp_demux_024_src1_valid),                                                                          //          .valid
		.sink17_channel       (rsp_demux_024_src1_channel),                                                                        //          .channel
		.sink17_data          (rsp_demux_024_src1_data),                                                                           //          .data
		.sink17_startofpacket (rsp_demux_024_src1_startofpacket),                                                                  //          .startofpacket
		.sink17_endofpacket   (rsp_demux_024_src1_endofpacket),                                                                    //          .endofpacket
		.sink18_ready         (sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_ready),                                //    sink18.ready
		.sink18_valid         (sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_valid),                                //          .valid
		.sink18_channel       (sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_channel),                              //          .channel
		.sink18_data          (sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_data),                                 //          .data
		.sink18_startofpacket (sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_startofpacket),                        //          .startofpacket
		.sink18_endofpacket   (sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_endofpacket),                          //          .endofpacket
		.sink19_ready         (rsp_demux_026_src1_ready),                                                                          //    sink19.ready
		.sink19_valid         (rsp_demux_026_src1_valid),                                                                          //          .valid
		.sink19_channel       (rsp_demux_026_src1_channel),                                                                        //          .channel
		.sink19_data          (rsp_demux_026_src1_data),                                                                           //          .data
		.sink19_startofpacket (rsp_demux_026_src1_startofpacket),                                                                  //          .startofpacket
		.sink19_endofpacket   (rsp_demux_026_src1_endofpacket),                                                                    //          .endofpacket
		.sink20_ready         (rsp_demux_027_src1_ready),                                                                          //    sink20.ready
		.sink20_valid         (rsp_demux_027_src1_valid),                                                                          //          .valid
		.sink20_channel       (rsp_demux_027_src1_channel),                                                                        //          .channel
		.sink20_data          (rsp_demux_027_src1_data),                                                                           //          .data
		.sink20_startofpacket (rsp_demux_027_src1_startofpacket),                                                                  //          .startofpacket
		.sink20_endofpacket   (rsp_demux_027_src1_endofpacket),                                                                    //          .endofpacket
		.sink21_ready         (rsp_demux_028_src1_ready),                                                                          //    sink21.ready
		.sink21_valid         (rsp_demux_028_src1_valid),                                                                          //          .valid
		.sink21_channel       (rsp_demux_028_src1_channel),                                                                        //          .channel
		.sink21_data          (rsp_demux_028_src1_data),                                                                           //          .data
		.sink21_startofpacket (rsp_demux_028_src1_startofpacket),                                                                  //          .startofpacket
		.sink21_endofpacket   (rsp_demux_028_src1_endofpacket),                                                                    //          .endofpacket
		.sink22_ready         (rsp_demux_029_src1_ready),                                                                          //    sink22.ready
		.sink22_valid         (rsp_demux_029_src1_valid),                                                                          //          .valid
		.sink22_channel       (rsp_demux_029_src1_channel),                                                                        //          .channel
		.sink22_data          (rsp_demux_029_src1_data),                                                                           //          .data
		.sink22_startofpacket (rsp_demux_029_src1_startofpacket),                                                                  //          .startofpacket
		.sink22_endofpacket   (rsp_demux_029_src1_endofpacket),                                                                    //          .endofpacket
		.sink23_ready         (rsp_demux_030_src1_ready),                                                                          //    sink23.ready
		.sink23_valid         (rsp_demux_030_src1_valid),                                                                          //          .valid
		.sink23_channel       (rsp_demux_030_src1_channel),                                                                        //          .channel
		.sink23_data          (rsp_demux_030_src1_data),                                                                           //          .data
		.sink23_startofpacket (rsp_demux_030_src1_startofpacket),                                                                  //          .startofpacket
		.sink23_endofpacket   (rsp_demux_030_src1_endofpacket),                                                                    //          .endofpacket
		.sink24_ready         (rsp_demux_031_src0_ready),                                                                          //    sink24.ready
		.sink24_valid         (rsp_demux_031_src0_valid),                                                                          //          .valid
		.sink24_channel       (rsp_demux_031_src0_channel),                                                                        //          .channel
		.sink24_data          (rsp_demux_031_src0_data),                                                                           //          .data
		.sink24_startofpacket (rsp_demux_031_src0_startofpacket),                                                                  //          .startofpacket
		.sink24_endofpacket   (rsp_demux_031_src0_endofpacket),                                                                    //          .endofpacket
		.sink25_ready         (rsp_demux_032_src0_ready),                                                                          //    sink25.ready
		.sink25_valid         (rsp_demux_032_src0_valid),                                                                          //          .valid
		.sink25_channel       (rsp_demux_032_src0_channel),                                                                        //          .channel
		.sink25_data          (rsp_demux_032_src0_data),                                                                           //          .data
		.sink25_startofpacket (rsp_demux_032_src0_startofpacket),                                                                  //          .startofpacket
		.sink25_endofpacket   (rsp_demux_032_src0_endofpacket),                                                                    //          .endofpacket
		.sink26_ready         (rsp_demux_033_src0_ready),                                                                          //    sink26.ready
		.sink26_valid         (rsp_demux_033_src0_valid),                                                                          //          .valid
		.sink26_channel       (rsp_demux_033_src0_channel),                                                                        //          .channel
		.sink26_data          (rsp_demux_033_src0_data),                                                                           //          .data
		.sink26_startofpacket (rsp_demux_033_src0_startofpacket),                                                                  //          .startofpacket
		.sink26_endofpacket   (rsp_demux_033_src0_endofpacket),                                                                    //          .endofpacket
		.sink27_ready         (rsp_demux_034_src0_ready),                                                                          //    sink27.ready
		.sink27_valid         (rsp_demux_034_src0_valid),                                                                          //          .valid
		.sink27_channel       (rsp_demux_034_src0_channel),                                                                        //          .channel
		.sink27_data          (rsp_demux_034_src0_data),                                                                           //          .data
		.sink27_startofpacket (rsp_demux_034_src0_startofpacket),                                                                  //          .startofpacket
		.sink27_endofpacket   (rsp_demux_034_src0_endofpacket)                                                                     //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_004 rsp_mux_004 (
		.clk                  (System_PLL_sys_clk_clk),                                                                            //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.src_ready            (rsp_mux_004_src_ready),                                                                             //       src.ready
		.src_valid            (rsp_mux_004_src_valid),                                                                             //          .valid
		.src_data             (rsp_mux_004_src_data),                                                                              //          .data
		.src_channel          (rsp_mux_004_src_channel),                                                                           //          .channel
		.src_startofpacket    (rsp_mux_004_src_startofpacket),                                                                     //          .startofpacket
		.src_endofpacket      (rsp_mux_004_src_endofpacket),                                                                       //          .endofpacket
		.sink0_ready          (rsp_demux_src4_ready),                                                                              //     sink0.ready
		.sink0_valid          (rsp_demux_src4_valid),                                                                              //          .valid
		.sink0_channel        (rsp_demux_src4_channel),                                                                            //          .channel
		.sink0_data           (rsp_demux_src4_data),                                                                               //          .data
		.sink0_startofpacket  (rsp_demux_src4_startofpacket),                                                                      //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src4_endofpacket),                                                                        //          .endofpacket
		.sink1_ready          (rsp_demux_001_src4_ready),                                                                          //     sink1.ready
		.sink1_valid          (rsp_demux_001_src4_valid),                                                                          //          .valid
		.sink1_channel        (rsp_demux_001_src4_channel),                                                                        //          .channel
		.sink1_data           (rsp_demux_001_src4_data),                                                                           //          .data
		.sink1_startofpacket  (rsp_demux_001_src4_startofpacket),                                                                  //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src4_endofpacket),                                                                    //          .endofpacket
		.sink2_ready          (rsp_demux_002_src4_ready),                                                                          //     sink2.ready
		.sink2_valid          (rsp_demux_002_src4_valid),                                                                          //          .valid
		.sink2_channel        (rsp_demux_002_src4_channel),                                                                        //          .channel
		.sink2_data           (rsp_demux_002_src4_data),                                                                           //          .data
		.sink2_startofpacket  (rsp_demux_002_src4_startofpacket),                                                                  //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src4_endofpacket),                                                                    //          .endofpacket
		.sink3_ready          (rsp_demux_003_src4_ready),                                                                          //     sink3.ready
		.sink3_valid          (rsp_demux_003_src4_valid),                                                                          //          .valid
		.sink3_channel        (rsp_demux_003_src4_channel),                                                                        //          .channel
		.sink3_data           (rsp_demux_003_src4_data),                                                                           //          .data
		.sink3_startofpacket  (rsp_demux_003_src4_startofpacket),                                                                  //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src4_endofpacket),                                                                    //          .endofpacket
		.sink4_ready          (rsp_demux_004_src4_ready),                                                                          //     sink4.ready
		.sink4_valid          (rsp_demux_004_src4_valid),                                                                          //          .valid
		.sink4_channel        (rsp_demux_004_src4_channel),                                                                        //          .channel
		.sink4_data           (rsp_demux_004_src4_data),                                                                           //          .data
		.sink4_startofpacket  (rsp_demux_004_src4_startofpacket),                                                                  //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src4_endofpacket),                                                                    //          .endofpacket
		.sink5_ready          (rsp_demux_005_src4_ready),                                                                          //     sink5.ready
		.sink5_valid          (rsp_demux_005_src4_valid),                                                                          //          .valid
		.sink5_channel        (rsp_demux_005_src4_channel),                                                                        //          .channel
		.sink5_data           (rsp_demux_005_src4_data),                                                                           //          .data
		.sink5_startofpacket  (rsp_demux_005_src4_startofpacket),                                                                  //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src4_endofpacket),                                                                    //          .endofpacket
		.sink6_ready          (rsp_demux_006_src4_ready),                                                                          //     sink6.ready
		.sink6_valid          (rsp_demux_006_src4_valid),                                                                          //          .valid
		.sink6_channel        (rsp_demux_006_src4_channel),                                                                        //          .channel
		.sink6_data           (rsp_demux_006_src4_data),                                                                           //          .data
		.sink6_startofpacket  (rsp_demux_006_src4_startofpacket),                                                                  //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src4_endofpacket),                                                                    //          .endofpacket
		.sink7_ready          (rsp_demux_007_src4_ready),                                                                          //     sink7.ready
		.sink7_valid          (rsp_demux_007_src4_valid),                                                                          //          .valid
		.sink7_channel        (rsp_demux_007_src4_channel),                                                                        //          .channel
		.sink7_data           (rsp_demux_007_src4_data),                                                                           //          .data
		.sink7_startofpacket  (rsp_demux_007_src4_startofpacket),                                                                  //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src4_endofpacket),                                                                    //          .endofpacket
		.sink8_ready          (rsp_demux_008_src4_ready),                                                                          //     sink8.ready
		.sink8_valid          (rsp_demux_008_src4_valid),                                                                          //          .valid
		.sink8_channel        (rsp_demux_008_src4_channel),                                                                        //          .channel
		.sink8_data           (rsp_demux_008_src4_data),                                                                           //          .data
		.sink8_startofpacket  (rsp_demux_008_src4_startofpacket),                                                                  //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src4_endofpacket),                                                                    //          .endofpacket
		.sink9_ready          (rsp_demux_009_src4_ready),                                                                          //     sink9.ready
		.sink9_valid          (rsp_demux_009_src4_valid),                                                                          //          .valid
		.sink9_channel        (rsp_demux_009_src4_channel),                                                                        //          .channel
		.sink9_data           (rsp_demux_009_src4_data),                                                                           //          .data
		.sink9_startofpacket  (rsp_demux_009_src4_startofpacket),                                                                  //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src4_endofpacket),                                                                    //          .endofpacket
		.sink10_ready         (rsp_demux_010_src4_ready),                                                                          //    sink10.ready
		.sink10_valid         (rsp_demux_010_src4_valid),                                                                          //          .valid
		.sink10_channel       (rsp_demux_010_src4_channel),                                                                        //          .channel
		.sink10_data          (rsp_demux_010_src4_data),                                                                           //          .data
		.sink10_startofpacket (rsp_demux_010_src4_startofpacket),                                                                  //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src4_endofpacket),                                                                    //          .endofpacket
		.sink11_ready         (rsp_demux_011_src4_ready),                                                                          //    sink11.ready
		.sink11_valid         (rsp_demux_011_src4_valid),                                                                          //          .valid
		.sink11_channel       (rsp_demux_011_src4_channel),                                                                        //          .channel
		.sink11_data          (rsp_demux_011_src4_data),                                                                           //          .data
		.sink11_startofpacket (rsp_demux_011_src4_startofpacket),                                                                  //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src4_endofpacket),                                                                    //          .endofpacket
		.sink12_ready         (rsp_demux_012_src4_ready),                                                                          //    sink12.ready
		.sink12_valid         (rsp_demux_012_src4_valid),                                                                          //          .valid
		.sink12_channel       (rsp_demux_012_src4_channel),                                                                        //          .channel
		.sink12_data          (rsp_demux_012_src4_data),                                                                           //          .data
		.sink12_startofpacket (rsp_demux_012_src4_startofpacket),                                                                  //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src4_endofpacket),                                                                    //          .endofpacket
		.sink13_ready         (rsp_demux_013_src4_ready),                                                                          //    sink13.ready
		.sink13_valid         (rsp_demux_013_src4_valid),                                                                          //          .valid
		.sink13_channel       (rsp_demux_013_src4_channel),                                                                        //          .channel
		.sink13_data          (rsp_demux_013_src4_data),                                                                           //          .data
		.sink13_startofpacket (rsp_demux_013_src4_startofpacket),                                                                  //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src4_endofpacket),                                                                    //          .endofpacket
		.sink14_ready         (rsp_demux_014_src4_ready),                                                                          //    sink14.ready
		.sink14_valid         (rsp_demux_014_src4_valid),                                                                          //          .valid
		.sink14_channel       (rsp_demux_014_src4_channel),                                                                        //          .channel
		.sink14_data          (rsp_demux_014_src4_data),                                                                           //          .data
		.sink14_startofpacket (rsp_demux_014_src4_startofpacket),                                                                  //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src4_endofpacket),                                                                    //          .endofpacket
		.sink15_ready         (rsp_demux_015_src4_ready),                                                                          //    sink15.ready
		.sink15_valid         (rsp_demux_015_src4_valid),                                                                          //          .valid
		.sink15_channel       (rsp_demux_015_src4_channel),                                                                        //          .channel
		.sink15_data          (rsp_demux_015_src4_data),                                                                           //          .data
		.sink15_startofpacket (rsp_demux_015_src4_startofpacket),                                                                  //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src4_endofpacket),                                                                    //          .endofpacket
		.sink16_ready         (rsp_demux_016_src3_ready),                                                                          //    sink16.ready
		.sink16_valid         (rsp_demux_016_src3_valid),                                                                          //          .valid
		.sink16_channel       (rsp_demux_016_src3_channel),                                                                        //          .channel
		.sink16_data          (rsp_demux_016_src3_data),                                                                           //          .data
		.sink16_startofpacket (rsp_demux_016_src3_startofpacket),                                                                  //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src3_endofpacket),                                                                    //          .endofpacket
		.sink17_ready         (rsp_demux_017_src3_ready),                                                                          //    sink17.ready
		.sink17_valid         (rsp_demux_017_src3_valid),                                                                          //          .valid
		.sink17_channel       (rsp_demux_017_src3_channel),                                                                        //          .channel
		.sink17_data          (rsp_demux_017_src3_data),                                                                           //          .data
		.sink17_startofpacket (rsp_demux_017_src3_startofpacket),                                                                  //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src3_endofpacket),                                                                    //          .endofpacket
		.sink18_ready         (rsp_demux_022_src1_ready),                                                                          //    sink18.ready
		.sink18_valid         (rsp_demux_022_src1_valid),                                                                          //          .valid
		.sink18_channel       (rsp_demux_022_src1_channel),                                                                        //          .channel
		.sink18_data          (rsp_demux_022_src1_data),                                                                           //          .data
		.sink18_startofpacket (rsp_demux_022_src1_startofpacket),                                                                  //          .startofpacket
		.sink18_endofpacket   (rsp_demux_022_src1_endofpacket),                                                                    //          .endofpacket
		.sink19_ready         (vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready),         //    sink19.ready
		.sink19_valid         (vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid),         //          .valid
		.sink19_channel       (vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel),       //          .channel
		.sink19_data          (vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data),          //          .data
		.sink19_startofpacket (vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink19_endofpacket   (vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink20_ready         (rsp_demux_024_src2_ready),                                                                          //    sink20.ready
		.sink20_valid         (rsp_demux_024_src2_valid),                                                                          //          .valid
		.sink20_channel       (rsp_demux_024_src2_channel),                                                                        //          .channel
		.sink20_data          (rsp_demux_024_src2_data),                                                                           //          .data
		.sink20_startofpacket (rsp_demux_024_src2_startofpacket),                                                                  //          .startofpacket
		.sink20_endofpacket   (rsp_demux_024_src2_endofpacket),                                                                    //          .endofpacket
		.sink21_ready         (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready),                                //    sink21.ready
		.sink21_valid         (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid),                                //          .valid
		.sink21_channel       (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel),                              //          .channel
		.sink21_data          (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data),                                 //          .data
		.sink21_startofpacket (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket),                        //          .startofpacket
		.sink21_endofpacket   (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket),                          //          .endofpacket
		.sink22_ready         (rsp_demux_026_src2_ready),                                                                          //    sink22.ready
		.sink22_valid         (rsp_demux_026_src2_valid),                                                                          //          .valid
		.sink22_channel       (rsp_demux_026_src2_channel),                                                                        //          .channel
		.sink22_data          (rsp_demux_026_src2_data),                                                                           //          .data
		.sink22_startofpacket (rsp_demux_026_src2_startofpacket),                                                                  //          .startofpacket
		.sink22_endofpacket   (rsp_demux_026_src2_endofpacket),                                                                    //          .endofpacket
		.sink23_ready         (rsp_demux_027_src2_ready),                                                                          //    sink23.ready
		.sink23_valid         (rsp_demux_027_src2_valid),                                                                          //          .valid
		.sink23_channel       (rsp_demux_027_src2_channel),                                                                        //          .channel
		.sink23_data          (rsp_demux_027_src2_data),                                                                           //          .data
		.sink23_startofpacket (rsp_demux_027_src2_startofpacket),                                                                  //          .startofpacket
		.sink23_endofpacket   (rsp_demux_027_src2_endofpacket),                                                                    //          .endofpacket
		.sink24_ready         (rsp_demux_028_src2_ready),                                                                          //    sink24.ready
		.sink24_valid         (rsp_demux_028_src2_valid),                                                                          //          .valid
		.sink24_channel       (rsp_demux_028_src2_channel),                                                                        //          .channel
		.sink24_data          (rsp_demux_028_src2_data),                                                                           //          .data
		.sink24_startofpacket (rsp_demux_028_src2_startofpacket),                                                                  //          .startofpacket
		.sink24_endofpacket   (rsp_demux_028_src2_endofpacket),                                                                    //          .endofpacket
		.sink25_ready         (rsp_demux_029_src2_ready),                                                                          //    sink25.ready
		.sink25_valid         (rsp_demux_029_src2_valid),                                                                          //          .valid
		.sink25_channel       (rsp_demux_029_src2_channel),                                                                        //          .channel
		.sink25_data          (rsp_demux_029_src2_data),                                                                           //          .data
		.sink25_startofpacket (rsp_demux_029_src2_startofpacket),                                                                  //          .startofpacket
		.sink25_endofpacket   (rsp_demux_029_src2_endofpacket),                                                                    //          .endofpacket
		.sink26_ready         (rsp_demux_030_src2_ready),                                                                          //    sink26.ready
		.sink26_valid         (rsp_demux_030_src2_valid),                                                                          //          .valid
		.sink26_channel       (rsp_demux_030_src2_channel),                                                                        //          .channel
		.sink26_data          (rsp_demux_030_src2_data),                                                                           //          .data
		.sink26_startofpacket (rsp_demux_030_src2_startofpacket),                                                                  //          .startofpacket
		.sink26_endofpacket   (rsp_demux_030_src2_endofpacket)                                                                     //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_005 rsp_mux_005 (
		.clk                 (System_PLL_sys_clk_clk),                                                            //       clk.clk
		.reset               (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                                                             //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                                                             //          .valid
		.src_data            (rsp_mux_005_src_data),                                                              //          .data
		.src_channel         (rsp_mux_005_src_channel),                                                           //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                                                     //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                                                       //          .endofpacket
		.sink0_ready         (sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_032_src1_ready),                                                          //     sink1.ready
		.sink1_valid         (rsp_demux_032_src1_valid),                                                          //          .valid
		.sink1_channel       (rsp_demux_032_src1_channel),                                                        //          .channel
		.sink1_data          (rsp_demux_032_src1_data),                                                           //          .data
		.sink1_startofpacket (rsp_demux_032_src1_startofpacket),                                                  //          .startofpacket
		.sink1_endofpacket   (rsp_demux_032_src1_endofpacket),                                                    //          .endofpacket
		.sink2_ready         (rsp_demux_035_src0_ready),                                                          //     sink2.ready
		.sink2_valid         (rsp_demux_035_src0_valid),                                                          //          .valid
		.sink2_channel       (rsp_demux_035_src0_channel),                                                        //          .channel
		.sink2_data          (rsp_demux_035_src0_data),                                                           //          .data
		.sink2_startofpacket (rsp_demux_035_src0_startofpacket),                                                  //          .startofpacket
		.sink2_endofpacket   (rsp_demux_035_src0_endofpacket)                                                     //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_005 rsp_mux_006 (
		.clk                 (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset               (Nios2_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                                                    //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                                                    //          .valid
		.src_data            (rsp_mux_006_src_data),                                                     //          .data
		.src_channel         (rsp_mux_006_src_channel),                                                  //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (rsp_demux_035_src1_ready),                                                 //     sink1.ready
		.sink1_valid         (rsp_demux_035_src1_valid),                                                 //          .valid
		.sink1_channel       (rsp_demux_035_src1_channel),                                               //          .channel
		.sink1_data          (rsp_demux_035_src1_data),                                                  //          .data
		.sink1_startofpacket (rsp_demux_035_src1_startofpacket),                                         //          .startofpacket
		.sink1_endofpacket   (rsp_demux_035_src1_endofpacket),                                           //          .endofpacket
		.sink2_ready         (rsp_demux_036_src1_ready),                                                 //     sink2.ready
		.sink2_valid         (rsp_demux_036_src1_valid),                                                 //          .valid
		.sink2_channel       (rsp_demux_036_src1_channel),                                               //          .channel
		.sink2_data          (rsp_demux_036_src1_data),                                                  //          .data
		.sink2_startofpacket (rsp_demux_036_src1_startofpacket),                                         //          .startofpacket
		.sink2_endofpacket   (rsp_demux_036_src1_endofpacket)                                            //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_007 rsp_mux_007 (
		.clk                 (System_PLL_sys_clk_clk),                                                               //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                                                                //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                                                                //          .valid
		.src_data            (rsp_mux_007_src_data),                                                                 //          .data
		.src_channel         (rsp_mux_007_src_channel),                                                              //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),                                                        //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                                                          //          .endofpacket
		.sink0_ready         (sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_ready),               //     sink0.ready
		.sink0_valid         (sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_valid),               //          .valid
		.sink0_channel       (sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_channel),             //          .channel
		.sink0_data          (sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_data),                //          .data
		.sink0_startofpacket (sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_startofpacket),       //          .startofpacket
		.sink0_endofpacket   (sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_endofpacket),         //          .endofpacket
		.sink1_ready         (onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_008 rsp_mux_008 (
		.clk                 (System_PLL_sys_clk_clk),                                                                              //       clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready           (rsp_mux_008_src_ready),                                                                               //       src.ready
		.src_valid           (rsp_mux_008_src_valid),                                                                               //          .valid
		.src_data            (rsp_mux_008_src_data),                                                                                //          .data
		.src_channel         (rsp_mux_008_src_channel),                                                                             //          .channel
		.src_startofpacket   (rsp_mux_008_src_startofpacket),                                                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_008_src_endofpacket),                                                                         //          .endofpacket
		.sink0_ready         (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),                                //     sink1.ready
		.sink1_valid         (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),                                //          .valid
		.sink1_channel       (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),                              //          .channel
		.sink1_data          (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),                                 //          .data
		.sink1_startofpacket (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),                          //          .endofpacket
		.sink2_ready         (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),                          //     sink2.ready
		.sink2_valid         (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),                          //          .valid
		.sink2_channel       (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),                        //          .channel
		.sink2_data          (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),                           //          .data
		.sink2_startofpacket (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket),                  //          .startofpacket
		.sink2_endofpacket   (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_008 rsp_mux_009 (
		.clk                 (System_PLL_sys_clk_clk),                                                                              //       clk.clk
		.reset               (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.src_ready           (rsp_mux_009_src_ready),                                                                               //       src.ready
		.src_valid           (rsp_mux_009_src_valid),                                                                               //          .valid
		.src_data            (rsp_mux_009_src_data),                                                                                //          .data
		.src_channel         (rsp_mux_009_src_channel),                                                                             //          .channel
		.src_startofpacket   (rsp_mux_009_src_startofpacket),                                                                       //          .startofpacket
		.src_endofpacket     (rsp_mux_009_src_endofpacket),                                                                         //          .endofpacket
		.sink0_ready         (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink1_ready         (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),                                //     sink1.ready
		.sink1_valid         (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),                                //          .valid
		.sink1_channel       (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),                              //          .channel
		.sink1_data          (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),                                 //          .data
		.sink1_startofpacket (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),                        //          .startofpacket
		.sink1_endofpacket   (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),                          //          .endofpacket
		.sink2_ready         (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),                          //     sink2.ready
		.sink2_valid         (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),                          //          .valid
		.sink2_channel       (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),                        //          .channel
		.sink2_data          (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),                           //          .data
		.sink2_startofpacket (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket),                  //          .startofpacket
		.sink2_endofpacket   (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket)                     //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_010 rsp_mux_010 (
		.clk                 (System_PLL_sys_clk_clk),                                                                       //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.src_ready           (rsp_mux_010_src_ready),                                                                        //       src.ready
		.src_valid           (rsp_mux_010_src_valid),                                                                        //          .valid
		.src_data            (rsp_mux_010_src_data),                                                                         //          .data
		.src_channel         (rsp_mux_010_src_channel),                                                                      //          .channel
		.src_startofpacket   (rsp_mux_010_src_startofpacket),                                                                //          .startofpacket
		.src_endofpacket     (rsp_mux_010_src_endofpacket),                                                                  //          .endofpacket
		.sink0_ready         (rsp_demux_025_src8_ready),                                                                     //     sink0.ready
		.sink0_valid         (rsp_demux_025_src8_valid),                                                                     //          .valid
		.sink0_channel       (rsp_demux_025_src8_channel),                                                                   //          .channel
		.sink0_data          (rsp_demux_025_src8_data),                                                                      //          .data
		.sink0_startofpacket (rsp_demux_025_src8_startofpacket),                                                             //          .startofpacket
		.sink0_endofpacket   (rsp_demux_025_src8_endofpacket),                                                               //          .endofpacket
		.sink1_ready         (onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_ready),         //     sink1.ready
		.sink1_valid         (onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.sink1_channel       (onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.sink1_data          (onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_data),          //          .data
		.sink1_startofpacket (onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink1_endofpacket   (onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_011 rsp_mux_011 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_011_src_ready),                                           //       src.ready
		.src_valid           (rsp_mux_011_src_valid),                                           //          .valid
		.src_data            (rsp_mux_011_src_data),                                            //          .data
		.src_channel         (rsp_mux_011_src_channel),                                         //          .channel
		.src_startofpacket   (rsp_mux_011_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (rsp_mux_011_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (rsp_demux_027_src3_ready),                                        //     sink0.ready
		.sink0_valid         (rsp_demux_027_src3_valid),                                        //          .valid
		.sink0_channel       (rsp_demux_027_src3_channel),                                      //          .channel
		.sink0_data          (rsp_demux_027_src3_data),                                         //          .data
		.sink0_startofpacket (rsp_demux_027_src3_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (rsp_demux_027_src3_endofpacket)                                   //          .endofpacket
	);

	Computer_System_mm_interconnect_0_rsp_mux_011 rsp_mux_012 (
		.clk                 (System_PLL_sys_clk_clk),                                          //       clk.clk
		.reset               (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_012_src_ready),                                           //       src.ready
		.src_valid           (rsp_mux_012_src_valid),                                           //          .valid
		.src_data            (rsp_mux_012_src_data),                                            //          .data
		.src_channel         (rsp_mux_012_src_channel),                                         //          .channel
		.src_startofpacket   (rsp_mux_012_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket     (rsp_mux_012_src_endofpacket),                                     //          .endofpacket
		.sink0_ready         (rsp_demux_024_src3_ready),                                        //     sink0.ready
		.sink0_valid         (rsp_demux_024_src3_valid),                                        //          .valid
		.sink0_channel       (rsp_demux_024_src3_channel),                                      //          .channel
		.sink0_data          (rsp_demux_024_src3_data),                                         //          .data
		.sink0_startofpacket (rsp_demux_024_src3_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (rsp_demux_024_src3_endofpacket)                                   //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                   //       clk.clk
		.reset                (Nios2_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.in_valid             (cmd_demux_002_src19_valid),                                                                //      sink.valid
		.in_channel           (cmd_demux_002_src19_channel),                                                              //          .channel
		.in_startofpacket     (cmd_demux_002_src19_startofpacket),                                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src19_endofpacket),                                                          //          .endofpacket
		.in_ready             (cmd_demux_002_src19_ready),                                                                //          .ready
		.in_data              (cmd_demux_002_src19_data),                                                                 //          .data
		.out_endofpacket      (nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) nios2_data_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset                (Nios2_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (cmd_demux_002_src21_valid),                                         //      sink.valid
		.in_channel           (cmd_demux_002_src21_channel),                                       //          .channel
		.in_startofpacket     (cmd_demux_002_src21_startofpacket),                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_002_src21_endofpacket),                                   //          .endofpacket
		.in_ready             (cmd_demux_002_src21_ready),                                         //          .ready
		.in_data              (cmd_demux_002_src21_data),                                          //          .data
		.out_endofpacket      (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                            //       clk.clk
		.reset                (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                                                  // clk_reset.reset
		.in_valid             (cmd_demux_003_src16_valid),                                                                         //      sink.valid
		.in_channel           (cmd_demux_003_src16_channel),                                                                       //          .channel
		.in_startofpacket     (cmd_demux_003_src16_startofpacket),                                                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src16_endofpacket),                                                                   //          .endofpacket
		.in_ready             (cmd_demux_003_src16_ready),                                                                         //          .ready
		.in_data              (cmd_demux_003_src16_data),                                                                          //          .data
		.out_endofpacket      (nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_2nd_core_data_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset                (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.in_valid             (cmd_demux_003_src18_valid),                                                  //      sink.valid
		.in_channel           (cmd_demux_003_src18_channel),                                                //          .channel
		.in_startofpacket     (cmd_demux_003_src18_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src18_endofpacket),                                            //          .endofpacket
		.in_ready             (cmd_demux_003_src18_ready),                                                  //          .ready
		.in_data              (cmd_demux_003_src18_data),                                                   //          .data
		.out_endofpacket      (nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_2nd_core_data_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                            //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_valid             (cmd_demux_004_src19_valid),                                                                         //      sink.valid
		.in_channel           (cmd_demux_004_src19_channel),                                                                       //          .channel
		.in_startofpacket     (cmd_demux_004_src19_startofpacket),                                                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_004_src19_endofpacket),                                                                   //          .endofpacket
		.in_ready             (cmd_demux_004_src19_ready),                                                                         //          .ready
		.in_data              (cmd_demux_004_src19_data),                                                                          //          .data
		.out_endofpacket      (jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (jtag_to_fpga_bridge_master_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (cmd_demux_004_src21_valid),                                                  //      sink.valid
		.in_channel           (cmd_demux_004_src21_channel),                                                //          .channel
		.in_startofpacket     (cmd_demux_004_src21_startofpacket),                                          //          .startofpacket
		.in_endofpacket       (cmd_demux_004_src21_endofpacket),                                            //          .endofpacket
		.in_ready             (cmd_demux_004_src21_ready),                                                  //          .ready
		.in_data              (cmd_demux_004_src21_data),                                                   //          .data
		.out_endofpacket      (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (jtag_to_fpga_bridge_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                            //       clk.clk
		.reset                (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_valid             (cmd_demux_005_src0_valid),                                                          //      sink.valid
		.in_channel           (cmd_demux_005_src0_channel),                                                        //          .channel
		.in_startofpacket     (cmd_demux_005_src0_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (cmd_demux_005_src0_endofpacket),                                                    //          .endofpacket
		.in_ready             (cmd_demux_005_src0_ready),                                                          //          .ready
		.in_data              (cmd_demux_005_src0_data),                                                           //          .data
		.out_endofpacket      (nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_2nd_core_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) nios2_instruction_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (Nios2_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_valid             (cmd_demux_006_src0_valid),                                                 //      sink.valid
		.in_channel           (cmd_demux_006_src0_channel),                                               //          .channel
		.in_startofpacket     (cmd_demux_006_src0_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (cmd_demux_006_src0_endofpacket),                                           //          .endofpacket
		.in_ready             (cmd_demux_006_src0_ready),                                                 //          .ready
		.in_data              (cmd_demux_006_src0_data),                                                  //          .data
		.out_endofpacket      (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_instruction_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                         //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_valid             (cmd_demux_007_src0_valid),                                                       //      sink.valid
		.in_channel           (cmd_demux_007_src0_channel),                                                     //          .channel
		.in_startofpacket     (cmd_demux_007_src0_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src0_endofpacket),                                                 //          .endofpacket
		.in_ready             (cmd_demux_007_src0_ready),                                                       //          .ready
		.in_data              (cmd_demux_007_src0_data),                                                        //          .data
		.out_endofpacket      (vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_subsystem_pixel_dma_master_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                               //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (cmd_demux_007_src1_valid),                                                             //      sink.valid
		.in_channel           (cmd_demux_007_src1_channel),                                                           //          .channel
		.in_startofpacket     (cmd_demux_007_src1_startofpacket),                                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_007_src1_endofpacket),                                                       //          .endofpacket
		.in_ready             (cmd_demux_007_src1_ready),                                                             //          .ready
		.in_data              (cmd_demux_007_src1_data),                                                              //          .data
		.out_endofpacket      (vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_data),          //          .data
		.out_channel          (vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_subsystem_pixel_dma_master_to_onchip_sram_s2_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                              //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_008_src0_valid),                                                                            //      sink.valid
		.in_channel           (cmd_demux_008_src0_channel),                                                                          //          .channel
		.in_startofpacket     (cmd_demux_008_src0_startofpacket),                                                                    //          .startofpacket
		.in_endofpacket       (cmd_demux_008_src0_endofpacket),                                                                      //          .endofpacket
		.in_ready             (cmd_demux_008_src0_ready),                                                                            //          .ready
		.in_data              (cmd_demux_008_src0_data),                                                                             //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_wr_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                       //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_demux_008_src1_valid),                                                     //      sink.valid
		.in_channel           (cmd_demux_008_src1_channel),                                                   //          .channel
		.in_startofpacket     (cmd_demux_008_src1_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (cmd_demux_008_src1_endofpacket),                                               //          .endofpacket
		.in_ready             (cmd_demux_008_src1_ready),                                                     //          .ready
		.in_data              (cmd_demux_008_src1_data),                                                      //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_wr_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                             //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (cmd_demux_008_src2_valid),                                                           //      sink.valid
		.in_channel           (cmd_demux_008_src2_channel),                                                         //          .channel
		.in_startofpacket     (cmd_demux_008_src2_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_008_src2_endofpacket),                                                     //          .endofpacket
		.in_ready             (cmd_demux_008_src2_ready),                                                           //          .ready
		.in_data              (cmd_demux_008_src2_data),                                                            //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_wr_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                              //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.in_valid             (cmd_demux_009_src0_valid),                                                                            //      sink.valid
		.in_channel           (cmd_demux_009_src0_channel),                                                                          //          .channel
		.in_startofpacket     (cmd_demux_009_src0_startofpacket),                                                                    //          .startofpacket
		.in_endofpacket       (cmd_demux_009_src0_endofpacket),                                                                      //          .endofpacket
		.in_ready             (cmd_demux_009_src0_ready),                                                                            //          .ready
		.in_data              (cmd_demux_009_src0_data),                                                                             //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_rd_to_vga_subsystem_char_buffer_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                       //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_demux_009_src1_valid),                                                     //      sink.valid
		.in_channel           (cmd_demux_009_src1_channel),                                                   //          .channel
		.in_startofpacket     (cmd_demux_009_src1_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (cmd_demux_009_src1_endofpacket),                                               //          .endofpacket
		.in_ready             (cmd_demux_009_src1_ready),                                                     //          .ready
		.in_data              (cmd_demux_009_src1_data),                                                      //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_rd_to_sdram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (199),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (202),
		.IN_PKT_BURST_SIZE_L           (200),
		.IN_PKT_RESPONSE_STATUS_H      (241),
		.IN_PKT_RESPONSE_STATUS_L      (240),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (204),
		.IN_PKT_BURST_TYPE_L           (203),
		.IN_PKT_ORI_BURST_SIZE_L       (242),
		.IN_PKT_ORI_BURST_SIZE_H       (244),
		.IN_ST_DATA_W                  (245),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                             //       clk.clk
		.reset                (ARM_A9_HPS_h2f_lw_axi_master_agent_clk_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_valid             (cmd_demux_009_src2_valid),                                                           //      sink.valid
		.in_channel           (cmd_demux_009_src2_channel),                                                         //          .channel
		.in_startofpacket     (cmd_demux_009_src2_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_009_src2_endofpacket),                                                     //          .endofpacket
		.in_ready             (cmd_demux_009_src2_ready),                                                           //          .ready
		.in_data              (cmd_demux_009_src2_data),                                                            //          .data
		.out_endofpacket      (arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (arm_a9_hps_h2f_axi_master_rd_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (0),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                       //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (cmd_demux_010_src1_valid),                                                                     //      sink.valid
		.in_channel           (cmd_demux_010_src1_channel),                                                                   //          .channel
		.in_startofpacket     (cmd_demux_010_src1_startofpacket),                                                             //          .startofpacket
		.in_endofpacket       (cmd_demux_010_src1_endofpacket),                                                               //          .endofpacket
		.in_ready             (cmd_demux_010_src1_ready),                                                                     //          .ready
		.in_data              (cmd_demux_010_src1_data),                                                                      //          .data
		.out_endofpacket      (video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (video_in_subsystem_video_in_dma_master_to_onchip_sram_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                   //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_valid             (rsp_demux_023_src0_valid),                                                                 //      sink.valid
		.in_channel           (rsp_demux_023_src0_channel),                                                               //          .channel
		.in_startofpacket     (rsp_demux_023_src0_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (rsp_demux_023_src0_endofpacket),                                                           //          .endofpacket
		.in_ready             (rsp_demux_023_src0_ready),                                                                 //          .ready
		.in_data              (rsp_demux_023_src0_data),                                                                  //          .data
		.out_endofpacket      (vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_subsystem_char_buffer_slave_to_nios2_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                            //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_valid             (rsp_demux_023_src1_valid),                                                                          //      sink.valid
		.in_channel           (rsp_demux_023_src1_channel),                                                                        //          .channel
		.in_startofpacket     (rsp_demux_023_src1_startofpacket),                                                                  //          .startofpacket
		.in_endofpacket       (rsp_demux_023_src1_endofpacket),                                                                    //          .endofpacket
		.in_ready             (rsp_demux_023_src1_ready),                                                                          //          .ready
		.in_data              (rsp_demux_023_src1_data),                                                                           //          .data
		.out_endofpacket      (vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_subsystem_char_buffer_slave_to_nios2_2nd_core_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                            //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.in_valid             (rsp_demux_023_src2_valid),                                                                          //      sink.valid
		.in_channel           (rsp_demux_023_src2_channel),                                                                        //          .channel
		.in_startofpacket     (rsp_demux_023_src2_startofpacket),                                                                  //          .startofpacket
		.in_endofpacket       (rsp_demux_023_src2_endofpacket),                                                                    //          .endofpacket
		.in_ready             (rsp_demux_023_src2_ready),                                                                          //          .ready
		.in_data              (rsp_demux_023_src2_data),                                                                           //          .data
		.out_endofpacket      (vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_subsystem_char_buffer_slave_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                              //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_valid             (rsp_demux_023_src3_valid),                                                                            //      sink.valid
		.in_channel           (rsp_demux_023_src3_channel),                                                                          //          .channel
		.in_startofpacket     (rsp_demux_023_src3_startofpacket),                                                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_023_src3_endofpacket),                                                                      //          .endofpacket
		.in_ready             (rsp_demux_023_src3_ready),                                                                            //          .ready
		.in_data              (rsp_demux_023_src3_data),                                                                             //          .data
		.out_endofpacket      (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (55),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (64),
		.IN_PKT_BURSTWRAP_L            (56),
		.IN_PKT_BURST_SIZE_H           (67),
		.IN_PKT_BURST_SIZE_L           (65),
		.IN_PKT_RESPONSE_STATUS_H      (106),
		.IN_PKT_RESPONSE_STATUS_L      (105),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (69),
		.IN_PKT_BURST_TYPE_L           (68),
		.IN_PKT_ORI_BURST_SIZE_L       (107),
		.IN_PKT_ORI_BURST_SIZE_H       (109),
		.IN_ST_DATA_W                  (110),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                              //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.in_valid             (rsp_demux_023_src4_valid),                                                                            //      sink.valid
		.in_channel           (rsp_demux_023_src4_channel),                                                                          //          .channel
		.in_startofpacket     (rsp_demux_023_src4_startofpacket),                                                                    //          .startofpacket
		.in_endofpacket       (rsp_demux_023_src4_endofpacket),                                                                      //          .endofpacket
		.in_ready             (rsp_demux_023_src4_ready),                                                                            //          .ready
		.in_data              (rsp_demux_023_src4_data),                                                                             //          .data
		.out_endofpacket      (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_subsystem_char_buffer_slave_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_nios2_data_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                            //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (rsp_demux_025_src0_valid),                                          //      sink.valid
		.in_channel           (rsp_demux_025_src0_channel),                                        //          .channel
		.in_startofpacket     (rsp_demux_025_src0_startofpacket),                                  //          .startofpacket
		.in_endofpacket       (rsp_demux_025_src0_endofpacket),                                    //          .endofpacket
		.in_ready             (rsp_demux_025_src0_ready),                                          //          .ready
		.in_data              (rsp_demux_025_src0_data),                                           //          .data
		.out_endofpacket      (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_nios2_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (rsp_demux_025_src1_valid),                                                   //      sink.valid
		.in_channel           (rsp_demux_025_src1_channel),                                                 //          .channel
		.in_startofpacket     (rsp_demux_025_src1_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (rsp_demux_025_src1_endofpacket),                                             //          .endofpacket
		.in_ready             (rsp_demux_025_src1_ready),                                                   //          .ready
		.in_data              (rsp_demux_025_src1_data),                                                    //          .data
		.out_endofpacket      (sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_nios2_2nd_core_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                     //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_valid             (rsp_demux_025_src2_valid),                                                   //      sink.valid
		.in_channel           (rsp_demux_025_src2_channel),                                                 //          .channel
		.in_startofpacket     (rsp_demux_025_src2_startofpacket),                                           //          .startofpacket
		.in_endofpacket       (rsp_demux_025_src2_endofpacket),                                             //          .endofpacket
		.in_ready             (rsp_demux_025_src2_ready),                                                   //          .ready
		.in_data              (rsp_demux_025_src2_data),                                                    //          .data
		.out_endofpacket      (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_jtag_to_fpga_bridge_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                            //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_valid             (rsp_demux_025_src3_valid),                                                          //      sink.valid
		.in_channel           (rsp_demux_025_src3_channel),                                                        //          .channel
		.in_startofpacket     (rsp_demux_025_src3_startofpacket),                                                  //          .startofpacket
		.in_endofpacket       (rsp_demux_025_src3_endofpacket),                                                    //          .endofpacket
		.in_ready             (rsp_demux_025_src3_ready),                                                          //          .ready
		.in_data              (rsp_demux_025_src3_data),                                                           //          .data
		.out_endofpacket      (sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_nios2_2nd_core_instruction_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (82),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (94),
		.OUT_PKT_BURST_SIZE_L          (92),
		.OUT_PKT_RESPONSE_STATUS_H     (133),
		.OUT_PKT_RESPONSE_STATUS_L     (132),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (96),
		.OUT_PKT_BURST_TYPE_L          (95),
		.OUT_PKT_ORI_BURST_SIZE_L      (134),
		.OUT_PKT_ORI_BURST_SIZE_H      (136),
		.OUT_ST_DATA_W                 (137),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_nios2_instruction_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                   //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (rsp_demux_025_src4_valid),                                                 //      sink.valid
		.in_channel           (rsp_demux_025_src4_channel),                                               //          .channel
		.in_startofpacket     (rsp_demux_025_src4_startofpacket),                                         //          .startofpacket
		.in_endofpacket       (rsp_demux_025_src4_endofpacket),                                           //          .endofpacket
		.in_ready             (rsp_demux_025_src4_ready),                                                 //          .ready
		.in_data              (rsp_demux_025_src4_data),                                                  //          .data
		.out_endofpacket      (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_nios2_instruction_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                         //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_valid             (rsp_demux_025_src5_valid),                                                       //      sink.valid
		.in_channel           (rsp_demux_025_src5_channel),                                                     //          .channel
		.in_startofpacket     (rsp_demux_025_src5_startofpacket),                                               //          .startofpacket
		.in_endofpacket       (rsp_demux_025_src5_endofpacket),                                                 //          .endofpacket
		.in_ready             (rsp_demux_025_src5_ready),                                                       //          .ready
		.in_data              (rsp_demux_025_src5_data),                                                        //          .data
		.out_endofpacket      (sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                       //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (rsp_demux_025_src6_valid),                                                     //      sink.valid
		.in_channel           (rsp_demux_025_src6_channel),                                                   //          .channel
		.in_startofpacket     (rsp_demux_025_src6_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (rsp_demux_025_src6_endofpacket),                                               //          .endofpacket
		.in_ready             (rsp_demux_025_src6_ready),                                                     //          .ready
		.in_data              (rsp_demux_025_src6_data),                                                      //          .data
		.out_endofpacket      (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (64),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (73),
		.IN_PKT_BURSTWRAP_L            (65),
		.IN_PKT_BURST_SIZE_H           (76),
		.IN_PKT_BURST_SIZE_L           (74),
		.IN_PKT_RESPONSE_STATUS_H      (115),
		.IN_PKT_RESPONSE_STATUS_L      (114),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (78),
		.IN_PKT_BURST_TYPE_L           (77),
		.IN_PKT_ORI_BURST_SIZE_L       (116),
		.IN_PKT_ORI_BURST_SIZE_H       (118),
		.IN_ST_DATA_W                  (119),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                       //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_valid             (rsp_demux_025_src7_valid),                                                     //      sink.valid
		.in_channel           (rsp_demux_025_src7_channel),                                                   //          .channel
		.in_startofpacket     (rsp_demux_025_src7_startofpacket),                                             //          .startofpacket
		.in_endofpacket       (rsp_demux_025_src7_endofpacket),                                               //          .endofpacket
		.in_ready             (rsp_demux_025_src7_ready),                                                     //          .ready
		.in_data              (rsp_demux_025_src7_data),                                                      //          .data
		.out_endofpacket      (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                             //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (rsp_demux_026_src3_valid),                                                           //      sink.valid
		.in_channel           (rsp_demux_026_src3_channel),                                                         //          .channel
		.in_startofpacket     (rsp_demux_026_src3_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_026_src3_endofpacket),                                                     //          .endofpacket
		.in_ready             (rsp_demux_026_src3_ready),                                                           //          .ready
		.in_data              (rsp_demux_026_src3_data),                                                            //          .data
		.out_endofpacket      (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_wr_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (202),
		.OUT_PKT_BURST_SIZE_L          (200),
		.OUT_PKT_RESPONSE_STATUS_H     (241),
		.OUT_PKT_RESPONSE_STATUS_L     (240),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (204),
		.OUT_PKT_BURST_TYPE_L          (203),
		.OUT_PKT_ORI_BURST_SIZE_L      (242),
		.OUT_PKT_ORI_BURST_SIZE_H      (244),
		.OUT_ST_DATA_W                 (245),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                             //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (rsp_demux_026_src4_valid),                                                           //      sink.valid
		.in_channel           (rsp_demux_026_src4_channel),                                                         //          .channel
		.in_startofpacket     (rsp_demux_026_src4_startofpacket),                                                   //          .startofpacket
		.in_endofpacket       (rsp_demux_026_src4_endofpacket),                                                     //          .endofpacket
		.in_ready             (rsp_demux_026_src4_ready),                                                           //          .ready
		.in_data              (rsp_demux_026_src4_data),                                                            //          .data
		.out_endofpacket      (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_sram_s1_to_arm_a9_hps_h2f_axi_master_rd_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (64),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (76),
		.OUT_PKT_BURST_SIZE_L          (74),
		.OUT_PKT_RESPONSE_STATUS_H     (115),
		.OUT_PKT_RESPONSE_STATUS_L     (114),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (78),
		.OUT_PKT_BURST_TYPE_L          (77),
		.OUT_PKT_ORI_BURST_SIZE_L      (116),
		.OUT_PKT_ORI_BURST_SIZE_H      (118),
		.OUT_ST_DATA_W                 (119),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                                       //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.in_valid             (rsp_demux_026_src5_valid),                                                                     //      sink.valid
		.in_channel           (rsp_demux_026_src5_channel),                                                                   //          .channel
		.in_startofpacket     (rsp_demux_026_src5_startofpacket),                                                             //          .startofpacket
		.in_endofpacket       (rsp_demux_026_src5_endofpacket),                                                               //          .endofpacket
		.in_ready             (rsp_demux_026_src5_ready),                                                                     //          .ready
		.in_data              (rsp_demux_026_src5_data),                                                                      //          .data
		.out_endofpacket      (onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_sram_s1_to_video_in_subsystem_video_in_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (82),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (91),
		.IN_PKT_BURSTWRAP_L            (83),
		.IN_PKT_BURST_SIZE_H           (94),
		.IN_PKT_BURST_SIZE_L           (92),
		.IN_PKT_RESPONSE_STATUS_H      (133),
		.IN_PKT_RESPONSE_STATUS_L      (132),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (96),
		.IN_PKT_BURST_TYPE_L           (95),
		.IN_PKT_ORI_BURST_SIZE_L       (134),
		.IN_PKT_ORI_BURST_SIZE_H       (136),
		.IN_ST_DATA_W                  (137),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (55),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (67),
		.OUT_PKT_BURST_SIZE_L          (65),
		.OUT_PKT_RESPONSE_STATUS_H     (106),
		.OUT_PKT_RESPONSE_STATUS_L     (105),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (69),
		.OUT_PKT_BURST_TYPE_L          (68),
		.OUT_PKT_ORI_BURST_SIZE_L      (107),
		.OUT_PKT_ORI_BURST_SIZE_H      (109),
		.OUT_ST_DATA_W                 (110),
		.ST_CHANNEL_W                  (37),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (0),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (1)
	) onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter (
		.clk                  (System_PLL_sys_clk_clk),                                                               //       clk.clk
		.reset                (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_valid             (rsp_demux_035_src2_valid),                                                             //      sink.valid
		.in_channel           (rsp_demux_035_src2_channel),                                                           //          .channel
		.in_startofpacket     (rsp_demux_035_src2_startofpacket),                                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_035_src2_endofpacket),                                                       //          .endofpacket
		.in_ready             (rsp_demux_035_src2_ready),                                                             //          .ready
		.in_data              (rsp_demux_035_src2_data),                                                              //          .data
		.out_endofpacket      (onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (onchip_sram_s2_to_vga_subsystem_pixel_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                // (terminated)
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (adc_adc_slave_agent_rdata_fifo_out_data),                         //     in_0.data
		.in_0_valid     (adc_adc_slave_agent_rdata_fifo_out_valid),                        //         .valid
		.in_0_ready     (adc_adc_slave_agent_rdata_fifo_out_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                    //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (audio_subsystem_audio_slave_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (audio_subsystem_audio_slave_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (audio_subsystem_audio_slave_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (av_config_avalon_av_config_slave_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (av_config_avalon_av_config_slave_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (av_config_avalon_av_config_slave_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (irda_avalon_irda_slave_agent_rdata_fifo_out_data),                //     in_0.data
		.in_0_valid     (irda_avalon_irda_slave_agent_rdata_fifo_out_valid),               //         .valid
		.in_0_ready     (irda_avalon_irda_slave_agent_rdata_fifo_out_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ps2_port_avalon_ps2_slave_agent_rdata_fifo_out_data),             //     in_0.data
		.in_0_valid     (ps2_port_avalon_ps2_slave_agent_rdata_fifo_out_valid),            //         .valid
		.in_0_ready     (ps2_port_avalon_ps2_slave_agent_rdata_fifo_out_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_out_data),        //     in_0.data
		.in_0_valid     (ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_out_valid),       //         .valid
		.in_0_ready     (ps2_port_dual_avalon_ps2_slave_agent_rdata_fifo_out_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vga_subsystem_char_buffer_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                                  //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                                  //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                                   //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_out_data),                   //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_out_valid),                  //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_out_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                                     // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (video_in_subsystem_edge_detection_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                                          //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                                          //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                                           //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (leds_s1_agent_rdata_fifo_out_data),                               //     in_0.data
		.in_0_valid     (leds_s1_agent_rdata_fifo_out_valid),                              //         .valid
		.in_0_ready     (leds_s1_agent_rdata_fifo_out_ready),                              //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex3_hex0_s1_agent_rdata_fifo_out_data),                          //     in_0.data
		.in_0_valid     (hex3_hex0_s1_agent_rdata_fifo_out_valid),                         //         .valid
		.in_0_ready     (hex3_hex0_s1_agent_rdata_fifo_out_ready),                         //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hex5_hex4_s1_agent_rdata_fifo_out_data),                          //     in_0.data
		.in_0_valid     (hex5_hex4_s1_agent_rdata_fifo_out_valid),                         //         .valid
		.in_0_ready     (hex5_hex4_s1_agent_rdata_fifo_out_ready),                         //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (slider_switches_s1_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (slider_switches_s1_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (slider_switches_s1_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pushbuttons_s1_agent_rdata_fifo_out_data),                        //     in_0.data
		.in_0_valid     (pushbuttons_s1_agent_rdata_fifo_out_valid),                       //         .valid
		.in_0_ready     (pushbuttons_s1_agent_rdata_fifo_out_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (expansion_jp1_s1_agent_rdata_fifo_out_data),                      //     in_0.data
		.in_0_valid     (expansion_jp1_s1_agent_rdata_fifo_out_valid),                     //         .valid
		.in_0_ready     (expansion_jp1_s1_agent_rdata_fifo_out_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (expansion_jp2_s1_agent_rdata_fifo_out_data),                      //     in_0.data
		.in_0_valid     (expansion_jp2_s1_agent_rdata_fifo_out_valid),                     //         .valid
		.in_0_ready     (expansion_jp2_s1_agent_rdata_fifo_out_ready),                     //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (interval_timer_s1_agent_rdata_fifo_out_data),                     //     in_0.data
		.in_0_valid     (interval_timer_s1_agent_rdata_fifo_out_valid),                    //         .valid
		.in_0_ready     (interval_timer_s1_agent_rdata_fifo_out_ready),                    //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (interval_timer_2_s1_agent_rdata_fifo_out_data),                   //     in_0.data
		.in_0_valid     (interval_timer_2_s1_agent_rdata_fifo_out_valid),                  //         .valid
		.in_0_ready     (interval_timer_2_s1_agent_rdata_fifo_out_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_for_arm_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                                 //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_for_arm_1_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                                 //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (pixel_dma_addr_translation_slave_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (video_in_dma_addr_translation_slave_agent_rdata_fifo_out_data),   //     in_0.data
		.in_0_valid     (video_in_dma_addr_translation_slave_agent_rdata_fifo_out_valid),  //         .valid
		.in_0_ready     (video_in_dma_addr_translation_slave_agent_rdata_fifo_out_ready),  //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_022 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_022_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_022_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_022_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_022_out_0_error)                       //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_023 #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_023 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_data),       //     in_0.data
		.in_0_valid     (vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_valid),      //         .valid
		.in_0_ready     (vga_subsystem_char_buffer_slave_agent_rdata_fifo_out_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_023_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_023_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_023_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_023_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_024 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (vga_subsystem_pixel_dma_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_024_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_024_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_024_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_024_out_0_error)                                 //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter_025 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_025 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_s1_agent_rdata_fifo_out_data),                              //     in_0.data
		.in_0_valid     (sdram_s1_agent_rdata_fifo_out_valid),                             //         .valid
		.in_0_ready     (sdram_s1_agent_rdata_fifo_out_ready),                             //         .ready
		.out_0_data     (avalon_st_adapter_025_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_025_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_025_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_025_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_026 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_sram_s1_agent_rdata_fifo_out_data),                        //     in_0.data
		.in_0_valid     (onchip_sram_s1_agent_rdata_fifo_out_valid),                       //         .valid
		.in_0_ready     (onchip_sram_s1_agent_rdata_fifo_out_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_026_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_026_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_026_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_026_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_027 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                                   // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (video_in_subsystem_video_in_dma_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_027_out_0_data),                                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_027_out_0_valid),                                        //         .valid
		.out_0_ready    (avalon_st_adapter_027_out_0_ready),                                        //         .ready
		.out_0_error    (avalon_st_adapter_027_out_0_error)                                         //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_028 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (f2h_mem_window_00000000_windowed_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_028_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_028_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_028_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_028_out_0_error)                                  //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_029 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (f2h_mem_window_ff600000_windowed_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_029_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_029_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_029_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_029_out_0_error)                                  //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_030 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (f2h_mem_window_ff800000_windowed_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_030_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_030_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_030_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_030_out_0_error)                                  //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_031 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (JTAG_UART_reset_reset_bridge_in_reset_reset),                     // in_rst_0.reset
		.in_0_data      (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_2nd_core_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_031_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_031_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_031_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_031_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_032 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (Nios2_2nd_Core_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nios2_2nd_core_debug_mem_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_032_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_032_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_032_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_032_out_0_error)                          //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_033 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (interval_timer_2nd_core_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (interval_timer_2nd_core_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (interval_timer_2nd_core_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_033_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_033_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_033_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_033_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_034 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_data),          //     in_0.data
		.in_0_valid     (interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_valid),         //         .valid
		.in_0_ready     (interval_timer_2nd_core_2_s1_agent_rdata_fifo_out_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_034_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_034_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_034_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_034_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_035 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (Video_In_DMA_Addr_Translation_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_sram_s2_agent_rdata_fifo_out_data),                        //     in_0.data
		.in_0_valid     (onchip_sram_s2_agent_rdata_fifo_out_valid),                       //         .valid
		.in_0_ready     (onchip_sram_s2_agent_rdata_fifo_out_ready),                       //         .ready
		.out_0_data     (avalon_st_adapter_035_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_035_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_035_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_035_out_0_error)                                //         .error
	);

	Computer_System_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_036 (
		.in_clk_0_clk   (System_PLL_sys_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (Nios2_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_debug_mem_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (nios2_debug_mem_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (nios2_debug_mem_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_036_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_036_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_036_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_036_out_0_error)                 //         .error
	);

endmodule
