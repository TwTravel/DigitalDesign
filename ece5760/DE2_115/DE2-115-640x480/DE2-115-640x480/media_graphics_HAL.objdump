
C:/Users/Shiva/Desktop/shiva_test/shiva_test/media_graphics_HAL.elf:     file format elf32-littlenios2
C:/Users/Shiva/Desktop/shiva_test/shiva_test/media_graphics_HAL.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000178

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00005bd0 memsz 0x00005bd0 flags r-x
    LOAD off    0x00006bf0 vaddr 0x00005bf0 paddr 0x000079ac align 2**12
         filesz 0x00001dbc memsz 0x00001dbc flags rw-
    LOAD off    0x00009768 vaddr 0x00009768 paddr 0x00009768 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000158  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000057f8  00000178  00000178  00001178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000280  00005970  00005970  00006970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001dbc  00005bf0  000079ac  00006bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  00009768  00009768  00009768  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM        00000000  000098b8  000098b8  000089ac  2**0
                  CONTENTS
  7 .Flash_flash_data 00000000  0c000000  0c000000  000089ac  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000089ac  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a30  00000000  00000000  000089d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00019c3c  00000000  00000000  00009400  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006cc3  00000000  00000000  0002303c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000718b  00000000  00000000  00029cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000016d8  00000000  00000000  00030e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002c51  00000000  00000000  00032564  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000740a  00000000  00000000  000351b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0003c5c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000580  00000000  00000000  0003c5e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003fca1  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0003fca4  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003fca7  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003fca8  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003fca9  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0003fcad  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0003fcb1  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0003fcb5  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0003fcbe  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0003fcc7  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000b  00000000  00000000  0003fcd0  2**0
                  CONTENTS, READONLY
 29 .jdi          000039ac  00000000  00000000  0003fcdb  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000f39dc  00000000  00000000  00043687  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000178 l    d  .text	00000000 .text
00005970 l    d  .rodata	00000000 .rodata
00005bf0 l    d  .rwdata	00000000 .rwdata
00009768 l    d  .bss	00000000 .bss
000098b8 l    d  .SDRAM	00000000 .SDRAM
0c000000 l    d  .Flash_flash_data	00000000 .Flash_flash_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 BSP//obj/HAL/src/crt0.o
000001b0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 media_graphics_HAL.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00005f40 l     O .rwdata	00001060 JTAG_UART
00005f10 l     O .rwdata	00000030 AV_Config
00005ee0 l     O .rwdata	00000030 Audio
00005eb4 l     O .rwdata	0000002c Char_LCD_16x2
00005e88 l     O .rwdata	0000002c IrDA
00005e5c l     O .rwdata	0000002c Expansion_JP5
00005e30 l     O .rwdata	0000002c Green_LEDs
00005e04 l     O .rwdata	0000002c HEX3_HEX0
00005dd8 l     O .rwdata	0000002c HEX7_HEX4
00005dac l     O .rwdata	0000002c Pushbuttons
00005d80 l     O .rwdata	0000002c Red_LEDs
00005d54 l     O .rwdata	0000002c Slider_Switches
00005d1c l     O .rwdata	00000038 PS2_Port
00005ce4 l     O .rwdata	00000038 PS2_Port_Dual
00005cb8 l     O .rwdata	0000002c Serial_Port
00005c70 l     O .rwdata	00000048 VGA_Char_Buffer
00005c1c l     O .rwdata	00000054 VGA_Pixel_Buffer
00005bf0 l     O .rwdata	0000002c SD_Card
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000f9c l     F .text	00000050 altera_avalon_jtag_uart_timeout
00000fec l     F .text	00000108 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001518 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_irda.c
00000000 l    df *ABS*	00000000 altera_up_avalon_ps2.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_character_buffer_with_dma.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002a34 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002b58 l     F .text	0000006c alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00007148 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003d00 l     F .text	00000008 __fp_lock
00003d08 l     F .text	00000008 __fp_unlock
00003d1c l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000079a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000545c g     F .text	00000054 _isatty_r
0000096c g     F .text	00000050 alt_main
0000243c g     F .text	00000184 alt_up_pixel_buffer_dma_draw_vline
000097b8 g     O .bss	00000100 alt_irq
00001974 g     F .text	0000001c alt_up_ps2_disable_read_interrupt
000054b0 g     F .text	0000005c _lseek_r
000079ac g       *ABS*	00000000 __flash_rwdata_start
000015b4 g     F .text	0000000c alt_up_character_lcd_send_cmd
000098b8 g       *ABS*	00000000 __alt_heap_start
000051ec g     F .text	0000005c __sseek
00004050 g     F .text	00000010 __sinit
00003630 g     F .text	00000138 __swbuf_r
00001e44 g     F .text	00000098 alt_up_char_buffer_string
00001934 g     F .text	0000000c read_CE_bit
00003eb8 g     F .text	00000068 __sfmoreglue
0000572c g     F .text	00000004 __malloc_unlock
000019b0 g     F .text	00000038 alt_up_ps2_read_data_byte_timeout
00001cb4 g     F .text	00000070 alt_up_rs232_read_fd
00001dec g     F .text	00000058 alt_up_char_buffer_draw
00004038 g     F .text	00000018 _cleanup
00001f1c g     F .text	000000c0 alt_up_pixel_buffer_dma_draw
00000000  w      *UND*	00000000 __errno
000015a0 g     F .text	00000014 get_DDRAM_addr
00001efc g     F .text	00000020 alt_up_pixel_buffer_dma_open_dev
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00005404 g     F .text	00000058 _fstat_r
00009780 g     O .bss	00000004 errno
00005168 g     F .text	00000008 __seofread
0000976c g     O .bss	00000004 alt_argv
0000f974 g       *ABS*	00000000 _gp
00001fdc g     F .text	0000001c alt_up_pixel_buffer_dma_change_back_buffer_address
00006fa0 g     O .rwdata	00000180 alt_fd_list
00002abc g     F .text	0000007c alt_find_dev
00003250 g     F .text	00000138 memcpy
0000164c g     F .text	00000020 alt_up_character_lcd_write_fd
00001edc g     F .text	00000020 alt_up_char_buffer_clear
00003d10 g     F .text	0000000c _cleanup_r
00002bc4 g     F .text	00000098 alt_io_redirect
000018d4 g     F .text	0000002c alt_up_irda_write_fd
00001c68 g     F .text	0000004c alt_up_rs232_read_data
0000201c g     F .text	00000010 alt_up_pixel_buffer_dma_check_swap_buffers_status
000017d4 g     F .text	00000010 alt_up_irda_get_used_space_in_read_FIFO
00001230 g     F .text	00000150 altera_avalon_jtag_uart_read
000055fc g     F .text	00000090 isatty
000022e8 g     F .text	00000154 alt_up_pixel_buffer_dma_draw_hline
000017b8 g     F .text	0000001c alt_up_irda_disable_read_interrupt
00003144 g     F .text	00000058 alt_icache_flush
0000978c g     O .bss	00000004 __malloc_top_pad
000050c0 g     F .text	00000054 _sbrk_r
00002684 g     F .text	00000064 helper_plot_pixel
0000550c g     F .text	0000005c _read_r
00007974 g     O .rwdata	00000004 alt_max_fd
00001c44 g     F .text	00000010 alt_up_rs232_check_parity
00005300 g     F .text	000000f0 _fclose_r
00001940 g     F .text	00000008 read_num_bytes_available
00003cd0 g     F .text	00000030 fflush
00009788 g     O .bss	00000004 __malloc_max_sbrked_mem
00002c5c g     F .text	000000bc alt_irq_register
00001920 g     F .text	0000000c read_RI_bit
0000202c g     F .text	000000a8 alt_up_pixel_buffer_dma_clear_screen
0000568c g     F .text	0000009c lseek
00007998 g     O .rwdata	00000004 _global_impure_ptr
000098b8 g       *ABS*	00000000 __bss_end
000020d4 g     F .text	00000214 alt_up_pixel_buffer_dma_draw_box
00002f2c g     F .text	000000cc alt_tick
0c000000 g       *ABS*	00000000 __alt_mem_Flash_flash_data
00001954 g     F .text	00000008 read_data_byte
00004070 g     F .text	00000018 __fp_lock_all
00002ef4 g     F .text	00000038 alt_alarm_stop
0000192c g     F .text	00000008 read_RE_bit
00009774 g     O .bss	00000004 alt_irq_active
000017e4 g     F .text	00000010 alt_up_irda_get_available_space_in_write_FIFO
000000ec g     F .exceptions	0000008c alt_irq_handler
00007120 g     O .rwdata	00000028 alt_dev_null
00001790 g     F .text	00000010 alt_up_character_lcd_cursor_blink_on
00001990 g     F .text	00000020 alt_up_ps2_write_data_byte
00002a30 g     F .text	00000004 alt_dcache_flush_all
000025c0 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
000079ac g       *ABS*	00000000 __ram_rwdata_end
00007978 g     O .rwdata	00000008 alt_dev_list
00005878 g     F .text	000000f8 write
00003388 g     F .text	000000a0 _putc_r
000026e8 g     F .text	000001e4 alt_up_pixel_buffer_dma_draw_line
00005bf0 g       *ABS*	00000000 __ram_rodata_end
0000557c g     F .text	00000080 fstat
00001d24 g     F .text	0000002c alt_up_rs232_write_fd
00000000 g       *ABS*	00000000 __alt_mem_SDRAM
000098b8 g       *ABS*	00000000 end
00001b5c g     F .text	00000074 alt_up_ps2_write_fd
000017f4 g     F .text	00000010 alt_up_irda_check_parity
00001d70 g     F .text	0000005c alt_up_char_buffer_init
000010f4 g     F .text	00000078 altera_avalon_jtag_uart_init
08000000 g       *ABS*	00000000 __alt_stack_pointer
00001554 g     F .text	0000004c alt_avalon_timer_sc_init
00001380 g     F .text	00000198 altera_avalon_jtag_uart_write
00004060 g     F .text	00000004 __sfp_lock_acquire
000015f0 g     F .text	00000024 alt_up_character_lcd_write
000041c4 g     F .text	000002f0 _free_r
000009bc g     F .text	00000214 alt_printf
000038d8 g     F .text	00000194 __call_exitprocs
000079a0 g     O .rwdata	00000004 __malloc_sbrk_base
00000178 g     F .text	0000003c _start
0000977c g     O .bss	00000004 _alt_tick_rate
00009778 g     O .bss	00000004 _alt_nticks
00005730 g     F .text	000000fc read
00000c18 g     F .text	000002ec alt_sys_init
000016f0 g     F .text	00000044 alt_up_character_lcd_shift_display
000001b4 g     F .text	000001ec draw_big_A
00001b20 g     F .text	00000014 alt_up_ps2_clear_fifo
00001c34 g     F .text	00000010 alt_up_rs232_get_available_space_in_write_FIFO
00001734 g     F .text	0000004c alt_up_character_lcd_erase_pos
0000116c g     F .text	0000003c altera_avalon_jtag_uart_close
00005bf0 g       *ABS*	00000000 __ram_rwdata_start
00005970 g       *ABS*	00000000 __ram_rodata_start
00009790 g     O .bss	00000028 __malloc_current_mallinfo
00000f04 g     F .text	00000028 altera_avalon_jtag_uart_read_fd
000030cc g     F .text	00000078 alt_get_fd
000052ac g     F .text	00000054 _close_r
000031d4 g     F .text	0000007c memcmp
00000f54 g     F .text	00000028 altera_avalon_jtag_uart_close_fd
000098b8 g       *ABS*	00000000 __alt_stack_base
00000f7c g     F .text	00000020 altera_avalon_jtag_uart_ioctl_fd
000017a0 g     F .text	00000018 alt_up_irda_enable_read_interrupt
00003784 g     F .text	00000154 __swsetup_r
00003f20 g     F .text	00000118 __sfp
0000756c g     O .rwdata	00000408 __malloc_av_
0000406c g     F .text	00000004 __sinit_lock_release
00005114 g     F .text	00000054 __sread
00001c08 g     F .text	0000001c alt_up_rs232_disable_read_interrupt
00003000 g     F .text	000000cc alt_find_file
00002a3c g     F .text	00000080 alt_dev_llist_insert
00005728 g     F .text	00000004 __malloc_lock
0000582c g     F .text	0000004c sbrk
00003c74 g     F .text	0000005c _fflush_r
00009768 g       *ABS*	00000000 __bss_start
00004f9c g     F .text	00000124 memset
000003a0 g     F .text	00000448 main
00009768 g     O .bss	00000004 alt_envp
00009784 g     O .bss	00000004 __malloc_max_total_mem
00001ff8 g     F .text	00000024 alt_up_pixel_buffer_dma_swap_buffers
00001dcc g     F .text	00000020 alt_up_char_buffer_open_dev
00000f2c g     F .text	00000028 altera_avalon_jtag_uart_write_fd
00003768 g     F .text	0000001c __swbuf
000016ac g     F .text	00000044 alt_up_character_lcd_shift_cursor
00005248 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
000053f0 g     F .text	00000014 fclose
00001afc g     F .text	00000024 alt_up_ps2_read_data_byte
000047f4 g     F .text	000007a8 _malloc_r
00007988 g     O .rwdata	00000004 alt_errno
000044b4 g     F .text	000000c4 _fwalk
00001804 g     F .text	00000014 alt_up_irda_write_data
00001bd0 g     F .text	00000020 alt_up_ps2_open_dev
00003428 g     F .text	000000cc putc
000015d0 g     F .text	00000020 alt_up_character_lcd_open_dev
000040a0 g     F .text	00000124 _malloc_trim_r
0000195c g     F .text	00000018 alt_up_ps2_enable_read_interrupt
000015c0 g     F .text	00000010 alt_up_character_lcd_init
000034f4 g     F .text	000000a4 strcmp
00005970 g       *ABS*	00000000 __flash_rodata_start
00001d50 g     F .text	00000020 alt_up_rs232_open_dev
00000bf8 g     F .text	00000020 alt_irq_init
00002ed0 g     F .text	00000024 alt_release_fd
00001948 g     F .text	0000000c read_data_valid
00001780 g     F .text	00000010 alt_up_character_lcd_cursor_off
00001a44 g     F .text	00000034 alt_up_ps2_write_data_byte_with_ack
00005250 g     F .text	0000005c _write_r
0000799c g     O .rwdata	00000004 _impure_ptr
00009770 g     O .bss	00000004 alt_argc
00003a6c g     F .text	00000208 __sflush_r
00000020 g       .exceptions	00000000 alt_irq_entry
00004088 g     F .text	00000018 __fp_unlock_all
00007980 g     O .rwdata	00000008 alt_fs_list
00001bf0 g     F .text	00000018 alt_up_rs232_enable_read_interrupt
00001c54 g     F .text	00000014 alt_up_rs232_write_data
00000020 g       *ABS*	00000000 __ram_exceptions_start
000079ac g       *ABS*	00000000 _edata
000098b8 g       *ABS*	00000000 _end
00000178 g       *ABS*	00000000 __ram_exceptions_end
000011a8 g     F .text	00000088 altera_avalon_jtag_uart_ioctl
00005170 g     F .text	0000007c __swrite
000079a4 g     O .rwdata	00000004 __malloc_trim_threshold
00002ff8 g     F .text	00000008 altera_nios2_qsys_irq_init
0000319c g     F .text	00000038 exit
00001818 g     F .text	0000004c alt_up_irda_read_data
00004578 g     F .text	000000c4 _fwalk_reent
00001a78 g     F .text	00000084 alt_up_ps2_init
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004064 g     F .text	00000004 __sfp_lock_release
00001614 g     F .text	00000038 alt_up_character_lcd_string
00001900 g     F .text	00000020 alt_up_irda_open_dev
00005568 g     F .text	00000014 _exit
000028cc g     F .text	00000094 alt_alarm_start
0000463c g     F .text	000001b8 __smakebuf_r
000019e8 g     F .text	0000005c alt_up_ps2_wait_for_ack
00003598 g     F .text	00000098 strlen
00002d18 g     F .text	000001b8 open
00000bd0 g     F .text	00000028 alt_putchar
00002b38 g     F .text	00000020 alt_icache_flush_all
0000166c g     F .text	00000040 alt_up_character_lcd_set_cursor_pos
0000798c g     O .rwdata	00000004 alt_priority_mask
00001b34 g     F .text	00000028 alt_up_ps2_read_fd
00001864 g     F .text	00000070 alt_up_irda_read_fd
00007990 g     O .rwdata	00000008 alt_alarm_list
00001c24 g     F .text	00000010 alt_up_rs232_get_used_space_in_read_FIFO
00002960 g     F .text	000000d0 close
000007e8 g     F .text	00000184 alt_load
00000000  w      *UND*	00000000 free
00004068 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_Flash_flash_data+0xf4000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08405e14 	ori	at,at,376
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defffc04 	addi	sp,sp,-16
  f0:	dfc00315 	stw	ra,12(sp)
  f4:	dc800215 	stw	r18,8(sp)
  f8:	dc400115 	stw	r17,4(sp)
  fc:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0009313a 	rdctl	r4,ipending
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 104:	0023883a 	mov	r17,zero
 108:	04800044 	movi	r18,1
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 10c:	04000074 	movhi	r16,1
 110:	8425ee04 	addi	r16,r16,-26696
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 114:	2080004c 	andi	r2,r4,1
 118:	10000a26 	beq	r2,zero,144 <alt_irq_handler+0x58>

  active = alt_irq_pending ();

  do
  {
    i = 0;
 11c:	880b883a 	mov	r5,r17
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 120:	280490fa 	slli	r2,r5,3
 124:	8087883a 	add	r3,r16,r2
 128:	1805883a 	mov	r2,r3
 12c:	18c00017 	ldw	r3,0(r3)
 130:	11000117 	ldw	r4,4(r2)
 134:	183ee83a 	callr	r3
 138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 13c:	203ff51e 	bne	r4,zero,114 <__alt_mem_Flash_flash_data+0xf4000114>
 140:	00000706 	br	160 <alt_irq_handler+0x74>
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 144:	880b883a 	mov	r5,r17
 148:	9005883a 	mov	r2,r18
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 14c:	1085883a 	add	r2,r2,r2
      i++;
 150:	29400044 	addi	r5,r5,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 154:	2086703a 	and	r3,r4,r2
 158:	183ffc26 	beq	r3,zero,14c <__alt_mem_Flash_flash_data+0xf400014c>
 15c:	003ff006 	br	120 <__alt_mem_Flash_flash_data+0xf4000120>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 160:	dfc00317 	ldw	ra,12(sp)
 164:	dc800217 	ldw	r18,8(sp)
 168:	dc400117 	ldw	r17,4(sp)
 16c:	dc000017 	ldw	r16,0(sp)
 170:	dec00404 	addi	sp,sp,16
 174:	f800283a 	ret

Disassembly of section .text:

00000178 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     178:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     17c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     180:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     184:	d6be5d14 	ori	gp,gp,63860
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     188:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     18c:	10a5da14 	ori	r2,r2,38760

    movhi r3, %hi(__bss_end)
     190:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     194:	18e62e14 	ori	r3,r3,39096

    beq r2, r3, 1f
     198:	10c00326 	beq	r2,r3,1a8 <_start+0x30>

0:
    stw zero, (r2)
     19c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1a0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1a4:	10fffd36 	bltu	r2,r3,19c <__alt_mem_Flash_flash_data+0xf400019c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1a8:	00007e80 	call	7e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1ac:	000096c0 	call	96c <alt_main>

000001b0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1b0:	003fff06 	br	1b0 <__alt_mem_Flash_flash_data+0xf40001b0>

000001b4 <draw_big_A>:
	}
}

/* draws a big letter A on the screen */
void draw_big_A(alt_up_pixel_buffer_dma_dev *pixel_buffer_dev )
{
     1b4:	defff504 	addi	sp,sp,-44
     1b8:	dfc00a15 	stw	ra,40(sp)
     1bc:	dd800915 	stw	r22,36(sp)
     1c0:	dd400815 	stw	r21,32(sp)
     1c4:	dd000715 	stw	r20,28(sp)
     1c8:	dcc00615 	stw	r19,24(sp)
     1cc:	dc800515 	stw	r18,20(sp)
     1d0:	dc400415 	stw	r17,16(sp)
     1d4:	dc000315 	stw	r16,12(sp)
     1d8:	2023883a 	mov	r17,r4
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 10, 88, 44, 10, 0xffff, 0);
     1dc:	04c00284 	movi	r19,10
     1e0:	04801604 	movi	r18,88
     1e4:	05000b04 	movi	r20,44
     1e8:	dcc00015 	stw	r19,0(sp)
     1ec:	043fffd4 	movui	r16,65535
     1f0:	dc000115 	stw	r16,4(sp)
     1f4:	d8000215 	stw	zero,8(sp)
     1f8:	980b883a 	mov	r5,r19
     1fc:	900d883a 	mov	r6,r18
     200:	a00f883a 	mov	r7,r20
     204:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 44, 10, 72, 10, 0xffff, 0);
     208:	05401204 	movi	r21,72
     20c:	dcc00015 	stw	r19,0(sp)
     210:	dc000115 	stw	r16,4(sp)
     214:	d8000215 	stw	zero,8(sp)
     218:	8809883a 	mov	r4,r17
     21c:	a00b883a 	mov	r5,r20
     220:	980d883a 	mov	r6,r19
     224:	a80f883a 	mov	r7,r21
     228:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 72, 10, 106, 88, 0xffff, 0);
     22c:	05001a84 	movi	r20,106
     230:	dc800015 	stw	r18,0(sp)
     234:	dc000115 	stw	r16,4(sp)
     238:	d8000215 	stw	zero,8(sp)
     23c:	8809883a 	mov	r4,r17
     240:	a80b883a 	mov	r5,r21
     244:	980d883a 	mov	r6,r19
     248:	a00f883a 	mov	r7,r20
     24c:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 106, 88, 81, 88, 0xffff, 0);
     250:	05801444 	movi	r22,81
     254:	dc800015 	stw	r18,0(sp)
     258:	dc000115 	stw	r16,4(sp)
     25c:	d8000215 	stw	zero,8(sp)
     260:	8809883a 	mov	r4,r17
     264:	a00b883a 	mov	r5,r20
     268:	900d883a 	mov	r6,r18
     26c:	b00f883a 	mov	r7,r22
     270:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 81, 88, 75, 77, 0xffff, 0);
     274:	054012c4 	movi	r21,75
     278:	05001344 	movi	r20,77
     27c:	dd000015 	stw	r20,0(sp)
     280:	dc000115 	stw	r16,4(sp)
     284:	d8000215 	stw	zero,8(sp)
     288:	8809883a 	mov	r4,r17
     28c:	b00b883a 	mov	r5,r22
     290:	900d883a 	mov	r6,r18
     294:	a80f883a 	mov	r7,r21
     298:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 75, 77, 41, 77, 0xffff, 0);
     29c:	05800a44 	movi	r22,41
     2a0:	dd000015 	stw	r20,0(sp)
     2a4:	dc000115 	stw	r16,4(sp)
     2a8:	d8000215 	stw	zero,8(sp)
     2ac:	8809883a 	mov	r4,r17
     2b0:	a80b883a 	mov	r5,r21
     2b4:	a00d883a 	mov	r6,r20
     2b8:	b00f883a 	mov	r7,r22
     2bc:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 41, 77, 35, 88, 0xffff, 0);
     2c0:	054008c4 	movi	r21,35
     2c4:	dc800015 	stw	r18,0(sp)
     2c8:	dc000115 	stw	r16,4(sp)
     2cc:	d8000215 	stw	zero,8(sp)
     2d0:	8809883a 	mov	r4,r17
     2d4:	b00b883a 	mov	r5,r22
     2d8:	a00d883a 	mov	r6,r20
     2dc:	a80f883a 	mov	r7,r21
     2e0:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 35, 88, 10, 88, 0xffff, 0);
     2e4:	dc800015 	stw	r18,0(sp)
     2e8:	dc000115 	stw	r16,4(sp)
     2ec:	d8000215 	stw	zero,8(sp)
     2f0:	8809883a 	mov	r4,r17
     2f4:	a80b883a 	mov	r5,r21
     2f8:	900d883a 	mov	r6,r18
     2fc:	980f883a 	mov	r7,r19
     300:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 47, 60, 58, 32, 0xffff, 0);
     304:	04c00bc4 	movi	r19,47
     308:	04800f04 	movi	r18,60
     30c:	05800e84 	movi	r22,58
     310:	05400804 	movi	r21,32
     314:	dd400015 	stw	r21,0(sp)
     318:	dc000115 	stw	r16,4(sp)
     31c:	d8000215 	stw	zero,8(sp)
     320:	8809883a 	mov	r4,r17
     324:	980b883a 	mov	r5,r19
     328:	900d883a 	mov	r6,r18
     32c:	b00f883a 	mov	r7,r22
     330:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 58, 32, 69, 60, 0xffff, 0);
     334:	05001144 	movi	r20,69
     338:	dc800015 	stw	r18,0(sp)
     33c:	dc000115 	stw	r16,4(sp)
     340:	d8000215 	stw	zero,8(sp)
     344:	8809883a 	mov	r4,r17
     348:	b00b883a 	mov	r5,r22
     34c:	a80d883a 	mov	r6,r21
     350:	a00f883a 	mov	r7,r20
     354:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, 69, 60, 47, 60, 0xffff, 0);
     358:	dc800015 	stw	r18,0(sp)
     35c:	dc000115 	stw	r16,4(sp)
     360:	d8000215 	stw	zero,8(sp)
     364:	8809883a 	mov	r4,r17
     368:	a00b883a 	mov	r5,r20
     36c:	900d883a 	mov	r6,r18
     370:	980f883a 	mov	r7,r19
     374:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
}
     378:	dfc00a17 	ldw	ra,40(sp)
     37c:	dd800917 	ldw	r22,36(sp)
     380:	dd400817 	ldw	r21,32(sp)
     384:	dd000717 	ldw	r20,28(sp)
     388:	dcc00617 	ldw	r19,24(sp)
     38c:	dc800517 	ldw	r18,20(sp)
     390:	dc400417 	ldw	r17,16(sp)
     394:	dc000317 	ldw	r16,12(sp)
     398:	dec00b04 	addi	sp,sp,44
     39c:	f800283a 	ret

000003a0 <main>:
 * 	-- places a blue box on the VGA display, and places a text string inside the box.
 *		-- draws a big A on the screen, for ALTERA
 *		-- "bounces" a colored box around the screen 
********************************************************************************/
int main(void)
{
     3a0:	deffdd04 	addi	sp,sp,-140
     3a4:	dfc02215 	stw	ra,136(sp)
     3a8:	df002115 	stw	fp,132(sp)
     3ac:	ddc02015 	stw	r23,128(sp)
     3b0:	dd801f15 	stw	r22,124(sp)
     3b4:	dd401e15 	stw	r21,120(sp)
     3b8:	dd001d15 	stw	r20,116(sp)
     3bc:	dcc01c15 	stw	r19,112(sp)
     3c0:	dc801b15 	stw	r18,108(sp)
     3c4:	dc401a15 	stw	r17,104(sp)
     3c8:	dc001915 	stw	r16,100(sp)

	/* used for drawing coordinates */
	int x1, y1, x2, y2, deltax_1, deltax_2, deltay_1, deltay_2, delay = 0;

	/* create a message to be displayed on the VGA display */
	char text_top_row[40] = "Altera DE2-115\0";
     3cc:	00800034 	movhi	r2,0
     3d0:	10969304 	addi	r2,r2,23116
     3d4:	10c00017 	ldw	r3,0(r2)
     3d8:	d8c00315 	stw	r3,12(sp)
     3dc:	10c00117 	ldw	r3,4(r2)
     3e0:	d8c00415 	stw	r3,16(sp)
     3e4:	10c00217 	ldw	r3,8(r2)
     3e8:	d8c00515 	stw	r3,20(sp)
     3ec:	10800317 	ldw	r2,12(r2)
     3f0:	d8800615 	stw	r2,24(sp)
     3f4:	d8000715 	stw	zero,28(sp)
     3f8:	d8000815 	stw	zero,32(sp)
     3fc:	d8000915 	stw	zero,36(sp)
     400:	d8000a15 	stw	zero,40(sp)
     404:	d8000b15 	stw	zero,44(sp)
     408:	d8000c15 	stw	zero,48(sp)
	char text_bottom_row[40] = "Media Computer\0";
     40c:	00800034 	movhi	r2,0
     410:	10969d04 	addi	r2,r2,23156
     414:	10c00017 	ldw	r3,0(r2)
     418:	d8c00d15 	stw	r3,52(sp)
     41c:	10c00117 	ldw	r3,4(r2)
     420:	d8c00e15 	stw	r3,56(sp)
     424:	10c00217 	ldw	r3,8(r2)
     428:	d8c00f15 	stw	r3,60(sp)
     42c:	10800317 	ldw	r2,12(r2)
     430:	d8801015 	stw	r2,64(sp)
     434:	d8001115 	stw	zero,68(sp)
     438:	d8001215 	stw	zero,72(sp)
     43c:	d8001315 	stw	zero,76(sp)
     440:	d8001415 	stw	zero,80(sp)
     444:	d8001515 	stw	zero,84(sp)
     448:	d8001615 	stw	zero,88(sp)

	/* initialize the pixel buffer HAL */
	pixel_buffer_dev = alt_up_pixel_buffer_dma_open_dev ("/dev/VGA_Pixel_Buffer");
     44c:	01000034 	movhi	r4,0
     450:	21165c04 	addi	r4,r4,22896
     454:	0001efc0 	call	1efc <alt_up_pixel_buffer_dma_open_dev>
     458:	1021883a 	mov	r16,r2
	if ( pixel_buffer_dev == NULL)
     45c:	1000041e 	bne	r2,zero,470 <main+0xd0>
		alt_printf ("Error: could not open VGA pixel buffer device\n");
     460:	01000034 	movhi	r4,0
     464:	21166204 	addi	r4,r4,22920
     468:	00009bc0 	call	9bc <alt_printf>
     46c:	00000306 	br	47c <main+0xdc>
	else
		alt_printf ("Opened character VGA pixel buffer device\n");
     470:	01000034 	movhi	r4,0
     474:	21166e04 	addi	r4,r4,22968
     478:	00009bc0 	call	9bc <alt_printf>
	/* clear the graphics screen */
	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer_dev, 0);
     47c:	8009883a 	mov	r4,r16
     480:	000b883a 	mov	r5,zero
     484:	000202c0 	call	202c <alt_up_pixel_buffer_dma_clear_screen>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
     488:	01000034 	movhi	r4,0
     48c:	21167904 	addi	r4,r4,23012
     490:	0001dcc0 	call	1dcc <alt_up_char_buffer_open_dev>
     494:	1023883a 	mov	r17,r2
	if (char_buffer_dev == NULL)
     498:	1000c326 	beq	r2,zero,7a8 <main+0x408>
	{
		alt_printf ("Error: could not open character buffer device\n");
		return -1;
	}
	else
		alt_printf ("Opened character buffer device\n");
     49c:	01000034 	movhi	r4,0
     4a0:	21168b04 	addi	r4,r4,23084
     4a4:	00009bc0 	call	9bc <alt_printf>
	alt_up_char_buffer_string (char_buffer_dev, text_top_row, 35, 29);
     4a8:	048008c4 	movi	r18,35
     4ac:	8809883a 	mov	r4,r17
     4b0:	d9400304 	addi	r5,sp,12
     4b4:	900d883a 	mov	r6,r18
     4b8:	01c00744 	movi	r7,29
     4bc:	0001e440 	call	1e44 <alt_up_char_buffer_string>
	alt_up_char_buffer_string (char_buffer_dev, text_bottom_row, 35, 30);
     4c0:	8809883a 	mov	r4,r17
     4c4:	d9400d04 	addi	r5,sp,52
     4c8:	900d883a 	mov	r6,r18
     4cc:	01c00784 	movi	r7,30
     4d0:	0001e440 	call	1e44 <alt_up_char_buffer_string>

	/* now draw a background box for the text */
	alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0x187F, 0);
     4d4:	00802004 	movi	r2,128
     4d8:	d8800015 	stw	r2,0(sp)
     4dc:	00861fc4 	movi	r2,6271
     4e0:	d8800115 	stw	r2,4(sp)
     4e4:	d8000215 	stw	zero,8(sp)
     4e8:	8009883a 	mov	r4,r16
     4ec:	01402204 	movi	r5,136
     4f0:	01801c04 	movi	r6,112
     4f4:	01c03204 	movi	r7,200
     4f8:	00020d40 	call	20d4 <alt_up_pixel_buffer_dma_draw_box>

	/* now draw a big A for ALTERA */
	draw_big_A (pixel_buffer_dev);
     4fc:	8009883a 	mov	r4,r16
     500:	00001b40 	call	1b4 <draw_big_A>

	/* now draw a red rectangle with diagonal green lines */
	x1 = 20; y1 = 20;
	x2 = 50; y2 = 50;
	alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, x1, y1, x2, y2, 0xF800, 0);
     504:	04800504 	movi	r18,20
     508:	04c00c84 	movi	r19,50
     50c:	dcc00015 	stw	r19,0(sp)
     510:	00be0014 	movui	r2,63488
     514:	d8800115 	stw	r2,4(sp)
     518:	d8000215 	stw	zero,8(sp)
     51c:	8009883a 	mov	r4,r16
     520:	900b883a 	mov	r5,r18
     524:	900d883a 	mov	r6,r18
     528:	980f883a 	mov	r7,r19
     52c:	00025c00 	call	25c0 <alt_up_pixel_buffer_dma_draw_rectangle>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0x07e0, 0);
     530:	dcc00015 	stw	r19,0(sp)
     534:	0441f804 	movi	r17,2016
     538:	dc400115 	stw	r17,4(sp)
     53c:	d8000215 	stw	zero,8(sp)
     540:	8009883a 	mov	r4,r16
     544:	900b883a 	mov	r5,r18
     548:	900d883a 	mov	r6,r18
     54c:	980f883a 	mov	r7,r19
     550:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0x07e0, 0);
     554:	dc800015 	stw	r18,0(sp)
     558:	dc400115 	stw	r17,4(sp)
     55c:	d8000215 	stw	zero,8(sp)
     560:	8009883a 	mov	r4,r16
     564:	900b883a 	mov	r5,r18
     568:	980d883a 	mov	r6,r19
     56c:	980f883a 	mov	r7,r19
     570:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     574:	8009883a 	mov	r4,r16
     578:	0001ff80 	call	1ff8 <alt_up_pixel_buffer_dma_swap_buffers>
{
	alt_up_pixel_buffer_dma_dev *pixel_buffer_dev;
	alt_up_char_buffer_dev *char_buffer_dev;

	/* used for drawing coordinates */
	int x1, y1, x2, y2, deltax_1, deltax_2, deltay_1, deltay_2, delay = 0;
     57c:	0023883a 	mov	r17,zero
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0x07e0, 0);
	alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0x07e0, 0);
	alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);

	/* set the direction in which the box will move */
	deltax_1 = deltax_2 = deltay_1 = deltay_2 = 1;
     580:	05800044 	movi	r22,1
     584:	b039883a 	mov	fp,r22
     588:	dd801815 	stw	r22,96(sp)
     58c:	dd801715 	stw	r22,92(sp)
	/* now draw a big A for ALTERA */
	draw_big_A (pixel_buffer_dev);

	/* now draw a red rectangle with diagonal green lines */
	x1 = 20; y1 = 20;
	x2 = 50; y2 = 50;
     590:	982b883a 	mov	r21,r19

	/* now draw a big A for ALTERA */
	draw_big_A (pixel_buffer_dev);

	/* now draw a red rectangle with diagonal green lines */
	x1 = 20; y1 = 20;
     594:	9029883a 	mov	r20,r18
		{
			/* If the screen has been drawn completely then we can draw a new image. This 
			 * section of the code will only be entered once every 60th of a second, because 
			 * this is how long it take the VGA controller to copy the image from memory to 
			 * the screen. */
			delay = 1 - delay;
     598:	b02f883a 	mov	r23,r22
	/* set the direction in which the box will move */
	deltax_1 = deltax_2 = deltay_1 = deltay_2 = 1;

	while(1)
	{
		if (alt_up_pixel_buffer_dma_check_swap_buffers_status(pixel_buffer_dev) == 0)
     59c:	8009883a 	mov	r4,r16
     5a0:	000201c0 	call	201c <alt_up_pixel_buffer_dma_check_swap_buffers_status>
     5a4:	103ffd1e 	bne	r2,zero,59c <__alt_mem_Flash_flash_data+0xf400059c>
		{
			/* If the screen has been drawn completely then we can draw a new image. This 
			 * section of the code will only be entered once every 60th of a second, because 
			 * this is how long it take the VGA controller to copy the image from memory to 
			 * the screen. */
			delay = 1 - delay;
     5a8:	bc63c83a 	sub	r17,r23,r17

			if (delay == 0)
     5ac:	88007b1e 	bne	r17,zero,79c <main+0x3fc>
			{
				/* The delay is inserted to slow down the animation from 60 frames per second 
				 * to 30. Every other refresh cycle the code below will execute. We first erase 
				 * the box with Erase Rectangle */
				alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, x1, y1, x2, y2, 0, 0);
     5b0:	dd400015 	stw	r21,0(sp)
     5b4:	d8000115 	stw	zero,4(sp)
     5b8:	d8000215 	stw	zero,8(sp)
     5bc:	8009883a 	mov	r4,r16
     5c0:	900b883a 	mov	r5,r18
     5c4:	a00d883a 	mov	r6,r20
     5c8:	980f883a 	mov	r7,r19
     5cc:	00025c00 	call	25c0 <alt_up_pixel_buffer_dma_draw_rectangle>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0, 0);
     5d0:	dd400015 	stw	r21,0(sp)
     5d4:	d8000115 	stw	zero,4(sp)
     5d8:	d8000215 	stw	zero,8(sp)
     5dc:	8009883a 	mov	r4,r16
     5e0:	900b883a 	mov	r5,r18
     5e4:	a00d883a 	mov	r6,r20
     5e8:	980f883a 	mov	r7,r19
     5ec:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0, 0);
     5f0:	dd000015 	stw	r20,0(sp)
     5f4:	d8000115 	stw	zero,4(sp)
     5f8:	d8000215 	stw	zero,8(sp)
     5fc:	8009883a 	mov	r4,r16
     600:	900b883a 	mov	r5,r18
     604:	a80d883a 	mov	r6,r21
     608:	980f883a 	mov	r7,r19
     60c:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>

				// move the rectangle
				x1 = x1 + deltax_1;
     610:	d8801717 	ldw	r2,92(sp)
     614:	90a5883a 	add	r18,r18,r2
				x2 = x2 + deltax_2;
     618:	d8801817 	ldw	r2,96(sp)
     61c:	98a7883a 	add	r19,r19,r2
				y1 = y1 + deltay_1;
     620:	a729883a 	add	r20,r20,fp
				y2 = y2 + deltay_2;
     624:	adab883a 	add	r21,r21,r22
				if ((deltax_1 > 0) && (x1 >= alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1))
     628:	d8801717 	ldw	r2,92(sp)
     62c:	0080080e 	bge	zero,r2,650 <main+0x2b0>
     630:	80800f17 	ldw	r2,60(r16)
     634:	10bfffc4 	addi	r2,r2,-1
     638:	90800536 	bltu	r18,r2,650 <main+0x2b0>
				{
					x1 = alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1;
     63c:	1025883a 	mov	r18,r2
					deltax_1 = -deltax_1;
     640:	d8801717 	ldw	r2,92(sp)
     644:	0085c83a 	sub	r2,zero,r2
     648:	d8801715 	stw	r2,92(sp)
     64c:	00000606 	br	668 <main+0x2c8>
				}
				else if ((deltax_1 < 0) && (x1 <= 0))
     650:	d8801717 	ldw	r2,92(sp)
     654:	1000040e 	bge	r2,zero,668 <main+0x2c8>
     658:	04800316 	blt	zero,r18,668 <main+0x2c8>
				{
					x1 = 0;
					deltax_1 = -deltax_1;
     65c:	0085c83a 	sub	r2,zero,r2
     660:	d8801715 	stw	r2,92(sp)
					x1 = alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1;
					deltax_1 = -deltax_1;
				}
				else if ((deltax_1 < 0) && (x1 <= 0))
				{
					x1 = 0;
     664:	0025883a 	mov	r18,zero
					deltax_1 = -deltax_1;
				}
				if ((deltax_2 > 0) && (x2 >= alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1))
     668:	d8801817 	ldw	r2,96(sp)
     66c:	0080080e 	bge	zero,r2,690 <main+0x2f0>
     670:	80800f17 	ldw	r2,60(r16)
     674:	10bfffc4 	addi	r2,r2,-1
     678:	98800536 	bltu	r19,r2,690 <main+0x2f0>
				{
					x2 = alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1;
     67c:	1027883a 	mov	r19,r2
					deltax_2 = -deltax_2;
     680:	d8801817 	ldw	r2,96(sp)
     684:	0085c83a 	sub	r2,zero,r2
     688:	d8801815 	stw	r2,96(sp)
     68c:	00000606 	br	6a8 <main+0x308>
				}
				else if ((deltax_2 < 0) && (x2 <= 0))
     690:	d8801817 	ldw	r2,96(sp)
     694:	1000040e 	bge	r2,zero,6a8 <main+0x308>
     698:	04c00316 	blt	zero,r19,6a8 <main+0x308>
				{
					x2 = 0;
					deltax_2 = -deltax_2;
     69c:	0085c83a 	sub	r2,zero,r2
     6a0:	d8801815 	stw	r2,96(sp)
					x2 = alt_up_pixel_buffer_dma_x_res(pixel_buffer_dev) - 1;
					deltax_2 = -deltax_2;
				}
				else if ((deltax_2 < 0) && (x2 <= 0))
				{
					x2 = 0;
     6a4:	0027883a 	mov	r19,zero
					deltax_2 = -deltax_2;
				}
				if ((deltay_1 > 0) && (y1 >= alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1))
     6a8:	0700060e 	bge	zero,fp,6c4 <main+0x324>
     6ac:	80801017 	ldw	r2,64(r16)
     6b0:	10bfffc4 	addi	r2,r2,-1
     6b4:	a0800336 	bltu	r20,r2,6c4 <main+0x324>
				{
					y1 = alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1;
     6b8:	1029883a 	mov	r20,r2
					deltay_1 = -deltay_1;
     6bc:	0739c83a 	sub	fp,zero,fp
     6c0:	00000406 	br	6d4 <main+0x334>
				}
				else if ((deltay_1 < 0) && (y1 <= 0))
     6c4:	e000030e 	bge	fp,zero,6d4 <main+0x334>
     6c8:	05000216 	blt	zero,r20,6d4 <main+0x334>
				{
					y1 = 0;
					deltay_1 = -deltay_1;
     6cc:	0739c83a 	sub	fp,zero,fp
					y1 = alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1;
					deltay_1 = -deltay_1;
				}
				else if ((deltay_1 < 0) && (y1 <= 0))
				{
					y1 = 0;
     6d0:	0029883a 	mov	r20,zero
					deltay_1 = -deltay_1;
				}
				if ((deltay_2 > 0) && (y2 >= alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1))
     6d4:	0580060e 	bge	zero,r22,6f0 <main+0x350>
     6d8:	80801017 	ldw	r2,64(r16)
     6dc:	10bfffc4 	addi	r2,r2,-1
     6e0:	a8800336 	bltu	r21,r2,6f0 <main+0x350>
				{
					y2 = alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1;
     6e4:	102b883a 	mov	r21,r2
					deltay_2 = -deltay_2;
     6e8:	05adc83a 	sub	r22,zero,r22
     6ec:	00000406 	br	700 <main+0x360>
				}
				else if ((deltay_2 < 0) && (y2 <= 0))
     6f0:	b000030e 	bge	r22,zero,700 <main+0x360>
     6f4:	05400216 	blt	zero,r21,700 <main+0x360>
				{
					y2 = 0;
					deltay_2 = -deltay_2;
     6f8:	05adc83a 	sub	r22,zero,r22
					y2 = alt_up_pixel_buffer_dma_y_res(pixel_buffer_dev) - 1;
					deltay_2 = -deltay_2;
				}
				else if ((deltay_2 < 0) && (y2 <= 0))
				{
					y2 = 0;
     6fc:	002b883a 	mov	r21,zero
					deltay_2 = -deltay_2;
				}

				// redraw Rectangle with diagonal lines
				alt_up_pixel_buffer_dma_draw_rectangle(pixel_buffer_dev, x1, y1, x2, y2, 0xF800, 0);
     700:	dd400015 	stw	r21,0(sp)
     704:	00be0014 	movui	r2,63488
     708:	d8800115 	stw	r2,4(sp)
     70c:	d8000215 	stw	zero,8(sp)
     710:	8009883a 	mov	r4,r16
     714:	900b883a 	mov	r5,r18
     718:	a00d883a 	mov	r6,r20
     71c:	980f883a 	mov	r7,r19
     720:	00025c00 	call	25c0 <alt_up_pixel_buffer_dma_draw_rectangle>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y1, x2, y2, 0x07e0, 0);
     724:	dd400015 	stw	r21,0(sp)
     728:	0081f804 	movi	r2,2016
     72c:	d8800115 	stw	r2,4(sp)
     730:	d8000215 	stw	zero,8(sp)
     734:	8009883a 	mov	r4,r16
     738:	900b883a 	mov	r5,r18
     73c:	a00d883a 	mov	r6,r20
     740:	980f883a 	mov	r7,r19
     744:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>
				alt_up_pixel_buffer_dma_draw_line(pixel_buffer_dev, x1, y2, x2, y1, 0x07e0, 0);
     748:	dd000015 	stw	r20,0(sp)
     74c:	0081f804 	movi	r2,2016
     750:	d8800115 	stw	r2,4(sp)
     754:	d8000215 	stw	zero,8(sp)
     758:	8009883a 	mov	r4,r16
     75c:	900b883a 	mov	r5,r18
     760:	a80d883a 	mov	r6,r21
     764:	980f883a 	mov	r7,r19
     768:	00026e80 	call	26e8 <alt_up_pixel_buffer_dma_draw_line>

				// redraw the box in the foreground
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer_dev, 34*4, 28*4, 50*4, 32*4, 0x187F, 0);
     76c:	00802004 	movi	r2,128
     770:	d8800015 	stw	r2,0(sp)
     774:	00861fc4 	movi	r2,6271
     778:	d8800115 	stw	r2,4(sp)
     77c:	d8000215 	stw	zero,8(sp)
     780:	8009883a 	mov	r4,r16
     784:	01402204 	movi	r5,136
     788:	01801c04 	movi	r6,112
     78c:	01c03204 	movi	r7,200
     790:	00020d40 	call	20d4 <alt_up_pixel_buffer_dma_draw_box>

				draw_big_A (pixel_buffer_dev);
     794:	8009883a 	mov	r4,r16
     798:	00001b40 	call	1b4 <draw_big_A>
			}

			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
     79c:	8009883a 	mov	r4,r16
     7a0:	0001ff80 	call	1ff8 <alt_up_pixel_buffer_dma_swap_buffers>
     7a4:	003f7d06 	br	59c <__alt_mem_Flash_flash_data+0xf400059c>

	/* output text message in the middle of the VGA monitor */
	char_buffer_dev = alt_up_char_buffer_open_dev ("/dev/VGA_Char_Buffer");
	if (char_buffer_dev == NULL)
	{
		alt_printf ("Error: could not open character buffer device\n");
     7a8:	01000034 	movhi	r4,0
     7ac:	21167f04 	addi	r4,r4,23036
     7b0:	00009bc0 	call	9bc <alt_printf>
			/* Execute a swap buffer command. This will allow us to check if the screen has 
			 * been redrawn before generating a new animation frame. */
			alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer_dev);
		}
	}
}
     7b4:	00bfffc4 	movi	r2,-1
     7b8:	dfc02217 	ldw	ra,136(sp)
     7bc:	df002117 	ldw	fp,132(sp)
     7c0:	ddc02017 	ldw	r23,128(sp)
     7c4:	dd801f17 	ldw	r22,124(sp)
     7c8:	dd401e17 	ldw	r21,120(sp)
     7cc:	dd001d17 	ldw	r20,116(sp)
     7d0:	dcc01c17 	ldw	r19,112(sp)
     7d4:	dc801b17 	ldw	r18,108(sp)
     7d8:	dc401a17 	ldw	r17,104(sp)
     7dc:	dc001917 	ldw	r16,100(sp)
     7e0:	dec02304 	addi	sp,sp,140
     7e4:	f800283a 	ret

000007e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     7e8:	deffff04 	addi	sp,sp,-4
     7ec:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     7f0:	00800034 	movhi	r2,0
     7f4:	109e6b04 	addi	r2,r2,31148
     7f8:	00c00034 	movhi	r3,0
     7fc:	18d6fc04 	addi	r3,r3,23536
     800:	18801926 	beq	r3,r2,868 <alt_load+0x80>
  {
    while( to != end )
     804:	00800034 	movhi	r2,0
     808:	109e6b04 	addi	r2,r2,31148
     80c:	00c00034 	movhi	r3,0
     810:	18d6fc04 	addi	r3,r3,23536
     814:	18801426 	beq	r3,r2,868 <alt_load+0x80>
     818:	00c00034 	movhi	r3,0
     81c:	18d6fd04 	addi	r3,r3,23540
     820:	00800034 	movhi	r2,0
     824:	109e6b04 	addi	r2,r2,31148
     828:	10c7c83a 	sub	r3,r2,r3
     82c:	1806d0ba 	srli	r3,r3,2
     830:	18c00044 	addi	r3,r3,1
     834:	18c7883a 	add	r3,r3,r3
     838:	18c7883a 	add	r3,r3,r3
     83c:	0005883a 	mov	r2,zero
     840:	01c00034 	movhi	r7,0
     844:	39d6fc04 	addi	r7,r7,23536
     848:	01800034 	movhi	r6,0
     84c:	319e6b04 	addi	r6,r6,31148
     850:	11c9883a 	add	r4,r2,r7
     854:	118b883a 	add	r5,r2,r6
    {
      *to++ = *from++;
     858:	29400017 	ldw	r5,0(r5)
     85c:	21400015 	stw	r5,0(r4)
     860:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     864:	10fffa1e 	bne	r2,r3,850 <__alt_mem_Flash_flash_data+0xf4000850>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     868:	00800034 	movhi	r2,0
     86c:	10800804 	addi	r2,r2,32
     870:	00c00034 	movhi	r3,0
     874:	18c00804 	addi	r3,r3,32
     878:	18801926 	beq	r3,r2,8e0 <alt_load+0xf8>
  {
    while( to != end )
     87c:	00800034 	movhi	r2,0
     880:	10805e04 	addi	r2,r2,376
     884:	00c00034 	movhi	r3,0
     888:	18c00804 	addi	r3,r3,32
     88c:	18801426 	beq	r3,r2,8e0 <alt_load+0xf8>
     890:	00c00034 	movhi	r3,0
     894:	18c00904 	addi	r3,r3,36
     898:	00800034 	movhi	r2,0
     89c:	10805e04 	addi	r2,r2,376
     8a0:	10c7c83a 	sub	r3,r2,r3
     8a4:	1806d0ba 	srli	r3,r3,2
     8a8:	18c00044 	addi	r3,r3,1
     8ac:	18c7883a 	add	r3,r3,r3
     8b0:	18c7883a 	add	r3,r3,r3
     8b4:	0005883a 	mov	r2,zero
     8b8:	01c00034 	movhi	r7,0
     8bc:	39c00804 	addi	r7,r7,32
     8c0:	01800034 	movhi	r6,0
     8c4:	31800804 	addi	r6,r6,32
     8c8:	11c9883a 	add	r4,r2,r7
     8cc:	118b883a 	add	r5,r2,r6
    {
      *to++ = *from++;
     8d0:	29400017 	ldw	r5,0(r5)
     8d4:	21400015 	stw	r5,0(r4)
     8d8:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     8dc:	10fffa1e 	bne	r2,r3,8c8 <__alt_mem_Flash_flash_data+0xf40008c8>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
     8e0:	00800034 	movhi	r2,0
     8e4:	10965c04 	addi	r2,r2,22896
     8e8:	00c00034 	movhi	r3,0
     8ec:	18d65c04 	addi	r3,r3,22896
     8f0:	18801926 	beq	r3,r2,958 <alt_load+0x170>
  {
    while( to != end )
     8f4:	00800034 	movhi	r2,0
     8f8:	1096fc04 	addi	r2,r2,23536
     8fc:	00c00034 	movhi	r3,0
     900:	18d65c04 	addi	r3,r3,22896
     904:	18801426 	beq	r3,r2,958 <alt_load+0x170>
     908:	00c00034 	movhi	r3,0
     90c:	18d65d04 	addi	r3,r3,22900
     910:	00800034 	movhi	r2,0
     914:	1096fc04 	addi	r2,r2,23536
     918:	10c7c83a 	sub	r3,r2,r3
     91c:	1806d0ba 	srli	r3,r3,2
     920:	18c00044 	addi	r3,r3,1
     924:	18c7883a 	add	r3,r3,r3
     928:	18c7883a 	add	r3,r3,r3
     92c:	0005883a 	mov	r2,zero
     930:	01c00034 	movhi	r7,0
     934:	39d65c04 	addi	r7,r7,22896
     938:	01800034 	movhi	r6,0
     93c:	31965c04 	addi	r6,r6,22896
     940:	11c9883a 	add	r4,r2,r7
     944:	118b883a 	add	r5,r2,r6
    {
      *to++ = *from++;
     948:	29400017 	ldw	r5,0(r5)
     94c:	21400015 	stw	r5,0(r4)
     950:	10800104 	addi	r2,r2,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     954:	10fffa1e 	bne	r2,r3,940 <__alt_mem_Flash_flash_data+0xf4000940>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     958:	0002a300 	call	2a30 <alt_dcache_flush_all>
  alt_icache_flush_all();
     95c:	0002b380 	call	2b38 <alt_icache_flush_all>
}
     960:	dfc00017 	ldw	ra,0(sp)
     964:	dec00104 	addi	sp,sp,4
     968:	f800283a 	ret

0000096c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     96c:	defffe04 	addi	sp,sp,-8
     970:	dfc00115 	stw	ra,4(sp)
     974:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     978:	0009883a 	mov	r4,zero
     97c:	0000bf80 	call	bf8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     980:	0000c180 	call	c18 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     984:	01800034 	movhi	r6,0
     988:	3196a704 	addi	r6,r6,23196
     98c:	3009883a 	mov	r4,r6
     990:	300b883a 	mov	r5,r6
     994:	0002bc40 	call	2bc4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     998:	d1277f17 	ldw	r4,-25092(gp)
     99c:	d1677e17 	ldw	r5,-25096(gp)
     9a0:	d1a77d17 	ldw	r6,-25100(gp)
     9a4:	00003a00 	call	3a0 <main>
     9a8:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
     9ac:	01000044 	movi	r4,1
     9b0:	00029600 	call	2960 <close>
  exit (result);
     9b4:	8009883a 	mov	r4,r16
     9b8:	000319c0 	call	319c <exit>

000009bc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     9bc:	defff304 	addi	sp,sp,-52
     9c0:	dfc00915 	stw	ra,36(sp)
     9c4:	df000815 	stw	fp,32(sp)
     9c8:	ddc00715 	stw	r23,28(sp)
     9cc:	dd800615 	stw	r22,24(sp)
     9d0:	dd400515 	stw	r21,20(sp)
     9d4:	dd000415 	stw	r20,16(sp)
     9d8:	dcc00315 	stw	r19,12(sp)
     9dc:	dc800215 	stw	r18,8(sp)
     9e0:	dc400115 	stw	r17,4(sp)
     9e4:	dc000015 	stw	r16,0(sp)
     9e8:	d9400a15 	stw	r5,40(sp)
     9ec:	d9800b15 	stw	r6,44(sp)
     9f0:	d9c00c15 	stw	r7,48(sp)
     9f4:	2021883a 	mov	r16,r4
	va_list args;
	va_start(args, fmt);
     9f8:	dd800a04 	addi	r22,sp,40
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     9fc:	04800944 	movi	r18,37
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
     a00:	05c018c4 	movi	r23,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
     a04:	07001e04 	movi	fp,120
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     a08:	04c003c4 	movi	r19,15
                        if (digit <= 9)
     a0c:	05400244 	movi	r21,9
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     a10:	00005e06 	br	b8c <alt_printf+0x1d0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     a14:	20803fcc 	andi	r2,r4,255
     a18:	1080201c 	xori	r2,r2,128
     a1c:	10bfe004 	addi	r2,r2,-128
     a20:	14800426 	beq	r2,r18,a34 <alt_printf+0x78>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     a24:	84000044 	addi	r16,r16,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
        {
            alt_putchar(c);
     a28:	1009883a 	mov	r4,r2
     a2c:	0000bd00 	call	bd0 <alt_putchar>
     a30:	00005606 	br	b8c <alt_printf+0x1d0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     a34:	85000084 	addi	r20,r16,2
     a38:	80800043 	ldbu	r2,1(r16)
     a3c:	10c03fcc 	andi	r3,r2,255
     a40:	18c0201c 	xori	r3,r3,128
     a44:	18ffe004 	addi	r3,r3,-128
     a48:	18005526 	beq	r3,zero,ba0 <alt_printf+0x1e4>
            {
                if (c == '%')
     a4c:	1c80041e 	bne	r3,r18,a60 <alt_printf+0xa4>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     a50:	9009883a 	mov	r4,r18
     a54:	0000bd00 	call	bd0 <alt_putchar>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     a58:	a021883a 	mov	r16,r20
     a5c:	00004b06 	br	b8c <alt_printf+0x1d0>
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
     a60:	10c03fcc 	andi	r3,r2,255
     a64:	18c0201c 	xori	r3,r3,128
     a68:	18ffe004 	addi	r3,r3,-128
     a6c:	1dc0061e 	bne	r3,r23,a88 <alt_printf+0xcc>
                {
                    int v = va_arg(args, int);
     a70:	b4000104 	addi	r16,r22,4
                    alt_putchar(v);
     a74:	b1000017 	ldw	r4,0(r22)
     a78:	0000bd00 	call	bd0 <alt_putchar>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
     a7c:	802d883a 	mov	r22,r16
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     a80:	a021883a 	mov	r16,r20
     a84:	00004106 	br	b8c <alt_printf+0x1d0>
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
     a88:	10c03fcc 	andi	r3,r2,255
     a8c:	18c0201c 	xori	r3,r3,128
     a90:	18ffe004 	addi	r3,r3,-128
     a94:	1f00201e 	bne	r3,fp,b18 <alt_printf+0x15c>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     a98:	b4400017 	ldw	r17,0(r22)
     a9c:	b5800104 	addi	r22,r22,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     aa0:	88000426 	beq	r17,zero,ab4 <alt_printf+0xf8>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     aa4:	88bc002c 	andhi	r2,r17,61440
     aa8:	10000626 	beq	r2,zero,ac4 <alt_printf+0x108>
     aac:	04000704 	movi	r16,28
     ab0:	00000a06 	br	adc <alt_printf+0x120>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
     ab4:	01000c04 	movi	r4,48
     ab8:	0000bd00 	call	bd0 <alt_putchar>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     abc:	a021883a 	mov	r16,r20

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
                        continue;
     ac0:	00003206 	br	b8c <alt_printf+0x1d0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     ac4:	04000704 	movi	r16,28
                        digit_shift -= 4;
     ac8:	843fff04 	addi	r16,r16,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     acc:	9c04983a 	sll	r2,r19,r16
     ad0:	1444703a 	and	r2,r2,r17
     ad4:	103ffc26 	beq	r2,zero,ac8 <__alt_mem_Flash_flash_data+0xf4000ac8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     ad8:	80002716 	blt	r16,zero,b78 <alt_printf+0x1bc>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     adc:	9c08983a 	sll	r4,r19,r16
     ae0:	2448703a 	and	r4,r4,r17
     ae4:	2408d83a 	srl	r4,r4,r16
                        if (digit <= 9)
     ae8:	a9000236 	bltu	r21,r4,af4 <alt_printf+0x138>
                            c = '0' + digit;
     aec:	21000c04 	addi	r4,r4,48
     af0:	00000106 	br	af8 <alt_printf+0x13c>
                        else
                            c = 'a' + digit - 10;
     af4:	210015c4 	addi	r4,r4,87
                        alt_putchar(c);
     af8:	21003fcc 	andi	r4,r4,255
     afc:	2100201c 	xori	r4,r4,128
     b00:	213fe004 	addi	r4,r4,-128
     b04:	0000bd00 	call	bd0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     b08:	843fff04 	addi	r16,r16,-4
     b0c:	803ff30e 	bge	r16,zero,adc <__alt_mem_Flash_flash_data+0xf4000adc>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     b10:	a021883a 	mov	r16,r20
     b14:	00001d06 	br	b8c <alt_printf+0x1d0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     b18:	10803fcc 	andi	r2,r2,255
     b1c:	1080201c 	xori	r2,r2,128
     b20:	10bfe004 	addi	r2,r2,-128
     b24:	00c01cc4 	movi	r3,115
     b28:	10c0151e 	bne	r2,r3,b80 <alt_printf+0x1c4>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     b2c:	b4000017 	ldw	r16,0(r22)
     b30:	b5800104 	addi	r22,r22,4

                    while(*s)
     b34:	81000003 	ldbu	r4,0(r16)
     b38:	20803fcc 	andi	r2,r4,255
     b3c:	1080201c 	xori	r2,r2,128
     b40:	10bfe004 	addi	r2,r2,-128
     b44:	10001026 	beq	r2,zero,b88 <alt_printf+0x1cc>
                      alt_putchar(*s++);
     b48:	84000044 	addi	r16,r16,1
     b4c:	21003fcc 	andi	r4,r4,255
     b50:	2100201c 	xori	r4,r4,128
     b54:	213fe004 	addi	r4,r4,-128
     b58:	0000bd00 	call	bd0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     b5c:	81000003 	ldbu	r4,0(r16)
     b60:	20803fcc 	andi	r2,r4,255
     b64:	1080201c 	xori	r2,r2,128
     b68:	10bfe004 	addi	r2,r2,-128
     b6c:	103ff61e 	bne	r2,zero,b48 <__alt_mem_Flash_flash_data+0xf4000b48>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     b70:	a021883a 	mov	r16,r20
     b74:	00000506 	br	b8c <alt_printf+0x1d0>
     b78:	a021883a 	mov	r16,r20
     b7c:	00000306 	br	b8c <alt_printf+0x1d0>
     b80:	a021883a 	mov	r16,r20
     b84:	00000106 	br	b8c <alt_printf+0x1d0>
     b88:	a021883a 	mov	r16,r20
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     b8c:	81000003 	ldbu	r4,0(r16)
     b90:	20803fcc 	andi	r2,r4,255
     b94:	1080201c 	xori	r2,r2,128
     b98:	10bfe004 	addi	r2,r2,-128
     b9c:	103f9d1e 	bne	r2,zero,a14 <__alt_mem_Flash_flash_data+0xf4000a14>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     ba0:	dfc00917 	ldw	ra,36(sp)
     ba4:	df000817 	ldw	fp,32(sp)
     ba8:	ddc00717 	ldw	r23,28(sp)
     bac:	dd800617 	ldw	r22,24(sp)
     bb0:	dd400517 	ldw	r21,20(sp)
     bb4:	dd000417 	ldw	r20,16(sp)
     bb8:	dcc00317 	ldw	r19,12(sp)
     bbc:	dc800217 	ldw	r18,8(sp)
     bc0:	dc400117 	ldw	r17,4(sp)
     bc4:	dc000017 	ldw	r16,0(sp)
     bc8:	dec00d04 	addi	sp,sp,52
     bcc:	f800283a 	ret

00000bd0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     bd0:	deffff04 	addi	sp,sp,-4
     bd4:	dfc00015 	stw	ra,0(sp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     bd8:	00800034 	movhi	r2,0
     bdc:	109e6704 	addi	r2,r2,31132
     be0:	10800017 	ldw	r2,0(r2)
     be4:	11400217 	ldw	r5,8(r2)
     be8:	00034280 	call	3428 <putc>
#endif
#endif
}
     bec:	dfc00017 	ldw	ra,0(sp)
     bf0:	dec00104 	addi	sp,sp,4
     bf4:	f800283a 	ret

00000bf8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     bf8:	deffff04 	addi	sp,sp,-4
     bfc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
     c00:	0002ff80 	call	2ff8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     c04:	00800044 	movi	r2,1
     c08:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     c0c:	dfc00017 	ldw	ra,0(sp)
     c10:	dec00104 	addi	sp,sp,4
     c14:	f800283a 	ret

00000c18 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     c18:	defffd04 	addi	sp,sp,-12
     c1c:	dfc00215 	stw	ra,8(sp)
     c20:	dc400115 	stw	r17,4(sp)
     c24:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( INTERVAL_TIMER, Interval_Timer);
     c28:	04000204 	movi	r16,8
     c2c:	01040034 	movhi	r4,4096
     c30:	21080004 	addi	r4,r4,8192
     c34:	000b883a 	mov	r5,zero
     c38:	000d883a 	mov	r6,zero
     c3c:	800f883a 	mov	r7,r16
     c40:	00015540 	call	1554 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
     c44:	04400034 	movhi	r17,0
     c48:	8c57da04 	addi	r17,r17,24424
     c4c:	8809883a 	mov	r4,r17
     c50:	000b883a 	mov	r5,zero
     c54:	800d883a 	mov	r6,r16
     c58:	00010f40 	call	10f4 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     c5c:	04000034 	movhi	r16,0
     c60:	841e5e04 	addi	r16,r16,31096
     c64:	893ff604 	addi	r4,r17,-40
     c68:	800b883a 	mov	r5,r16
     c6c:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
     c70:	01000034 	movhi	r4,0
     c74:	2117c404 	addi	r4,r4,24336
     c78:	800b883a 	mov	r5,r16
     c7c:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
     c80:	01000034 	movhi	r4,0
     c84:	2117b804 	addi	r4,r4,24288
     c88:	800b883a 	mov	r5,r16
     c8c:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AV_CONFIG, AV_Config);
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHAR_LCD_16X2, Char_LCD_16x2);
     c90:	04400034 	movhi	r17,0
     c94:	8c57ad04 	addi	r17,r17,24244
     c98:	8809883a 	mov	r4,r17
     c9c:	00015c00 	call	15c0 <alt_up_character_lcd_init>
     ca0:	8809883a 	mov	r4,r17
     ca4:	800b883a 	mov	r5,r16
     ca8:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
     cac:	01000034 	movhi	r4,0
     cb0:	2117a204 	addi	r4,r4,24200
     cb4:	800b883a 	mov	r5,r16
     cb8:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
     cbc:	01000034 	movhi	r4,0
     cc0:	21179704 	addi	r4,r4,24156
     cc4:	800b883a 	mov	r5,r16
     cc8:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
     ccc:	01000034 	movhi	r4,0
     cd0:	21178c04 	addi	r4,r4,24112
     cd4:	800b883a 	mov	r5,r16
     cd8:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
     cdc:	01000034 	movhi	r4,0
     ce0:	21178104 	addi	r4,r4,24068
     ce4:	800b883a 	mov	r5,r16
     ce8:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
     cec:	01000034 	movhi	r4,0
     cf0:	21177604 	addi	r4,r4,24024
     cf4:	800b883a 	mov	r5,r16
     cf8:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
     cfc:	01000034 	movhi	r4,0
     d00:	21176b04 	addi	r4,r4,23980
     d04:	800b883a 	mov	r5,r16
     d08:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
     d0c:	01000034 	movhi	r4,0
     d10:	21176004 	addi	r4,r4,23936
     d14:	800b883a 	mov	r5,r16
     d18:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
     d1c:	01000034 	movhi	r4,0
     d20:	21175504 	addi	r4,r4,23892
     d24:	800b883a 	mov	r5,r16
     d28:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX3_HEX0, HEX3_HEX0);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( HEX7_HEX4, HEX7_HEX4);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PUSHBUTTONS, Pushbuttons);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( RED_LEDS, Red_LEDs);
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( SLIDER_SWITCHES, Slider_Switches);
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT, PS2_Port);
     d2c:	04400034 	movhi	r17,0
     d30:	8c574704 	addi	r17,r17,23836
     d34:	8809883a 	mov	r4,r17
     d38:	0001a780 	call	1a78 <alt_up_ps2_init>
     d3c:	8809883a 	mov	r4,r17
     d40:	800b883a 	mov	r5,r16
     d44:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_PS2_INIT ( PS2_PORT_DUAL, PS2_Port_Dual);
     d48:	04400034 	movhi	r17,0
     d4c:	8c573904 	addi	r17,r17,23780
     d50:	8809883a 	mov	r4,r17
     d54:	0001a780 	call	1a78 <alt_up_ps2_init>
     d58:	8809883a 	mov	r4,r17
     d5c:	800b883a 	mov	r5,r16
     d60:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
     d64:	01000034 	movhi	r4,0
     d68:	21172e04 	addi	r4,r4,23736
     d6c:	800b883a 	mov	r5,r16
     d70:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_RS232_INIT ( SERIAL_PORT, Serial_Port);
    ALTERA_UP_AVALON_VIDEO_CHARACTER_BUFFER_WITH_DMA_INIT ( VGA_CHAR_BUFFER, VGA_Char_Buffer);
     d74:	00c00034 	movhi	r3,0
     d78:	18d71c04 	addi	r3,r3,23664
     d7c:	18800a17 	ldw	r2,40(r3)
     d80:	10800104 	addi	r2,r2,4
     d84:	1100000b 	ldhu	r4,0(r2)
     d88:	19000c15 	stw	r4,48(r3)
     d8c:	10800017 	ldw	r2,0(r2)
     d90:	1004d43a 	srli	r2,r2,16
     d94:	18800d15 	stw	r2,52(r3)
     d98:	00c01004 	movi	r3,64
     d9c:	19000636 	bltu	r3,r4,db8 <alt_sys_init+0x1a0>
     da0:	00c00034 	movhi	r3,0
     da4:	18d71c04 	addi	r3,r3,23664
     da8:	01000fc4 	movi	r4,63
     dac:	19000f15 	stw	r4,60(r3)
     db0:	01000184 	movi	r4,6
     db4:	19001015 	stw	r4,64(r3)
     db8:	00c00804 	movi	r3,32
     dbc:	18800436 	bltu	r3,r2,dd0 <alt_sys_init+0x1b8>
     dc0:	00c007c4 	movi	r3,31
     dc4:	00800034 	movhi	r2,0
     dc8:	10971c04 	addi	r2,r2,23664
     dcc:	10c01115 	stw	r3,68(r2)
     dd0:	04000034 	movhi	r16,0
     dd4:	84171c04 	addi	r16,r16,23664
     dd8:	8009883a 	mov	r4,r16
     ddc:	0001d700 	call	1d70 <alt_up_char_buffer_init>
     de0:	8009883a 	mov	r4,r16
     de4:	01400034 	movhi	r5,0
     de8:	295e5e04 	addi	r5,r5,31096
     dec:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VGA_PIXEL_BUFFER, VGA_Pixel_Buffer);
     df0:	00c00034 	movhi	r3,0
     df4:	18d70704 	addi	r3,r3,23580
     df8:	18800a17 	ldw	r2,40(r3)
     dfc:	11000017 	ldw	r4,0(r2)
     e00:	19000b15 	stw	r4,44(r3)
     e04:	11000117 	ldw	r4,4(r2)
     e08:	19000c15 	stw	r4,48(r3)
     e0c:	11000204 	addi	r4,r2,8
     e10:	2140000b 	ldhu	r5,0(r4)
     e14:	19400f15 	stw	r5,60(r3)
     e18:	21000017 	ldw	r4,0(r4)
     e1c:	2008d43a 	srli	r4,r4,16
     e20:	19001015 	stw	r4,64(r3)
     e24:	10800304 	addi	r2,r2,12
     e28:	11000017 	ldw	r4,0(r2)
     e2c:	2009d07a 	srai	r4,r4,1
     e30:	2100004c 	andi	r4,r4,1
     e34:	19000d15 	stw	r4,52(r3)
     e38:	11000017 	ldw	r4,0(r2)
     e3c:	2009d13a 	srai	r4,r4,4
     e40:	210003cc 	andi	r4,r4,15
     e44:	19000e15 	stw	r4,56(r3)
     e48:	10c00017 	ldw	r3,0(r2)
     e4c:	180dd43a 	srai	r6,r3,16
     e50:	180ad63a 	srli	r5,r3,24
     e54:	00800044 	movi	r2,1
     e58:	2080041e 	bne	r4,r2,e6c <alt_sys_init+0x254>
     e5c:	00800034 	movhi	r2,0
     e60:	10970704 	addi	r2,r2,23580
     e64:	10001115 	stw	zero,68(r2)
     e68:	00000b06 	br	e98 <alt_sys_init+0x280>
     e6c:	00800084 	movi	r2,2
     e70:	2080051e 	bne	r4,r2,e88 <alt_sys_init+0x270>
     e74:	00c00044 	movi	r3,1
     e78:	00800034 	movhi	r2,0
     e7c:	10970704 	addi	r2,r2,23580
     e80:	10c01115 	stw	r3,68(r2)
     e84:	00000406 	br	e98 <alt_sys_init+0x280>
     e88:	00c00084 	movi	r3,2
     e8c:	00800034 	movhi	r2,0
     e90:	10970704 	addi	r2,r2,23580
     e94:	10c01115 	stw	r3,68(r2)
     e98:	31803fcc 	andi	r6,r6,255
     e9c:	01000034 	movhi	r4,0
     ea0:	21170704 	addi	r4,r4,23580
     ea4:	00c00804 	movi	r3,32
     ea8:	198fc83a 	sub	r7,r3,r6
     eac:	00bfffc4 	movi	r2,-1
     eb0:	11ced83a 	srl	r7,r2,r7
     eb4:	21c01215 	stw	r7,72(r4)
     eb8:	21c01117 	ldw	r7,68(r4)
     ebc:	31cd883a 	add	r6,r6,r7
     ec0:	21801315 	stw	r6,76(r4)
     ec4:	1947c83a 	sub	r3,r3,r5
     ec8:	10c4d83a 	srl	r2,r2,r3
     ecc:	20801415 	stw	r2,80(r4)
     ed0:	04000034 	movhi	r16,0
     ed4:	841e5e04 	addi	r16,r16,31096
     ed8:	800b883a 	mov	r5,r16
     edc:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
     ee0:	01000034 	movhi	r4,0
     ee4:	2116fc04 	addi	r4,r4,23536
     ee8:	800b883a 	mov	r5,r16
     eec:	0002a3c0 	call	2a3c <alt_dev_llist_insert>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( SD_CARD, SD_Card);
}
     ef0:	dfc00217 	ldw	ra,8(sp)
     ef4:	dc400117 	ldw	r17,4(sp)
     ef8:	dc000017 	ldw	r16,0(sp)
     efc:	dec00304 	addi	sp,sp,12
     f00:	f800283a 	ret

00000f04 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     f04:	deffff04 	addi	sp,sp,-4
     f08:	dfc00015 	stw	ra,0(sp)
     f0c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     f10:	21000017 	ldw	r4,0(r4)
     f14:	21000a04 	addi	r4,r4,40
     f18:	11c00217 	ldw	r7,8(r2)
     f1c:	00012300 	call	1230 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     f20:	dfc00017 	ldw	ra,0(sp)
     f24:	dec00104 	addi	sp,sp,4
     f28:	f800283a 	ret

00000f2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     f2c:	deffff04 	addi	sp,sp,-4
     f30:	dfc00015 	stw	ra,0(sp)
     f34:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     f38:	21000017 	ldw	r4,0(r4)
     f3c:	21000a04 	addi	r4,r4,40
     f40:	11c00217 	ldw	r7,8(r2)
     f44:	00013800 	call	1380 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     f48:	dfc00017 	ldw	ra,0(sp)
     f4c:	dec00104 	addi	sp,sp,4
     f50:	f800283a 	ret

00000f54 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     f54:	deffff04 	addi	sp,sp,-4
     f58:	dfc00015 	stw	ra,0(sp)
     f5c:	2005883a 	mov	r2,r4
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     f60:	21000017 	ldw	r4,0(r4)
     f64:	21000a04 	addi	r4,r4,40
     f68:	11400217 	ldw	r5,8(r2)
     f6c:	000116c0 	call	116c <altera_avalon_jtag_uart_close>
}
     f70:	dfc00017 	ldw	ra,0(sp)
     f74:	dec00104 	addi	sp,sp,4
     f78:	f800283a 	ret

00000f7c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     f7c:	deffff04 	addi	sp,sp,-4
     f80:	dfc00015 	stw	ra,0(sp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     f84:	21000017 	ldw	r4,0(r4)
     f88:	21000a04 	addi	r4,r4,40
     f8c:	00011a80 	call	11a8 <altera_avalon_jtag_uart_ioctl>
}
     f90:	dfc00017 	ldw	ra,0(sp)
     f94:	dec00104 	addi	sp,sp,4
     f98:	f800283a 	ret

00000f9c <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
     f9c:	20800017 	ldw	r2,0(r4)
     fa0:	10800137 	ldwio	r2,4(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
     fa4:	1081000c 	andi	r2,r2,1024
     fa8:	10000626 	beq	r2,zero,fc4 <altera_avalon_jtag_uart_timeout+0x28>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
     fac:	20c00017 	ldw	r3,0(r4)
     fb0:	20800817 	ldw	r2,32(r4)
     fb4:	10810014 	ori	r2,r2,1024
     fb8:	18800135 	stwio	r2,4(r3)
    sp->host_inactive = 0;
     fbc:	20000915 	stw	zero,36(r4)
     fc0:	00000606 	br	fdc <altera_avalon_jtag_uart_timeout+0x40>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
     fc4:	20800917 	ldw	r2,36(r4)
     fc8:	00e00034 	movhi	r3,32768
     fcc:	18ffff04 	addi	r3,r3,-4
     fd0:	18800236 	bltu	r3,r2,fdc <altera_avalon_jtag_uart_timeout+0x40>
    sp->host_inactive++;
     fd4:	10800044 	addi	r2,r2,1
     fd8:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
     fdc:	00800074 	movhi	r2,1
     fe0:	10a5df04 	addi	r2,r2,-26756
     fe4:	10800017 	ldw	r2,0(r2)
     fe8:	f800283a 	ret

00000fec <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
     fec:	21800017 	ldw	r6,0(r4)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     ff0:	32000104 	addi	r8,r6,4
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     ff4:	02bfff84 	movi	r10,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
     ff8:	02ffff44 	movi	r11,-3
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     ffc:	4013883a 	mov	r9,r8
    1000:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    1004:	3880c00c 	andi	r2,r7,768
    1008:	10003926 	beq	r2,zero,10f0 <altera_avalon_jtag_uart_irq+0x104>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    100c:	3880400c 	andi	r2,r7,256
    1010:	10001c26 	beq	r2,zero,1084 <altera_avalon_jtag_uart_irq+0x98>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1014:	20800a17 	ldw	r2,40(r4)
    1018:	10800044 	addi	r2,r2,1
    101c:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
    1020:	20c00b17 	ldw	r3,44(r4)
    1024:	18801226 	beq	r3,r2,1070 <altera_avalon_jtag_uart_irq+0x84>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    1028:	30800037 	ldwio	r2,0(r6)
    102c:	100b883a 	mov	r5,r2
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    1030:	10e0000c 	andi	r3,r2,32768
    1034:	18000c26 	beq	r3,zero,1068 <altera_avalon_jtag_uart_irq+0x7c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1038:	20c00a17 	ldw	r3,40(r4)
    103c:	20c7883a 	add	r3,r4,r3
    1040:	18800e05 	stb	r2,56(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1044:	20800a17 	ldw	r2,40(r4)
    1048:	10800044 	addi	r2,r2,1
    104c:	1081ffcc 	andi	r2,r2,2047
    1050:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1054:	20800a17 	ldw	r2,40(r4)
    1058:	10800044 	addi	r2,r2,1
    105c:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
    1060:	20c00b17 	ldw	r3,44(r4)
    1064:	18bff01e 	bne	r3,r2,1028 <__alt_mem_Flash_flash_data+0xf4001028>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    1068:	297fffec 	andhi	r5,r5,65535
    106c:	28000526 	beq	r5,zero,1084 <altera_avalon_jtag_uart_irq+0x98>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1070:	20800817 	ldw	r2,32(r4)
    1074:	1284703a 	and	r2,r2,r10
    1078:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    107c:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1080:	40800037 	ldwio	r2,0(r8)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1084:	3880800c 	andi	r2,r7,512
    1088:	103fdc26 	beq	r2,zero,ffc <__alt_mem_Flash_flash_data+0xf4000ffc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    108c:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
    1090:	383fda26 	beq	r7,zero,ffc <__alt_mem_Flash_flash_data+0xf4000ffc>
    1094:	20c00d17 	ldw	r3,52(r4)
    1098:	20800c17 	ldw	r2,48(r4)
    109c:	18800d26 	beq	r3,r2,10d4 <altera_avalon_jtag_uart_irq+0xe8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    10a0:	20800d17 	ldw	r2,52(r4)
    10a4:	2085883a 	add	r2,r4,r2
    10a8:	10820e07 	ldb	r2,2104(r2)
    10ac:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    10b0:	20800d17 	ldw	r2,52(r4)
    10b4:	10800044 	addi	r2,r2,1
    10b8:	1081ffcc 	andi	r2,r2,2047
    10bc:	20800d15 	stw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    10c0:	39ffffc4 	addi	r7,r7,-1
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    10c4:	383fcd26 	beq	r7,zero,ffc <__alt_mem_Flash_flash_data+0xf4000ffc>
    10c8:	20c00d17 	ldw	r3,52(r4)
    10cc:	20800c17 	ldw	r2,48(r4)
    10d0:	18bff31e 	bne	r3,r2,10a0 <__alt_mem_Flash_flash_data+0xf40010a0>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    10d4:	20800817 	ldw	r2,32(r4)
    10d8:	12c4703a 	and	r2,r2,r11
    10dc:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    10e0:	20c00017 	ldw	r3,0(r4)
    10e4:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    10e8:	48800037 	ldwio	r2,0(r9)
    10ec:	003fc306 	br	ffc <__alt_mem_Flash_flash_data+0xf4000ffc>
    10f0:	f800283a 	ret

000010f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    10f4:	defffe04 	addi	sp,sp,-8
    10f8:	dfc00115 	stw	ra,4(sp)
    10fc:	dc000015 	stw	r16,0(sp)
    1100:	2021883a 	mov	r16,r4
    1104:	3009883a 	mov	r4,r6
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1108:	00800044 	movi	r2,1
    110c:	80800815 	stw	r2,32(r16)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    1110:	80c00017 	ldw	r3,0(r16)
    1114:	18800135 	stwio	r2,4(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
    1118:	800b883a 	mov	r5,r16
    111c:	01800034 	movhi	r6,0
    1120:	3183fb04 	addi	r6,r6,4076
    1124:	0002c5c0 	call	2c5c <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    1128:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    112c:	81000204 	addi	r4,r16,8
    1130:	00800074 	movhi	r2,1
    1134:	10a5df04 	addi	r2,r2,-26756
    1138:	11400017 	ldw	r5,0(r2)
    113c:	01800034 	movhi	r6,0
    1140:	3183e704 	addi	r6,r6,3996
    1144:	800f883a 	mov	r7,r16
    1148:	00028cc0 	call	28cc <alt_alarm_start>
    114c:	1000030e 	bge	r2,zero,115c <altera_avalon_jtag_uart_init+0x68>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    1150:	00a00034 	movhi	r2,32768
    1154:	10bfffc4 	addi	r2,r2,-1
    1158:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    115c:	dfc00117 	ldw	ra,4(sp)
    1160:	dc000017 	ldw	r16,0(sp)
    1164:	dec00204 	addi	sp,sp,8
    1168:	f800283a 	ret

0000116c <altera_avalon_jtag_uart_close>:
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    116c:	21800c17 	ldw	r6,48(r4)
    if (flags & O_NONBLOCK) {
    1170:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    1174:	00000106 	br	117c <altera_avalon_jtag_uart_close+0x10>
    if (flags & O_NONBLOCK) {
    1178:	2800071e 	bne	r5,zero,1198 <altera_avalon_jtag_uart_close+0x2c>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    117c:	20800d17 	ldw	r2,52(r4)
    1180:	11800726 	beq	r2,r6,11a0 <altera_avalon_jtag_uart_close+0x34>
    1184:	20c00917 	ldw	r3,36(r4)
    1188:	20800117 	ldw	r2,4(r4)
    118c:	18bffa36 	bltu	r3,r2,1178 <__alt_mem_Flash_flash_data+0xf4001178>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1190:	0005883a 	mov	r2,zero
    1194:	f800283a 	ret
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    1198:	00bffd44 	movi	r2,-11
    119c:	f800283a 	ret
    }
  }

  return 0;
    11a0:	0005883a 	mov	r2,zero
}
    11a4:	f800283a 	ret

000011a8 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
    11a8:	009a8044 	movi	r2,27137
    11ac:	28800326 	beq	r5,r2,11bc <altera_avalon_jtag_uart_ioctl+0x14>
    11b0:	009a8084 	movi	r2,27138
    11b4:	28800f26 	beq	r5,r2,11f4 <altera_avalon_jtag_uart_ioctl+0x4c>
    11b8:	00001706 	br	1218 <altera_avalon_jtag_uart_ioctl+0x70>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    11bc:	20c00117 	ldw	r3,4(r4)
    11c0:	00a00034 	movhi	r2,32768
    11c4:	10bfffc4 	addi	r2,r2,-1
    11c8:	18801526 	beq	r3,r2,1220 <altera_avalon_jtag_uart_ioctl+0x78>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    11cc:	30800017 	ldw	r2,0(r6)
    11d0:	10ffff84 	addi	r3,r2,-2
    11d4:	01600034 	movhi	r5,32768
    11d8:	297fff04 	addi	r5,r5,-4
    11dc:	28c0022e 	bgeu	r5,r3,11e8 <altera_avalon_jtag_uart_ioctl+0x40>
    11e0:	00a00034 	movhi	r2,32768
    11e4:	10bfff84 	addi	r2,r2,-2
    11e8:	20800115 	stw	r2,4(r4)
      rc = 0;
    11ec:	0005883a 	mov	r2,zero
    11f0:	f800283a 	ret
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    11f4:	20c00117 	ldw	r3,4(r4)
    11f8:	00a00034 	movhi	r2,32768
    11fc:	10bfffc4 	addi	r2,r2,-1
    1200:	18800926 	beq	r3,r2,1228 <altera_avalon_jtag_uart_ioctl+0x80>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    1204:	20800917 	ldw	r2,36(r4)
    1208:	10c5803a 	cmpltu	r2,r2,r3
    120c:	30800015 	stw	r2,0(r6)
      rc = 0;
    1210:	0005883a 	mov	r2,zero
    1214:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
    1218:	00bff9c4 	movi	r2,-25
    121c:	f800283a 	ret
    1220:	00bff9c4 	movi	r2,-25
    1224:	f800283a 	ret
    1228:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
    122c:	f800283a 	ret

00001230 <altera_avalon_jtag_uart_read>:
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1230:	0180430e 	bge	zero,r6,1340 <altera_avalon_jtag_uart_read+0x110>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1234:	defff604 	addi	sp,sp,-40
    1238:	dfc00915 	stw	ra,36(sp)
    123c:	df000815 	stw	fp,32(sp)
    1240:	ddc00715 	stw	r23,28(sp)
    1244:	dd800615 	stw	r22,24(sp)
    1248:	dd400515 	stw	r21,20(sp)
    124c:	dd000415 	stw	r20,16(sp)
    1250:	dcc00315 	stw	r19,12(sp)
    1254:	dc800215 	stw	r18,8(sp)
    1258:	dc400115 	stw	r17,4(sp)
    125c:	dc000015 	stw	r16,0(sp)
    1260:	2025883a 	mov	r18,r4
    1264:	282d883a 	mov	r22,r5
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1268:	05420004 	movi	r21,2048
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    126c:	3dd0000c 	andi	r23,r7,16384
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1270:	b029883a 	mov	r20,r22
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1274:	94c00a17 	ldw	r19,40(r18)
      out = sp->rx_out;
    1278:	94400b17 	ldw	r17,44(r18)

      if (in >= out)
    127c:	9c400236 	bltu	r19,r17,1288 <altera_avalon_jtag_uart_read+0x58>
        n = in - out;
    1280:	9c61c83a 	sub	r16,r19,r17
    1284:	00000106 	br	128c <altera_avalon_jtag_uart_read+0x5c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    1288:	ac61c83a 	sub	r16,r21,r17

      if (n == 0)
    128c:	80000e26 	beq	r16,zero,12c8 <altera_avalon_jtag_uart_read+0x98>
        break; /* No more data available */

      if (n > space)
    1290:	3039883a 	mov	fp,r6
    1294:	3400012e 	bgeu	r6,r16,129c <altera_avalon_jtag_uart_read+0x6c>
    1298:	3021883a 	mov	r16,r6
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
    129c:	89400e04 	addi	r5,r17,56
    12a0:	a009883a 	mov	r4,r20
    12a4:	914b883a 	add	r5,r18,r5
    12a8:	800d883a 	mov	r6,r16
    12ac:	00032500 	call	3250 <memcpy>
      ptr   += n;
    12b0:	a429883a 	add	r20,r20,r16
      space -= n;
    12b4:	e40dc83a 	sub	r6,fp,r16

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    12b8:	8461883a 	add	r16,r16,r17
    12bc:	8401ffcc 	andi	r16,r16,2047
    12c0:	94000b15 	stw	r16,44(r18)
    }
    while (space > 0);
    12c4:	01bfeb16 	blt	zero,r6,1274 <__alt_mem_Flash_flash_data+0xf4001274>

    /* If we read any data then return it */
    if (ptr != buffer)
    12c8:	a580111e 	bne	r20,r22,1310 <altera_avalon_jtag_uart_read+0xe0>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    12cc:	b8000a1e 	bne	r23,zero,12f8 <altera_avalon_jtag_uart_read+0xc8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    12d0:	90800a17 	ldw	r2,40(r18)
    12d4:	14c0031e 	bne	r2,r19,12e4 <altera_avalon_jtag_uart_read+0xb4>
    12d8:	90c00917 	ldw	r3,36(r18)
    12dc:	90800117 	ldw	r2,4(r18)
    12e0:	18bffb36 	bltu	r3,r2,12d0 <__alt_mem_Flash_flash_data+0xf40012d0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    12e4:	90800a17 	ldw	r2,40(r18)
    12e8:	14c00526 	beq	r2,r19,1300 <altera_avalon_jtag_uart_read+0xd0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    12ec:	01bfe016 	blt	zero,r6,1270 <__alt_mem_Flash_flash_data+0xf4001270>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
    12f0:	00bffec4 	movi	r2,-5
    12f4:	00001606 	br	1350 <altera_avalon_jtag_uart_read+0x120>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    12f8:	00bffd44 	movi	r2,-11
    12fc:	00001406 	br	1350 <altera_avalon_jtag_uart_read+0x120>
  else
    return -EIO;
    1300:	00bffec4 	movi	r2,-5
    1304:	00001206 	br	1350 <altera_avalon_jtag_uart_read+0x120>
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    1308:	00bffd44 	movi	r2,-11
    130c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1310:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1314:	00bfff84 	movi	r2,-2
    1318:	1884703a 	and	r2,r3,r2
    131c:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1320:	90800817 	ldw	r2,32(r18)
    1324:	10800054 	ori	r2,r2,1
    1328:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    132c:	91000017 	ldw	r4,0(r18)
    1330:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1334:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
    1338:	a585c83a 	sub	r2,r20,r22
    133c:	00000406 	br	1350 <altera_avalon_jtag_uart_read+0x120>
  else if (flags & O_NONBLOCK)
    1340:	39d0000c 	andi	r7,r7,16384
    1344:	383ff01e 	bne	r7,zero,1308 <__alt_mem_Flash_flash_data+0xf4001308>
    return -EWOULDBLOCK;
  else
    return -EIO;
    1348:	00bffec4 	movi	r2,-5
    134c:	f800283a 	ret
}
    1350:	dfc00917 	ldw	ra,36(sp)
    1354:	df000817 	ldw	fp,32(sp)
    1358:	ddc00717 	ldw	r23,28(sp)
    135c:	dd800617 	ldw	r22,24(sp)
    1360:	dd400517 	ldw	r21,20(sp)
    1364:	dd000417 	ldw	r20,16(sp)
    1368:	dcc00317 	ldw	r19,12(sp)
    136c:	dc800217 	ldw	r18,8(sp)
    1370:	dc400117 	ldw	r17,4(sp)
    1374:	dc000017 	ldw	r16,0(sp)
    1378:	dec00a04 	addi	sp,sp,40
    137c:	f800283a 	ret

00001380 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1380:	defff504 	addi	sp,sp,-44
    1384:	dfc00a15 	stw	ra,40(sp)
    1388:	df000915 	stw	fp,36(sp)
    138c:	ddc00815 	stw	r23,32(sp)
    1390:	dd800715 	stw	r22,28(sp)
    1394:	dd400615 	stw	r21,24(sp)
    1398:	dd000515 	stw	r20,20(sp)
    139c:	dcc00415 	stw	r19,16(sp)
    13a0:	dc800315 	stw	r18,12(sp)
    13a4:	dc400215 	stw	r17,8(sp)
    13a8:	dc000115 	stw	r16,4(sp)
    13ac:	2021883a 	mov	r16,r4
    13b0:	282b883a 	mov	r21,r5
    13b4:	d9c00015 	stw	r7,0(sp)
    13b8:	2827883a 	mov	r19,r5
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    13bc:	0701ffc4 	movi	fp,2047
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    13c0:	05ffff84 	movi	r23,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    13c4:	3d90000c 	andi	r22,r7,16384
    13c8:	00001906 	br	1430 <altera_avalon_jtag_uart_write+0xb0>
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    13cc:	84800c17 	ldw	r18,48(r16)
      out = sp->tx_out;
    13d0:	81000d17 	ldw	r4,52(r16)

      if (in < out)
    13d4:	9100032e 	bgeu	r18,r4,13e4 <altera_avalon_jtag_uart_write+0x64>
    13d8:	247fffc4 	addi	r17,r4,-1
        n = out - 1 - in;
    13dc:	8ca3c83a 	sub	r17,r17,r18
    13e0:	00000506 	br	13f8 <altera_avalon_jtag_uart_write+0x78>
      else if (out > 0)
    13e4:	20000326 	beq	r4,zero,13f4 <altera_avalon_jtag_uart_write+0x74>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    13e8:	00820004 	movi	r2,2048
    13ec:	14a3c83a 	sub	r17,r2,r18
    13f0:	00000106 	br	13f8 <altera_avalon_jtag_uart_write+0x78>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    13f4:	e4a3c83a 	sub	r17,fp,r18

      if (n == 0)
    13f8:	88002b26 	beq	r17,zero,14a8 <altera_avalon_jtag_uart_write+0x128>
        break;

      if (n > count)
    13fc:	3029883a 	mov	r20,r6
    1400:	3440012e 	bgeu	r6,r17,1408 <altera_avalon_jtag_uart_write+0x88>
    1404:	3023883a 	mov	r17,r6
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
    1408:	91020e04 	addi	r4,r18,2104
    140c:	8109883a 	add	r4,r16,r4
    1410:	980b883a 	mov	r5,r19
    1414:	880d883a 	mov	r6,r17
    1418:	00032500 	call	3250 <memcpy>
      ptr   += n;
    141c:	9c67883a 	add	r19,r19,r17
      count -= n;
    1420:	a44dc83a 	sub	r6,r20,r17

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1424:	8ca3883a 	add	r17,r17,r18
    1428:	8c41ffcc 	andi	r17,r17,2047
    142c:	84400c15 	stw	r17,48(r16)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1430:	01bfe616 	blt	zero,r6,13cc <__alt_mem_Flash_flash_data+0xf40013cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1434:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1438:	00bfff84 	movi	r2,-2
    143c:	1884703a 	and	r2,r3,r2
    1440:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1444:	80800817 	ldw	r2,32(r16)
    1448:	10800094 	ori	r2,r2,2
    144c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    1450:	81000017 	ldw	r4,0(r16)
    1454:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1458:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    145c:	9d40091e 	bne	r19,r21,1484 <altera_avalon_jtag_uart_write+0x104>
    1460:	00000a06 	br	148c <altera_avalon_jtag_uart_write+0x10c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    1464:	80800d17 	ldw	r2,52(r16)
    1468:	2080031e 	bne	r4,r2,1478 <altera_avalon_jtag_uart_write+0xf8>
    146c:	80c00917 	ldw	r3,36(r16)
    1470:	80800117 	ldw	r2,4(r16)
    1474:	18bffb36 	bltu	r3,r2,1464 <__alt_mem_Flash_flash_data+0xf4001464>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    1478:	80800917 	ldw	r2,36(r16)
    147c:	103fec26 	beq	r2,zero,1430 <__alt_mem_Flash_flash_data+0xf4001430>
    1480:	00001406 	br	14d4 <altera_avalon_jtag_uart_write+0x154>
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
    1484:	9d45c83a 	sub	r2,r19,r21
    1488:	00001706 	br	14e8 <altera_avalon_jtag_uart_write+0x168>
  else if (flags & O_NONBLOCK)
    148c:	d8c00017 	ldw	r3,0(sp)
    1490:	1890000c 	andi	r2,r3,16384
    1494:	1000021e 	bne	r2,zero,14a0 <altera_avalon_jtag_uart_write+0x120>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1498:	00bffec4 	movi	r2,-5
    149c:	00001206 	br	14e8 <altera_avalon_jtag_uart_write+0x168>
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    14a0:	00bffd44 	movi	r2,-11
    14a4:	00001006 	br	14e8 <altera_avalon_jtag_uart_write+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    14a8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    14ac:	1dc4703a 	and	r2,r3,r23
    14b0:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    14b4:	80800817 	ldw	r2,32(r16)
    14b8:	10800094 	ori	r2,r2,2
    14bc:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    14c0:	81400017 	ldw	r5,0(r16)
    14c4:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    14c8:	1801703a 	wrctl	status,r3
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
    14cc:	b03fe526 	beq	r22,zero,1464 <__alt_mem_Flash_flash_data+0xf4001464>
    14d0:	00000306 	br	14e0 <altera_avalon_jtag_uart_write+0x160>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    14d4:	9d7feb1e 	bne	r19,r21,1484 <__alt_mem_Flash_flash_data+0xf4001484>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    14d8:	00bffec4 	movi	r2,-5
    14dc:	00000206 	br	14e8 <altera_avalon_jtag_uart_write+0x168>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    14e0:	9d7fe81e 	bne	r19,r21,1484 <__alt_mem_Flash_flash_data+0xf4001484>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
    14e4:	00bffd44 	movi	r2,-11
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
    14e8:	dfc00a17 	ldw	ra,40(sp)
    14ec:	df000917 	ldw	fp,36(sp)
    14f0:	ddc00817 	ldw	r23,32(sp)
    14f4:	dd800717 	ldw	r22,28(sp)
    14f8:	dd400617 	ldw	r21,24(sp)
    14fc:	dd000517 	ldw	r20,20(sp)
    1500:	dcc00417 	ldw	r19,16(sp)
    1504:	dc800317 	ldw	r18,12(sp)
    1508:	dc400217 	ldw	r17,8(sp)
    150c:	dc000117 	ldw	r16,4(sp)
    1510:	dec00b04 	addi	sp,sp,44
    1514:	f800283a 	ret

00001518 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1518:	defffe04 	addi	sp,sp,-8
    151c:	dfc00115 	stw	ra,4(sp)
    1520:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1524:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1528:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    152c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1530:	00bfff84 	movi	r2,-2
    1534:	8084703a 	and	r2,r16,r2
    1538:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
    153c:	0002f2c0 	call	2f2c <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1540:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
    1544:	dfc00117 	ldw	ra,4(sp)
    1548:	dc000017 	ldw	r16,0(sp)
    154c:	dec00204 	addi	sp,sp,8
    1550:	f800283a 	ret

00001554 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    1554:	deffff04 	addi	sp,sp,-4
    1558:	dfc00015 	stw	ra,0(sp)
    155c:	200b883a 	mov	r5,r4
    1560:	3009883a 	mov	r4,r6
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1564:	00800074 	movhi	r2,1
    1568:	10a5df04 	addi	r2,r2,-26756
    156c:	10800017 	ldw	r2,0(r2)
    1570:	1000031e 	bne	r2,zero,1580 <alt_avalon_timer_sc_init+0x2c>
  {
    _alt_tick_rate = nticks;
    1574:	00800074 	movhi	r2,1
    1578:	10a5df04 	addi	r2,r2,-26756
    157c:	11c00015 	stw	r7,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1580:	008001c4 	movi	r2,7
    1584:	28800135 	stwio	r2,4(r5)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
    1588:	01800034 	movhi	r6,0
    158c:	31854604 	addi	r6,r6,5400
    1590:	0002c5c0 	call	2c5c <alt_irq_register>
#endif  
}
    1594:	dfc00017 	ldw	ra,0(sp)
    1598:	dec00104 	addi	sp,sp,4
    159c:	f800283a 	ret

000015a0 <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    15a0:	28000126 	beq	r5,zero,15a8 <get_DDRAM_addr+0x8>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    15a4:	21001014 	ori	r4,r4,64
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
}
    15a8:	00bfe004 	movi	r2,-128
    15ac:	1104b03a 	or	r2,r2,r4
    15b0:	f800283a 	ret

000015b4 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    15b4:	20800a17 	ldw	r2,40(r4)
    15b8:	11400025 	stbio	r5,0(r2)
    15bc:	f800283a 	ret

000015c0 <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
    15c0:	20800a17 	ldw	r2,40(r4)
    15c4:	00c00044 	movi	r3,1
    15c8:	10c00025 	stbio	r3,0(r2)
    15cc:	f800283a 	ret

000015d0 <alt_up_character_lcd_open_dev>:
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
    15d0:	deffff04 	addi	sp,sp,-4
    15d4:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
    15d8:	01400034 	movhi	r5,0
    15dc:	295e5e04 	addi	r5,r5,31096
    15e0:	0002abc0 	call	2abc <alt_find_dev>

  return dev;
}
    15e4:	dfc00017 	ldw	ra,0(sp)
    15e8:	dec00104 	addi	sp,sp,4
    15ec:	f800283a 	ret

000015f0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    15f0:	30000726 	beq	r6,zero,1610 <alt_up_character_lcd_write+0x20>
    15f4:	2805883a 	mov	r2,r5
    15f8:	298b883a 	add	r5,r5,r6
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
    15fc:	20c00a17 	ldw	r3,40(r4)
    1600:	11c00007 	ldb	r7,0(r2)
    1604:	19c00065 	stbio	r7,1(r3)
    1608:	10800044 	addi	r2,r2,1
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
    160c:	117ffb1e 	bne	r2,r5,15fc <__alt_mem_Flash_flash_data+0xf40015fc>
    1610:	f800283a 	ret

00001614 <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    1614:	28800003 	ldbu	r2,0(r5)
    1618:	10c03fcc 	andi	r3,r2,255
    161c:	18c0201c 	xori	r3,r3,128
    1620:	18ffe004 	addi	r3,r3,-128
    1624:	18000826 	beq	r3,zero,1648 <alt_up_character_lcd_string+0x34>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
    1628:	20c00a17 	ldw	r3,40(r4)
    162c:	18800065 	stbio	r2,1(r3)
		++ptr;
    1630:	29400044 	addi	r5,r5,1
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
    1634:	28800003 	ldbu	r2,0(r5)
    1638:	10c03fcc 	andi	r3,r2,255
    163c:	18c0201c 	xori	r3,r3,128
    1640:	18ffe004 	addi	r3,r3,-128
    1644:	183ff81e 	bne	r3,zero,1628 <__alt_mem_Flash_flash_data+0xf4001628>
    1648:	f800283a 	ret

0000164c <alt_up_character_lcd_write_fd>:
	}
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
    164c:	deffff04 	addi	sp,sp,-4
    1650:	dfc00015 	stw	ra,0(sp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
    1654:	21000017 	ldw	r4,0(r4)
    1658:	00015f00 	call	15f0 <alt_up_character_lcd_write>
	return 0;
}
    165c:	0005883a 	mov	r2,zero
    1660:	dfc00017 	ldw	ra,0(sp)
    1664:	dec00104 	addi	sp,sp,4
    1668:	f800283a 	ret

0000166c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
    166c:	008009c4 	movi	r2,39
    1670:	11400a36 	bltu	r2,r5,169c <alt_up_character_lcd_set_cursor_pos+0x30>
    1674:	00800044 	movi	r2,1
    1678:	11800a36 	bltu	r2,r6,16a4 <alt_up_character_lcd_set_cursor_pos+0x38>
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    167c:	30000126 	beq	r6,zero,1684 <alt_up_character_lcd_set_cursor_pos+0x18>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    1680:	29401014 	ori	r5,r5,64
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    1684:	00bfe004 	movi	r2,-128
    1688:	288ab03a 	or	r5,r5,r2
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    168c:	20800a17 	ldw	r2,40(r4)
    1690:	11400025 	stbio	r5,0(r2)
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
    1694:	0005883a 	mov	r2,zero
    1698:	f800283a 	ret
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
		// invalid argument
		return -1;
    169c:	00bfffc4 	movi	r2,-1
    16a0:	f800283a 	ret
    16a4:	00bfffc4 	movi	r2,-1
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}
    16a8:	f800283a 	ret

000016ac <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
    16ac:	28000f26 	beq	r5,zero,16ec <alt_up_character_lcd_shift_cursor+0x40>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    16b0:	01400216 	blt	zero,r5,16bc <alt_up_character_lcd_shift_cursor+0x10>
    16b4:	01800404 	movi	r6,16
    16b8:	00000106 	br	16c0 <alt_up_character_lcd_shift_cursor+0x14>
    16bc:	01800504 	movi	r6,20
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    16c0:	2807883a 	mov	r3,r5
    16c4:	2800010e 	bge	r5,zero,16cc <alt_up_character_lcd_shift_cursor+0x20>
    16c8:	0147c83a 	sub	r3,zero,r5
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    16cc:	18803fcc 	andi	r2,r3,255
    16d0:	10000626 	beq	r2,zero,16ec <alt_up_character_lcd_shift_cursor+0x40>
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    16d4:	20800a17 	ldw	r2,40(r4)
    16d8:	11800025 	stbio	r6,0(r2)
    16dc:	18bfffc4 	addi	r2,r3,-1
    16e0:	1007883a 	mov	r3,r2
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    16e4:	10803fcc 	andi	r2,r2,255
    16e8:	103ffa1e 	bne	r2,zero,16d4 <__alt_mem_Flash_flash_data+0xf40016d4>
    16ec:	f800283a 	ret

000016f0 <alt_up_character_lcd_shift_display>:
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
    16f0:	28000f26 	beq	r5,zero,1730 <alt_up_character_lcd_shift_display+0x40>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
    16f4:	01400216 	blt	zero,r5,1700 <alt_up_character_lcd_shift_display+0x10>
    16f8:	01800604 	movi	r6,24
    16fc:	00000106 	br	1704 <alt_up_character_lcd_shift_display+0x14>
    1700:	01800704 	movi	r6,28
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
    1704:	2807883a 	mov	r3,r5
    1708:	2800010e 	bge	r5,zero,1710 <alt_up_character_lcd_shift_display+0x20>
    170c:	0147c83a 	sub	r3,zero,r5
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1710:	18803fcc 	andi	r2,r3,255
    1714:	10000626 	beq	r2,zero,1730 <alt_up_character_lcd_shift_display+0x40>
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    1718:	20800a17 	ldw	r2,40(r4)
    171c:	11800025 	stbio	r6,0(r2)
    1720:	18bfffc4 	addi	r2,r3,-1
    1724:	1007883a 	mov	r3,r2
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
    1728:	10803fcc 	andi	r2,r2,255
    172c:	103ffa1e 	bne	r2,zero,1718 <__alt_mem_Flash_flash_data+0xf4001718>
    1730:	f800283a 	ret

00001734 <alt_up_character_lcd_erase_pos>:
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
    1734:	008009c4 	movi	r2,39
    1738:	11400d36 	bltu	r2,r5,1770 <alt_up_character_lcd_erase_pos+0x3c>
    173c:	00800044 	movi	r2,1
    1740:	11800d36 	bltu	r2,r6,1778 <alt_up_character_lcd_erase_pos+0x44>
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
    1744:	30000126 	beq	r6,zero,174c <alt_up_character_lcd_erase_pos+0x18>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
    1748:	29401014 	ori	r5,r5,64
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
    174c:	00bfe004 	movi	r2,-128
    1750:	288ab03a 	or	r5,r5,r2
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    1754:	20800a17 	ldw	r2,40(r4)
    1758:	11400025 	stbio	r5,0(r2)
	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
    175c:	20800a17 	ldw	r2,40(r4)
    1760:	00c00084 	movi	r3,2
    1764:	10c00065 	stbio	r3,1(r2)
	return 0;
    1768:	0005883a 	mov	r2,zero
    176c:	f800283a 	ret

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
		return -1;
    1770:	00bfffc4 	movi	r2,-1
    1774:	f800283a 	ret
    1778:	00bfffc4 	movi	r2,-1
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}
    177c:	f800283a 	ret

00001780 <alt_up_character_lcd_cursor_off>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
    1780:	20800a17 	ldw	r2,40(r4)
    1784:	00c00304 	movi	r3,12
    1788:	10c00025 	stbio	r3,0(r2)
    178c:	f800283a 	ret

00001790 <alt_up_character_lcd_cursor_blink_on>:
    1790:	20800a17 	ldw	r2,40(r4)
    1794:	00c003c4 	movi	r3,15
    1798:	10c00025 	stbio	r3,0(r2)
    179c:	f800283a 	ret

000017a0 <alt_up_irda_enable_read_interrupt>:


void alt_up_irda_enable_read_interrupt(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    17a0:	20800a17 	ldw	r2,40(r4)
    17a4:	10800104 	addi	r2,r2,4
    17a8:	10c00037 	ldwio	r3,0(r2)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_IRDA_CONTROL_RE_MSK;
    17ac:	18c00054 	ori	r3,r3,1
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    17b0:	10c00035 	stwio	r3,0(r2)
    17b4:	f800283a 	ret

000017b8 <alt_up_irda_disable_read_interrupt>:
}

void alt_up_irda_disable_read_interrupt(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    17b8:	20800a17 	ldw	r2,40(r4)
    17bc:	10800104 	addi	r2,r2,4
    17c0:	11000037 	ldwio	r4,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_IRDA_CONTROL_RE_MSK;
    17c4:	00ffff84 	movi	r3,-2
    17c8:	20c6703a 	and	r3,r4,r3
	IOWR_ALT_UP_IRDA_CONTROL(irda->base, ctrl_reg);
    17cc:	10c00035 	stwio	r3,0(r2)
    17d0:	f800283a 	ret

000017d4 <alt_up_irda_get_used_space_in_read_FIFO>:
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_IRDA_DATA(irda->base), 2); 
//	return ravail;
	ravail = IORD_ALT_UP_IRDA_RAVAIL(irda->base); 
    17d4:	20800a17 	ldw	r2,40(r4)
    17d8:	108000ab 	ldhuio	r2,2(r2)
	return (ravail & ALT_UP_IRDA_RAVAIL_MSK) >> ALT_UP_IRDA_RAVAIL_OFST;
}
    17dc:	10bfffcc 	andi	r2,r2,65535
    17e0:	f800283a 	ret

000017e4 <alt_up_irda_get_available_space_in_write_FIFO>:

unsigned alt_up_irda_get_available_space_in_write_FIFO(alt_up_irda_dev *irda)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_IRDA_CONTROL(irda->base); 
    17e4:	20800a17 	ldw	r2,40(r4)
    17e8:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_IRDA_CONTROL_WSPACE_MSK) >> ALT_UP_IRDA_CONTROL_WSPACE_OFST;
}
    17ec:	1004d43a 	srli	r2,r2,16
    17f0:	f800283a 	ret

000017f4 <alt_up_irda_check_parity>:

int alt_up_irda_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_IRDA_DATA_PE_MSK) >> ALT_UP_IRDA_DATA_PE_OFST;
    17f4:	2100800c 	andi	r4,r4,512
	return (parity_error ? -1 : 0);
    17f8:	2004c03a 	cmpne	r2,r4,zero
}
    17fc:	0085c83a 	sub	r2,zero,r2
    1800:	f800283a 	ret

00001804 <alt_up_irda_write_data>:
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    1804:	29403fcc 	andi	r5,r5,255
    1808:	20800a17 	ldw	r2,40(r4)
    180c:	11400035 	stwio	r5,0(r2)
	return 0;
}
    1810:	0005883a 	mov	r2,zero
    1814:	f800283a 	ret

00001818 <alt_up_irda_read_data>:

int alt_up_irda_read_data(alt_up_irda_dev *irda, alt_u8 *data, alt_u8 *parity_error)
{
    1818:	defffd04 	addi	sp,sp,-12
    181c:	dfc00215 	stw	ra,8(sp)
    1820:	dc400115 	stw	r17,4(sp)
    1824:	dc000015 	stw	r16,0(sp)
    1828:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    182c:	20800a17 	ldw	r2,40(r4)
    1830:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_IRDA_DATA_DATA_MSK) >> ALT_UP_IRDA_DATA_DATA_OFST;
    1834:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_irda_check_parity(data_reg);
    1838:	8009883a 	mov	r4,r16
    183c:	00017f40 	call	17f4 <alt_up_irda_check_parity>
    1840:	88800005 	stb	r2,0(r17)
	return (((data_reg & ALT_UP_IRDA_DATA_RVALID_MSK) >> ALT_UP_IRDA_DATA_RVALID_OFST) - 1);
    1844:	80a0000c 	andi	r2,r16,32768
    1848:	1004d3fa 	srli	r2,r2,15
}
    184c:	10bfffc4 	addi	r2,r2,-1
    1850:	dfc00217 	ldw	ra,8(sp)
    1854:	dc400117 	ldw	r17,4(sp)
    1858:	dc000017 	ldw	r16,0(sp)
    185c:	dec00304 	addi	sp,sp,12
    1860:	f800283a 	ret

00001864 <alt_up_irda_read_fd>:

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
    1864:	defffa04 	addi	sp,sp,-24
    1868:	dfc00515 	stw	ra,20(sp)
    186c:	dcc00415 	stw	r19,16(sp)
    1870:	dc800315 	stw	r18,12(sp)
    1874:	dc400215 	stw	r17,8(sp)
    1878:	dc000115 	stw	r16,4(sp)
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    187c:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1880:	30000b26 	beq	r6,zero,18b0 <alt_up_irda_read_fd+0x4c>
    1884:	3023883a 	mov	r17,r6
    1888:	2825883a 	mov	r18,r5
    188c:	0021883a 	mov	r16,zero
	{
		if (alt_up_irda_read_data(irda, (alt_u8 *)ptr++, &parity_error)==0)
    1890:	9809883a 	mov	r4,r19
    1894:	940b883a 	add	r5,r18,r16
    1898:	d80d883a 	mov	r6,sp
    189c:	00018180 	call	1818 <alt_up_irda_read_data>
    18a0:	1000041e 	bne	r2,zero,18b4 <alt_up_irda_read_fd+0x50>
			count++;
    18a4:	84000044 	addi	r16,r16,1
int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    18a8:	8c3ff91e 	bne	r17,r16,1890 <__alt_mem_Flash_flash_data+0xf4001890>
    18ac:	00000106 	br	18b4 <alt_up_irda_read_fd+0x50>
}

int alt_up_irda_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
    18b0:	0021883a 	mov	r16,zero
			count++;
		else
			break;
	}
	return count;
}
    18b4:	8005883a 	mov	r2,r16
    18b8:	dfc00517 	ldw	ra,20(sp)
    18bc:	dcc00417 	ldw	r19,16(sp)
    18c0:	dc800317 	ldw	r18,12(sp)
    18c4:	dc400217 	ldw	r17,8(sp)
    18c8:	dc000117 	ldw	r16,4(sp)
    18cc:	dec00604 	addi	sp,sp,24
    18d0:	f800283a 	ret

000018d4 <alt_up_irda_write_fd>:

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
    18d4:	3005883a 	mov	r2,r6
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
    18d8:	22000017 	ldw	r8,0(r4)
	int count = 0;
	while(len--)
    18dc:	30000726 	beq	r6,zero,18fc <alt_up_irda_write_fd+0x28>
    18e0:	3007883a 	mov	r3,r6
	data_reg = IORD_ALT_UP_IRDA_DATA(irda->base);
    */

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_IRDA_DATA(irda->base, (data>>ALT_UP_IRDA_DATA_DATA_OFST) & ALT_UP_IRDA_DATA_DATA_MSK);
    18e4:	29c00003 	ldbu	r7,0(r5)
    18e8:	41000a17 	ldw	r4,40(r8)
    18ec:	21c00035 	stwio	r7,0(r4)
    18f0:	29400044 	addi	r5,r5,1
    18f4:	18ffffc4 	addi	r3,r3,-1

int alt_up_irda_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_irda_dev *irda = (alt_up_irda_dev*)fd->dev;
	int count = 0;
	while(len--)
    18f8:	183ffa1e 	bne	r3,zero,18e4 <__alt_mem_Flash_flash_data+0xf40018e4>
			count++;
		else
			break;
	}
	return count;
}
    18fc:	f800283a 	ret

00001900 <alt_up_irda_open_dev>:

alt_up_irda_dev* alt_up_irda_open_dev(const char* name)
{
    1900:	deffff04 	addi	sp,sp,-4
    1904:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_irda_dev *dev = (alt_up_irda_dev*)alt_find_dev(name, &alt_dev_list);
    1908:	01400034 	movhi	r5,0
    190c:	295e5e04 	addi	r5,r5,31096
    1910:	0002abc0 	call	2abc <alt_find_dev>

  return dev;
}
    1914:	dfc00017 	ldw	ra,0(sp)
    1918:	dec00104 	addi	sp,sp,4
    191c:	f800283a 	ret

00001920 <read_RI_bit>:

//////////////////////////////////////////////////////////////////////////////////////////////
// Internal Functions
alt_u8 read_RI_bit(alt_u32 ctrl_reg)
{
	alt_u8 ri = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RI_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RI_OFST);
    1920:	2080400c 	andi	r2,r4,256
	return ri;
}
    1924:	1004d23a 	srli	r2,r2,8
    1928:	f800283a 	ret

0000192c <read_RE_bit>:

alt_u8 read_RE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_RE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_RE_OFST);
	return re;
}
    192c:	2080004c 	andi	r2,r4,1
    1930:	f800283a 	ret

00001934 <read_CE_bit>:

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    1934:	2081000c 	andi	r2,r4,1024
	return re;
}
    1938:	1004d2ba 	srli	r2,r2,10
    193c:	f800283a 	ret

00001940 <read_num_bytes_available>:

alt_u16 read_num_bytes_available(alt_u32 data_reg)
{
	alt_u16 ravail = (alt_u16)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RAVAIL_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RAVAIL_OFST);
	return ravail;
}
    1940:	2004d43a 	srli	r2,r4,16
    1944:	f800283a 	ret

00001948 <read_data_valid>:

alt_u8 read_data_valid(alt_u32 data_reg)
{
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    1948:	20a0000c 	andi	r2,r4,32768
	return rvalid;
}
    194c:	1004d3fa 	srli	r2,r2,15
    1950:	f800283a 	ret

00001954 <read_data_byte>:

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
	return data;
}
    1954:	2005883a 	mov	r2,r4
    1958:	f800283a 	ret

0000195c <alt_up_ps2_enable_read_interrupt>:
}

void alt_up_ps2_enable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    195c:	20800a17 	ldw	r2,40(r4)
    1960:	10800104 	addi	r2,r2,4
    1964:	10c00037 	ldwio	r3,0(r2)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    1968:	18c00054 	ori	r3,r3,1
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    196c:	10c00035 	stwio	r3,0(r2)
    1970:	f800283a 	ret

00001974 <alt_up_ps2_disable_read_interrupt>:
}

void alt_up_ps2_disable_read_interrupt(alt_up_ps2_dev *ps2)
{
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base); 
    1974:	20800a17 	ldw	r2,40(r4)
    1978:	10800104 	addi	r2,r2,4
    197c:	11000037 	ldwio	r4,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_PS2_PORT_CTRL_REG_RE_MSK;
    1980:	00ffff84 	movi	r3,-2
    1984:	20c6703a 	and	r3,r4,r3
	IOWR_ALT_UP_PS2_PORT_CTRL_REG(ps2->base, ctrl_reg);
    1988:	10c00035 	stwio	r3,0(r2)
    198c:	f800283a 	ret

00001990 <alt_up_ps2_write_data_byte>:
int alt_up_ps2_write_data_byte(alt_up_ps2_dev *ps2, unsigned char byte)
{
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
    1990:	20800a17 	ldw	r2,40(r4)
    1994:	11400025 	stbio	r5,0(r2)
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
    1998:	20800a17 	ldw	r2,40(r4)
    199c:	10800137 	ldwio	r2,4(r2)
	return re;
}

alt_u8 read_CE_bit(alt_u32 ctrl_reg)
{
	alt_u8 re = (alt_u8) ((ctrl_reg & ALT_UP_PS2_PORT_CTRL_REG_CE_MSK) >> ALT_UP_PS2_PORT_CTRL_REG_CE_OFST);
    19a0:	1081000c 	andi	r2,r2,1024
	//note: data are only located at the lower 8 bits
	//note: the software send command to the PS2 peripheral through the data
	//		register rather than the control register
	IOWR_ALT_UP_PS2_PORT_DATA(ps2->base, byte);
	alt_u32 ctrl_reg = IORD_ALT_UP_PS2_PORT_CTRL_REG(ps2->base);
	if (read_CE_bit(ctrl_reg))
    19a4:	10000126 	beq	r2,zero,19ac <alt_up_ps2_write_data_byte+0x1c>
	{
		//CE bit is set --> error occurs on sending commands
		return -EIO;
    19a8:	00bffec4 	movi	r2,-5
	}
	return 0;
}
    19ac:	f800283a 	ret

000019b0 <alt_up_ps2_read_data_byte_timeout>:
}

int alt_up_ps2_read_data_byte_timeout(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	unsigned int count = 0;
    19b0:	0005883a 	mov	r2,zero
	do {
		count++;
    19b4:	10800044 	addi	r2,r2,1
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    19b8:	20c00a17 	ldw	r3,40(r4)
    19bc:	18c00037 	ldwio	r3,0(r3)
	return ravail;
}

alt_u8 read_data_valid(alt_u32 data_reg)
{
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    19c0:	19a0000c 	andi	r6,r3,32768
	unsigned int data_reg = 0; 
	unsigned int count = 0;
	do {
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		if (read_data_valid(data_reg))
    19c4:	30000326 	beq	r6,zero,19d4 <alt_up_ps2_read_data_byte_timeout+0x24>
	return rvalid;
}

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    19c8:	28c00005 	stb	r3,0(r5)
		count++;
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
		if (read_data_valid(data_reg))
		{
			*byte = read_data_byte(data_reg);
			return 0;
    19cc:	0005883a 	mov	r2,zero
    19d0:	f800283a 	ret
		}
		//timeout = 0 means to disable the timeout
		if ( ps2->timeout != 0 && count > ps2->timeout)
    19d4:	20c00c17 	ldw	r3,48(r4)
    19d8:	183ff626 	beq	r3,zero,19b4 <__alt_mem_Flash_flash_data+0xf40019b4>
    19dc:	18bff52e 	bgeu	r3,r2,19b4 <__alt_mem_Flash_flash_data+0xf40019b4>
		{
			return -ETIMEDOUT;
    19e0:	00bfe304 	movi	r2,-116
		}
	} while (1);
}
    19e4:	f800283a 	ret

000019e8 <alt_up_ps2_wait_for_ack>:
	}
	return 0;
}

int alt_up_ps2_wait_for_ack(alt_up_ps2_dev *ps2)
{
    19e8:	defffc04 	addi	sp,sp,-16
    19ec:	dfc00315 	stw	ra,12(sp)
    19f0:	dc400215 	stw	r17,8(sp)
    19f4:	dc000115 	stw	r16,4(sp)
    19f8:	2021883a 	mov	r16,r4
	unsigned char data = 0;
    19fc:	d8000005 	stb	zero,0(sp)
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
		if ( status == 0)
		{
			if (data == PS2_ACK)
    1a00:	04403e84 	movi	r17,250
{
	unsigned char data = 0;
	unsigned char status = 0;
	do
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
    1a04:	8009883a 	mov	r4,r16
    1a08:	d80b883a 	mov	r5,sp
    1a0c:	00019b00 	call	19b0 <alt_up_ps2_read_data_byte_timeout>
		if ( status == 0)
    1a10:	10c03fcc 	andi	r3,r2,255
    1a14:	1800031e 	bne	r3,zero,1a24 <alt_up_ps2_wait_for_ack+0x3c>
		{
			if (data == PS2_ACK)
    1a18:	d8800003 	ldbu	r2,0(sp)
    1a1c:	147ff91e 	bne	r2,r17,1a04 <__alt_mem_Flash_flash_data+0xf4001a04>
    1a20:	00000206 	br	1a2c <alt_up_ps2_wait_for_ack+0x44>
				return 0;
		}
		else 
		{
			return status;
    1a24:	10803fcc 	andi	r2,r2,255
    1a28:	00000106 	br	1a30 <alt_up_ps2_wait_for_ack+0x48>
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, &data); 
		if ( status == 0)
		{
			if (data == PS2_ACK)
				return 0;
    1a2c:	0005883a 	mov	r2,zero
		{
			return status;
		}
	} while(1);
	return -ETIMEDOUT;
}
    1a30:	dfc00317 	ldw	ra,12(sp)
    1a34:	dc400217 	ldw	r17,8(sp)
    1a38:	dc000117 	ldw	r16,4(sp)
    1a3c:	dec00404 	addi	sp,sp,16
    1a40:	f800283a 	ret

00001a44 <alt_up_ps2_write_data_byte_with_ack>:

int alt_up_ps2_write_data_byte_with_ack(alt_up_ps2_dev *ps2, unsigned char byte)
{
    1a44:	defffe04 	addi	sp,sp,-8
    1a48:	dfc00115 	stw	ra,4(sp)
    1a4c:	dc000015 	stw	r16,0(sp)
    1a50:	2021883a 	mov	r16,r4
	int send_status = alt_up_ps2_write_data_byte(ps2, byte);
    1a54:	29403fcc 	andi	r5,r5,255
    1a58:	00019900 	call	1990 <alt_up_ps2_write_data_byte>
	if ( send_status != 0)
    1a5c:	1000021e 	bne	r2,zero,1a68 <alt_up_ps2_write_data_byte_with_ack+0x24>
		// return on sending error
		return send_status;

	int ack_status = alt_up_ps2_wait_for_ack(ps2);
    1a60:	8009883a 	mov	r4,r16
    1a64:	00019e80 	call	19e8 <alt_up_ps2_wait_for_ack>
	return ack_status;
}
    1a68:	dfc00117 	ldw	ra,4(sp)
    1a6c:	dc000017 	ldw	r16,0(sp)
    1a70:	dec00204 	addi	sp,sp,8
    1a74:	f800283a 	ret

00001a78 <alt_up_ps2_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////
// HAL Functions
void alt_up_ps2_init(alt_up_ps2_dev *ps2)
{
    1a78:	defffd04 	addi	sp,sp,-12
    1a7c:	dfc00215 	stw	ra,8(sp)
    1a80:	dc000115 	stw	r16,4(sp)
    1a84:	2021883a 	mov	r16,r4
	// initialize the device
	unsigned char byte;
	//send the reset request, wait for ACK
	int status = alt_up_ps2_write_data_byte_with_ack(ps2, 0xff);
    1a88:	01403fc4 	movi	r5,255
    1a8c:	0001a440 	call	1a44 <alt_up_ps2_write_data_byte_with_ack>
	if (status == 0)
    1a90:	1000161e 	bne	r2,zero,1aec <alt_up_ps2_init+0x74>
	{
		// reset succeed, now try to get the BAT result, AA means passed
		status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1a94:	8009883a 	mov	r4,r16
    1a98:	d80b883a 	mov	r5,sp
    1a9c:	00019b00 	call	19b0 <alt_up_ps2_read_data_byte_timeout>
		if (status == 0 && byte == 0xAA)
    1aa0:	1000121e 	bne	r2,zero,1aec <alt_up_ps2_init+0x74>
    1aa4:	d8c00003 	ldbu	r3,0(sp)
    1aa8:	00802a84 	movi	r2,170
    1aac:	18800f1e 	bne	r3,r2,1aec <alt_up_ps2_init+0x74>
		{
			//get the 2nd byte
			status = alt_up_ps2_read_data_byte_timeout(ps2, &byte);
    1ab0:	8009883a 	mov	r4,r16
    1ab4:	d80b883a 	mov	r5,sp
    1ab8:	00019b00 	call	19b0 <alt_up_ps2_read_data_byte_timeout>
			if (status == -ETIMEDOUT)
    1abc:	00ffe304 	movi	r3,-116
    1ac0:	10c0031e 	bne	r2,r3,1ad0 <alt_up_ps2_init+0x58>
			{
				//for keyboard, only 2 bytes are sent(ACK, PASS/FAIL), so timeout
				ps2->device_type = PS2_KEYBOARD;
    1ac4:	00800044 	movi	r2,1
    1ac8:	80800d15 	stw	r2,52(r16)
    1acc:	00000706 	br	1aec <alt_up_ps2_init+0x74>
			}
			else if (status == 0 && byte == 0x00)
    1ad0:	1000061e 	bne	r2,zero,1aec <alt_up_ps2_init+0x74>
    1ad4:	d8800003 	ldbu	r2,0(sp)
    1ad8:	1000041e 	bne	r2,zero,1aec <alt_up_ps2_init+0x74>
			{
				//for mouse, it will sent out 0x00 after sending out ACK and PASS/FAIL.
				ps2->device_type = PS2_MOUSE;
    1adc:	80000d15 	stw	zero,52(r16)
				(void) alt_up_ps2_write_data_byte (ps2, 0xf4); // enable data from mouse
    1ae0:	8009883a 	mov	r4,r16
    1ae4:	01403d04 	movi	r5,244
    1ae8:	00019900 	call	1990 <alt_up_ps2_write_data_byte>
			}
		}
	}
}
    1aec:	dfc00217 	ldw	ra,8(sp)
    1af0:	dc000117 	ldw	r16,4(sp)
    1af4:	dec00304 	addi	sp,sp,12
    1af8:	f800283a 	ret

00001afc <alt_up_ps2_read_data_byte>:
}

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1afc:	20800a17 	ldw	r2,40(r4)
    1b00:	10800037 	ldwio	r2,0(r2)
	return ravail;
}

alt_u8 read_data_valid(alt_u32 data_reg)
{
	alt_u8 rvalid = (alt_u8)((data_reg & ALT_UP_PS2_PORT_DATA_REG_RVALID_MSK ) >> ALT_UP_PS2_PORT_DATA_REG_RVALID_OFST);
    1b04:	10e0000c 	andi	r3,r2,32768

int alt_up_ps2_read_data_byte(alt_up_ps2_dev *ps2, unsigned char *byte)
{
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
	if (read_data_valid(data_reg))
    1b08:	18000326 	beq	r3,zero,1b18 <alt_up_ps2_read_data_byte+0x1c>
	return rvalid;
}

alt_u8 read_data_byte(alt_u32 data_reg)
{
	alt_u8 data = (alt_u8) ( (data_reg & ALT_UP_PS2_PORT_DATA_REG_DATA_MSK) >> ALT_UP_PS2_PORT_DATA_REG_DATA_OFST) ;
    1b0c:	28800005 	stb	r2,0(r5)
	unsigned int data_reg = 0; 
	data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
	if (read_data_valid(data_reg))
	{
		*byte = read_data_byte(data_reg);
		return 0;
    1b10:	0005883a 	mov	r2,zero
    1b14:	f800283a 	ret
	}
	return -1;
    1b18:	00bfffc4 	movi	r2,-1
}
    1b1c:	f800283a 	ret

00001b20 <alt_up_ps2_clear_fifo>:
	alt_u16 num = 0;
	unsigned int data_reg = 0;
	do
	{
		// read the data register (the DATA byte is cleared)
		data_reg = IORD_ALT_UP_PS2_PORT_DATA_REG(ps2->base);
    1b20:	20800a17 	ldw	r2,40(r4)
    1b24:	10800037 	ldwio	r2,0(r2)
		// get the number of available bytes from the RAVAIL part of data register
		num = read_num_bytes_available(data_reg);
	} while (num > 0);
    1b28:	1004d43a 	srli	r2,r2,16
    1b2c:	103ffc1e 	bne	r2,zero,1b20 <__alt_mem_Flash_flash_data+0xf4001b20>
}
    1b30:	f800283a 	ret

00001b34 <alt_up_ps2_read_fd>:

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1b34:	21000017 	ldw	r4,0(r4)
	int status = 0;
	int count = 0;
	while (count < len);
    1b38:	0180010e 	bge	zero,r6,1b40 <alt_up_ps2_read_fd+0xc>
    1b3c:	003fff06 	br	1b3c <__alt_mem_Flash_flash_data+0xf4001b3c>
}

//////////////////////////////////////////////////////////////
// FD Functions
int alt_up_ps2_read_fd (alt_fd* fd, char* ptr, int len)
{
    1b40:	deffff04 	addi	sp,sp,-4
    1b44:	dfc00015 	stw	ra,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len);
	{
		status = alt_up_ps2_read_data_byte_timeout(ps2, (unsigned char *)ptr++);
    1b48:	00019b00 	call	19b0 <alt_up_ps2_read_data_byte_timeout>
		if (status!=0)
			return count;
		count++;
	} 
	return count;
}
    1b4c:	1005003a 	cmpeq	r2,r2,zero
    1b50:	dfc00017 	ldw	ra,0(sp)
    1b54:	dec00104 	addi	sp,sp,4
    1b58:	f800283a 	ret

00001b5c <alt_up_ps2_write_fd>:

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1b5c:	defffb04 	addi	sp,sp,-20
    1b60:	dfc00415 	stw	ra,16(sp)
    1b64:	dcc00315 	stw	r19,12(sp)
    1b68:	dc800215 	stw	r18,8(sp)
    1b6c:	dc400115 	stw	r17,4(sp)
    1b70:	dc000015 	stw	r16,0(sp)
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
    1b74:	24c00017 	ldw	r19,0(r4)
	int status = 0;
	int count = 0;
	while (count < len)
    1b78:	01800c0e 	bge	zero,r6,1bac <alt_up_ps2_write_fd+0x50>
    1b7c:	3023883a 	mov	r17,r6
    1b80:	2825883a 	mov	r18,r5
    1b84:	0021883a 	mov	r16,zero
    1b88:	9405883a 	add	r2,r18,r16
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
    1b8c:	9809883a 	mov	r4,r19
    1b90:	11400003 	ldbu	r5,0(r2)
    1b94:	00019900 	call	1990 <alt_up_ps2_write_data_byte>
		if (status!=0)
    1b98:	1000051e 	bne	r2,zero,1bb0 <alt_up_ps2_write_fd+0x54>
			return count;
		count++;
    1b9c:	84000044 	addi	r16,r16,1
int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
	while (count < len)
    1ba0:	847ff91e 	bne	r16,r17,1b88 <__alt_mem_Flash_flash_data+0xf4001b88>
	{
		status = alt_up_ps2_write_data_byte(ps2, *(ptr++) );
		if (status!=0)
			return count;
		count++;
    1ba4:	8821883a 	mov	r16,r17
    1ba8:	00000106 	br	1bb0 <alt_up_ps2_write_fd+0x54>

int alt_up_ps2_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_ps2_dev *ps2 = (alt_up_ps2_dev*) fd->dev;
	int status = 0;
	int count = 0;
    1bac:	0021883a 	mov	r16,zero
		if (status!=0)
			return count;
		count++;
	}
	return count;
}
    1bb0:	8005883a 	mov	r2,r16
    1bb4:	dfc00417 	ldw	ra,16(sp)
    1bb8:	dcc00317 	ldw	r19,12(sp)
    1bbc:	dc800217 	ldw	r18,8(sp)
    1bc0:	dc400117 	ldw	r17,4(sp)
    1bc4:	dc000017 	ldw	r16,0(sp)
    1bc8:	dec00504 	addi	sp,sp,20
    1bcc:	f800283a 	ret

00001bd0 <alt_up_ps2_open_dev>:

alt_up_ps2_dev* alt_up_ps2_open_dev(const char* name)
{
    1bd0:	deffff04 	addi	sp,sp,-4
    1bd4:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_ps2_dev *dev = (alt_up_ps2_dev*)alt_find_dev(name, &alt_dev_list);
    1bd8:	01400034 	movhi	r5,0
    1bdc:	295e5e04 	addi	r5,r5,31096
    1be0:	0002abc0 	call	2abc <alt_find_dev>

  return dev;
}
    1be4:	dfc00017 	ldw	ra,0(sp)
    1be8:	dec00104 	addi	sp,sp,4
    1bec:	f800283a 	ret

00001bf0 <alt_up_rs232_enable_read_interrupt>:


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1bf0:	20800a17 	ldw	r2,40(r4)
    1bf4:	10800104 	addi	r2,r2,4
    1bf8:	10c00037 	ldwio	r3,0(r2)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
    1bfc:	18c00054 	ori	r3,r3,1
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1c00:	10c00035 	stwio	r3,0(r2)
    1c04:	f800283a 	ret

00001c08 <alt_up_rs232_disable_read_interrupt>:
}

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1c08:	20800a17 	ldw	r2,40(r4)
    1c0c:	10800104 	addi	r2,r2,4
    1c10:	11000037 	ldwio	r4,0(r2)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
    1c14:	00ffff84 	movi	r3,-2
    1c18:	20c6703a 	and	r3,r4,r3
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
    1c1c:	10c00035 	stwio	r3,0(r2)
    1c20:	f800283a 	ret

00001c24 <alt_up_rs232_get_used_space_in_read_FIFO>:
unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u16 ravail = 0;
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
    1c24:	20800a17 	ldw	r2,40(r4)
    1c28:	108000ab 	ldhuio	r2,2(r2)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
}
    1c2c:	10bfffcc 	andi	r2,r2,65535
    1c30:	f800283a 	ret

00001c34 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
    1c34:	20800a17 	ldw	r2,40(r4)
    1c38:	10800137 	ldwio	r2,4(r2)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
}
    1c3c:	1004d43a 	srli	r2,r2,16
    1c40:	f800283a 	ret

00001c44 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
    1c44:	2100800c 	andi	r4,r4,512
	return (parity_error ? -1 : 0);
    1c48:	2004c03a 	cmpne	r2,r4,zero
}
    1c4c:	0085c83a 	sub	r2,zero,r2
    1c50:	f800283a 	ret

00001c54 <alt_up_rs232_write_data>:
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    1c54:	29403fcc 	andi	r5,r5,255
    1c58:	20800a17 	ldw	r2,40(r4)
    1c5c:	11400035 	stwio	r5,0(r2)
	return 0;
}
    1c60:	0005883a 	mov	r2,zero
    1c64:	f800283a 	ret

00001c68 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
    1c68:	defffd04 	addi	sp,sp,-12
    1c6c:	dfc00215 	stw	ra,8(sp)
    1c70:	dc400115 	stw	r17,4(sp)
    1c74:	dc000015 	stw	r16,0(sp)
    1c78:	3023883a 	mov	r17,r6
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
    1c7c:	20800a17 	ldw	r2,40(r4)
    1c80:	14000037 	ldwio	r16,0(r2)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
    1c84:	2c000005 	stb	r16,0(r5)
	*parity_error = alt_up_rs232_check_parity(data_reg);
    1c88:	8009883a 	mov	r4,r16
    1c8c:	0001c440 	call	1c44 <alt_up_rs232_check_parity>
    1c90:	88800005 	stb	r2,0(r17)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
    1c94:	80a0000c 	andi	r2,r16,32768
    1c98:	1004d3fa 	srli	r2,r2,15
}
    1c9c:	10bfffc4 	addi	r2,r2,-1
    1ca0:	dfc00217 	ldw	ra,8(sp)
    1ca4:	dc400117 	ldw	r17,4(sp)
    1ca8:	dc000017 	ldw	r16,0(sp)
    1cac:	dec00304 	addi	sp,sp,12
    1cb0:	f800283a 	ret

00001cb4 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
    1cb4:	defffa04 	addi	sp,sp,-24
    1cb8:	dfc00515 	stw	ra,20(sp)
    1cbc:	dcc00415 	stw	r19,16(sp)
    1cc0:	dc800315 	stw	r18,12(sp)
    1cc4:	dc400215 	stw	r17,8(sp)
    1cc8:	dc000115 	stw	r16,4(sp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1ccc:	24c00017 	ldw	r19,0(r4)
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1cd0:	30000b26 	beq	r6,zero,1d00 <alt_up_rs232_read_fd+0x4c>
    1cd4:	3023883a 	mov	r17,r6
    1cd8:	2825883a 	mov	r18,r5
    1cdc:	0021883a 	mov	r16,zero
	{
		if (alt_up_rs232_read_data(rs232, (alt_u8 *)ptr++, &parity_error)==0)
    1ce0:	9809883a 	mov	r4,r19
    1ce4:	940b883a 	add	r5,r18,r16
    1ce8:	d80d883a 	mov	r6,sp
    1cec:	0001c680 	call	1c68 <alt_up_rs232_read_data>
    1cf0:	1000041e 	bne	r2,zero,1d04 <alt_up_rs232_read_fd+0x50>
			count++;
    1cf4:	84000044 	addi	r16,r16,1
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
    1cf8:	8c3ff91e 	bne	r17,r16,1ce0 <__alt_mem_Flash_flash_data+0xf4001ce0>
    1cfc:	00000106 	br	1d04 <alt_up_rs232_read_fd+0x50>
}

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
    1d00:	0021883a 	mov	r16,zero
			count++;
		else
			break;
	}
	return count;
}
    1d04:	8005883a 	mov	r2,r16
    1d08:	dfc00517 	ldw	ra,20(sp)
    1d0c:	dcc00417 	ldw	r19,16(sp)
    1d10:	dc800317 	ldw	r18,12(sp)
    1d14:	dc400217 	ldw	r17,8(sp)
    1d18:	dc000117 	ldw	r16,4(sp)
    1d1c:	dec00604 	addi	sp,sp,24
    1d20:	f800283a 	ret

00001d24 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
    1d24:	3005883a 	mov	r2,r6
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
    1d28:	22000017 	ldw	r8,0(r4)
	int count = 0;
	while(len--)
    1d2c:	30000726 	beq	r6,zero,1d4c <alt_up_rs232_write_fd+0x28>
    1d30:	3007883a 	mov	r3,r6
	/*alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);*/
    
	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
    1d34:	29c00003 	ldbu	r7,0(r5)
    1d38:	41000a17 	ldw	r4,40(r8)
    1d3c:	21c00035 	stwio	r7,0(r4)
	while(len--)
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
		{
			count++;
			ptr++;
    1d40:	29400044 	addi	r5,r5,1
    1d44:	18ffffc4 	addi	r3,r3,-1

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
    1d48:	183ffa1e 	bne	r3,zero,1d34 <__alt_mem_Flash_flash_data+0xf4001d34>
		}
		else
			break;
	}
	return count;
}
    1d4c:	f800283a 	ret

00001d50 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
    1d50:	deffff04 	addi	sp,sp,-4
    1d54:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
    1d58:	01400034 	movhi	r5,0
    1d5c:	295e5e04 	addi	r5,r5,31096
    1d60:	0002abc0 	call	2abc <alt_find_dev>

  return dev;
}
    1d64:	dfc00017 	ldw	ra,0(sp)
    1d68:	dec00104 	addi	sp,sp,4
    1d6c:	f800283a 	ret

00001d70 <alt_up_char_buffer_init>:
#include <priv/alt_file.h>

#include "altera_up_avalon_video_character_buffer_with_dma.h"
#include "altera_up_avalon_video_character_buffer_with_dma_regs.h"

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
    1d70:	defffd04 	addi	sp,sp,-12
    1d74:	dfc00215 	stw	ra,8(sp)
    1d78:	dc400115 	stw	r17,4(sp)
    1d7c:	dc000015 	stw	r16,0(sp)
	char * name;
	name = (char *) char_buffer->dev.name;
    1d80:	24000217 	ldw	r16,8(r4)

	for ( ; (*name) != '\0'; name++) {
    1d84:	80800007 	ldb	r2,0(r16)
    1d88:	10000b26 	beq	r2,zero,1db8 <alt_up_char_buffer_init+0x48>
		if (strcmp(name, "_avalon_char_buffer_slave") == 0) {
    1d8c:	04400034 	movhi	r17,0
    1d90:	8c56b404 	addi	r17,r17,23248
    1d94:	8009883a 	mov	r4,r16
    1d98:	880b883a 	mov	r5,r17
    1d9c:	00034f40 	call	34f4 <strcmp>
    1da0:	1000021e 	bne	r2,zero,1dac <alt_up_char_buffer_init+0x3c>
			(*name) = '\0';
    1da4:	80000005 	stb	zero,0(r16)
			break;
    1da8:	00000306 	br	1db8 <alt_up_char_buffer_init+0x48>

void alt_up_char_buffer_init(alt_up_char_buffer_dev *char_buffer) {
	char * name;
	name = (char *) char_buffer->dev.name;

	for ( ; (*name) != '\0'; name++) {
    1dac:	84000044 	addi	r16,r16,1
    1db0:	80800007 	ldb	r2,0(r16)
    1db4:	103ff71e 	bne	r2,zero,1d94 <__alt_mem_Flash_flash_data+0xf4001d94>
			break;
		}
	}
	
	return;
}
    1db8:	dfc00217 	ldw	ra,8(sp)
    1dbc:	dc400117 	ldw	r17,4(sp)
    1dc0:	dc000017 	ldw	r16,0(sp)
    1dc4:	dec00304 	addi	sp,sp,12
    1dc8:	f800283a 	ret

00001dcc <alt_up_char_buffer_open_dev>:

alt_up_char_buffer_dev* alt_up_char_buffer_open_dev(const char* name) {
    1dcc:	deffff04 	addi	sp,sp,-4
    1dd0:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_char_buffer_dev *dev = (alt_up_char_buffer_dev *)alt_find_dev(name, &alt_dev_list);
    1dd4:	01400034 	movhi	r5,0
    1dd8:	295e5e04 	addi	r5,r5,31096
    1ddc:	0002abc0 	call	2abc <alt_find_dev>

  return dev;
}
    1de0:	dfc00017 	ldw	ra,0(sp)
    1de4:	dec00104 	addi	sp,sp,4
    1de8:	f800283a 	ret

00001dec <alt_up_char_buffer_draw>:

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1dec:	20800c17 	ldw	r2,48(r4)
    1df0:	3080102e 	bgeu	r6,r2,1e34 <alt_up_char_buffer_draw+0x48>
    1df4:	20800d17 	ldw	r2,52(r4)
    1df8:	3880102e 	bgeu	r7,r2,1e3c <alt_up_char_buffer_draw+0x50>
		return -1;
	
	unsigned int addr = 0;
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
    1dfc:	20800f17 	ldw	r2,60(r4)
    1e00:	3084703a 	and	r2,r6,r2
    1e04:	21800e17 	ldw	r6,56(r4)
    1e08:	1186983a 	sll	r3,r2,r6
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
    1e0c:	20801117 	ldw	r2,68(r4)
    1e10:	388e703a 	and	r7,r7,r2
    1e14:	21801017 	ldw	r6,64(r4)
    1e18:	398e983a 	sll	r7,r7,r6
    1e1c:	19ccb03a 	or	r6,r3,r7
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);
    1e20:	20800b17 	ldw	r2,44(r4)
    1e24:	308d883a 	add	r6,r6,r2
    1e28:	31400025 	stbio	r5,0(r6)

	return 0;
    1e2c:	0005883a 	mov	r2,zero
    1e30:	f800283a 	ret

int alt_up_char_buffer_draw(alt_up_char_buffer_dev *char_buffer, unsigned char ch, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
    1e34:	00bfffc4 	movi	r2,-1
    1e38:	f800283a 	ret
    1e3c:	00bfffc4 	movi	r2,-1
	addr |= ((x & char_buffer->x_coord_mask) << char_buffer->x_coord_offset);
	addr |= ((y & char_buffer->y_coord_mask) << char_buffer->y_coord_offset);
	IOWR_8DIRECT(char_buffer->buffer_base, addr, ch);

	return 0;
}
    1e40:	f800283a 	ret

00001e44 <alt_up_char_buffer_string>:

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
    1e44:	20800c17 	ldw	r2,48(r4)
    1e48:	30801c2e 	bgeu	r6,r2,1ebc <alt_up_char_buffer_string+0x78>
    1e4c:	20800d17 	ldw	r2,52(r4)
    1e50:	38801c2e 	bgeu	r7,r2,1ec4 <alt_up_char_buffer_string+0x80>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;
    1e54:	22401017 	ldw	r9,64(r4)
    1e58:	3a4e983a 	sll	r7,r7,r9
    1e5c:	398f883a 	add	r7,r7,r6

	while ( *ptr )
    1e60:	2a000003 	ldbu	r8,0(r5)
    1e64:	40803fcc 	andi	r2,r8,255
    1e68:	1080201c 	xori	r2,r2,128
    1e6c:	10bfe004 	addi	r2,r2,-128
    1e70:	10001626 	beq	r2,zero,1ecc <alt_up_char_buffer_string+0x88>
    1e74:	2805883a 	mov	r2,r5
    1e78:	3953c83a 	sub	r9,r7,r5
    1e7c:	314bc83a 	sub	r5,r6,r5
    1e80:	124f883a 	add	r7,r2,r9
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
    1e84:	20c00b17 	ldw	r3,44(r4)
    1e88:	38c7883a 	add	r3,r7,r3
    1e8c:	1a000025 	stbio	r8,0(r3)
		++ptr;
    1e90:	10800044 	addi	r2,r2,1
    1e94:	114f883a 	add	r7,r2,r5
		if (++x >= char_buffer->x_resolution)
    1e98:	20c00c17 	ldw	r3,48(r4)
    1e9c:	38c00d2e 	bgeu	r7,r3,1ed4 <alt_up_char_buffer_string+0x90>
		return -1;
	
	unsigned int offset = 0;
	offset = (y << char_buffer->y_coord_offset) + x;

	while ( *ptr )
    1ea0:	12000003 	ldbu	r8,0(r2)
    1ea4:	40c03fcc 	andi	r3,r8,255
    1ea8:	18c0201c 	xori	r3,r3,128
    1eac:	18ffe004 	addi	r3,r3,-128
    1eb0:	183ff31e 	bne	r3,zero,1e80 <__alt_mem_Flash_flash_data+0xf4001e80>
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    1eb4:	0005883a 	mov	r2,zero
    1eb8:	f800283a 	ret

int alt_up_char_buffer_string(alt_up_char_buffer_dev *char_buffer, const char *ptr, 
	unsigned int x, unsigned int y) {
	// boundary check
	if (x >= char_buffer->x_resolution || y >= char_buffer->y_resolution )
		return -1;
    1ebc:	00bfffc4 	movi	r2,-1
    1ec0:	f800283a 	ret
    1ec4:	00bfffc4 	movi	r2,-1
    1ec8:	f800283a 	ret
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
		++offset;
	}
	return 0;
    1ecc:	0005883a 	mov	r2,zero
    1ed0:	f800283a 	ret
	while ( *ptr )
	{
		IOWR_8DIRECT(char_buffer->buffer_base, offset, *ptr);
		++ptr;
		if (++x >= char_buffer->x_resolution)
			return -1;
    1ed4:	00bfffc4 	movi	r2,-1
		++offset;
	}
	return 0;
}
    1ed8:	f800283a 	ret

00001edc <alt_up_char_buffer_clear>:

int alt_up_char_buffer_clear(alt_up_char_buffer_dev *char_buffer) {
	IOWR_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base, 1);
    1edc:	20800a17 	ldw	r2,40(r4)
    1ee0:	00c00044 	movi	r3,1
    1ee4:	10c000a5 	stbio	r3,2(r2)
	while ((IORD_ALT_UP_CHAR_BUFFER_CLR_SCRN(char_buffer->ctrl_reg_base) & ALT_UP_CHAR_BUFFER_CLR_SCRN_MSK) >> ALT_UP_CHAR_BUFFER_CLR_SCRN_OFST);
    1ee8:	20800a17 	ldw	r2,40(r4)
    1eec:	108000a3 	ldbuio	r2,2(r2)
    1ef0:	1080004c 	andi	r2,r2,1
    1ef4:	103ffc1e 	bne	r2,zero,1ee8 <__alt_mem_Flash_flash_data+0xf4001ee8>
	return 0;
}
    1ef8:	f800283a 	ret

00001efc <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
    1efc:	deffff04 	addi	sp,sp,-4
    1f00:	dfc00015 	stw	ra,0(sp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
    1f04:	01400034 	movhi	r5,0
    1f08:	295e5e04 	addi	r5,r5,31096
    1f0c:	0002abc0 	call	2abc <alt_find_dev>

  return dev;
}
    1f10:	dfc00017 	ldw	ra,0(sp)
    1f14:	dec00104 	addi	sp,sp,4
    1f18:	f800283a 	ret

00001f1c <alt_up_pixel_buffer_dma_draw>:
int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
    1f1c:	20800f17 	ldw	r2,60(r4)
    1f20:	30802a2e 	bgeu	r6,r2,1fcc <alt_up_pixel_buffer_dma_draw+0xb0>
    1f24:	20c01017 	ldw	r3,64(r4)
    1f28:	38c02a2e 	bgeu	r7,r3,1fd4 <alt_up_pixel_buffer_dma_draw+0xb8>
		return -1;

	unsigned int addr = 0;
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    1f2c:	20c00d17 	ldw	r3,52(r4)
    1f30:	18000a1e 	bne	r3,zero,1f5c <alt_up_pixel_buffer_dma_draw+0x40>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    1f34:	20801217 	ldw	r2,72(r4)
    1f38:	308c703a 	and	r6,r6,r2
    1f3c:	20801117 	ldw	r2,68(r4)
    1f40:	308c983a 	sll	r6,r6,r2
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
    1f44:	20c01417 	ldw	r3,80(r4)
    1f48:	38ce703a 	and	r7,r7,r3
    1f4c:	20801317 	ldw	r2,76(r4)
    1f50:	388e983a 	sll	r7,r7,r2
    1f54:	31c5883a 	add	r2,r6,r7
    1f58:	00000806 	br	1f7c <alt_up_pixel_buffer_dma_draw+0x60>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    1f5c:	22001117 	ldw	r8,68(r4)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    1f60:	20c01417 	ldw	r3,80(r4)
    1f64:	38ce703a 	and	r7,r7,r3
    1f68:	388f383a 	mul	r7,r7,r2
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
    1f6c:	20801217 	ldw	r2,72(r4)
    1f70:	3084703a 	and	r2,r6,r2
    1f74:	11c5883a 	add	r2,r2,r7
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
    1f78:	1204983a 	sll	r2,r2,r8
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    1f7c:	20c00e17 	ldw	r3,56(r4)
    1f80:	01800044 	movi	r6,1
    1f84:	1980051e 	bne	r3,r6,1f9c <alt_up_pixel_buffer_dma_draw+0x80>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    1f88:	20c00c17 	ldw	r3,48(r4)
    1f8c:	10c5883a 	add	r2,r2,r3
    1f90:	11400025 	stbio	r5,0(r2)
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	}

	return 0;
    1f94:	0005883a 	mov	r2,zero
    1f98:	f800283a 	ret
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    1f9c:	01800084 	movi	r6,2
    1fa0:	1980051e 	bne	r3,r6,1fb8 <alt_up_pixel_buffer_dma_draw+0x9c>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    1fa4:	20c00c17 	ldw	r3,48(r4)
    1fa8:	10c5883a 	add	r2,r2,r3
    1fac:	1140002d 	sthio	r5,0(r2)
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	}

	return 0;
    1fb0:	0005883a 	mov	r2,zero
    1fb4:	f800283a 	ret
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
    1fb8:	20c00c17 	ldw	r3,48(r4)
    1fbc:	10c5883a 	add	r2,r2,r3
    1fc0:	11400035 	stwio	r5,0(r2)
	}

	return 0;
    1fc4:	0005883a 	mov	r2,zero
    1fc8:	f800283a 	ret
/* This function draws a pixel to the back buffer.
 */
{
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
		return -1;
    1fcc:	00bfffc4 	movi	r2,-1
    1fd0:	f800283a 	ret
    1fd4:	00bfffc4 	movi	r2,-1
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
	}

	return 0;
}
    1fd8:	f800283a 	ret

00001fdc <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
    1fdc:	20800a17 	ldw	r2,40(r4)
    1fe0:	11400135 	stwio	r5,4(r2)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
    1fe4:	20800a17 	ldw	r2,40(r4)
    1fe8:	10800137 	ldwio	r2,4(r2)
    1fec:	20800c15 	stw	r2,48(r4)
	return 0;
}
    1ff0:	0005883a 	mov	r2,zero
    1ff4:	f800283a 	ret

00001ff8 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
    1ff8:	20800c17 	ldw	r2,48(r4)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
    1ffc:	20c00a17 	ldw	r3,40(r4)
    2000:	01400044 	movi	r5,1
    2004:	19400035 	stwio	r5,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
    2008:	20c00b17 	ldw	r3,44(r4)
    200c:	20c00c15 	stw	r3,48(r4)
	pixel_buffer->buffer_start_address = temp;
    2010:	20800b15 	stw	r2,44(r4)
	return 0;
}
    2014:	0005883a 	mov	r2,zero
    2018:	f800283a 	ret

0000201c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
    201c:	20800a17 	ldw	r2,40(r4)
    2020:	10800337 	ldwio	r2,12(r2)
}
    2024:	1080004c 	andi	r2,r2,1
    2028:	f800283a 	ret

0000202c <alt_up_pixel_buffer_dma_clear_screen>:
{
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    202c:	00800044 	movi	r2,1
    2030:	2880021e 	bne	r5,r2,203c <alt_up_pixel_buffer_dma_clear_screen+0x10>
		addr = pixel_buffer->back_buffer_start_address;
    2034:	21400c17 	ldw	r5,48(r4)
    2038:	00000106 	br	2040 <alt_up_pixel_buffer_dma_clear_screen+0x14>
	else
		addr = pixel_buffer->buffer_start_address;
    203c:	21400b17 	ldw	r5,44(r4)
	limit_x = pixel_buffer->x_resolution;
    2040:	21800f17 	ldw	r6,60(r4)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2044:	20c00e17 	ldw	r3,56(r4)
    2048:	00800084 	movi	r2,2
    204c:	1880021e 	bne	r3,r2,2058 <alt_up_pixel_buffer_dma_clear_screen+0x2c>
		limit_x = limit_x << 1;
    2050:	318d883a 	add	r6,r6,r6
    2054:	00000206 	br	2060 <alt_up_pixel_buffer_dma_clear_screen+0x34>
	} else {
		limit_x = limit_x << 2;
    2058:	318d883a 	add	r6,r6,r6
    205c:	318d883a 	add	r6,r6,r6
	}	
	limit_y = pixel_buffer->y_resolution;
    2060:	22001017 	ldw	r8,64(r4)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2064:	20800d17 	ldw	r2,52(r4)
    2068:	1000111e 	bne	r2,zero,20b0 <alt_up_pixel_buffer_dma_clear_screen+0x84>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
    206c:	22401317 	ldw	r9,76(r4)

		for (y = 0; y < limit_y; y++)
    2070:	40001726 	beq	r8,zero,20d0 <alt_up_pixel_buffer_dma_clear_screen+0xa4>
		{
			for (x = 0; x < limit_x; x = x + 4)
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    2074:	00800044 	movi	r2,1
    2078:	1252983a 	sll	r9,r2,r9
    207c:	000f883a 	mov	r7,zero
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    2080:	0009883a 	mov	r4,zero
    2084:	00000706 	br	20a4 <alt_up_pixel_buffer_dma_clear_screen+0x78>
    2088:	1147883a 	add	r3,r2,r5
			{
				IOWR_32DIRECT(addr, x, 0);
    208c:	19000035 	stwio	r4,0(r3)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
    2090:	10800104 	addi	r2,r2,4
    2094:	11bffc36 	bltu	r2,r6,2088 <__alt_mem_Flash_flash_data+0xf4002088>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
    2098:	2a4b883a 	add	r5,r5,r9
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
    209c:	39c00044 	addi	r7,r7,1
    20a0:	3a000b26 	beq	r7,r8,20d0 <alt_up_pixel_buffer_dma_clear_screen+0xa4>
		{
			for (x = 0; x < limit_x; x = x + 4)
    20a4:	2005883a 	mov	r2,r4
    20a8:	303ff71e 	bne	r6,zero,2088 <__alt_mem_Flash_flash_data+0xf4002088>
    20ac:	003ffa06 	br	2098 <__alt_mem_Flash_flash_data+0xf4002098>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
    20b0:	320d383a 	mul	r6,r6,r8

		for (x = 0; x < limit_y; x = x + 4)
    20b4:	30000626 	beq	r6,zero,20d0 <alt_up_pixel_buffer_dma_clear_screen+0xa4>
    20b8:	0005883a 	mov	r2,zero
		{
			IOWR_32DIRECT(addr, x, 0);
    20bc:	0009883a 	mov	r4,zero
    20c0:	1147883a 	add	r3,r2,r5
    20c4:	19000035 	stwio	r4,0(r3)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
    20c8:	10800104 	addi	r2,r2,4
    20cc:	11bffc36 	bltu	r2,r6,20c0 <__alt_mem_Flash_flash_data+0xf40020c0>
    20d0:	f800283a 	ret

000020d4 <alt_up_pixel_buffer_dma_draw_box>:
	}
}

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
    20d4:	da400117 	ldw	r9,4(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    20d8:	23400f17 	ldw	r13,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    20dc:	20801017 	ldw	r2,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
    20e0:	2817883a 	mov	r11,r5
	register unsigned int r_x = x1;
    20e4:	3811883a 	mov	r8,r7
	register unsigned int t_y = y0;
    20e8:	3015883a 	mov	r10,r6
	register unsigned int b_y = y1;
    20ec:	db000017 	ldw	r12,0(sp)
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    20f0:	3940022e 	bgeu	r7,r5,20fc <alt_up_pixel_buffer_dma_draw_box+0x28>
	{
		temp = l_x;
		l_x = r_x;
    20f4:	3817883a 	mov	r11,r7
		r_x = temp;
    20f8:	2811883a 	mov	r8,r5
	}
	if (t_y > b_y)
    20fc:	6280022e 	bgeu	r12,r10,2108 <alt_up_pixel_buffer_dma_draw_box+0x34>
	{
		temp = t_y;
		t_y = b_y;
    2100:	da800017 	ldw	r10,0(sp)
		b_y = temp;
    2104:	3019883a 	mov	r12,r6
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
    2108:	5b40762e 	bgeu	r11,r13,22e4 <alt_up_pixel_buffer_dma_draw_box+0x210>
    210c:	5080752e 	bgeu	r10,r2,22e4 <alt_up_pixel_buffer_dma_draw_box+0x210>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    2110:	43400136 	bltu	r8,r13,2118 <alt_up_pixel_buffer_dma_draw_box+0x44>
	{
		r_x = limit_x - 1;
    2114:	6a3fffc4 	addi	r8,r13,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    2118:	60800136 	bltu	r12,r2,2120 <alt_up_pixel_buffer_dma_draw_box+0x4c>
	{
		b_y = limit_y - 1;
    211c:	133fffc4 	addi	r12,r2,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    2120:	00800044 	movi	r2,1
    2124:	d8c00217 	ldw	r3,8(sp)
    2128:	1880021e 	bne	r3,r2,2134 <alt_up_pixel_buffer_dma_draw_box+0x60>
		addr = pixel_buffer->back_buffer_start_address;
    212c:	20800c17 	ldw	r2,48(r4)
    2130:	00000106 	br	2138 <alt_up_pixel_buffer_dma_draw_box+0x64>
	else
		addr = pixel_buffer->buffer_start_address;
    2134:	20800b17 	ldw	r2,44(r4)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2138:	20c00d17 	ldw	r3,52(r4)
    213c:	1800341e 	bne	r3,zero,2210 <alt_up_pixel_buffer_dma_draw_box+0x13c>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    2140:	20c01317 	ldw	r3,76(r4)
    2144:	50ca983a 	sll	r5,r10,r3
    2148:	114b883a 	add	r5,r2,r5
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    214c:	20800e17 	ldw	r2,56(r4)
    2150:	01000044 	movi	r4,1
    2154:	11000d1e 	bne	r2,r4,218c <alt_up_pixel_buffer_dma_draw_box+0xb8>
			for (y = t_y; y <= b_y; y++)
    2158:	62806236 	bltu	r12,r10,22e4 <alt_up_pixel_buffer_dma_draw_box+0x210>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    215c:	20c8983a 	sll	r4,r4,r3
    2160:	00000706 	br	2180 <alt_up_pixel_buffer_dma_draw_box+0xac>
    2164:	1147883a 	add	r3,r2,r5
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    2168:	1a400025 	stbio	r9,0(r3)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    216c:	10800044 	addi	r2,r2,1
    2170:	40bffc2e 	bgeu	r8,r2,2164 <__alt_mem_Flash_flash_data+0xf4002164>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
    2174:	290b883a 	add	r5,r5,r4
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    2178:	52800044 	addi	r10,r10,1
    217c:	62805936 	bltu	r12,r10,22e4 <alt_up_pixel_buffer_dma_draw_box+0x210>
			{
				for (x = l_x; x <= r_x; x++)
    2180:	5805883a 	mov	r2,r11
    2184:	42fff72e 	bgeu	r8,r11,2164 <__alt_mem_Flash_flash_data+0xf4002164>
    2188:	003ffa06 	br	2174 <__alt_mem_Flash_flash_data+0xf4002174>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    218c:	01000084 	movi	r4,2
    2190:	11000426 	beq	r2,r4,21a4 <alt_up_pixel_buffer_dma_draw_box+0xd0>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    2194:	62805336 	bltu	r12,r10,22e4 <alt_up_pixel_buffer_dma_draw_box+0x210>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    2198:	00800044 	movi	r2,1
    219c:	10c8983a 	sll	r4,r2,r3
    21a0:	00001806 	br	2204 <alt_up_pixel_buffer_dma_draw_box+0x130>
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    21a4:	62804f36 	bltu	r12,r10,22e4 <alt_up_pixel_buffer_dma_draw_box+0x210>
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    21a8:	01000044 	movi	r4,1
    21ac:	20c8983a 	sll	r4,r4,r3
    21b0:	00000806 	br	21d4 <alt_up_pixel_buffer_dma_draw_box+0x100>
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    21b4:	1087883a 	add	r3,r2,r2
    21b8:	1947883a 	add	r3,r3,r5
    21bc:	1a40002d 	sthio	r9,0(r3)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    21c0:	10800044 	addi	r2,r2,1
    21c4:	40bffb2e 	bgeu	r8,r2,21b4 <__alt_mem_Flash_flash_data+0xf40021b4>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
    21c8:	290b883a 	add	r5,r5,r4
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    21cc:	52800044 	addi	r10,r10,1
    21d0:	62804436 	bltu	r12,r10,22e4 <alt_up_pixel_buffer_dma_draw_box+0x210>
			{
				for (x = l_x; x <= r_x; x++)
    21d4:	5805883a 	mov	r2,r11
    21d8:	42fff62e 	bgeu	r8,r11,21b4 <__alt_mem_Flash_flash_data+0xf40021b4>
    21dc:	003ffa06 	br	21c8 <__alt_mem_Flash_flash_data+0xf40021c8>
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    21e0:	18c5883a 	add	r2,r3,r3
    21e4:	1085883a 	add	r2,r2,r2
    21e8:	1145883a 	add	r2,r2,r5
    21ec:	12400035 	stwio	r9,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    21f0:	18c00044 	addi	r3,r3,1
    21f4:	40fffa2e 	bgeu	r8,r3,21e0 <__alt_mem_Flash_flash_data+0xf40021e0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
    21f8:	290b883a 	add	r5,r5,r4
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    21fc:	52800044 	addi	r10,r10,1
    2200:	62803836 	bltu	r12,r10,22e4 <alt_up_pixel_buffer_dma_draw_box+0x210>
			{
				for (x = l_x; x <= r_x; x++)
    2204:	5807883a 	mov	r3,r11
    2208:	42fff52e 	bgeu	r8,r11,21e0 <__alt_mem_Flash_flash_data+0xf40021e0>
    220c:	003ffa06 	br	21f8 <__alt_mem_Flash_flash_data+0xf40021f8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2210:	20c00e17 	ldw	r3,56(r4)
    2214:	01000044 	movi	r4,1
    2218:	19000e1e 	bne	r3,r4,2254 <alt_up_pixel_buffer_dma_draw_box+0x180>
			addr = addr + t_y * limit_x;
    221c:	5347383a 	mul	r3,r10,r13
    2220:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
    2224:	6280082e 	bgeu	r12,r10,2248 <alt_up_pixel_buffer_dma_draw_box+0x174>
    2228:	f800283a 	ret
    222c:	1889883a 	add	r4,r3,r2
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_8DIRECT(addr, x, local_color);
    2230:	22400025 	stbio	r9,0(r4)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    2234:	18c00044 	addi	r3,r3,1
    2238:	40fffc2e 	bgeu	r8,r3,222c <__alt_mem_Flash_flash_data+0xf400222c>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
    223c:	1345883a 	add	r2,r2,r13
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2240:	52800044 	addi	r10,r10,1
    2244:	62802736 	bltu	r12,r10,22e4 <alt_up_pixel_buffer_dma_draw_box+0x210>
			{
				for (x = l_x; x <= r_x; x++)
    2248:	5807883a 	mov	r3,r11
    224c:	42fff72e 	bgeu	r8,r11,222c <__alt_mem_Flash_flash_data+0xf400222c>
    2250:	003ffa06 	br	223c <__alt_mem_Flash_flash_data+0xf400223c>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2254:	01000084 	movi	r4,2
    2258:	1900101e 	bne	r3,r4,229c <alt_up_pixel_buffer_dma_draw_box+0x1c8>
			limit_x = limit_x << 1;
    225c:	6b5b883a 	add	r13,r13,r13
			addr = addr + t_y * limit_x;
    2260:	5347383a 	mul	r3,r10,r13
    2264:	10c5883a 	add	r2,r2,r3
			for (y = t_y; y <= b_y; y++)
    2268:	6280092e 	bgeu	r12,r10,2290 <alt_up_pixel_buffer_dma_draw_box+0x1bc>
    226c:	f800283a 	ret
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
    2270:	18c9883a 	add	r4,r3,r3
    2274:	2089883a 	add	r4,r4,r2
    2278:	2240002d 	sthio	r9,0(r4)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    227c:	18c00044 	addi	r3,r3,1
    2280:	40fffb2e 	bgeu	r8,r3,2270 <__alt_mem_Flash_flash_data+0xf4002270>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
    2284:	1345883a 	add	r2,r2,r13
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2288:	52800044 	addi	r10,r10,1
    228c:	62801536 	bltu	r12,r10,22e4 <alt_up_pixel_buffer_dma_draw_box+0x210>
			{
				for (x = l_x; x <= r_x; x++)
    2290:	5807883a 	mov	r3,r11
    2294:	42fff62e 	bgeu	r8,r11,2270 <__alt_mem_Flash_flash_data+0xf4002270>
    2298:	003ffa06 	br	2284 <__alt_mem_Flash_flash_data+0xf4002284>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    229c:	6b5b883a 	add	r13,r13,r13
    22a0:	6b5b883a 	add	r13,r13,r13
			addr = addr + t_y * limit_x;
    22a4:	534b383a 	mul	r5,r10,r13
    22a8:	114b883a 	add	r5,r2,r5
			for (y = t_y; y <= b_y; y++)
    22ac:	62800a2e 	bgeu	r12,r10,22d8 <alt_up_pixel_buffer_dma_draw_box+0x204>
    22b0:	f800283a 	ret
			{
				for (x = l_x; x <= r_x; x++)
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
    22b4:	18c5883a 	add	r2,r3,r3
    22b8:	1085883a 	add	r2,r2,r2
    22bc:	1145883a 	add	r2,r2,r5
    22c0:	12400035 	stwio	r9,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
    22c4:	18c00044 	addi	r3,r3,1
    22c8:	40fffa2e 	bgeu	r8,r3,22b4 <__alt_mem_Flash_flash_data+0xf40022b4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
    22cc:	2b4b883a 	add	r5,r5,r13
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    22d0:	52800044 	addi	r10,r10,1
    22d4:	62800336 	bltu	r12,r10,22e4 <alt_up_pixel_buffer_dma_draw_box+0x210>
			{
				for (x = l_x; x <= r_x; x++)
    22d8:	5807883a 	mov	r3,r11
    22dc:	42fff52e 	bgeu	r8,r11,22b4 <__alt_mem_Flash_flash_data+0xf40022b4>
    22e0:	003ffa06 	br	22cc <__alt_mem_Flash_flash_data+0xf40022cc>
    22e4:	f800283a 	ret

000022e8 <alt_up_pixel_buffer_dma_draw_hline>:
	}
}

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
    22e8:	da400017 	ldw	r9,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    22ec:	22000f17 	ldw	r8,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    22f0:	22801017 	ldw	r10,64(r4)
	register unsigned int temp;
	register unsigned int l_x = x0;
    22f4:	2805883a 	mov	r2,r5
	register unsigned int r_x = x1;
    22f8:	3007883a 	mov	r3,r6
	register unsigned int line_y = y;
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (l_x > r_x)
    22fc:	3140022e 	bgeu	r6,r5,2308 <alt_up_pixel_buffer_dma_draw_hline+0x20>
	{
		temp = l_x;
		l_x = r_x;
    2300:	3005883a 	mov	r2,r6
		r_x = temp;
    2304:	2807883a 	mov	r3,r5
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
    2308:	12004b2e 	bgeu	r2,r8,2438 <alt_up_pixel_buffer_dma_draw_hline+0x150>
    230c:	3a804a2e 	bgeu	r7,r10,2438 <alt_up_pixel_buffer_dma_draw_hline+0x150>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
    2310:	1a000136 	bltu	r3,r8,2318 <alt_up_pixel_buffer_dma_draw_hline+0x30>
	{
		r_x = limit_x - 1;
    2314:	40ffffc4 	addi	r3,r8,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    2318:	01400044 	movi	r5,1
    231c:	d9800117 	ldw	r6,4(sp)
    2320:	3140021e 	bne	r6,r5,232c <alt_up_pixel_buffer_dma_draw_hline+0x44>
		addr = pixel_buffer->back_buffer_start_address;
    2324:	21800c17 	ldw	r6,48(r4)
    2328:	00000106 	br	2330 <alt_up_pixel_buffer_dma_draw_hline+0x48>
	else
		addr = pixel_buffer->buffer_start_address;
    232c:	21800b17 	ldw	r6,44(r4)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2330:	21400d17 	ldw	r5,52(r4)
    2334:	28001e1e 	bne	r5,zero,23b0 <alt_up_pixel_buffer_dma_draw_hline+0xc8>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (line_y << offset_y);
    2338:	22001317 	ldw	r8,76(r4)
    233c:	3a10983a 	sll	r8,r7,r8
    2340:	320f883a 	add	r7,r6,r8
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2344:	21000e17 	ldw	r4,56(r4)
    2348:	01400044 	movi	r5,1
    234c:	2140061e 	bne	r4,r5,2368 <alt_up_pixel_buffer_dma_draw_hline+0x80>
			for (x = l_x; x <= r_x; x++)
    2350:	18803936 	bltu	r3,r2,2438 <alt_up_pixel_buffer_dma_draw_hline+0x150>
    2354:	11c9883a 	add	r4,r2,r7
			{
				IOWR_8DIRECT(addr, x, local_color);
    2358:	22400025 	stbio	r9,0(r4)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    235c:	10800044 	addi	r2,r2,1
    2360:	18bffc2e 	bgeu	r3,r2,2354 <__alt_mem_Flash_flash_data+0xf4002354>
    2364:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2368:	01400084 	movi	r5,2
    236c:	21400226 	beq	r4,r5,2378 <alt_up_pixel_buffer_dma_draw_hline+0x90>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    2370:	1880082e 	bgeu	r3,r2,2394 <alt_up_pixel_buffer_dma_draw_hline+0xac>
    2374:	f800283a 	ret
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    2378:	18802f36 	bltu	r3,r2,2438 <alt_up_pixel_buffer_dma_draw_hline+0x150>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    237c:	1089883a 	add	r4,r2,r2
    2380:	21c9883a 	add	r4,r4,r7
    2384:	2240002d 	sthio	r9,0(r4)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
    2388:	10800044 	addi	r2,r2,1
    238c:	18bffb2e 	bgeu	r3,r2,237c <__alt_mem_Flash_flash_data+0xf400237c>
    2390:	f800283a 	ret
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    2394:	1089883a 	add	r4,r2,r2
    2398:	2109883a 	add	r4,r4,r4
    239c:	21c9883a 	add	r4,r4,r7
    23a0:	22400035 	stwio	r9,0(r4)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
    23a4:	10800044 	addi	r2,r2,1
    23a8:	18bffa2e 	bgeu	r3,r2,2394 <__alt_mem_Flash_flash_data+0xf4002394>
    23ac:	f800283a 	ret
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    23b0:	21000e17 	ldw	r4,56(r4)
    23b4:	01400044 	movi	r5,1
    23b8:	2140081e 	bne	r4,r5,23dc <alt_up_pixel_buffer_dma_draw_hline+0xf4>
			addr = addr + line_y * limit_x;
    23bc:	3a11383a 	mul	r8,r7,r8
    23c0:	320f883a 	add	r7,r6,r8
			for (x = l_x; x <= r_x; x++)
    23c4:	18801c36 	bltu	r3,r2,2438 <alt_up_pixel_buffer_dma_draw_hline+0x150>
    23c8:	11c9883a 	add	r4,r2,r7
			{
				IOWR_8DIRECT(addr, x, local_color);
    23cc:	22400025 	stbio	r9,0(r4)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    23d0:	10800044 	addi	r2,r2,1
    23d4:	18bffc2e 	bgeu	r3,r2,23c8 <__alt_mem_Flash_flash_data+0xf40023c8>
    23d8:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    23dc:	01400084 	movi	r5,2
    23e0:	21400a1e 	bne	r4,r5,240c <alt_up_pixel_buffer_dma_draw_hline+0x124>
			limit_x = limit_x << 1;
    23e4:	4209883a 	add	r4,r8,r8
			addr = addr + line_y * limit_x;
    23e8:	3911383a 	mul	r8,r7,r4
    23ec:	320f883a 	add	r7,r6,r8
			for (x = l_x; x <= r_x; x++)
    23f0:	18801136 	bltu	r3,r2,2438 <alt_up_pixel_buffer_dma_draw_hline+0x150>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
    23f4:	1089883a 	add	r4,r2,r2
    23f8:	21c9883a 	add	r4,r4,r7
    23fc:	2240002d 	sthio	r9,0(r4)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    2400:	10800044 	addi	r2,r2,1
    2404:	18bffb2e 	bgeu	r3,r2,23f4 <__alt_mem_Flash_flash_data+0xf40023f4>
    2408:	f800283a 	ret
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
    240c:	4211883a 	add	r8,r8,r8
    2410:	4211883a 	add	r8,r8,r8
			addr = addr + line_y * limit_x;
    2414:	3a11383a 	mul	r8,r7,r8
    2418:	320f883a 	add	r7,r6,r8
			for (x = l_x; x <= r_x; x++)
    241c:	18800636 	bltu	r3,r2,2438 <alt_up_pixel_buffer_dma_draw_hline+0x150>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
    2420:	1089883a 	add	r4,r2,r2
    2424:	2109883a 	add	r4,r4,r4
    2428:	21c9883a 	add	r4,r4,r7
    242c:	22400035 	stwio	r9,0(r4)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
    2430:	10800044 	addi	r2,r2,1
    2434:	18bffa2e 	bgeu	r3,r2,2420 <__alt_mem_Flash_flash_data+0xf4002420>
    2438:	f800283a 	ret

0000243c <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
    243c:	da400017 	ldw	r9,0(sp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
    2440:	20c00f17 	ldw	r3,60(r4)
	register unsigned int limit_y = pixel_buffer->y_resolution;
    2444:	22801017 	ldw	r10,64(r4)
	register unsigned int temp;
	register unsigned int line_x = x;
    2448:	2817883a 	mov	r11,r5
	register unsigned int t_y = y0;
    244c:	3005883a 	mov	r2,r6
	register unsigned int b_y = y1;
    2450:	3811883a 	mov	r8,r7
	register unsigned int local_color = color;
	
	/* Check coordinates */
	if (t_y > b_y)
    2454:	3980022e 	bgeu	r7,r6,2460 <alt_up_pixel_buffer_dma_draw_vline+0x24>
	{
		temp = t_y;
		t_y = b_y;
    2458:	3805883a 	mov	r2,r7
		b_y = temp;
    245c:	3011883a 	mov	r8,r6
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
    2460:	58c0562e 	bgeu	r11,r3,25bc <alt_up_pixel_buffer_dma_draw_vline+0x180>
    2464:	1280552e 	bgeu	r2,r10,25bc <alt_up_pixel_buffer_dma_draw_vline+0x180>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
    2468:	42800136 	bltu	r8,r10,2470 <alt_up_pixel_buffer_dma_draw_vline+0x34>
	{
		b_y = limit_y - 1;
    246c:	523fffc4 	addi	r8,r10,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
    2470:	01800044 	movi	r6,1
    2474:	d9c00117 	ldw	r7,4(sp)
    2478:	3980021e 	bne	r7,r6,2484 <alt_up_pixel_buffer_dma_draw_vline+0x48>
		addr = pixel_buffer->back_buffer_start_address;
    247c:	21800c17 	ldw	r6,48(r4)
    2480:	00000106 	br	2488 <alt_up_pixel_buffer_dma_draw_vline+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
    2484:	21800b17 	ldw	r6,44(r4)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
    2488:	21c00d17 	ldw	r7,52(r4)
    248c:	3800261e 	bne	r7,zero,2528 <alt_up_pixel_buffer_dma_draw_vline+0xec>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
		addr = addr + (t_y << offset_y);
    2490:	21c01317 	ldw	r7,76(r4)
    2494:	11c6983a 	sll	r3,r2,r7
    2498:	30cd883a 	add	r6,r6,r3
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    249c:	20c00e17 	ldw	r3,56(r4)
    24a0:	01000044 	movi	r4,1
    24a4:	1900081e 	bne	r3,r4,24c8 <alt_up_pixel_buffer_dma_draw_vline+0x8c>
			for (y = t_y; y <= b_y; y++)
    24a8:	40804436 	bltu	r8,r2,25bc <alt_up_pixel_buffer_dma_draw_vline+0x180>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
    24ac:	21c6983a 	sll	r3,r4,r7
    24b0:	298b883a 	add	r5,r5,r6
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    24b4:	2a400025 	stbio	r9,0(r5)
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    24b8:	10800044 	addi	r2,r2,1
    24bc:	28cb883a 	add	r5,r5,r3
    24c0:	40bffc2e 	bgeu	r8,r2,24b4 <__alt_mem_Flash_flash_data+0xf40024b4>
    24c4:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    24c8:	01000084 	movi	r4,2
    24cc:	19000226 	beq	r3,r4,24d8 <alt_up_pixel_buffer_dma_draw_vline+0x9c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    24d0:	40800b2e 	bgeu	r8,r2,2500 <alt_up_pixel_buffer_dma_draw_vline+0xc4>
    24d4:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    24d8:	40803836 	bltu	r8,r2,25bc <alt_up_pixel_buffer_dma_draw_vline+0x180>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
				addr = addr + (1 << offset_y);
    24dc:	00c00044 	movi	r3,1
    24e0:	19c6983a 	sll	r3,r3,r7
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    24e4:	294b883a 	add	r5,r5,r5
    24e8:	314d883a 	add	r6,r6,r5
    24ec:	3240002d 	sthio	r9,0(r6)
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
    24f0:	10800044 	addi	r2,r2,1
    24f4:	30cd883a 	add	r6,r6,r3
    24f8:	40bffc2e 	bgeu	r8,r2,24ec <__alt_mem_Flash_flash_data+0xf40024ec>
    24fc:	f800283a 	ret
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + (1 << offset_y);
    2500:	00c00044 	movi	r3,1
    2504:	19c6983a 	sll	r3,r3,r7
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    2508:	294b883a 	add	r5,r5,r5
    250c:	294b883a 	add	r5,r5,r5
    2510:	3149883a 	add	r4,r6,r5
    2514:	22400035 	stwio	r9,0(r4)
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
    2518:	10800044 	addi	r2,r2,1
    251c:	20c9883a 	add	r4,r4,r3
    2520:	40bffc2e 	bgeu	r8,r2,2514 <__alt_mem_Flash_flash_data+0xf4002514>
    2524:	f800283a 	ret
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
    2528:	21000e17 	ldw	r4,56(r4)
    252c:	01c00044 	movi	r7,1
    2530:	21c0091e 	bne	r4,r7,2558 <alt_up_pixel_buffer_dma_draw_vline+0x11c>
			addr = addr + t_y * limit_x;
    2534:	10c9383a 	mul	r4,r2,r3
			for (y = t_y; y <= b_y; y++)
    2538:	40802036 	bltu	r8,r2,25bc <alt_up_pixel_buffer_dma_draw_vline+0x180>
    253c:	2909883a 	add	r4,r5,r4
    2540:	2189883a 	add	r4,r4,r6
			{
				IOWR_8DIRECT(addr, line_x, local_color);
    2544:	22400025 	stbio	r9,0(r4)
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    2548:	10800044 	addi	r2,r2,1
    254c:	20c9883a 	add	r4,r4,r3
    2550:	40bffc2e 	bgeu	r8,r2,2544 <__alt_mem_Flash_flash_data+0xf4002544>
    2554:	f800283a 	ret
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
    2558:	01c00084 	movi	r7,2
    255c:	21c00b1e 	bne	r4,r7,258c <alt_up_pixel_buffer_dma_draw_vline+0x150>
			limit_x = limit_x << 1;
    2560:	18c7883a 	add	r3,r3,r3
			addr = addr + t_y * limit_x;
    2564:	10c9383a 	mul	r4,r2,r3
			for (y = t_y; y <= b_y; y++)
    2568:	40801436 	bltu	r8,r2,25bc <alt_up_pixel_buffer_dma_draw_vline+0x180>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
    256c:	294b883a 	add	r5,r5,r5
    2570:	2149883a 	add	r4,r4,r5
    2574:	2189883a 	add	r4,r4,r6
    2578:	2240002d 	sthio	r9,0(r4)
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    257c:	10800044 	addi	r2,r2,1
    2580:	20c9883a 	add	r4,r4,r3
    2584:	40bffc2e 	bgeu	r8,r2,2578 <__alt_mem_Flash_flash_data+0xf4002578>
    2588:	f800283a 	ret
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
    258c:	18c7883a 	add	r3,r3,r3
    2590:	18c7883a 	add	r3,r3,r3
			addr = addr + t_y * limit_x;
    2594:	10c9383a 	mul	r4,r2,r3
			for (y = t_y; y <= b_y; y++)
    2598:	40800836 	bltu	r8,r2,25bc <alt_up_pixel_buffer_dma_draw_vline+0x180>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
    259c:	294b883a 	add	r5,r5,r5
    25a0:	294b883a 	add	r5,r5,r5
    25a4:	2149883a 	add	r4,r4,r5
    25a8:	2189883a 	add	r4,r4,r6
    25ac:	22400035 	stwio	r9,0(r4)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
    25b0:	10800044 	addi	r2,r2,1
    25b4:	20c9883a 	add	r4,r4,r3
    25b8:	40bffc2e 	bgeu	r8,r2,25ac <__alt_mem_Flash_flash_data+0xf40025ac>
    25bc:	f800283a 	ret

000025c0 <alt_up_pixel_buffer_dma_draw_rectangle>:
		}
	}
}

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
    25c0:	defff704 	addi	sp,sp,-36
    25c4:	dfc00815 	stw	ra,32(sp)
    25c8:	dd400715 	stw	r21,28(sp)
    25cc:	dd000615 	stw	r20,24(sp)
    25d0:	dcc00515 	stw	r19,20(sp)
    25d4:	dc800415 	stw	r18,16(sp)
    25d8:	dc400315 	stw	r17,12(sp)
    25dc:	dc000215 	stw	r16,8(sp)
    25e0:	2029883a 	mov	r20,r4
    25e4:	282b883a 	mov	r21,r5
    25e8:	3025883a 	mov	r18,r6
    25ec:	3827883a 	mov	r19,r7
    25f0:	dc400a17 	ldw	r17,40(sp)
    25f4:	dc000b17 	ldw	r16,44(sp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
    25f8:	dc400015 	stw	r17,0(sp)
    25fc:	dc000115 	stw	r16,4(sp)
    2600:	380d883a 	mov	r6,r7
    2604:	900f883a 	mov	r7,r18
    2608:	00022e80 	call	22e8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
    260c:	dc400015 	stw	r17,0(sp)
    2610:	dc000115 	stw	r16,4(sp)
    2614:	a009883a 	mov	r4,r20
    2618:	a80b883a 	mov	r5,r21
    261c:	980d883a 	mov	r6,r19
    2620:	d9c00917 	ldw	r7,36(sp)
    2624:	00022e80 	call	22e8 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
    2628:	dc400015 	stw	r17,0(sp)
    262c:	dc000115 	stw	r16,4(sp)
    2630:	a009883a 	mov	r4,r20
    2634:	a80b883a 	mov	r5,r21
    2638:	900d883a 	mov	r6,r18
    263c:	d9c00917 	ldw	r7,36(sp)
    2640:	000243c0 	call	243c <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
    2644:	dc400015 	stw	r17,0(sp)
    2648:	dc000115 	stw	r16,4(sp)
    264c:	a009883a 	mov	r4,r20
    2650:	980b883a 	mov	r5,r19
    2654:	900d883a 	mov	r6,r18
    2658:	d9c00917 	ldw	r7,36(sp)
    265c:	000243c0 	call	243c <alt_up_pixel_buffer_dma_draw_vline>
}
    2660:	dfc00817 	ldw	ra,32(sp)
    2664:	dd400717 	ldw	r21,28(sp)
    2668:	dd000617 	ldw	r20,24(sp)
    266c:	dcc00517 	ldw	r19,20(sp)
    2670:	dc800417 	ldw	r18,16(sp)
    2674:	dc400317 	ldw	r17,12(sp)
    2678:	dc000217 	ldw	r16,8(sp)
    267c:	dec00904 	addi	sp,sp,36
    2680:	f800283a 	ret

00002684 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
    2684:	d8800117 	ldw	r2,4(sp)
	if (mode == 0)
    2688:	1000061e 	bne	r2,zero,26a4 <helper_plot_pixel+0x20>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
    268c:	29cf383a 	mul	r7,r5,r7
    2690:	398f883a 	add	r7,r7,r6
    2694:	390d883a 	add	r6,r7,r4
    2698:	d8800017 	ldw	r2,0(sp)
    269c:	30800025 	stbio	r2,0(r6)
    26a0:	f800283a 	ret
	else if (mode == 1)
    26a4:	00c00044 	movi	r3,1
    26a8:	10c0071e 	bne	r2,r3,26c8 <helper_plot_pixel+0x44>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
    26ac:	29cf383a 	mul	r7,r5,r7
    26b0:	398b883a 	add	r5,r7,r6
    26b4:	294b883a 	add	r5,r5,r5
    26b8:	290b883a 	add	r5,r5,r4
    26bc:	d8800017 	ldw	r2,0(sp)
    26c0:	2880002d 	sthio	r2,0(r5)
    26c4:	f800283a 	ret
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
    26c8:	29cf383a 	mul	r7,r5,r7
    26cc:	398d883a 	add	r6,r7,r6
    26d0:	318d883a 	add	r6,r6,r6
    26d4:	318d883a 	add	r6,r6,r6
    26d8:	310d883a 	add	r6,r6,r4
    26dc:	d8800017 	ldw	r2,0(sp)
    26e0:	30800035 	stwio	r2,0(r6)
    26e4:	f800283a 	ret

000026e8 <alt_up_pixel_buffer_dma_draw_line>:
}

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
    26e8:	defff204 	addi	sp,sp,-56
    26ec:	dfc00d15 	stw	ra,52(sp)
    26f0:	df000c15 	stw	fp,48(sp)
    26f4:	ddc00b15 	stw	r23,44(sp)
    26f8:	dd800a15 	stw	r22,40(sp)
    26fc:	dd400915 	stw	r21,36(sp)
    2700:	dd000815 	stw	r20,32(sp)
    2704:	dcc00715 	stw	r19,28(sp)
    2708:	dc800615 	stw	r18,24(sp)
    270c:	dc400515 	stw	r17,20(sp)
    2710:	dc000415 	stw	r16,16(sp)
    2714:	2823883a 	mov	r17,r5
    2718:	3025883a 	mov	r18,r6
    271c:	3827883a 	mov	r19,r7
    2720:	d9400e17 	ldw	r5,56(sp)
    2724:	dd800f17 	ldw	r22,60(sp)
	register int x_0 = x0;
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
    2728:	2985c83a 	sub	r2,r5,r6
    272c:	1000010e 	bge	r2,zero,2734 <alt_up_pixel_buffer_dma_draw_line+0x4c>
    2730:	0085c83a 	sub	r2,zero,r2
    2734:	9c47c83a 	sub	r3,r19,r17
    2738:	1800010e 	bge	r3,zero,2740 <alt_up_pixel_buffer_dma_draw_line+0x58>
    273c:	00c7c83a 	sub	r3,zero,r3
    2740:	1884803a 	cmplt	r2,r3,r2
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
    2744:	25000e17 	ldw	r20,56(r4)
    2748:	00c00044 	movi	r3,1
    274c:	a0c00426 	beq	r20,r3,2760 <alt_up_pixel_buffer_dma_draw_line+0x78>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
    2750:	a50000a0 	cmpeqi	r20,r20,2
    2754:	00c00084 	movi	r3,2
    2758:	1d29c83a 	sub	r20,r3,r20
    275c:	00000106 	br	2764 <alt_up_pixel_buffer_dma_draw_line+0x7c>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
    2760:	0029883a 	mov	r20,zero
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
    2764:	20c00d17 	ldw	r3,52(r4)
    2768:	1800061e 	bne	r3,zero,2784 <alt_up_pixel_buffer_dma_draw_line+0x9c>
    276c:	20c01317 	ldw	r3,76(r4)
    2770:	1d07c83a 	sub	r3,r3,r20
    2774:	01800044 	movi	r6,1
    2778:	30cc983a 	sll	r6,r6,r3
    277c:	d9800315 	stw	r6,12(sp)
    2780:	00000206 	br	278c <alt_up_pixel_buffer_dma_draw_line+0xa4>
    2784:	20c00f17 	ldw	r3,60(r4)
    2788:	d8c00315 	stw	r3,12(sp)

	if (backbuffer == 1)
    278c:	00c00044 	movi	r3,1
    2790:	d9801017 	ldw	r6,64(sp)
    2794:	30c0031e 	bne	r6,r3,27a4 <alt_up_pixel_buffer_dma_draw_line+0xbc>
		buffer_start = pixel_buffer->back_buffer_start_address;
    2798:	21000c17 	ldw	r4,48(r4)
    279c:	d9000215 	stw	r4,8(sp)
    27a0:	00000206 	br	27ac <alt_up_pixel_buffer_dma_draw_line+0xc4>
	else
		buffer_start = pixel_buffer->buffer_start_address;
    27a4:	21000b17 	ldw	r4,44(r4)
    27a8:	d9000215 	stw	r4,8(sp)

	/* Preprocessing inputs */
	if (steep > 0) {
    27ac:	10000626 	beq	r2,zero,27c8 <alt_up_pixel_buffer_dma_draw_line+0xe0>
    27b0:	9807883a 	mov	r3,r19
		error = x_0;
		x_0 = y_0;
		y_0 = error;
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
    27b4:	2827883a 	mov	r19,r5
		y_1 = error;
    27b8:	180b883a 	mov	r5,r3
		buffer_start = pixel_buffer->back_buffer_start_address;
	else
		buffer_start = pixel_buffer->buffer_start_address;

	/* Preprocessing inputs */
	if (steep > 0) {
    27bc:	8807883a 	mov	r3,r17
		// Swap x_0 and y_0
		error = x_0;
		x_0 = y_0;
    27c0:	9023883a 	mov	r17,r18
		y_0 = error;
    27c4:	1825883a 	mov	r18,r3
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
    27c8:	9c40060e 	bge	r19,r17,27e4 <alt_up_pixel_buffer_dma_draw_line+0xfc>
    27cc:	9007883a 	mov	r3,r18
		error = x_0;
		x_0 = x_1;
		x_1 = error;
		// Swap y_0 and y_1
		error = y_0;
		y_0 = y_1;
    27d0:	2825883a 	mov	r18,r5
		y_1 = error;
    27d4:	180b883a 	mov	r5,r3
		// Swap x_1 and y_1
		error = x_1;
		x_1 = y_1;
		y_1 = error;
	}
	if (x_0 > x_1) {
    27d8:	8807883a 	mov	r3,r17
		// Swap x_0 and x_1
		error = x_0;
		x_0 = x_1;
    27dc:	9823883a 	mov	r17,r19
		x_1 = error;
    27e0:	1827883a 	mov	r19,r3
		y_0 = y_1;
		y_1 = error;
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
    27e4:	9c6fc83a 	sub	r23,r19,r17
	deltay = ABS(y_1 - y_0);
    27e8:	2cabc83a 	sub	r21,r5,r18
    27ec:	a800010e 	bge	r21,zero,27f4 <alt_up_pixel_buffer_dma_draw_line+0x10c>
    27f0:	056bc83a 	sub	r21,zero,r21
	error = -(deltax / 2); 
    27f4:	b820d7fa 	srli	r16,r23,31
    27f8:	85e1883a 	add	r16,r16,r23
    27fc:	8021d07a 	srai	r16,r16,1
    2800:	0421c83a 	sub	r16,zero,r16
	y = y_0;
	if (y_0 < y_1)
    2804:	91400216 	blt	r18,r5,2810 <alt_up_pixel_buffer_dma_draw_line+0x128>
		ystep = 1;
	else
		ystep = -1;
    2808:	073fffc4 	movi	fp,-1
    280c:	00000106 	br	2814 <alt_up_pixel_buffer_dma_draw_line+0x12c>
	deltax = x_1 - x_0;
	deltay = ABS(y_1 - y_0);
	error = -(deltax / 2); 
	y = y_0;
	if (y_0 < y_1)
		ystep = 1;
    2810:	07000044 	movi	fp,1
	else
		ystep = -1;

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
    2814:	10803fcc 	andi	r2,r2,255
    2818:	1080201c 	xori	r2,r2,128
    281c:	10bfe004 	addi	r2,r2,-128
    2820:	1000021e 	bne	r2,zero,282c <alt_up_pixel_buffer_dma_draw_line+0x144>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    2824:	9c40100e 	bge	r19,r17,2868 <alt_up_pixel_buffer_dma_draw_line+0x180>
    2828:	00001c06 	br	289c <alt_up_pixel_buffer_dma_draw_line+0x1b4>

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    282c:	9c401b16 	blt	r19,r17,289c <alt_up_pixel_buffer_dma_draw_line+0x1b4>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
    2830:	dd800015 	stw	r22,0(sp)
    2834:	dd000115 	stw	r20,4(sp)
    2838:	d9000217 	ldw	r4,8(sp)
    283c:	d9400317 	ldw	r5,12(sp)
    2840:	900d883a 	mov	r6,r18
    2844:	880f883a 	mov	r7,r17
    2848:	00026840 	call	2684 <helper_plot_pixel>
			error = error + deltay;
    284c:	8561883a 	add	r16,r16,r21
			if (error > 0) {
    2850:	0400020e 	bge	zero,r16,285c <alt_up_pixel_buffer_dma_draw_line+0x174>
				y = y + ystep;
    2854:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    2858:	85e1c83a 	sub	r16,r16,r23

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
    285c:	8c400044 	addi	r17,r17,1
    2860:	9c7ff30e 	bge	r19,r17,2830 <__alt_mem_Flash_flash_data+0xf4002830>
    2864:	00000d06 	br	289c <alt_up_pixel_buffer_dma_draw_line+0x1b4>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
    2868:	dd800015 	stw	r22,0(sp)
    286c:	dd000115 	stw	r20,4(sp)
    2870:	d9000217 	ldw	r4,8(sp)
    2874:	d9400317 	ldw	r5,12(sp)
    2878:	880d883a 	mov	r6,r17
    287c:	900f883a 	mov	r7,r18
    2880:	00026840 	call	2684 <helper_plot_pixel>
			error = error + deltay;
    2884:	8561883a 	add	r16,r16,r21
			if (error > 0) {
    2888:	0400020e 	bge	zero,r16,2894 <alt_up_pixel_buffer_dma_draw_line+0x1ac>
				y = y + ystep;
    288c:	9725883a 	add	r18,r18,fp
				error = error - deltax;
    2890:	85e1c83a 	sub	r16,r16,r23
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
    2894:	8c400044 	addi	r17,r17,1
    2898:	9c7ff30e 	bge	r19,r17,2868 <__alt_mem_Flash_flash_data+0xf4002868>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
    289c:	dfc00d17 	ldw	ra,52(sp)
    28a0:	df000c17 	ldw	fp,48(sp)
    28a4:	ddc00b17 	ldw	r23,44(sp)
    28a8:	dd800a17 	ldw	r22,40(sp)
    28ac:	dd400917 	ldw	r21,36(sp)
    28b0:	dd000817 	ldw	r20,32(sp)
    28b4:	dcc00717 	ldw	r19,28(sp)
    28b8:	dc800617 	ldw	r18,24(sp)
    28bc:	dc400517 	ldw	r17,20(sp)
    28c0:	dc000417 	ldw	r16,16(sp)
    28c4:	dec00e04 	addi	sp,sp,56
    28c8:	f800283a 	ret

000028cc <alt_alarm_start>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    28cc:	00800074 	movhi	r2,1
    28d0:	10a5df04 	addi	r2,r2,-26756
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
    28d4:	10800017 	ldw	r2,0(r2)
    28d8:	10001d26 	beq	r2,zero,2950 <alt_alarm_start+0x84>
  {
    if (alarm)
    28dc:	20001e26 	beq	r4,zero,2958 <alt_alarm_start+0x8c>
    {
      alarm->callback = callback;
    28e0:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
    28e4:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    28e8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    28ec:	00bfff84 	movi	r2,-2
    28f0:	1884703a 	and	r2,r3,r2
    28f4:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    28f8:	00800074 	movhi	r2,1
    28fc:	10a5de04 	addi	r2,r2,-26760
    2900:	10800017 	ldw	r2,0(r2)
    2904:	11800044 	addi	r6,r2,1
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
    2908:	314b883a 	add	r5,r6,r5
    290c:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    2910:	2880032e 	bgeu	r5,r2,2920 <alt_alarm_start+0x54>
      {
        alarm->rollover = 1;
    2914:	00800044 	movi	r2,1
    2918:	20800405 	stb	r2,16(r4)
    291c:	00000106 	br	2924 <alt_alarm_start+0x58>
      }
      else
      {
        alarm->rollover = 0;
    2920:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2924:	00800034 	movhi	r2,0
    2928:	109e6404 	addi	r2,r2,31120
    292c:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
    2930:	11400017 	ldw	r5,0(r2)
    2934:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
    2938:	11400017 	ldw	r5,0(r2)
    293c:	29000115 	stw	r4,4(r5)
  list->next           = entry;
    2940:	11000015 	stw	r4,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2944:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
    2948:	0005883a 	mov	r2,zero
    294c:	f800283a 	ret
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
    2950:	00bfde84 	movi	r2,-134
    2954:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
    2958:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
    295c:	f800283a 	ret

00002960 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2960:	defffd04 	addi	sp,sp,-12
    2964:	dfc00215 	stw	ra,8(sp)
    2968:	dc400115 	stw	r17,4(sp)
    296c:	dc000015 	stw	r16,0(sp)
    2970:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2974:	20001a16 	blt	r4,zero,29e0 <close+0x80>
    2978:	21000324 	muli	r4,r4,12
    297c:	00800034 	movhi	r2,0
    2980:	109be804 	addi	r2,r2,28576
    2984:	2089883a 	add	r4,r4,r2

  if (fd)
    2988:	20001526 	beq	r4,zero,29e0 <close+0x80>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    298c:	20800017 	ldw	r2,0(r4)
    2990:	10800417 	ldw	r2,16(r2)
    2994:	10001e26 	beq	r2,zero,2a10 <close+0xb0>
    2998:	103ee83a 	callr	r2
    299c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    29a0:	8009883a 	mov	r4,r16
    29a4:	0002ed00 	call	2ed0 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    29a8:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    29ac:	88001b0e 	bge	r17,zero,2a1c <close+0xbc>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    29b0:	00800034 	movhi	r2,0
    29b4:	109e6204 	addi	r2,r2,31112
    29b8:	10800017 	ldw	r2,0(r2)
    29bc:	10000226 	beq	r2,zero,29c8 <close+0x68>
    29c0:	103ee83a 	callr	r2
    29c4:	00000206 	br	29d0 <close+0x70>
    29c8:	00800074 	movhi	r2,1
    29cc:	10a5e004 	addi	r2,r2,-26752
    {
      ALT_ERRNO = -rval;
    29d0:	0463c83a 	sub	r17,zero,r17
    29d4:	14400015 	stw	r17,0(r2)
      return -1;
    29d8:	00bfffc4 	movi	r2,-1
    29dc:	00000f06 	br	2a1c <close+0xbc>
    29e0:	00800034 	movhi	r2,0
    29e4:	109e6204 	addi	r2,r2,31112
    29e8:	10800017 	ldw	r2,0(r2)
    29ec:	10000226 	beq	r2,zero,29f8 <close+0x98>
    29f0:	103ee83a 	callr	r2
    29f4:	00000206 	br	2a00 <close+0xa0>
    29f8:	00800074 	movhi	r2,1
    29fc:	10a5e004 	addi	r2,r2,-26752
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2a00:	00c01444 	movi	r3,81
    2a04:	10c00015 	stw	r3,0(r2)
    return -1;
    2a08:	00bfffc4 	movi	r2,-1
    2a0c:	00000306 	br	2a1c <close+0xbc>

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2a10:	8009883a 	mov	r4,r16
    2a14:	0002ed00 	call	2ed0 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
    2a18:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
    2a1c:	dfc00217 	ldw	ra,8(sp)
    2a20:	dc400117 	ldw	r17,4(sp)
    2a24:	dc000017 	ldw	r16,0(sp)
    2a28:	dec00304 	addi	sp,sp,12
    2a2c:	f800283a 	ret

00002a30 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2a30:	f800283a 	ret

00002a34 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
    2a34:	3005883a 	mov	r2,r6
    2a38:	f800283a 	ret

00002a3c <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2a3c:	20000226 	beq	r4,zero,2a48 <alt_dev_llist_insert+0xc>
    2a40:	20800217 	ldw	r2,8(r4)
    2a44:	1000121e 	bne	r2,zero,2a90 <alt_dev_llist_insert+0x54>
    2a48:	00800034 	movhi	r2,0
    2a4c:	109e6204 	addi	r2,r2,31112
    2a50:	10800017 	ldw	r2,0(r2)
    2a54:	10000426 	beq	r2,zero,2a68 <alt_dev_llist_insert+0x2c>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2a58:	deffff04 	addi	sp,sp,-4
    2a5c:	dfc00015 	stw	ra,0(sp)
    2a60:	103ee83a 	callr	r2
    2a64:	00000606 	br	2a80 <alt_dev_llist_insert+0x44>
    2a68:	00800074 	movhi	r2,1
    2a6c:	10a5e004 	addi	r2,r2,-26752
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    2a70:	00c00584 	movi	r3,22
    2a74:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    2a78:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
    2a7c:	f800283a 	ret
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
    2a80:	00c00584 	movi	r3,22
    2a84:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    2a88:	00bffa84 	movi	r2,-22
    2a8c:	00000806 	br	2ab0 <alt_dev_llist_insert+0x74>
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2a90:	21400115 	stw	r5,4(r4)
  entry->next     = list->next;
    2a94:	28800017 	ldw	r2,0(r5)
    2a98:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
    2a9c:	28800017 	ldw	r2,0(r5)
    2aa0:	11000115 	stw	r4,4(r2)
  list->next           = entry;
    2aa4:	29000015 	stw	r4,0(r5)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
    2aa8:	0005883a 	mov	r2,zero
    2aac:	f800283a 	ret
}
    2ab0:	dfc00017 	ldw	ra,0(sp)
    2ab4:	dec00104 	addi	sp,sp,4
    2ab8:	f800283a 	ret

00002abc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2abc:	defffb04 	addi	sp,sp,-20
    2ac0:	dfc00415 	stw	ra,16(sp)
    2ac4:	dcc00315 	stw	r19,12(sp)
    2ac8:	dc800215 	stw	r18,8(sp)
    2acc:	dc400115 	stw	r17,4(sp)
    2ad0:	dc000015 	stw	r16,0(sp)
    2ad4:	2027883a 	mov	r19,r4
    2ad8:	2823883a 	mov	r17,r5
  alt_dev* next = (alt_dev*) llist->next;
    2adc:	2c000017 	ldw	r16,0(r5)
  alt_32 len;

  len  = strlen(name) + 1;
    2ae0:	00035980 	call	3598 <strlen>
    2ae4:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2ae8:	8c000926 	beq	r17,r16,2b10 <alt_find_dev+0x54>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2aec:	81000217 	ldw	r4,8(r16)
    2af0:	980b883a 	mov	r5,r19
    2af4:	900d883a 	mov	r6,r18
    2af8:	00031d40 	call	31d4 <memcmp>
    2afc:	10000626 	beq	r2,zero,2b18 <alt_find_dev+0x5c>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    2b00:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2b04:	8c3ff91e 	bne	r17,r16,2aec <__alt_mem_Flash_flash_data+0xf4002aec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    2b08:	0005883a 	mov	r2,zero
    2b0c:	00000306 	br	2b1c <alt_find_dev+0x60>
    2b10:	0005883a 	mov	r2,zero
    2b14:	00000106 	br	2b1c <alt_find_dev+0x60>
    2b18:	8005883a 	mov	r2,r16
}
    2b1c:	dfc00417 	ldw	ra,16(sp)
    2b20:	dcc00317 	ldw	r19,12(sp)
    2b24:	dc800217 	ldw	r18,8(sp)
    2b28:	dc400117 	ldw	r17,4(sp)
    2b2c:	dc000017 	ldw	r16,0(sp)
    2b30:	dec00504 	addi	sp,sp,20
    2b34:	f800283a 	ret

00002b38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2b38:	deffff04 	addi	sp,sp,-4
    2b3c:	dfc00015 	stw	ra,0(sp)
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    2b40:	0009883a 	mov	r4,zero
    2b44:	01440004 	movi	r5,4096
    2b48:	00031440 	call	3144 <alt_icache_flush>
#endif
}
    2b4c:	dfc00017 	ldw	ra,0(sp)
    2b50:	dec00104 	addi	sp,sp,4
    2b54:	f800283a 	ret

00002b58 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2b58:	defffe04 	addi	sp,sp,-8
    2b5c:	dfc00115 	stw	ra,4(sp)
    2b60:	dc000015 	stw	r16,0(sp)
    2b64:	2021883a 	mov	r16,r4
  int old;

  old = open (name, flags, mode);
    2b68:	2809883a 	mov	r4,r5
    2b6c:	300b883a 	mov	r5,r6
    2b70:	380d883a 	mov	r6,r7
    2b74:	0002d180 	call	2d18 <open>

  if (old >= 0)
    2b78:	10000e16 	blt	r2,zero,2bb4 <alt_open_fd+0x5c>
  {
    fd->dev      = alt_fd_list[old].dev;
    2b7c:	01000034 	movhi	r4,0
    2b80:	211be804 	addi	r4,r4,28576
    2b84:	10c00324 	muli	r3,r2,12
    2b88:	20cb883a 	add	r5,r4,r3
    2b8c:	29400017 	ldw	r5,0(r5)
    2b90:	81400015 	stw	r5,0(r16)
    fd->priv     = alt_fd_list[old].priv;
    2b94:	20cb883a 	add	r5,r4,r3
    2b98:	29400117 	ldw	r5,4(r5)
    2b9c:	81400115 	stw	r5,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2ba0:	20c7883a 	add	r3,r4,r3
    2ba4:	18c00217 	ldw	r3,8(r3)
    2ba8:	80c00215 	stw	r3,8(r16)

    alt_release_fd (old);
    2bac:	1009883a 	mov	r4,r2
    2bb0:	0002ed00 	call	2ed0 <alt_release_fd>
  }
} 
    2bb4:	dfc00117 	ldw	ra,4(sp)
    2bb8:	dc000017 	ldw	r16,0(sp)
    2bbc:	dec00204 	addi	sp,sp,8
    2bc0:	f800283a 	ret

00002bc4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2bc4:	defffa04 	addi	sp,sp,-24
    2bc8:	dfc00515 	stw	ra,20(sp)
    2bcc:	dd000415 	stw	r20,16(sp)
    2bd0:	dcc00315 	stw	r19,12(sp)
    2bd4:	dc800215 	stw	r18,8(sp)
    2bd8:	dc400115 	stw	r17,4(sp)
    2bdc:	dc000015 	stw	r16,0(sp)
    2be0:	2005883a 	mov	r2,r4
    2be4:	2829883a 	mov	r20,r5
    2be8:	3027883a 	mov	r19,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2bec:	04000034 	movhi	r16,0
    2bf0:	841beb04 	addi	r16,r16,28588
    2bf4:	04800044 	movi	r18,1
    2bf8:	04407fc4 	movi	r17,511
    2bfc:	8009883a 	mov	r4,r16
    2c00:	100b883a 	mov	r5,r2
    2c04:	900d883a 	mov	r6,r18
    2c08:	880f883a 	mov	r7,r17
    2c0c:	0002b580 	call	2b58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2c10:	843ffd04 	addi	r16,r16,-12
    2c14:	8009883a 	mov	r4,r16
    2c18:	a00b883a 	mov	r5,r20
    2c1c:	000d883a 	mov	r6,zero
    2c20:	880f883a 	mov	r7,r17
    2c24:	0002b580 	call	2b58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2c28:	81000604 	addi	r4,r16,24
    2c2c:	980b883a 	mov	r5,r19
    2c30:	900d883a 	mov	r6,r18
    2c34:	880f883a 	mov	r7,r17
    2c38:	0002b580 	call	2b58 <alt_open_fd>
}  
    2c3c:	dfc00517 	ldw	ra,20(sp)
    2c40:	dd000417 	ldw	r20,16(sp)
    2c44:	dcc00317 	ldw	r19,12(sp)
    2c48:	dc800217 	ldw	r18,8(sp)
    2c4c:	dc400117 	ldw	r17,4(sp)
    2c50:	dc000017 	ldw	r16,0(sp)
    2c54:	dec00604 	addi	sp,sp,24
    2c58:	f800283a 	ret

00002c5c <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    2c5c:	008007c4 	movi	r2,31
    2c60:	11002b36 	bltu	r2,r4,2d10 <alt_irq_register+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2c64:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2c68:	00bfff84 	movi	r2,-2
    2c6c:	3884703a 	and	r2,r7,r2
    2c70:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    2c74:	00c00074 	movhi	r3,1
    2c78:	18e5ee04 	addi	r3,r3,-26696
    2c7c:	200490fa 	slli	r2,r4,3
    2c80:	1891883a 	add	r8,r3,r2
    2c84:	41800015 	stw	r6,0(r8)
    alt_irq[id].context = context;
    2c88:	41400115 	stw	r5,4(r8)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    2c8c:	30000f26 	beq	r6,zero,2ccc <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2c90:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2c94:	00bfff84 	movi	r2,-2
    2c98:	3084703a 	and	r2,r6,r2
    2c9c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    2ca0:	00800074 	movhi	r2,1
    2ca4:	10a5dd04 	addi	r2,r2,-26764
    2ca8:	10c00017 	ldw	r3,0(r2)
    2cac:	01400044 	movi	r5,1
    2cb0:	2908983a 	sll	r4,r5,r4
    2cb4:	20c8b03a 	or	r4,r4,r3
    2cb8:	11000015 	stw	r4,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2cbc:	10800017 	ldw	r2,0(r2)
    2cc0:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2cc4:	3001703a 	wrctl	status,r6
    2cc8:	00000e06 	br	2d04 <alt_irq_register+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2ccc:	000d303a 	rdctl	r6,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2cd0:	00bfff84 	movi	r2,-2
    2cd4:	3084703a 	and	r2,r6,r2
    2cd8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    2cdc:	00800074 	movhi	r2,1
    2ce0:	10a5dd04 	addi	r2,r2,-26764
    2ce4:	10c00017 	ldw	r3,0(r2)
    2ce8:	017fff84 	movi	r5,-2
    2cec:	2908183a 	rol	r4,r5,r4
    2cf0:	20c8703a 	and	r4,r4,r3
    2cf4:	11000015 	stw	r4,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2cf8:	10800017 	ldw	r2,0(r2)
    2cfc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2d00:	3001703a 	wrctl	status,r6
    2d04:	3801703a 	wrctl	status,r7
    2d08:	0005883a 	mov	r2,zero
    2d0c:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
    2d10:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
    2d14:	f800283a 	ret

00002d18 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    2d18:	defffa04 	addi	sp,sp,-24
    2d1c:	dfc00515 	stw	ra,20(sp)
    2d20:	dd000415 	stw	r20,16(sp)
    2d24:	dcc00315 	stw	r19,12(sp)
    2d28:	dc800215 	stw	r18,8(sp)
    2d2c:	dc400115 	stw	r17,4(sp)
    2d30:	dc000015 	stw	r16,0(sp)
    2d34:	2025883a 	mov	r18,r4
    2d38:	2827883a 	mov	r19,r5
    2d3c:	3029883a 	mov	r20,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    2d40:	01400034 	movhi	r5,0
    2d44:	295e5e04 	addi	r5,r5,31096
    2d48:	0002abc0 	call	2abc <alt_find_dev>
    2d4c:	1021883a 	mov	r16,r2
    2d50:	1000421e 	bne	r2,zero,2e5c <open+0x144>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    2d54:	9009883a 	mov	r4,r18
    2d58:	00030000 	call	3000 <alt_find_file>
    2d5c:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    2d60:	10004e1e 	bne	r2,zero,2e9c <open+0x184>
      }
    }
  }
  else
  {
    status = -ENODEV;
    2d64:	043ffb44 	movi	r16,-19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    2d68:	047fffc4 	movi	r17,-1
    2d6c:	00001406 	br	2dc0 <open+0xa8>
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2d70:	18800017 	ldw	r2,0(r3)
    2d74:	1180031e 	bne	r2,r6,2d84 <open+0x6c>
    2d78:	48800017 	ldw	r2,0(r9)
    2d7c:	1000010e 	bge	r2,zero,2d84 <open+0x6c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2d80:	20c00e1e 	bne	r4,r3,2dbc <open+0xa4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2d84:	42000044 	addi	r8,r8,1
    2d88:	18c00304 	addi	r3,r3,12
    2d8c:	4a400304 	addi	r9,r9,12
    2d90:	3a3ff72e 	bgeu	r7,r8,2d70 <__alt_mem_Flash_flash_data+0xf4002d70>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2d94:	80800317 	ldw	r2,12(r16)
    2d98:	10001726 	beq	r2,zero,2df8 <open+0xe0>
    2d9c:	900b883a 	mov	r5,r18
    2da0:	980d883a 	mov	r6,r19
    2da4:	a00f883a 	mov	r7,r20
    2da8:	103ee83a 	callr	r2
    2dac:	1021883a 	mov	r16,r2
    2db0:	8805883a 	mov	r2,r17
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    2db4:	80003e0e 	bge	r16,zero,2eb0 <open+0x198>
    2db8:	00000106 	br	2dc0 <open+0xa8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    2dbc:	043ffcc4 	movi	r16,-13

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
    2dc0:	8809883a 	mov	r4,r17
    2dc4:	0002ed00 	call	2ed0 <alt_release_fd>
    2dc8:	00800034 	movhi	r2,0
    2dcc:	109e6204 	addi	r2,r2,31112
    2dd0:	10800017 	ldw	r2,0(r2)
    2dd4:	10000226 	beq	r2,zero,2de0 <open+0xc8>
    2dd8:	103ee83a 	callr	r2
    2ddc:	00000206 	br	2de8 <open+0xd0>
    2de0:	00800074 	movhi	r2,1
    2de4:	10a5e004 	addi	r2,r2,-26752
    ALT_ERRNO = -status;
    2de8:	0421c83a 	sub	r16,zero,r16
    2dec:	14000015 	stw	r16,0(r2)
    return -1;
    2df0:	00bfffc4 	movi	r2,-1
    2df4:	00002e06 	br	2eb0 <open+0x198>
    2df8:	8805883a 	mov	r2,r17
    2dfc:	00002c06 	br	2eb0 <open+0x198>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    2e00:	8821883a 	mov	r16,r17
    2e04:	003fee06 	br	2dc0 <__alt_mem_Flash_flash_data+0xf4002dc0>
    2e08:	8821883a 	mov	r16,r17
    2e0c:	003fec06 	br	2dc0 <__alt_mem_Flash_flash_data+0xf4002dc0>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    2e10:	88800324 	muli	r2,r17,12
    2e14:	02400034 	movhi	r9,0
    2e18:	4a5be804 	addi	r9,r9,28576
    2e1c:	1249883a 	add	r4,r2,r9

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2e20:	10800204 	addi	r2,r2,8
    2e24:	4885883a 	add	r2,r9,r2
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2e28:	00d00034 	movhi	r3,16384
    2e2c:	18ffffc4 	addi	r3,r3,-1
    2e30:	98c6703a 	and	r3,r19,r3

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2e34:	18d00034 	orhi	r3,r3,16384
    2e38:	10c00015 	stw	r3,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2e3c:	00800034 	movhi	r2,0
    2e40:	109e5d04 	addi	r2,r2,31092
    2e44:	11c00017 	ldw	r7,0(r2)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2e48:	21800017 	ldw	r6,0(r4)
    2e4c:	4807883a 	mov	r3,r9
    2e50:	4a400204 	addi	r9,r9,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2e54:	0011883a 	mov	r8,zero
    2e58:	003fc506 	br	2d70 <__alt_mem_Flash_flash_data+0xf4002d70>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    2e5c:	1009883a 	mov	r4,r2
    2e60:	00030cc0 	call	30cc <alt_get_fd>
    2e64:	1023883a 	mov	r17,r2
    2e68:	103fe90e 	bge	r2,zero,2e10 <__alt_mem_Flash_flash_data+0xf4002e10>
    2e6c:	003fe406 	br	2e00 <__alt_mem_Flash_flash_data+0xf4002e00>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
    2e70:	88800324 	muli	r2,r17,12
    2e74:	00c00034 	movhi	r3,0
    2e78:	18dbe804 	addi	r3,r3,28576
    2e7c:	10c9883a 	add	r4,r2,r3
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    2e80:	10800204 	addi	r2,r2,8
    2e84:	1885883a 	add	r2,r3,r2
    2e88:	00d00034 	movhi	r3,16384
    2e8c:	18ffffc4 	addi	r3,r3,-1
    2e90:	98c6703a 	and	r3,r19,r3
    2e94:	10c00015 	stw	r3,0(r2)
    2e98:	003fbe06 	br	2d94 <__alt_mem_Flash_flash_data+0xf4002d94>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
    2e9c:	1009883a 	mov	r4,r2
    2ea0:	00030cc0 	call	30cc <alt_get_fd>
    2ea4:	1023883a 	mov	r17,r2
    2ea8:	103ff10e 	bge	r2,zero,2e70 <__alt_mem_Flash_flash_data+0xf4002e70>
    2eac:	003fd606 	br	2e08 <__alt_mem_Flash_flash_data+0xf4002e08>
  }
  
  /* return the reference upon success */

  return index;
}
    2eb0:	dfc00517 	ldw	ra,20(sp)
    2eb4:	dd000417 	ldw	r20,16(sp)
    2eb8:	dcc00317 	ldw	r19,12(sp)
    2ebc:	dc800217 	ldw	r18,8(sp)
    2ec0:	dc400117 	ldw	r17,4(sp)
    2ec4:	dc000017 	ldw	r16,0(sp)
    2ec8:	dec00604 	addi	sp,sp,24
    2ecc:	f800283a 	ret

00002ed0 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
    2ed0:	00800084 	movi	r2,2
    2ed4:	1100060e 	bge	r2,r4,2ef0 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
    2ed8:	00800034 	movhi	r2,0
    2edc:	109be804 	addi	r2,r2,28576
    2ee0:	21000324 	muli	r4,r4,12
    2ee4:	1107883a 	add	r3,r2,r4
    2ee8:	18000215 	stw	zero,8(r3)
    alt_fd_list[fd].dev      = 0;
    2eec:	18000015 	stw	zero,0(r3)
    2ef0:	f800283a 	ret

00002ef4 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2ef4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2ef8:	00bfff84 	movi	r2,-2
    2efc:	1884703a 	and	r2,r3,r2
    2f00:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2f04:	20800017 	ldw	r2,0(r4)
    2f08:	21400117 	ldw	r5,4(r4)
    2f0c:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
    2f10:	20800117 	ldw	r2,4(r4)
    2f14:	21400017 	ldw	r5,0(r4)
    2f18:	11400015 	stw	r5,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    2f1c:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
    2f20:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2f24:	1801703a 	wrctl	status,r3
    2f28:	f800283a 	ret

00002f2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    2f2c:	defffb04 	addi	sp,sp,-20
    2f30:	dfc00415 	stw	ra,16(sp)
    2f34:	dcc00315 	stw	r19,12(sp)
    2f38:	dc800215 	stw	r18,8(sp)
    2f3c:	dc400115 	stw	r17,4(sp)
    2f40:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2f44:	d0e00704 	addi	r3,gp,-32740
    2f48:	1c000017 	ldw	r16,0(r3)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    2f4c:	d0a78117 	ldw	r2,-25084(gp)
    2f50:	10800044 	addi	r2,r2,1
    2f54:	d0a78115 	stw	r2,-25084(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2f58:	80c02026 	beq	r16,r3,2fdc <alt_tick+0xb0>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
    2f5c:	04c00044 	movi	r19,1

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2f60:	1825883a 	mov	r18,r3
  {
    next = (alt_alarm*) alarm->llist.next;
    2f64:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2f68:	80800403 	ldbu	r2,16(r16)
    2f6c:	10001526 	beq	r2,zero,2fc4 <alt_tick+0x98>
    2f70:	d0a78117 	ldw	r2,-25084(gp)
    2f74:	1000171e 	bne	r2,zero,2fd4 <alt_tick+0xa8>
    {
      alarm->rollover = 0;
    2f78:	80000405 	stb	zero,16(r16)
    2f7c:	00001106 	br	2fc4 <alt_tick+0x98>

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
      {
        alt_alarm_stop (alarm);
    2f80:	8009883a 	mov	r4,r16
    2f84:	0002ef40 	call	2ef4 <alt_alarm_stop>
    2f88:	00000606 	br	2fa4 <alt_tick+0x78>
      }
      else
      {
        alarm->time += next_callback;
    2f8c:	80c00217 	ldw	r3,8(r16)
    2f90:	10c5883a 	add	r2,r2,r3
    2f94:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    2f98:	d0e78117 	ldw	r3,-25084(gp)
    2f9c:	10c0012e 	bgeu	r2,r3,2fa4 <alt_tick+0x78>
        {
          alarm->rollover = 1;
    2fa0:	84c00405 	stb	r19,16(r16)
    2fa4:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2fa8:	8cbfee1e 	bne	r17,r18,2f64 <__alt_mem_Flash_flash_data+0xf4002f64>
    2fac:	00000b06 	br	2fdc <alt_tick+0xb0>
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
    2fb0:	80800317 	ldw	r2,12(r16)
    2fb4:	81000517 	ldw	r4,20(r16)
    2fb8:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2fbc:	103ff31e 	bne	r2,zero,2f8c <__alt_mem_Flash_flash_data+0xf4002f8c>
    2fc0:	003fef06 	br	2f80 <__alt_mem_Flash_flash_data+0xf4002f80>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2fc4:	d0e78117 	ldw	r3,-25084(gp)
    2fc8:	80800217 	ldw	r2,8(r16)
    2fcc:	18bff82e 	bgeu	r3,r2,2fb0 <__alt_mem_Flash_flash_data+0xf4002fb0>
    2fd0:	003ff406 	br	2fa4 <__alt_mem_Flash_flash_data+0xf4002fa4>
    2fd4:	d0a78117 	ldw	r2,-25084(gp)
    2fd8:	003ff206 	br	2fa4 <__alt_mem_Flash_flash_data+0xf4002fa4>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    2fdc:	dfc00417 	ldw	ra,16(sp)
    2fe0:	dcc00317 	ldw	r19,12(sp)
    2fe4:	dc800217 	ldw	r18,8(sp)
    2fe8:	dc400117 	ldw	r17,4(sp)
    2fec:	dc000017 	ldw	r16,0(sp)
    2ff0:	dec00504 	addi	sp,sp,20
    2ff4:	f800283a 	ret

00002ff8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    2ff8:	000170fa 	wrctl	ienable,zero
    2ffc:	f800283a 	ret

00003000 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    3000:	defffa04 	addi	sp,sp,-24
    3004:	dfc00515 	stw	ra,20(sp)
    3008:	dd000415 	stw	r20,16(sp)
    300c:	dcc00315 	stw	r19,12(sp)
    3010:	dc800215 	stw	r18,8(sp)
    3014:	dc400115 	stw	r17,4(sp)
    3018:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    301c:	00800034 	movhi	r2,0
    3020:	109e6004 	addi	r2,r2,31104
    3024:	14000017 	ldw	r16,0(r2)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3028:	80801d26 	beq	r16,r2,30a0 <alt_find_file+0xa0>
    302c:	2027883a 	mov	r19,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
    3030:	04800bc4 	movi	r18,47
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3034:	00800034 	movhi	r2,0
    3038:	109e6004 	addi	r2,r2,31104
    303c:	1029883a 	mov	r20,r2
  {
    len = strlen(next->name);
    3040:	84400217 	ldw	r17,8(r16)
    3044:	8809883a 	mov	r4,r17
    3048:	00035980 	call	3598 <strlen>
    304c:	1007883a 	mov	r3,r2
    
    if (next->name[len-1] == '/')
    3050:	8889883a 	add	r4,r17,r2
    3054:	213fffc7 	ldb	r4,-1(r4)
    3058:	2480011e 	bne	r4,r18,3060 <alt_find_file+0x60>
    {
      len -= 1;
    305c:	10ffffc4 	addi	r3,r2,-1
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3060:	180d883a 	mov	r6,r3
    3064:	98c7883a 	add	r3,r19,r3
    3068:	18800003 	ldbu	r2,0(r3)
    306c:	10c03fcc 	andi	r3,r2,255
    3070:	18c0201c 	xori	r3,r3,128
    3074:	18ffe004 	addi	r3,r3,-128
    3078:	1c800126 	beq	r3,r18,3080 <alt_find_file+0x80>
    307c:	1800041e 	bne	r3,zero,3090 <alt_find_file+0x90>
        !memcmp (next->name, name, len))
    3080:	8809883a 	mov	r4,r17
    3084:	980b883a 	mov	r5,r19
    3088:	00031d40 	call	31d4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    308c:	10000626 	beq	r2,zero,30a8 <alt_find_file+0xa8>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
    3090:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3094:	853fea1e 	bne	r16,r20,3040 <__alt_mem_Flash_flash_data+0xf4003040>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    3098:	0005883a 	mov	r2,zero
    309c:	00000306 	br	30ac <alt_find_file+0xac>
    30a0:	0005883a 	mov	r2,zero
    30a4:	00000106 	br	30ac <alt_find_file+0xac>
    30a8:	8005883a 	mov	r2,r16
}
    30ac:	dfc00517 	ldw	ra,20(sp)
    30b0:	dd000417 	ldw	r20,16(sp)
    30b4:	dcc00317 	ldw	r19,12(sp)
    30b8:	dc800217 	ldw	r18,8(sp)
    30bc:	dc400117 	ldw	r17,4(sp)
    30c0:	dc000017 	ldw	r16,0(sp)
    30c4:	dec00604 	addi	sp,sp,24
    30c8:	f800283a 	ret

000030cc <alt_get_fd>:
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    30cc:	00800034 	movhi	r2,0
    30d0:	109be804 	addi	r2,r2,28576
    30d4:	10800017 	ldw	r2,0(r2)
    30d8:	10000726 	beq	r2,zero,30f8 <alt_get_fd+0x2c>
    30dc:	00c00034 	movhi	r3,0
    30e0:	18dbeb04 	addi	r3,r3,28588
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    30e4:	00800044 	movi	r2,1
    30e8:	01800804 	movi	r6,32
  {
    if (!alt_fd_list[i].dev)
    30ec:	19400017 	ldw	r5,0(r3)
    30f0:	28000f1e 	bne	r5,zero,3130 <alt_get_fd+0x64>
    30f4:	00000106 	br	30fc <alt_get_fd+0x30>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    30f8:	0005883a 	mov	r2,zero
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
    30fc:	10c00324 	muli	r3,r2,12
    3100:	01400034 	movhi	r5,0
    3104:	295be804 	addi	r5,r5,28576
    3108:	28c7883a 	add	r3,r5,r3
    310c:	19000015 	stw	r4,0(r3)
      if (i > alt_max_fd)
    3110:	00c00034 	movhi	r3,0
    3114:	18de5d04 	addi	r3,r3,31092
    3118:	18c00017 	ldw	r3,0(r3)
    311c:	1880080e 	bge	r3,r2,3140 <alt_get_fd+0x74>
      {
        alt_max_fd = i;
    3120:	00c00034 	movhi	r3,0
    3124:	18de5d04 	addi	r3,r3,31092
    3128:	18800015 	stw	r2,0(r3)
      }
      rc = i;
      goto alt_get_fd_exit;
    312c:	f800283a 	ret
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3130:	10800044 	addi	r2,r2,1
    3134:	18c00304 	addi	r3,r3,12
    3138:	11bfec1e 	bne	r2,r6,30ec <__alt_mem_Flash_flash_data+0xf40030ec>
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
    313c:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
    3140:	f800283a 	ret

00003144 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    3144:	00840004 	movi	r2,4096
    3148:	1140012e 	bgeu	r2,r5,3150 <alt_icache_flush+0xc>
    314c:	100b883a 	mov	r5,r2
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
    3150:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3154:	21400b2e 	bgeu	r4,r5,3184 <alt_icache_flush+0x40>
    3158:	2005883a 	mov	r2,r4
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    315c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3160:	10800804 	addi	r2,r2,32
    3164:	117ffd36 	bltu	r2,r5,315c <__alt_mem_Flash_flash_data+0xf400315c>
    3168:	0104303a 	nor	r2,zero,r4
    316c:	2885883a 	add	r2,r5,r2
    3170:	1004d17a 	srli	r2,r2,5
    3174:	10800044 	addi	r2,r2,1
    3178:	1004917a 	slli	r2,r2,5
    317c:	2085883a 	add	r2,r4,r2
    3180:	00000106 	br	3188 <alt_icache_flush+0x44>
    3184:	2005883a 	mov	r2,r4
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    3188:	210007cc 	andi	r4,r4,31
    318c:	20000126 	beq	r4,zero,3194 <alt_icache_flush+0x50>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    3190:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    3194:	0000203a 	flushp
    3198:	f800283a 	ret

0000319c <exit>:
    319c:	defffe04 	addi	sp,sp,-8
    31a0:	000b883a 	mov	r5,zero
    31a4:	dc000015 	stw	r16,0(sp)
    31a8:	dfc00115 	stw	ra,4(sp)
    31ac:	2021883a 	mov	r16,r4
    31b0:	00038d80 	call	38d8 <__call_exitprocs>
    31b4:	00800034 	movhi	r2,0
    31b8:	109e6604 	addi	r2,r2,31128
    31bc:	11000017 	ldw	r4,0(r2)
    31c0:	20800f17 	ldw	r2,60(r4)
    31c4:	10000126 	beq	r2,zero,31cc <exit+0x30>
    31c8:	103ee83a 	callr	r2
    31cc:	8009883a 	mov	r4,r16
    31d0:	00055680 	call	5568 <_exit>

000031d4 <memcmp>:
    31d4:	01c000c4 	movi	r7,3
    31d8:	3980192e 	bgeu	r7,r6,3240 <memcmp+0x6c>
    31dc:	2144b03a 	or	r2,r4,r5
    31e0:	11c4703a 	and	r2,r2,r7
    31e4:	10000f26 	beq	r2,zero,3224 <memcmp+0x50>
    31e8:	20800003 	ldbu	r2,0(r4)
    31ec:	28c00003 	ldbu	r3,0(r5)
    31f0:	10c0151e 	bne	r2,r3,3248 <memcmp+0x74>
    31f4:	31bfff84 	addi	r6,r6,-2
    31f8:	01ffffc4 	movi	r7,-1
    31fc:	00000406 	br	3210 <memcmp+0x3c>
    3200:	20800003 	ldbu	r2,0(r4)
    3204:	28c00003 	ldbu	r3,0(r5)
    3208:	31bfffc4 	addi	r6,r6,-1
    320c:	10c00e1e 	bne	r2,r3,3248 <memcmp+0x74>
    3210:	21000044 	addi	r4,r4,1
    3214:	29400044 	addi	r5,r5,1
    3218:	31fff91e 	bne	r6,r7,3200 <__alt_mem_Flash_flash_data+0xf4003200>
    321c:	0005883a 	mov	r2,zero
    3220:	f800283a 	ret
    3224:	20c00017 	ldw	r3,0(r4)
    3228:	28800017 	ldw	r2,0(r5)
    322c:	1880041e 	bne	r3,r2,3240 <memcmp+0x6c>
    3230:	31bfff04 	addi	r6,r6,-4
    3234:	21000104 	addi	r4,r4,4
    3238:	29400104 	addi	r5,r5,4
    323c:	39bff936 	bltu	r7,r6,3224 <__alt_mem_Flash_flash_data+0xf4003224>
    3240:	303fe91e 	bne	r6,zero,31e8 <__alt_mem_Flash_flash_data+0xf40031e8>
    3244:	003ff506 	br	321c <__alt_mem_Flash_flash_data+0xf400321c>
    3248:	10c5c83a 	sub	r2,r2,r3
    324c:	f800283a 	ret

00003250 <memcpy>:
    3250:	deffff04 	addi	sp,sp,-4
    3254:	dc000015 	stw	r16,0(sp)
    3258:	00c003c4 	movi	r3,15
    325c:	2005883a 	mov	r2,r4
    3260:	1980432e 	bgeu	r3,r6,3370 <memcpy+0x120>
    3264:	2146b03a 	or	r3,r4,r5
    3268:	18c000cc 	andi	r3,r3,3
    326c:	1800421e 	bne	r3,zero,3378 <memcpy+0x128>
    3270:	343ffc04 	addi	r16,r6,-16
    3274:	8020d13a 	srli	r16,r16,4
    3278:	28c00104 	addi	r3,r5,4
    327c:	23400104 	addi	r13,r4,4
    3280:	801e913a 	slli	r15,r16,4
    3284:	2b000204 	addi	r12,r5,8
    3288:	22c00204 	addi	r11,r4,8
    328c:	7bc00504 	addi	r15,r15,20
    3290:	2a800304 	addi	r10,r5,12
    3294:	22400304 	addi	r9,r4,12
    3298:	2bdf883a 	add	r15,r5,r15
    329c:	2811883a 	mov	r8,r5
    32a0:	200f883a 	mov	r7,r4
    32a4:	41000017 	ldw	r4,0(r8)
    32a8:	39c00404 	addi	r7,r7,16
    32ac:	18c00404 	addi	r3,r3,16
    32b0:	393ffc15 	stw	r4,-16(r7)
    32b4:	1bbffc17 	ldw	r14,-16(r3)
    32b8:	6b400404 	addi	r13,r13,16
    32bc:	5ac00404 	addi	r11,r11,16
    32c0:	6bbffc15 	stw	r14,-16(r13)
    32c4:	63800017 	ldw	r14,0(r12)
    32c8:	4a400404 	addi	r9,r9,16
    32cc:	42000404 	addi	r8,r8,16
    32d0:	5bbffc15 	stw	r14,-16(r11)
    32d4:	53800017 	ldw	r14,0(r10)
    32d8:	63000404 	addi	r12,r12,16
    32dc:	52800404 	addi	r10,r10,16
    32e0:	4bbffc15 	stw	r14,-16(r9)
    32e4:	1bffef1e 	bne	r3,r15,32a4 <__alt_mem_Flash_flash_data+0xf40032a4>
    32e8:	81c00044 	addi	r7,r16,1
    32ec:	380e913a 	slli	r7,r7,4
    32f0:	310003cc 	andi	r4,r6,15
    32f4:	02c000c4 	movi	r11,3
    32f8:	11c7883a 	add	r3,r2,r7
    32fc:	29cb883a 	add	r5,r5,r7
    3300:	59001f2e 	bgeu	r11,r4,3380 <memcpy+0x130>
    3304:	1813883a 	mov	r9,r3
    3308:	2811883a 	mov	r8,r5
    330c:	200f883a 	mov	r7,r4
    3310:	42800017 	ldw	r10,0(r8)
    3314:	4a400104 	addi	r9,r9,4
    3318:	39ffff04 	addi	r7,r7,-4
    331c:	4abfff15 	stw	r10,-4(r9)
    3320:	42000104 	addi	r8,r8,4
    3324:	59fffa36 	bltu	r11,r7,3310 <__alt_mem_Flash_flash_data+0xf4003310>
    3328:	213fff04 	addi	r4,r4,-4
    332c:	2008d0ba 	srli	r4,r4,2
    3330:	318000cc 	andi	r6,r6,3
    3334:	21000044 	addi	r4,r4,1
    3338:	2109883a 	add	r4,r4,r4
    333c:	2109883a 	add	r4,r4,r4
    3340:	1907883a 	add	r3,r3,r4
    3344:	290b883a 	add	r5,r5,r4
    3348:	30000626 	beq	r6,zero,3364 <memcpy+0x114>
    334c:	198d883a 	add	r6,r3,r6
    3350:	29c00003 	ldbu	r7,0(r5)
    3354:	18c00044 	addi	r3,r3,1
    3358:	29400044 	addi	r5,r5,1
    335c:	19ffffc5 	stb	r7,-1(r3)
    3360:	19bffb1e 	bne	r3,r6,3350 <__alt_mem_Flash_flash_data+0xf4003350>
    3364:	dc000017 	ldw	r16,0(sp)
    3368:	dec00104 	addi	sp,sp,4
    336c:	f800283a 	ret
    3370:	2007883a 	mov	r3,r4
    3374:	003ff406 	br	3348 <__alt_mem_Flash_flash_data+0xf4003348>
    3378:	2007883a 	mov	r3,r4
    337c:	003ff306 	br	334c <__alt_mem_Flash_flash_data+0xf400334c>
    3380:	200d883a 	mov	r6,r4
    3384:	003ff006 	br	3348 <__alt_mem_Flash_flash_data+0xf4003348>

00003388 <_putc_r>:
    3388:	defffc04 	addi	sp,sp,-16
    338c:	dc000215 	stw	r16,8(sp)
    3390:	dfc00315 	stw	ra,12(sp)
    3394:	2021883a 	mov	r16,r4
    3398:	20000226 	beq	r4,zero,33a4 <_putc_r+0x1c>
    339c:	20800e17 	ldw	r2,56(r4)
    33a0:	10001b26 	beq	r2,zero,3410 <_putc_r+0x88>
    33a4:	30800217 	ldw	r2,8(r6)
    33a8:	10bfffc4 	addi	r2,r2,-1
    33ac:	30800215 	stw	r2,8(r6)
    33b0:	10000a16 	blt	r2,zero,33dc <_putc_r+0x54>
    33b4:	30800017 	ldw	r2,0(r6)
    33b8:	11400005 	stb	r5,0(r2)
    33bc:	30800017 	ldw	r2,0(r6)
    33c0:	10c00044 	addi	r3,r2,1
    33c4:	30c00015 	stw	r3,0(r6)
    33c8:	10800003 	ldbu	r2,0(r2)
    33cc:	dfc00317 	ldw	ra,12(sp)
    33d0:	dc000217 	ldw	r16,8(sp)
    33d4:	dec00404 	addi	sp,sp,16
    33d8:	f800283a 	ret
    33dc:	30c00617 	ldw	r3,24(r6)
    33e0:	10c00616 	blt	r2,r3,33fc <_putc_r+0x74>
    33e4:	30800017 	ldw	r2,0(r6)
    33e8:	00c00284 	movi	r3,10
    33ec:	11400005 	stb	r5,0(r2)
    33f0:	30800017 	ldw	r2,0(r6)
    33f4:	11400003 	ldbu	r5,0(r2)
    33f8:	28fff11e 	bne	r5,r3,33c0 <__alt_mem_Flash_flash_data+0xf40033c0>
    33fc:	8009883a 	mov	r4,r16
    3400:	dfc00317 	ldw	ra,12(sp)
    3404:	dc000217 	ldw	r16,8(sp)
    3408:	dec00404 	addi	sp,sp,16
    340c:	00036301 	jmpi	3630 <__swbuf_r>
    3410:	d9400015 	stw	r5,0(sp)
    3414:	d9800115 	stw	r6,4(sp)
    3418:	00040500 	call	4050 <__sinit>
    341c:	d9800117 	ldw	r6,4(sp)
    3420:	d9400017 	ldw	r5,0(sp)
    3424:	003fdf06 	br	33a4 <__alt_mem_Flash_flash_data+0xf40033a4>

00003428 <putc>:
    3428:	00800034 	movhi	r2,0
    342c:	defffc04 	addi	sp,sp,-16
    3430:	109e6704 	addi	r2,r2,31132
    3434:	dc400115 	stw	r17,4(sp)
    3438:	14400017 	ldw	r17,0(r2)
    343c:	dc800215 	stw	r18,8(sp)
    3440:	dc000015 	stw	r16,0(sp)
    3444:	dfc00315 	stw	ra,12(sp)
    3448:	2025883a 	mov	r18,r4
    344c:	2821883a 	mov	r16,r5
    3450:	88000226 	beq	r17,zero,345c <putc+0x34>
    3454:	88800e17 	ldw	r2,56(r17)
    3458:	10001a26 	beq	r2,zero,34c4 <putc+0x9c>
    345c:	80800217 	ldw	r2,8(r16)
    3460:	10bfffc4 	addi	r2,r2,-1
    3464:	80800215 	stw	r2,8(r16)
    3468:	10000c16 	blt	r2,zero,349c <putc+0x74>
    346c:	80800017 	ldw	r2,0(r16)
    3470:	14800005 	stb	r18,0(r2)
    3474:	80800017 	ldw	r2,0(r16)
    3478:	10c00044 	addi	r3,r2,1
    347c:	80c00015 	stw	r3,0(r16)
    3480:	10800003 	ldbu	r2,0(r2)
    3484:	dfc00317 	ldw	ra,12(sp)
    3488:	dc800217 	ldw	r18,8(sp)
    348c:	dc400117 	ldw	r17,4(sp)
    3490:	dc000017 	ldw	r16,0(sp)
    3494:	dec00404 	addi	sp,sp,16
    3498:	f800283a 	ret
    349c:	80c00617 	ldw	r3,24(r16)
    34a0:	10c00b16 	blt	r2,r3,34d0 <putc+0xa8>
    34a4:	80800017 	ldw	r2,0(r16)
    34a8:	00c00284 	movi	r3,10
    34ac:	14800005 	stb	r18,0(r2)
    34b0:	80800017 	ldw	r2,0(r16)
    34b4:	11400003 	ldbu	r5,0(r2)
    34b8:	28ffef1e 	bne	r5,r3,3478 <__alt_mem_Flash_flash_data+0xf4003478>
    34bc:	8809883a 	mov	r4,r17
    34c0:	00000506 	br	34d8 <putc+0xb0>
    34c4:	8809883a 	mov	r4,r17
    34c8:	00040500 	call	4050 <__sinit>
    34cc:	003fe306 	br	345c <__alt_mem_Flash_flash_data+0xf400345c>
    34d0:	8809883a 	mov	r4,r17
    34d4:	900b883a 	mov	r5,r18
    34d8:	800d883a 	mov	r6,r16
    34dc:	dfc00317 	ldw	ra,12(sp)
    34e0:	dc800217 	ldw	r18,8(sp)
    34e4:	dc400117 	ldw	r17,4(sp)
    34e8:	dc000017 	ldw	r16,0(sp)
    34ec:	dec00404 	addi	sp,sp,16
    34f0:	00036301 	jmpi	3630 <__swbuf_r>

000034f4 <strcmp>:
    34f4:	2144b03a 	or	r2,r4,r5
    34f8:	108000cc 	andi	r2,r2,3
    34fc:	1000171e 	bne	r2,zero,355c <strcmp+0x68>
    3500:	20800017 	ldw	r2,0(r4)
    3504:	28c00017 	ldw	r3,0(r5)
    3508:	10c0141e 	bne	r2,r3,355c <strcmp+0x68>
    350c:	027fbff4 	movhi	r9,65279
    3510:	4a7fbfc4 	addi	r9,r9,-257
    3514:	0086303a 	nor	r3,zero,r2
    3518:	02202074 	movhi	r8,32897
    351c:	1245883a 	add	r2,r2,r9
    3520:	42202004 	addi	r8,r8,-32640
    3524:	10c4703a 	and	r2,r2,r3
    3528:	1204703a 	and	r2,r2,r8
    352c:	10000226 	beq	r2,zero,3538 <strcmp+0x44>
    3530:	00001706 	br	3590 <strcmp+0x9c>
    3534:	1000161e 	bne	r2,zero,3590 <strcmp+0x9c>
    3538:	21000104 	addi	r4,r4,4
    353c:	20c00017 	ldw	r3,0(r4)
    3540:	29400104 	addi	r5,r5,4
    3544:	29800017 	ldw	r6,0(r5)
    3548:	1a4f883a 	add	r7,r3,r9
    354c:	00c4303a 	nor	r2,zero,r3
    3550:	3884703a 	and	r2,r7,r2
    3554:	1204703a 	and	r2,r2,r8
    3558:	19bff626 	beq	r3,r6,3534 <__alt_mem_Flash_flash_data+0xf4003534>
    355c:	20800007 	ldb	r2,0(r4)
    3560:	1000051e 	bne	r2,zero,3578 <strcmp+0x84>
    3564:	00000606 	br	3580 <strcmp+0x8c>
    3568:	21000044 	addi	r4,r4,1
    356c:	20800007 	ldb	r2,0(r4)
    3570:	29400044 	addi	r5,r5,1
    3574:	10000226 	beq	r2,zero,3580 <strcmp+0x8c>
    3578:	28c00007 	ldb	r3,0(r5)
    357c:	10fffa26 	beq	r2,r3,3568 <__alt_mem_Flash_flash_data+0xf4003568>
    3580:	20800003 	ldbu	r2,0(r4)
    3584:	28c00003 	ldbu	r3,0(r5)
    3588:	10c5c83a 	sub	r2,r2,r3
    358c:	f800283a 	ret
    3590:	0005883a 	mov	r2,zero
    3594:	f800283a 	ret

00003598 <strlen>:
    3598:	208000cc 	andi	r2,r4,3
    359c:	10002026 	beq	r2,zero,3620 <strlen+0x88>
    35a0:	20800007 	ldb	r2,0(r4)
    35a4:	10002026 	beq	r2,zero,3628 <strlen+0x90>
    35a8:	2005883a 	mov	r2,r4
    35ac:	00000206 	br	35b8 <strlen+0x20>
    35b0:	10c00007 	ldb	r3,0(r2)
    35b4:	18001826 	beq	r3,zero,3618 <strlen+0x80>
    35b8:	10800044 	addi	r2,r2,1
    35bc:	10c000cc 	andi	r3,r2,3
    35c0:	183ffb1e 	bne	r3,zero,35b0 <__alt_mem_Flash_flash_data+0xf40035b0>
    35c4:	10c00017 	ldw	r3,0(r2)
    35c8:	01ffbff4 	movhi	r7,65279
    35cc:	39ffbfc4 	addi	r7,r7,-257
    35d0:	00ca303a 	nor	r5,zero,r3
    35d4:	01a02074 	movhi	r6,32897
    35d8:	19c7883a 	add	r3,r3,r7
    35dc:	31a02004 	addi	r6,r6,-32640
    35e0:	1946703a 	and	r3,r3,r5
    35e4:	1986703a 	and	r3,r3,r6
    35e8:	1800091e 	bne	r3,zero,3610 <strlen+0x78>
    35ec:	10800104 	addi	r2,r2,4
    35f0:	10c00017 	ldw	r3,0(r2)
    35f4:	19cb883a 	add	r5,r3,r7
    35f8:	00c6303a 	nor	r3,zero,r3
    35fc:	28c6703a 	and	r3,r5,r3
    3600:	1986703a 	and	r3,r3,r6
    3604:	183ff926 	beq	r3,zero,35ec <__alt_mem_Flash_flash_data+0xf40035ec>
    3608:	00000106 	br	3610 <strlen+0x78>
    360c:	10800044 	addi	r2,r2,1
    3610:	10c00007 	ldb	r3,0(r2)
    3614:	183ffd1e 	bne	r3,zero,360c <__alt_mem_Flash_flash_data+0xf400360c>
    3618:	1105c83a 	sub	r2,r2,r4
    361c:	f800283a 	ret
    3620:	2005883a 	mov	r2,r4
    3624:	003fe706 	br	35c4 <__alt_mem_Flash_flash_data+0xf40035c4>
    3628:	0005883a 	mov	r2,zero
    362c:	f800283a 	ret

00003630 <__swbuf_r>:
    3630:	defffc04 	addi	sp,sp,-16
    3634:	dc800215 	stw	r18,8(sp)
    3638:	dc400115 	stw	r17,4(sp)
    363c:	dc000015 	stw	r16,0(sp)
    3640:	dfc00315 	stw	ra,12(sp)
    3644:	2025883a 	mov	r18,r4
    3648:	2823883a 	mov	r17,r5
    364c:	3021883a 	mov	r16,r6
    3650:	20000226 	beq	r4,zero,365c <__swbuf_r+0x2c>
    3654:	20800e17 	ldw	r2,56(r4)
    3658:	10004126 	beq	r2,zero,3760 <__swbuf_r+0x130>
    365c:	80c00617 	ldw	r3,24(r16)
    3660:	8180030b 	ldhu	r6,12(r16)
    3664:	80c00215 	stw	r3,8(r16)
    3668:	30c0020c 	andi	r3,r6,8
    366c:	18003526 	beq	r3,zero,3744 <__swbuf_r+0x114>
    3670:	80c00417 	ldw	r3,16(r16)
    3674:	18003326 	beq	r3,zero,3744 <__swbuf_r+0x114>
    3678:	3088000c 	andi	r2,r6,8192
    367c:	8c403fcc 	andi	r17,r17,255
    3680:	10001726 	beq	r2,zero,36e0 <__swbuf_r+0xb0>
    3684:	80800017 	ldw	r2,0(r16)
    3688:	81000517 	ldw	r4,20(r16)
    368c:	10c7c83a 	sub	r3,r2,r3
    3690:	19001d0e 	bge	r3,r4,3708 <__swbuf_r+0xd8>
    3694:	18c00044 	addi	r3,r3,1
    3698:	81400217 	ldw	r5,8(r16)
    369c:	11000044 	addi	r4,r2,1
    36a0:	81000015 	stw	r4,0(r16)
    36a4:	297fffc4 	addi	r5,r5,-1
    36a8:	81400215 	stw	r5,8(r16)
    36ac:	14400005 	stb	r17,0(r2)
    36b0:	80800517 	ldw	r2,20(r16)
    36b4:	10c01d26 	beq	r2,r3,372c <__swbuf_r+0xfc>
    36b8:	8080030b 	ldhu	r2,12(r16)
    36bc:	1080004c 	andi	r2,r2,1
    36c0:	1000181e 	bne	r2,zero,3724 <__swbuf_r+0xf4>
    36c4:	8805883a 	mov	r2,r17
    36c8:	dfc00317 	ldw	ra,12(sp)
    36cc:	dc800217 	ldw	r18,8(sp)
    36d0:	dc400117 	ldw	r17,4(sp)
    36d4:	dc000017 	ldw	r16,0(sp)
    36d8:	dec00404 	addi	sp,sp,16
    36dc:	f800283a 	ret
    36e0:	81001917 	ldw	r4,100(r16)
    36e4:	00b7ffc4 	movi	r2,-8193
    36e8:	31880014 	ori	r6,r6,8192
    36ec:	2084703a 	and	r2,r4,r2
    36f0:	80801915 	stw	r2,100(r16)
    36f4:	80800017 	ldw	r2,0(r16)
    36f8:	81000517 	ldw	r4,20(r16)
    36fc:	8180030d 	sth	r6,12(r16)
    3700:	10c7c83a 	sub	r3,r2,r3
    3704:	193fe316 	blt	r3,r4,3694 <__alt_mem_Flash_flash_data+0xf4003694>
    3708:	9009883a 	mov	r4,r18
    370c:	800b883a 	mov	r5,r16
    3710:	0003c740 	call	3c74 <_fflush_r>
    3714:	1000091e 	bne	r2,zero,373c <__swbuf_r+0x10c>
    3718:	80800017 	ldw	r2,0(r16)
    371c:	00c00044 	movi	r3,1
    3720:	003fdd06 	br	3698 <__alt_mem_Flash_flash_data+0xf4003698>
    3724:	00800284 	movi	r2,10
    3728:	88bfe61e 	bne	r17,r2,36c4 <__alt_mem_Flash_flash_data+0xf40036c4>
    372c:	9009883a 	mov	r4,r18
    3730:	800b883a 	mov	r5,r16
    3734:	0003c740 	call	3c74 <_fflush_r>
    3738:	103fe226 	beq	r2,zero,36c4 <__alt_mem_Flash_flash_data+0xf40036c4>
    373c:	00bfffc4 	movi	r2,-1
    3740:	003fe106 	br	36c8 <__alt_mem_Flash_flash_data+0xf40036c8>
    3744:	9009883a 	mov	r4,r18
    3748:	800b883a 	mov	r5,r16
    374c:	00037840 	call	3784 <__swsetup_r>
    3750:	103ffa1e 	bne	r2,zero,373c <__alt_mem_Flash_flash_data+0xf400373c>
    3754:	8180030b 	ldhu	r6,12(r16)
    3758:	80c00417 	ldw	r3,16(r16)
    375c:	003fc606 	br	3678 <__alt_mem_Flash_flash_data+0xf4003678>
    3760:	00040500 	call	4050 <__sinit>
    3764:	003fbd06 	br	365c <__alt_mem_Flash_flash_data+0xf400365c>

00003768 <__swbuf>:
    3768:	00c00034 	movhi	r3,0
    376c:	18de6704 	addi	r3,r3,31132
    3770:	2005883a 	mov	r2,r4
    3774:	19000017 	ldw	r4,0(r3)
    3778:	280d883a 	mov	r6,r5
    377c:	100b883a 	mov	r5,r2
    3780:	00036301 	jmpi	3630 <__swbuf_r>

00003784 <__swsetup_r>:
    3784:	00800034 	movhi	r2,0
    3788:	defffd04 	addi	sp,sp,-12
    378c:	109e6704 	addi	r2,r2,31132
    3790:	dc400115 	stw	r17,4(sp)
    3794:	2023883a 	mov	r17,r4
    3798:	11000017 	ldw	r4,0(r2)
    379c:	dc000015 	stw	r16,0(sp)
    37a0:	dfc00215 	stw	ra,8(sp)
    37a4:	2821883a 	mov	r16,r5
    37a8:	20000226 	beq	r4,zero,37b4 <__swsetup_r+0x30>
    37ac:	20c00e17 	ldw	r3,56(r4)
    37b0:	18003126 	beq	r3,zero,3878 <__swsetup_r+0xf4>
    37b4:	8080030b 	ldhu	r2,12(r16)
    37b8:	10c0020c 	andi	r3,r2,8
    37bc:	100d883a 	mov	r6,r2
    37c0:	18000f26 	beq	r3,zero,3800 <__swsetup_r+0x7c>
    37c4:	80c00417 	ldw	r3,16(r16)
    37c8:	18001526 	beq	r3,zero,3820 <__swsetup_r+0x9c>
    37cc:	1100004c 	andi	r4,r2,1
    37d0:	20001c1e 	bne	r4,zero,3844 <__swsetup_r+0xc0>
    37d4:	1080008c 	andi	r2,r2,2
    37d8:	1000291e 	bne	r2,zero,3880 <__swsetup_r+0xfc>
    37dc:	80800517 	ldw	r2,20(r16)
    37e0:	80800215 	stw	r2,8(r16)
    37e4:	18001c26 	beq	r3,zero,3858 <__swsetup_r+0xd4>
    37e8:	0005883a 	mov	r2,zero
    37ec:	dfc00217 	ldw	ra,8(sp)
    37f0:	dc400117 	ldw	r17,4(sp)
    37f4:	dc000017 	ldw	r16,0(sp)
    37f8:	dec00304 	addi	sp,sp,12
    37fc:	f800283a 	ret
    3800:	3080040c 	andi	r2,r6,16
    3804:	10002e26 	beq	r2,zero,38c0 <__swsetup_r+0x13c>
    3808:	3080010c 	andi	r2,r6,4
    380c:	10001e1e 	bne	r2,zero,3888 <__swsetup_r+0x104>
    3810:	80c00417 	ldw	r3,16(r16)
    3814:	30800214 	ori	r2,r6,8
    3818:	8080030d 	sth	r2,12(r16)
    381c:	183feb1e 	bne	r3,zero,37cc <__alt_mem_Flash_flash_data+0xf40037cc>
    3820:	1140a00c 	andi	r5,r2,640
    3824:	01008004 	movi	r4,512
    3828:	293fe826 	beq	r5,r4,37cc <__alt_mem_Flash_flash_data+0xf40037cc>
    382c:	8809883a 	mov	r4,r17
    3830:	800b883a 	mov	r5,r16
    3834:	000463c0 	call	463c <__smakebuf_r>
    3838:	8080030b 	ldhu	r2,12(r16)
    383c:	80c00417 	ldw	r3,16(r16)
    3840:	003fe206 	br	37cc <__alt_mem_Flash_flash_data+0xf40037cc>
    3844:	80800517 	ldw	r2,20(r16)
    3848:	80000215 	stw	zero,8(r16)
    384c:	0085c83a 	sub	r2,zero,r2
    3850:	80800615 	stw	r2,24(r16)
    3854:	183fe41e 	bne	r3,zero,37e8 <__alt_mem_Flash_flash_data+0xf40037e8>
    3858:	80c0030b 	ldhu	r3,12(r16)
    385c:	0005883a 	mov	r2,zero
    3860:	1900200c 	andi	r4,r3,128
    3864:	203fe126 	beq	r4,zero,37ec <__alt_mem_Flash_flash_data+0xf40037ec>
    3868:	18c01014 	ori	r3,r3,64
    386c:	80c0030d 	sth	r3,12(r16)
    3870:	00bfffc4 	movi	r2,-1
    3874:	003fdd06 	br	37ec <__alt_mem_Flash_flash_data+0xf40037ec>
    3878:	00040500 	call	4050 <__sinit>
    387c:	003fcd06 	br	37b4 <__alt_mem_Flash_flash_data+0xf40037b4>
    3880:	0005883a 	mov	r2,zero
    3884:	003fd606 	br	37e0 <__alt_mem_Flash_flash_data+0xf40037e0>
    3888:	81400c17 	ldw	r5,48(r16)
    388c:	28000626 	beq	r5,zero,38a8 <__swsetup_r+0x124>
    3890:	80801004 	addi	r2,r16,64
    3894:	28800326 	beq	r5,r2,38a4 <__swsetup_r+0x120>
    3898:	8809883a 	mov	r4,r17
    389c:	00041c40 	call	41c4 <_free_r>
    38a0:	8180030b 	ldhu	r6,12(r16)
    38a4:	80000c15 	stw	zero,48(r16)
    38a8:	80c00417 	ldw	r3,16(r16)
    38ac:	00bff6c4 	movi	r2,-37
    38b0:	118c703a 	and	r6,r2,r6
    38b4:	80000115 	stw	zero,4(r16)
    38b8:	80c00015 	stw	r3,0(r16)
    38bc:	003fd506 	br	3814 <__alt_mem_Flash_flash_data+0xf4003814>
    38c0:	00800244 	movi	r2,9
    38c4:	88800015 	stw	r2,0(r17)
    38c8:	30801014 	ori	r2,r6,64
    38cc:	8080030d 	sth	r2,12(r16)
    38d0:	00bfffc4 	movi	r2,-1
    38d4:	003fc506 	br	37ec <__alt_mem_Flash_flash_data+0xf40037ec>

000038d8 <__call_exitprocs>:
    38d8:	00800034 	movhi	r2,0
    38dc:	109e6604 	addi	r2,r2,31128
    38e0:	10800017 	ldw	r2,0(r2)
    38e4:	defff404 	addi	sp,sp,-48
    38e8:	dd800815 	stw	r22,32(sp)
    38ec:	d8800015 	stw	r2,0(sp)
    38f0:	10805204 	addi	r2,r2,328
    38f4:	dd000615 	stw	r20,24(sp)
    38f8:	dc800415 	stw	r18,16(sp)
    38fc:	dfc00b15 	stw	ra,44(sp)
    3900:	df000a15 	stw	fp,40(sp)
    3904:	ddc00915 	stw	r23,36(sp)
    3908:	dd400715 	stw	r21,28(sp)
    390c:	dcc00515 	stw	r19,20(sp)
    3910:	dc400315 	stw	r17,12(sp)
    3914:	dc000215 	stw	r16,8(sp)
    3918:	2025883a 	mov	r18,r4
    391c:	2829883a 	mov	r20,r5
    3920:	d8800115 	stw	r2,4(sp)
    3924:	05bfffc4 	movi	r22,-1
    3928:	d8800017 	ldw	r2,0(sp)
    392c:	14c05217 	ldw	r19,328(r2)
    3930:	98001d26 	beq	r19,zero,39a8 <__call_exitprocs+0xd0>
    3934:	dd400117 	ldw	r21,4(sp)
    3938:	98800117 	ldw	r2,4(r19)
    393c:	173fffc4 	addi	fp,r2,-1
    3940:	e0000d16 	blt	fp,zero,3978 <__call_exitprocs+0xa0>
    3944:	14000044 	addi	r16,r2,1
    3948:	8421883a 	add	r16,r16,r16
    394c:	8421883a 	add	r16,r16,r16
    3950:	84402004 	addi	r17,r16,128
    3954:	9c63883a 	add	r17,r19,r17
    3958:	9c21883a 	add	r16,r19,r16
    395c:	a0001e26 	beq	r20,zero,39d8 <__call_exitprocs+0x100>
    3960:	80804017 	ldw	r2,256(r16)
    3964:	15001c26 	beq	r2,r20,39d8 <__call_exitprocs+0x100>
    3968:	e73fffc4 	addi	fp,fp,-1
    396c:	843fff04 	addi	r16,r16,-4
    3970:	8c7fff04 	addi	r17,r17,-4
    3974:	e5bff91e 	bne	fp,r22,395c <__alt_mem_Flash_flash_data+0xf400395c>
    3978:	00800034 	movhi	r2,0
    397c:	10800004 	addi	r2,r2,0
    3980:	10000926 	beq	r2,zero,39a8 <__call_exitprocs+0xd0>
    3984:	98800117 	ldw	r2,4(r19)
    3988:	1000311e 	bne	r2,zero,3a50 <__call_exitprocs+0x178>
    398c:	98800017 	ldw	r2,0(r19)
    3990:	10003426 	beq	r2,zero,3a64 <__call_exitprocs+0x18c>
    3994:	9809883a 	mov	r4,r19
    3998:	a8800015 	stw	r2,0(r21)
    399c:	00000000 	call	0 <__alt_mem_SDRAM>
    39a0:	acc00017 	ldw	r19,0(r21)
    39a4:	983fe41e 	bne	r19,zero,3938 <__alt_mem_Flash_flash_data+0xf4003938>
    39a8:	dfc00b17 	ldw	ra,44(sp)
    39ac:	df000a17 	ldw	fp,40(sp)
    39b0:	ddc00917 	ldw	r23,36(sp)
    39b4:	dd800817 	ldw	r22,32(sp)
    39b8:	dd400717 	ldw	r21,28(sp)
    39bc:	dd000617 	ldw	r20,24(sp)
    39c0:	dcc00517 	ldw	r19,20(sp)
    39c4:	dc800417 	ldw	r18,16(sp)
    39c8:	dc400317 	ldw	r17,12(sp)
    39cc:	dc000217 	ldw	r16,8(sp)
    39d0:	dec00c04 	addi	sp,sp,48
    39d4:	f800283a 	ret
    39d8:	98800117 	ldw	r2,4(r19)
    39dc:	80c00017 	ldw	r3,0(r16)
    39e0:	10bfffc4 	addi	r2,r2,-1
    39e4:	17001526 	beq	r2,fp,3a3c <__call_exitprocs+0x164>
    39e8:	80000015 	stw	zero,0(r16)
    39ec:	183fde26 	beq	r3,zero,3968 <__alt_mem_Flash_flash_data+0xf4003968>
    39f0:	00800044 	movi	r2,1
    39f4:	1708983a 	sll	r4,r2,fp
    39f8:	98806217 	ldw	r2,392(r19)
    39fc:	9dc00117 	ldw	r23,4(r19)
    3a00:	2084703a 	and	r2,r4,r2
    3a04:	1000061e 	bne	r2,zero,3a20 <__call_exitprocs+0x148>
    3a08:	183ee83a 	callr	r3
    3a0c:	98800117 	ldw	r2,4(r19)
    3a10:	15ffc51e 	bne	r2,r23,3928 <__alt_mem_Flash_flash_data+0xf4003928>
    3a14:	a8800017 	ldw	r2,0(r21)
    3a18:	14ffd326 	beq	r2,r19,3968 <__alt_mem_Flash_flash_data+0xf4003968>
    3a1c:	003fc206 	br	3928 <__alt_mem_Flash_flash_data+0xf4003928>
    3a20:	98806317 	ldw	r2,396(r19)
    3a24:	2084703a 	and	r2,r4,r2
    3a28:	1000061e 	bne	r2,zero,3a44 <__call_exitprocs+0x16c>
    3a2c:	89400017 	ldw	r5,0(r17)
    3a30:	9009883a 	mov	r4,r18
    3a34:	183ee83a 	callr	r3
    3a38:	003ff406 	br	3a0c <__alt_mem_Flash_flash_data+0xf4003a0c>
    3a3c:	9f000115 	stw	fp,4(r19)
    3a40:	003fea06 	br	39ec <__alt_mem_Flash_flash_data+0xf40039ec>
    3a44:	89000017 	ldw	r4,0(r17)
    3a48:	183ee83a 	callr	r3
    3a4c:	003fef06 	br	3a0c <__alt_mem_Flash_flash_data+0xf4003a0c>
    3a50:	98800017 	ldw	r2,0(r19)
    3a54:	982b883a 	mov	r21,r19
    3a58:	1027883a 	mov	r19,r2
    3a5c:	983fb61e 	bne	r19,zero,3938 <__alt_mem_Flash_flash_data+0xf4003938>
    3a60:	003fd106 	br	39a8 <__alt_mem_Flash_flash_data+0xf40039a8>
    3a64:	0005883a 	mov	r2,zero
    3a68:	003ffa06 	br	3a54 <__alt_mem_Flash_flash_data+0xf4003a54>

00003a6c <__sflush_r>:
    3a6c:	2880030b 	ldhu	r2,12(r5)
    3a70:	defffb04 	addi	sp,sp,-20
    3a74:	dcc00315 	stw	r19,12(sp)
    3a78:	dc400115 	stw	r17,4(sp)
    3a7c:	dfc00415 	stw	ra,16(sp)
    3a80:	dc800215 	stw	r18,8(sp)
    3a84:	dc000015 	stw	r16,0(sp)
    3a88:	10c0020c 	andi	r3,r2,8
    3a8c:	2823883a 	mov	r17,r5
    3a90:	2027883a 	mov	r19,r4
    3a94:	1800311e 	bne	r3,zero,3b5c <__sflush_r+0xf0>
    3a98:	28c00117 	ldw	r3,4(r5)
    3a9c:	10820014 	ori	r2,r2,2048
    3aa0:	2880030d 	sth	r2,12(r5)
    3aa4:	00c04b0e 	bge	zero,r3,3bd4 <__sflush_r+0x168>
    3aa8:	8a000a17 	ldw	r8,40(r17)
    3aac:	40002326 	beq	r8,zero,3b3c <__sflush_r+0xd0>
    3ab0:	9c000017 	ldw	r16,0(r19)
    3ab4:	10c4000c 	andi	r3,r2,4096
    3ab8:	98000015 	stw	zero,0(r19)
    3abc:	18004826 	beq	r3,zero,3be0 <__sflush_r+0x174>
    3ac0:	89801417 	ldw	r6,80(r17)
    3ac4:	10c0010c 	andi	r3,r2,4
    3ac8:	18000626 	beq	r3,zero,3ae4 <__sflush_r+0x78>
    3acc:	88c00117 	ldw	r3,4(r17)
    3ad0:	88800c17 	ldw	r2,48(r17)
    3ad4:	30cdc83a 	sub	r6,r6,r3
    3ad8:	10000226 	beq	r2,zero,3ae4 <__sflush_r+0x78>
    3adc:	88800f17 	ldw	r2,60(r17)
    3ae0:	308dc83a 	sub	r6,r6,r2
    3ae4:	89400717 	ldw	r5,28(r17)
    3ae8:	9809883a 	mov	r4,r19
    3aec:	000f883a 	mov	r7,zero
    3af0:	403ee83a 	callr	r8
    3af4:	00ffffc4 	movi	r3,-1
    3af8:	10c04426 	beq	r2,r3,3c0c <__sflush_r+0x1a0>
    3afc:	88c0030b 	ldhu	r3,12(r17)
    3b00:	89000417 	ldw	r4,16(r17)
    3b04:	88000115 	stw	zero,4(r17)
    3b08:	197dffcc 	andi	r5,r3,63487
    3b0c:	8940030d 	sth	r5,12(r17)
    3b10:	89000015 	stw	r4,0(r17)
    3b14:	18c4000c 	andi	r3,r3,4096
    3b18:	18002c1e 	bne	r3,zero,3bcc <__sflush_r+0x160>
    3b1c:	89400c17 	ldw	r5,48(r17)
    3b20:	9c000015 	stw	r16,0(r19)
    3b24:	28000526 	beq	r5,zero,3b3c <__sflush_r+0xd0>
    3b28:	88801004 	addi	r2,r17,64
    3b2c:	28800226 	beq	r5,r2,3b38 <__sflush_r+0xcc>
    3b30:	9809883a 	mov	r4,r19
    3b34:	00041c40 	call	41c4 <_free_r>
    3b38:	88000c15 	stw	zero,48(r17)
    3b3c:	0005883a 	mov	r2,zero
    3b40:	dfc00417 	ldw	ra,16(sp)
    3b44:	dcc00317 	ldw	r19,12(sp)
    3b48:	dc800217 	ldw	r18,8(sp)
    3b4c:	dc400117 	ldw	r17,4(sp)
    3b50:	dc000017 	ldw	r16,0(sp)
    3b54:	dec00504 	addi	sp,sp,20
    3b58:	f800283a 	ret
    3b5c:	2c800417 	ldw	r18,16(r5)
    3b60:	903ff626 	beq	r18,zero,3b3c <__alt_mem_Flash_flash_data+0xf4003b3c>
    3b64:	2c000017 	ldw	r16,0(r5)
    3b68:	108000cc 	andi	r2,r2,3
    3b6c:	2c800015 	stw	r18,0(r5)
    3b70:	84a1c83a 	sub	r16,r16,r18
    3b74:	1000131e 	bne	r2,zero,3bc4 <__sflush_r+0x158>
    3b78:	28800517 	ldw	r2,20(r5)
    3b7c:	88800215 	stw	r2,8(r17)
    3b80:	04000316 	blt	zero,r16,3b90 <__sflush_r+0x124>
    3b84:	003fed06 	br	3b3c <__alt_mem_Flash_flash_data+0xf4003b3c>
    3b88:	90a5883a 	add	r18,r18,r2
    3b8c:	043feb0e 	bge	zero,r16,3b3c <__alt_mem_Flash_flash_data+0xf4003b3c>
    3b90:	88800917 	ldw	r2,36(r17)
    3b94:	89400717 	ldw	r5,28(r17)
    3b98:	800f883a 	mov	r7,r16
    3b9c:	900d883a 	mov	r6,r18
    3ba0:	9809883a 	mov	r4,r19
    3ba4:	103ee83a 	callr	r2
    3ba8:	80a1c83a 	sub	r16,r16,r2
    3bac:	00bff616 	blt	zero,r2,3b88 <__alt_mem_Flash_flash_data+0xf4003b88>
    3bb0:	88c0030b 	ldhu	r3,12(r17)
    3bb4:	00bfffc4 	movi	r2,-1
    3bb8:	18c01014 	ori	r3,r3,64
    3bbc:	88c0030d 	sth	r3,12(r17)
    3bc0:	003fdf06 	br	3b40 <__alt_mem_Flash_flash_data+0xf4003b40>
    3bc4:	0005883a 	mov	r2,zero
    3bc8:	003fec06 	br	3b7c <__alt_mem_Flash_flash_data+0xf4003b7c>
    3bcc:	88801415 	stw	r2,80(r17)
    3bd0:	003fd206 	br	3b1c <__alt_mem_Flash_flash_data+0xf4003b1c>
    3bd4:	28c00f17 	ldw	r3,60(r5)
    3bd8:	00ffb316 	blt	zero,r3,3aa8 <__alt_mem_Flash_flash_data+0xf4003aa8>
    3bdc:	003fd706 	br	3b3c <__alt_mem_Flash_flash_data+0xf4003b3c>
    3be0:	89400717 	ldw	r5,28(r17)
    3be4:	000d883a 	mov	r6,zero
    3be8:	9809883a 	mov	r4,r19
    3bec:	01c00044 	movi	r7,1
    3bf0:	403ee83a 	callr	r8
    3bf4:	100d883a 	mov	r6,r2
    3bf8:	00bfffc4 	movi	r2,-1
    3bfc:	30801426 	beq	r6,r2,3c50 <__sflush_r+0x1e4>
    3c00:	8880030b 	ldhu	r2,12(r17)
    3c04:	8a000a17 	ldw	r8,40(r17)
    3c08:	003fae06 	br	3ac4 <__alt_mem_Flash_flash_data+0xf4003ac4>
    3c0c:	98c00017 	ldw	r3,0(r19)
    3c10:	183fba26 	beq	r3,zero,3afc <__alt_mem_Flash_flash_data+0xf4003afc>
    3c14:	01000744 	movi	r4,29
    3c18:	19000626 	beq	r3,r4,3c34 <__sflush_r+0x1c8>
    3c1c:	01000584 	movi	r4,22
    3c20:	19000426 	beq	r3,r4,3c34 <__sflush_r+0x1c8>
    3c24:	88c0030b 	ldhu	r3,12(r17)
    3c28:	18c01014 	ori	r3,r3,64
    3c2c:	88c0030d 	sth	r3,12(r17)
    3c30:	003fc306 	br	3b40 <__alt_mem_Flash_flash_data+0xf4003b40>
    3c34:	8880030b 	ldhu	r2,12(r17)
    3c38:	88c00417 	ldw	r3,16(r17)
    3c3c:	88000115 	stw	zero,4(r17)
    3c40:	10bdffcc 	andi	r2,r2,63487
    3c44:	8880030d 	sth	r2,12(r17)
    3c48:	88c00015 	stw	r3,0(r17)
    3c4c:	003fb306 	br	3b1c <__alt_mem_Flash_flash_data+0xf4003b1c>
    3c50:	98800017 	ldw	r2,0(r19)
    3c54:	103fea26 	beq	r2,zero,3c00 <__alt_mem_Flash_flash_data+0xf4003c00>
    3c58:	00c00744 	movi	r3,29
    3c5c:	10c00226 	beq	r2,r3,3c68 <__sflush_r+0x1fc>
    3c60:	00c00584 	movi	r3,22
    3c64:	10ffd21e 	bne	r2,r3,3bb0 <__alt_mem_Flash_flash_data+0xf4003bb0>
    3c68:	9c000015 	stw	r16,0(r19)
    3c6c:	0005883a 	mov	r2,zero
    3c70:	003fb306 	br	3b40 <__alt_mem_Flash_flash_data+0xf4003b40>

00003c74 <_fflush_r>:
    3c74:	defffd04 	addi	sp,sp,-12
    3c78:	dc000115 	stw	r16,4(sp)
    3c7c:	dfc00215 	stw	ra,8(sp)
    3c80:	2021883a 	mov	r16,r4
    3c84:	20000226 	beq	r4,zero,3c90 <_fflush_r+0x1c>
    3c88:	20800e17 	ldw	r2,56(r4)
    3c8c:	10000c26 	beq	r2,zero,3cc0 <_fflush_r+0x4c>
    3c90:	2880030f 	ldh	r2,12(r5)
    3c94:	1000051e 	bne	r2,zero,3cac <_fflush_r+0x38>
    3c98:	0005883a 	mov	r2,zero
    3c9c:	dfc00217 	ldw	ra,8(sp)
    3ca0:	dc000117 	ldw	r16,4(sp)
    3ca4:	dec00304 	addi	sp,sp,12
    3ca8:	f800283a 	ret
    3cac:	8009883a 	mov	r4,r16
    3cb0:	dfc00217 	ldw	ra,8(sp)
    3cb4:	dc000117 	ldw	r16,4(sp)
    3cb8:	dec00304 	addi	sp,sp,12
    3cbc:	0003a6c1 	jmpi	3a6c <__sflush_r>
    3cc0:	d9400015 	stw	r5,0(sp)
    3cc4:	00040500 	call	4050 <__sinit>
    3cc8:	d9400017 	ldw	r5,0(sp)
    3ccc:	003ff006 	br	3c90 <__alt_mem_Flash_flash_data+0xf4003c90>

00003cd0 <fflush>:
    3cd0:	20000526 	beq	r4,zero,3ce8 <fflush+0x18>
    3cd4:	00800034 	movhi	r2,0
    3cd8:	109e6704 	addi	r2,r2,31132
    3cdc:	200b883a 	mov	r5,r4
    3ce0:	11000017 	ldw	r4,0(r2)
    3ce4:	0003c741 	jmpi	3c74 <_fflush_r>
    3ce8:	00800034 	movhi	r2,0
    3cec:	109e6604 	addi	r2,r2,31128
    3cf0:	11000017 	ldw	r4,0(r2)
    3cf4:	01400034 	movhi	r5,0
    3cf8:	294f1d04 	addi	r5,r5,15476
    3cfc:	00045781 	jmpi	4578 <_fwalk_reent>

00003d00 <__fp_lock>:
    3d00:	0005883a 	mov	r2,zero
    3d04:	f800283a 	ret

00003d08 <__fp_unlock>:
    3d08:	0005883a 	mov	r2,zero
    3d0c:	f800283a 	ret

00003d10 <_cleanup_r>:
    3d10:	01400034 	movhi	r5,0
    3d14:	2954c004 	addi	r5,r5,21248
    3d18:	00045781 	jmpi	4578 <_fwalk_reent>

00003d1c <__sinit.part.1>:
    3d1c:	defff704 	addi	sp,sp,-36
    3d20:	00c00034 	movhi	r3,0
    3d24:	dfc00815 	stw	ra,32(sp)
    3d28:	ddc00715 	stw	r23,28(sp)
    3d2c:	dd800615 	stw	r22,24(sp)
    3d30:	dd400515 	stw	r21,20(sp)
    3d34:	dd000415 	stw	r20,16(sp)
    3d38:	dcc00315 	stw	r19,12(sp)
    3d3c:	dc800215 	stw	r18,8(sp)
    3d40:	dc400115 	stw	r17,4(sp)
    3d44:	dc000015 	stw	r16,0(sp)
    3d48:	18cf4404 	addi	r3,r3,15632
    3d4c:	24000117 	ldw	r16,4(r4)
    3d50:	20c00f15 	stw	r3,60(r4)
    3d54:	2080bb04 	addi	r2,r4,748
    3d58:	00c000c4 	movi	r3,3
    3d5c:	20c0b915 	stw	r3,740(r4)
    3d60:	2080ba15 	stw	r2,744(r4)
    3d64:	2000b815 	stw	zero,736(r4)
    3d68:	05c00204 	movi	r23,8
    3d6c:	00800104 	movi	r2,4
    3d70:	2025883a 	mov	r18,r4
    3d74:	b80d883a 	mov	r6,r23
    3d78:	81001704 	addi	r4,r16,92
    3d7c:	000b883a 	mov	r5,zero
    3d80:	80000015 	stw	zero,0(r16)
    3d84:	80000115 	stw	zero,4(r16)
    3d88:	80000215 	stw	zero,8(r16)
    3d8c:	8080030d 	sth	r2,12(r16)
    3d90:	80001915 	stw	zero,100(r16)
    3d94:	8000038d 	sth	zero,14(r16)
    3d98:	80000415 	stw	zero,16(r16)
    3d9c:	80000515 	stw	zero,20(r16)
    3da0:	80000615 	stw	zero,24(r16)
    3da4:	0004f9c0 	call	4f9c <memset>
    3da8:	05800034 	movhi	r22,0
    3dac:	94400217 	ldw	r17,8(r18)
    3db0:	05400034 	movhi	r21,0
    3db4:	05000034 	movhi	r20,0
    3db8:	04c00034 	movhi	r19,0
    3dbc:	b5944504 	addi	r22,r22,20756
    3dc0:	ad545c04 	addi	r21,r21,20848
    3dc4:	a5147b04 	addi	r20,r20,20972
    3dc8:	9cd49204 	addi	r19,r19,21064
    3dcc:	85800815 	stw	r22,32(r16)
    3dd0:	85400915 	stw	r21,36(r16)
    3dd4:	85000a15 	stw	r20,40(r16)
    3dd8:	84c00b15 	stw	r19,44(r16)
    3ddc:	84000715 	stw	r16,28(r16)
    3de0:	00800284 	movi	r2,10
    3de4:	8880030d 	sth	r2,12(r17)
    3de8:	00800044 	movi	r2,1
    3dec:	89001704 	addi	r4,r17,92
    3df0:	b80d883a 	mov	r6,r23
    3df4:	000b883a 	mov	r5,zero
    3df8:	88000015 	stw	zero,0(r17)
    3dfc:	88000115 	stw	zero,4(r17)
    3e00:	88000215 	stw	zero,8(r17)
    3e04:	88001915 	stw	zero,100(r17)
    3e08:	8880038d 	sth	r2,14(r17)
    3e0c:	88000415 	stw	zero,16(r17)
    3e10:	88000515 	stw	zero,20(r17)
    3e14:	88000615 	stw	zero,24(r17)
    3e18:	0004f9c0 	call	4f9c <memset>
    3e1c:	94000317 	ldw	r16,12(r18)
    3e20:	00800484 	movi	r2,18
    3e24:	8c400715 	stw	r17,28(r17)
    3e28:	8d800815 	stw	r22,32(r17)
    3e2c:	8d400915 	stw	r21,36(r17)
    3e30:	8d000a15 	stw	r20,40(r17)
    3e34:	8cc00b15 	stw	r19,44(r17)
    3e38:	8080030d 	sth	r2,12(r16)
    3e3c:	00800084 	movi	r2,2
    3e40:	80000015 	stw	zero,0(r16)
    3e44:	80000115 	stw	zero,4(r16)
    3e48:	80000215 	stw	zero,8(r16)
    3e4c:	80001915 	stw	zero,100(r16)
    3e50:	8080038d 	sth	r2,14(r16)
    3e54:	80000415 	stw	zero,16(r16)
    3e58:	80000515 	stw	zero,20(r16)
    3e5c:	80000615 	stw	zero,24(r16)
    3e60:	81001704 	addi	r4,r16,92
    3e64:	000b883a 	mov	r5,zero
    3e68:	b80d883a 	mov	r6,r23
    3e6c:	0004f9c0 	call	4f9c <memset>
    3e70:	00800044 	movi	r2,1
    3e74:	84000715 	stw	r16,28(r16)
    3e78:	85800815 	stw	r22,32(r16)
    3e7c:	85400915 	stw	r21,36(r16)
    3e80:	85000a15 	stw	r20,40(r16)
    3e84:	84c00b15 	stw	r19,44(r16)
    3e88:	90800e15 	stw	r2,56(r18)
    3e8c:	dfc00817 	ldw	ra,32(sp)
    3e90:	ddc00717 	ldw	r23,28(sp)
    3e94:	dd800617 	ldw	r22,24(sp)
    3e98:	dd400517 	ldw	r21,20(sp)
    3e9c:	dd000417 	ldw	r20,16(sp)
    3ea0:	dcc00317 	ldw	r19,12(sp)
    3ea4:	dc800217 	ldw	r18,8(sp)
    3ea8:	dc400117 	ldw	r17,4(sp)
    3eac:	dc000017 	ldw	r16,0(sp)
    3eb0:	dec00904 	addi	sp,sp,36
    3eb4:	f800283a 	ret

00003eb8 <__sfmoreglue>:
    3eb8:	defffc04 	addi	sp,sp,-16
    3ebc:	dc400115 	stw	r17,4(sp)
    3ec0:	2c7fffc4 	addi	r17,r5,-1
    3ec4:	8c401a24 	muli	r17,r17,104
    3ec8:	dc800215 	stw	r18,8(sp)
    3ecc:	2825883a 	mov	r18,r5
    3ed0:	89401d04 	addi	r5,r17,116
    3ed4:	dc000015 	stw	r16,0(sp)
    3ed8:	dfc00315 	stw	ra,12(sp)
    3edc:	00047f40 	call	47f4 <_malloc_r>
    3ee0:	1021883a 	mov	r16,r2
    3ee4:	10000726 	beq	r2,zero,3f04 <__sfmoreglue+0x4c>
    3ee8:	11000304 	addi	r4,r2,12
    3eec:	10000015 	stw	zero,0(r2)
    3ef0:	14800115 	stw	r18,4(r2)
    3ef4:	11000215 	stw	r4,8(r2)
    3ef8:	000b883a 	mov	r5,zero
    3efc:	89801a04 	addi	r6,r17,104
    3f00:	0004f9c0 	call	4f9c <memset>
    3f04:	8005883a 	mov	r2,r16
    3f08:	dfc00317 	ldw	ra,12(sp)
    3f0c:	dc800217 	ldw	r18,8(sp)
    3f10:	dc400117 	ldw	r17,4(sp)
    3f14:	dc000017 	ldw	r16,0(sp)
    3f18:	dec00404 	addi	sp,sp,16
    3f1c:	f800283a 	ret

00003f20 <__sfp>:
    3f20:	00800034 	movhi	r2,0
    3f24:	defffb04 	addi	sp,sp,-20
    3f28:	109e6604 	addi	r2,r2,31128
    3f2c:	dc800215 	stw	r18,8(sp)
    3f30:	14800017 	ldw	r18,0(r2)
    3f34:	dcc00315 	stw	r19,12(sp)
    3f38:	dfc00415 	stw	ra,16(sp)
    3f3c:	90800e17 	ldw	r2,56(r18)
    3f40:	dc400115 	stw	r17,4(sp)
    3f44:	dc000015 	stw	r16,0(sp)
    3f48:	2027883a 	mov	r19,r4
    3f4c:	1000021e 	bne	r2,zero,3f58 <__sfp+0x38>
    3f50:	9009883a 	mov	r4,r18
    3f54:	0003d1c0 	call	3d1c <__sinit.part.1>
    3f58:	9480b804 	addi	r18,r18,736
    3f5c:	047fffc4 	movi	r17,-1
    3f60:	91400117 	ldw	r5,4(r18)
    3f64:	94000217 	ldw	r16,8(r18)
    3f68:	297fffc4 	addi	r5,r5,-1
    3f6c:	28000a16 	blt	r5,zero,3f98 <__sfp+0x78>
    3f70:	8080030f 	ldh	r2,12(r16)
    3f74:	10000c26 	beq	r2,zero,3fa8 <__sfp+0x88>
    3f78:	80c01d04 	addi	r3,r16,116
    3f7c:	00000206 	br	3f88 <__sfp+0x68>
    3f80:	18bfe60f 	ldh	r2,-104(r3)
    3f84:	10000826 	beq	r2,zero,3fa8 <__sfp+0x88>
    3f88:	297fffc4 	addi	r5,r5,-1
    3f8c:	1c3ffd04 	addi	r16,r3,-12
    3f90:	18c01a04 	addi	r3,r3,104
    3f94:	2c7ffa1e 	bne	r5,r17,3f80 <__alt_mem_Flash_flash_data+0xf4003f80>
    3f98:	90800017 	ldw	r2,0(r18)
    3f9c:	10001d26 	beq	r2,zero,4014 <__sfp+0xf4>
    3fa0:	1025883a 	mov	r18,r2
    3fa4:	003fee06 	br	3f60 <__alt_mem_Flash_flash_data+0xf4003f60>
    3fa8:	00bfffc4 	movi	r2,-1
    3fac:	8080038d 	sth	r2,14(r16)
    3fb0:	00800044 	movi	r2,1
    3fb4:	8080030d 	sth	r2,12(r16)
    3fb8:	80001915 	stw	zero,100(r16)
    3fbc:	80000015 	stw	zero,0(r16)
    3fc0:	80000215 	stw	zero,8(r16)
    3fc4:	80000115 	stw	zero,4(r16)
    3fc8:	80000415 	stw	zero,16(r16)
    3fcc:	80000515 	stw	zero,20(r16)
    3fd0:	80000615 	stw	zero,24(r16)
    3fd4:	81001704 	addi	r4,r16,92
    3fd8:	000b883a 	mov	r5,zero
    3fdc:	01800204 	movi	r6,8
    3fe0:	0004f9c0 	call	4f9c <memset>
    3fe4:	8005883a 	mov	r2,r16
    3fe8:	80000c15 	stw	zero,48(r16)
    3fec:	80000d15 	stw	zero,52(r16)
    3ff0:	80001115 	stw	zero,68(r16)
    3ff4:	80001215 	stw	zero,72(r16)
    3ff8:	dfc00417 	ldw	ra,16(sp)
    3ffc:	dcc00317 	ldw	r19,12(sp)
    4000:	dc800217 	ldw	r18,8(sp)
    4004:	dc400117 	ldw	r17,4(sp)
    4008:	dc000017 	ldw	r16,0(sp)
    400c:	dec00504 	addi	sp,sp,20
    4010:	f800283a 	ret
    4014:	9809883a 	mov	r4,r19
    4018:	01400104 	movi	r5,4
    401c:	0003eb80 	call	3eb8 <__sfmoreglue>
    4020:	90800015 	stw	r2,0(r18)
    4024:	103fde1e 	bne	r2,zero,3fa0 <__alt_mem_Flash_flash_data+0xf4003fa0>
    4028:	00800304 	movi	r2,12
    402c:	98800015 	stw	r2,0(r19)
    4030:	0005883a 	mov	r2,zero
    4034:	003ff006 	br	3ff8 <__alt_mem_Flash_flash_data+0xf4003ff8>

00004038 <_cleanup>:
    4038:	00800034 	movhi	r2,0
    403c:	109e6604 	addi	r2,r2,31128
    4040:	11000017 	ldw	r4,0(r2)
    4044:	01400034 	movhi	r5,0
    4048:	2954c004 	addi	r5,r5,21248
    404c:	00045781 	jmpi	4578 <_fwalk_reent>

00004050 <__sinit>:
    4050:	20800e17 	ldw	r2,56(r4)
    4054:	10000126 	beq	r2,zero,405c <__sinit+0xc>
    4058:	f800283a 	ret
    405c:	0003d1c1 	jmpi	3d1c <__sinit.part.1>

00004060 <__sfp_lock_acquire>:
    4060:	f800283a 	ret

00004064 <__sfp_lock_release>:
    4064:	f800283a 	ret

00004068 <__sinit_lock_acquire>:
    4068:	f800283a 	ret

0000406c <__sinit_lock_release>:
    406c:	f800283a 	ret

00004070 <__fp_lock_all>:
    4070:	00800034 	movhi	r2,0
    4074:	109e6704 	addi	r2,r2,31132
    4078:	11000017 	ldw	r4,0(r2)
    407c:	01400034 	movhi	r5,0
    4080:	294f4004 	addi	r5,r5,15616
    4084:	00044b41 	jmpi	44b4 <_fwalk>

00004088 <__fp_unlock_all>:
    4088:	00800034 	movhi	r2,0
    408c:	109e6704 	addi	r2,r2,31132
    4090:	11000017 	ldw	r4,0(r2)
    4094:	01400034 	movhi	r5,0
    4098:	294f4204 	addi	r5,r5,15624
    409c:	00044b41 	jmpi	44b4 <_fwalk>

000040a0 <_malloc_trim_r>:
    40a0:	defffb04 	addi	sp,sp,-20
    40a4:	dcc00315 	stw	r19,12(sp)
    40a8:	04c00034 	movhi	r19,0
    40ac:	dc800215 	stw	r18,8(sp)
    40b0:	dc400115 	stw	r17,4(sp)
    40b4:	dc000015 	stw	r16,0(sp)
    40b8:	dfc00415 	stw	ra,16(sp)
    40bc:	2821883a 	mov	r16,r5
    40c0:	9cdd5b04 	addi	r19,r19,30060
    40c4:	2025883a 	mov	r18,r4
    40c8:	00057280 	call	5728 <__malloc_lock>
    40cc:	98800217 	ldw	r2,8(r19)
    40d0:	14400117 	ldw	r17,4(r2)
    40d4:	00bfff04 	movi	r2,-4
    40d8:	88a2703a 	and	r17,r17,r2
    40dc:	8c21c83a 	sub	r16,r17,r16
    40e0:	8403fbc4 	addi	r16,r16,4079
    40e4:	8020d33a 	srli	r16,r16,12
    40e8:	0083ffc4 	movi	r2,4095
    40ec:	843fffc4 	addi	r16,r16,-1
    40f0:	8020933a 	slli	r16,r16,12
    40f4:	1400060e 	bge	r2,r16,4110 <_malloc_trim_r+0x70>
    40f8:	9009883a 	mov	r4,r18
    40fc:	000b883a 	mov	r5,zero
    4100:	00050c00 	call	50c0 <_sbrk_r>
    4104:	98c00217 	ldw	r3,8(r19)
    4108:	1c47883a 	add	r3,r3,r17
    410c:	10c00a26 	beq	r2,r3,4138 <_malloc_trim_r+0x98>
    4110:	9009883a 	mov	r4,r18
    4114:	000572c0 	call	572c <__malloc_unlock>
    4118:	0005883a 	mov	r2,zero
    411c:	dfc00417 	ldw	ra,16(sp)
    4120:	dcc00317 	ldw	r19,12(sp)
    4124:	dc800217 	ldw	r18,8(sp)
    4128:	dc400117 	ldw	r17,4(sp)
    412c:	dc000017 	ldw	r16,0(sp)
    4130:	dec00504 	addi	sp,sp,20
    4134:	f800283a 	ret
    4138:	9009883a 	mov	r4,r18
    413c:	040bc83a 	sub	r5,zero,r16
    4140:	00050c00 	call	50c0 <_sbrk_r>
    4144:	00ffffc4 	movi	r3,-1
    4148:	10c00d26 	beq	r2,r3,4180 <_malloc_trim_r+0xe0>
    414c:	00c00074 	movhi	r3,1
    4150:	18e5e404 	addi	r3,r3,-26736
    4154:	18800017 	ldw	r2,0(r3)
    4158:	99000217 	ldw	r4,8(r19)
    415c:	8c23c83a 	sub	r17,r17,r16
    4160:	8c400054 	ori	r17,r17,1
    4164:	1421c83a 	sub	r16,r2,r16
    4168:	24400115 	stw	r17,4(r4)
    416c:	9009883a 	mov	r4,r18
    4170:	1c000015 	stw	r16,0(r3)
    4174:	000572c0 	call	572c <__malloc_unlock>
    4178:	00800044 	movi	r2,1
    417c:	003fe706 	br	411c <__alt_mem_Flash_flash_data+0xf400411c>
    4180:	9009883a 	mov	r4,r18
    4184:	000b883a 	mov	r5,zero
    4188:	00050c00 	call	50c0 <_sbrk_r>
    418c:	99000217 	ldw	r4,8(r19)
    4190:	014003c4 	movi	r5,15
    4194:	1107c83a 	sub	r3,r2,r4
    4198:	28ffdd0e 	bge	r5,r3,4110 <__alt_mem_Flash_flash_data+0xf4004110>
    419c:	01400034 	movhi	r5,0
    41a0:	295e6804 	addi	r5,r5,31136
    41a4:	29400017 	ldw	r5,0(r5)
    41a8:	18c00054 	ori	r3,r3,1
    41ac:	20c00115 	stw	r3,4(r4)
    41b0:	00c00074 	movhi	r3,1
    41b4:	1145c83a 	sub	r2,r2,r5
    41b8:	18e5e404 	addi	r3,r3,-26736
    41bc:	18800015 	stw	r2,0(r3)
    41c0:	003fd306 	br	4110 <__alt_mem_Flash_flash_data+0xf4004110>

000041c4 <_free_r>:
    41c4:	28004c26 	beq	r5,zero,42f8 <_free_r+0x134>
    41c8:	defffd04 	addi	sp,sp,-12
    41cc:	dc400115 	stw	r17,4(sp)
    41d0:	dc000015 	stw	r16,0(sp)
    41d4:	2023883a 	mov	r17,r4
    41d8:	2821883a 	mov	r16,r5
    41dc:	dfc00215 	stw	ra,8(sp)
    41e0:	00057280 	call	5728 <__malloc_lock>
    41e4:	813fff17 	ldw	r4,-4(r16)
    41e8:	00bfff84 	movi	r2,-2
    41ec:	02400034 	movhi	r9,0
    41f0:	81bffe04 	addi	r6,r16,-8
    41f4:	2084703a 	and	r2,r4,r2
    41f8:	4a5d5b04 	addi	r9,r9,30060
    41fc:	308b883a 	add	r5,r6,r2
    4200:	2a000117 	ldw	r8,4(r5)
    4204:	49c00217 	ldw	r7,8(r9)
    4208:	00ffff04 	movi	r3,-4
    420c:	40c6703a 	and	r3,r8,r3
    4210:	39405326 	beq	r7,r5,4360 <_free_r+0x19c>
    4214:	28c00115 	stw	r3,4(r5)
    4218:	2100004c 	andi	r4,r4,1
    421c:	2000091e 	bne	r4,zero,4244 <_free_r+0x80>
    4220:	81fffe17 	ldw	r7,-8(r16)
    4224:	4a000204 	addi	r8,r9,8
    4228:	31cdc83a 	sub	r6,r6,r7
    422c:	31000217 	ldw	r4,8(r6)
    4230:	11c5883a 	add	r2,r2,r7
    4234:	22006126 	beq	r4,r8,43bc <_free_r+0x1f8>
    4238:	31c00317 	ldw	r7,12(r6)
    423c:	21c00315 	stw	r7,12(r4)
    4240:	39000215 	stw	r4,8(r7)
    4244:	28c9883a 	add	r4,r5,r3
    4248:	21c00117 	ldw	r7,4(r4)
    424c:	39c0004c 	andi	r7,r7,1
    4250:	38000d1e 	bne	r7,zero,4288 <_free_r+0xc4>
    4254:	29000217 	ldw	r4,8(r5)
    4258:	10c5883a 	add	r2,r2,r3
    425c:	00c00034 	movhi	r3,0
    4260:	18dd5d04 	addi	r3,r3,30068
    4264:	20c07526 	beq	r4,r3,443c <_free_r+0x278>
    4268:	29c00317 	ldw	r7,12(r5)
    426c:	11400054 	ori	r5,r2,1
    4270:	3087883a 	add	r3,r6,r2
    4274:	21c00315 	stw	r7,12(r4)
    4278:	39000215 	stw	r4,8(r7)
    427c:	31400115 	stw	r5,4(r6)
    4280:	18800015 	stw	r2,0(r3)
    4284:	00000406 	br	4298 <_free_r+0xd4>
    4288:	10c00054 	ori	r3,r2,1
    428c:	30c00115 	stw	r3,4(r6)
    4290:	3087883a 	add	r3,r6,r2
    4294:	18800015 	stw	r2,0(r3)
    4298:	00c07fc4 	movi	r3,511
    429c:	18801736 	bltu	r3,r2,42fc <_free_r+0x138>
    42a0:	1004d0fa 	srli	r2,r2,3
    42a4:	01400044 	movi	r5,1
    42a8:	49000117 	ldw	r4,4(r9)
    42ac:	1087883a 	add	r3,r2,r2
    42b0:	18c7883a 	add	r3,r3,r3
    42b4:	1005d0ba 	srai	r2,r2,2
    42b8:	18c7883a 	add	r3,r3,r3
    42bc:	1a47883a 	add	r3,r3,r9
    42c0:	19c00217 	ldw	r7,8(r3)
    42c4:	2884983a 	sll	r2,r5,r2
    42c8:	30c00315 	stw	r3,12(r6)
    42cc:	31c00215 	stw	r7,8(r6)
    42d0:	1104b03a 	or	r2,r2,r4
    42d4:	19800215 	stw	r6,8(r3)
    42d8:	48800115 	stw	r2,4(r9)
    42dc:	39800315 	stw	r6,12(r7)
    42e0:	8809883a 	mov	r4,r17
    42e4:	dfc00217 	ldw	ra,8(sp)
    42e8:	dc400117 	ldw	r17,4(sp)
    42ec:	dc000017 	ldw	r16,0(sp)
    42f0:	dec00304 	addi	sp,sp,12
    42f4:	000572c1 	jmpi	572c <__malloc_unlock>
    42f8:	f800283a 	ret
    42fc:	1006d27a 	srli	r3,r2,9
    4300:	01000104 	movi	r4,4
    4304:	20c04036 	bltu	r4,r3,4408 <_free_r+0x244>
    4308:	1006d1ba 	srli	r3,r2,6
    430c:	19400e04 	addi	r5,r3,56
    4310:	2947883a 	add	r3,r5,r5
    4314:	18c7883a 	add	r3,r3,r3
    4318:	18c7883a 	add	r3,r3,r3
    431c:	1a49883a 	add	r4,r3,r9
    4320:	20c00217 	ldw	r3,8(r4)
    4324:	01c00034 	movhi	r7,0
    4328:	39dd5b04 	addi	r7,r7,30060
    432c:	19003b26 	beq	r3,r4,441c <_free_r+0x258>
    4330:	01ffff04 	movi	r7,-4
    4334:	19400117 	ldw	r5,4(r3)
    4338:	29ca703a 	and	r5,r5,r7
    433c:	1140022e 	bgeu	r2,r5,4348 <_free_r+0x184>
    4340:	18c00217 	ldw	r3,8(r3)
    4344:	20fffb1e 	bne	r4,r3,4334 <__alt_mem_Flash_flash_data+0xf4004334>
    4348:	18800317 	ldw	r2,12(r3)
    434c:	30800315 	stw	r2,12(r6)
    4350:	30c00215 	stw	r3,8(r6)
    4354:	11800215 	stw	r6,8(r2)
    4358:	19800315 	stw	r6,12(r3)
    435c:	003fe006 	br	42e0 <__alt_mem_Flash_flash_data+0xf40042e0>
    4360:	2100004c 	andi	r4,r4,1
    4364:	1885883a 	add	r2,r3,r2
    4368:	2000071e 	bne	r4,zero,4388 <_free_r+0x1c4>
    436c:	817ffe17 	ldw	r5,-8(r16)
    4370:	314dc83a 	sub	r6,r6,r5
    4374:	30c00317 	ldw	r3,12(r6)
    4378:	31000217 	ldw	r4,8(r6)
    437c:	1145883a 	add	r2,r2,r5
    4380:	20c00315 	stw	r3,12(r4)
    4384:	19000215 	stw	r4,8(r3)
    4388:	10c00054 	ori	r3,r2,1
    438c:	30c00115 	stw	r3,4(r6)
    4390:	00c00034 	movhi	r3,0
    4394:	18de6904 	addi	r3,r3,31140
    4398:	18c00017 	ldw	r3,0(r3)
    439c:	49800215 	stw	r6,8(r9)
    43a0:	10ffcf36 	bltu	r2,r3,42e0 <__alt_mem_Flash_flash_data+0xf40042e0>
    43a4:	00800074 	movhi	r2,1
    43a8:	10a5e304 	addi	r2,r2,-26740
    43ac:	11400017 	ldw	r5,0(r2)
    43b0:	8809883a 	mov	r4,r17
    43b4:	00040a00 	call	40a0 <_malloc_trim_r>
    43b8:	003fc906 	br	42e0 <__alt_mem_Flash_flash_data+0xf40042e0>
    43bc:	28c9883a 	add	r4,r5,r3
    43c0:	21000117 	ldw	r4,4(r4)
    43c4:	2100004c 	andi	r4,r4,1
    43c8:	20000a1e 	bne	r4,zero,43f4 <_free_r+0x230>
    43cc:	29000317 	ldw	r4,12(r5)
    43d0:	29400217 	ldw	r5,8(r5)
    43d4:	10c5883a 	add	r2,r2,r3
    43d8:	10c00054 	ori	r3,r2,1
    43dc:	29000315 	stw	r4,12(r5)
    43e0:	21400215 	stw	r5,8(r4)
    43e4:	30c00115 	stw	r3,4(r6)
    43e8:	308d883a 	add	r6,r6,r2
    43ec:	30800015 	stw	r2,0(r6)
    43f0:	003fbb06 	br	42e0 <__alt_mem_Flash_flash_data+0xf40042e0>
    43f4:	10c00054 	ori	r3,r2,1
    43f8:	30c00115 	stw	r3,4(r6)
    43fc:	308d883a 	add	r6,r6,r2
    4400:	30800015 	stw	r2,0(r6)
    4404:	003fb606 	br	42e0 <__alt_mem_Flash_flash_data+0xf40042e0>
    4408:	01000504 	movi	r4,20
    440c:	20c01436 	bltu	r4,r3,4460 <_free_r+0x29c>
    4410:	194016c4 	addi	r5,r3,91
    4414:	2947883a 	add	r3,r5,r5
    4418:	003fbe06 	br	4314 <__alt_mem_Flash_flash_data+0xf4004314>
    441c:	280bd0ba 	srai	r5,r5,2
    4420:	00800044 	movi	r2,1
    4424:	39000117 	ldw	r4,4(r7)
    4428:	114a983a 	sll	r5,r2,r5
    442c:	1805883a 	mov	r2,r3
    4430:	2908b03a 	or	r4,r5,r4
    4434:	39000115 	stw	r4,4(r7)
    4438:	003fc406 	br	434c <__alt_mem_Flash_flash_data+0xf400434c>
    443c:	49800515 	stw	r6,20(r9)
    4440:	49800415 	stw	r6,16(r9)
    4444:	10c00054 	ori	r3,r2,1
    4448:	31000315 	stw	r4,12(r6)
    444c:	31000215 	stw	r4,8(r6)
    4450:	30c00115 	stw	r3,4(r6)
    4454:	308d883a 	add	r6,r6,r2
    4458:	30800015 	stw	r2,0(r6)
    445c:	003fa006 	br	42e0 <__alt_mem_Flash_flash_data+0xf40042e0>
    4460:	01001504 	movi	r4,84
    4464:	20c00436 	bltu	r4,r3,4478 <_free_r+0x2b4>
    4468:	1006d33a 	srli	r3,r2,12
    446c:	19401b84 	addi	r5,r3,110
    4470:	2947883a 	add	r3,r5,r5
    4474:	003fa706 	br	4314 <__alt_mem_Flash_flash_data+0xf4004314>
    4478:	01005504 	movi	r4,340
    447c:	20c00436 	bltu	r4,r3,4490 <_free_r+0x2cc>
    4480:	1006d3fa 	srli	r3,r2,15
    4484:	19401dc4 	addi	r5,r3,119
    4488:	2947883a 	add	r3,r5,r5
    448c:	003fa106 	br	4314 <__alt_mem_Flash_flash_data+0xf4004314>
    4490:	01015504 	movi	r4,1364
    4494:	20c00436 	bltu	r4,r3,44a8 <_free_r+0x2e4>
    4498:	1006d4ba 	srli	r3,r2,18
    449c:	19401f04 	addi	r5,r3,124
    44a0:	2947883a 	add	r3,r5,r5
    44a4:	003f9b06 	br	4314 <__alt_mem_Flash_flash_data+0xf4004314>
    44a8:	00c03f04 	movi	r3,252
    44ac:	01401f84 	movi	r5,126
    44b0:	003f9806 	br	4314 <__alt_mem_Flash_flash_data+0xf4004314>

000044b4 <_fwalk>:
    44b4:	defff704 	addi	sp,sp,-36
    44b8:	dd000415 	stw	r20,16(sp)
    44bc:	dfc00815 	stw	ra,32(sp)
    44c0:	ddc00715 	stw	r23,28(sp)
    44c4:	dd800615 	stw	r22,24(sp)
    44c8:	dd400515 	stw	r21,20(sp)
    44cc:	dcc00315 	stw	r19,12(sp)
    44d0:	dc800215 	stw	r18,8(sp)
    44d4:	dc400115 	stw	r17,4(sp)
    44d8:	dc000015 	stw	r16,0(sp)
    44dc:	2500b804 	addi	r20,r4,736
    44e0:	a0002326 	beq	r20,zero,4570 <_fwalk+0xbc>
    44e4:	282b883a 	mov	r21,r5
    44e8:	002f883a 	mov	r23,zero
    44ec:	05800044 	movi	r22,1
    44f0:	04ffffc4 	movi	r19,-1
    44f4:	a4400117 	ldw	r17,4(r20)
    44f8:	a4800217 	ldw	r18,8(r20)
    44fc:	8c7fffc4 	addi	r17,r17,-1
    4500:	88000d16 	blt	r17,zero,4538 <_fwalk+0x84>
    4504:	94000304 	addi	r16,r18,12
    4508:	94800384 	addi	r18,r18,14
    450c:	80c0000b 	ldhu	r3,0(r16)
    4510:	8c7fffc4 	addi	r17,r17,-1
    4514:	813ffd04 	addi	r4,r16,-12
    4518:	b0c0042e 	bgeu	r22,r3,452c <_fwalk+0x78>
    451c:	90c0000f 	ldh	r3,0(r18)
    4520:	1cc00226 	beq	r3,r19,452c <_fwalk+0x78>
    4524:	a83ee83a 	callr	r21
    4528:	b8aeb03a 	or	r23,r23,r2
    452c:	84001a04 	addi	r16,r16,104
    4530:	94801a04 	addi	r18,r18,104
    4534:	8cfff51e 	bne	r17,r19,450c <__alt_mem_Flash_flash_data+0xf400450c>
    4538:	a5000017 	ldw	r20,0(r20)
    453c:	a03fed1e 	bne	r20,zero,44f4 <__alt_mem_Flash_flash_data+0xf40044f4>
    4540:	b805883a 	mov	r2,r23
    4544:	dfc00817 	ldw	ra,32(sp)
    4548:	ddc00717 	ldw	r23,28(sp)
    454c:	dd800617 	ldw	r22,24(sp)
    4550:	dd400517 	ldw	r21,20(sp)
    4554:	dd000417 	ldw	r20,16(sp)
    4558:	dcc00317 	ldw	r19,12(sp)
    455c:	dc800217 	ldw	r18,8(sp)
    4560:	dc400117 	ldw	r17,4(sp)
    4564:	dc000017 	ldw	r16,0(sp)
    4568:	dec00904 	addi	sp,sp,36
    456c:	f800283a 	ret
    4570:	002f883a 	mov	r23,zero
    4574:	003ff206 	br	4540 <__alt_mem_Flash_flash_data+0xf4004540>

00004578 <_fwalk_reent>:
    4578:	defff704 	addi	sp,sp,-36
    457c:	dd400515 	stw	r21,20(sp)
    4580:	dfc00815 	stw	ra,32(sp)
    4584:	ddc00715 	stw	r23,28(sp)
    4588:	dd800615 	stw	r22,24(sp)
    458c:	dd000415 	stw	r20,16(sp)
    4590:	dcc00315 	stw	r19,12(sp)
    4594:	dc800215 	stw	r18,8(sp)
    4598:	dc400115 	stw	r17,4(sp)
    459c:	dc000015 	stw	r16,0(sp)
    45a0:	2540b804 	addi	r21,r4,736
    45a4:	a8002326 	beq	r21,zero,4634 <_fwalk_reent+0xbc>
    45a8:	2829883a 	mov	r20,r5
    45ac:	202d883a 	mov	r22,r4
    45b0:	002f883a 	mov	r23,zero
    45b4:	04c00044 	movi	r19,1
    45b8:	04bfffc4 	movi	r18,-1
    45bc:	ac400117 	ldw	r17,4(r21)
    45c0:	ac000217 	ldw	r16,8(r21)
    45c4:	8c7fffc4 	addi	r17,r17,-1
    45c8:	88000c16 	blt	r17,zero,45fc <_fwalk_reent+0x84>
    45cc:	84000304 	addi	r16,r16,12
    45d0:	80c0000b 	ldhu	r3,0(r16)
    45d4:	8c7fffc4 	addi	r17,r17,-1
    45d8:	817ffd04 	addi	r5,r16,-12
    45dc:	98c0052e 	bgeu	r19,r3,45f4 <_fwalk_reent+0x7c>
    45e0:	80c0008f 	ldh	r3,2(r16)
    45e4:	b009883a 	mov	r4,r22
    45e8:	1c800226 	beq	r3,r18,45f4 <_fwalk_reent+0x7c>
    45ec:	a03ee83a 	callr	r20
    45f0:	b8aeb03a 	or	r23,r23,r2
    45f4:	84001a04 	addi	r16,r16,104
    45f8:	8cbff51e 	bne	r17,r18,45d0 <__alt_mem_Flash_flash_data+0xf40045d0>
    45fc:	ad400017 	ldw	r21,0(r21)
    4600:	a83fee1e 	bne	r21,zero,45bc <__alt_mem_Flash_flash_data+0xf40045bc>
    4604:	b805883a 	mov	r2,r23
    4608:	dfc00817 	ldw	ra,32(sp)
    460c:	ddc00717 	ldw	r23,28(sp)
    4610:	dd800617 	ldw	r22,24(sp)
    4614:	dd400517 	ldw	r21,20(sp)
    4618:	dd000417 	ldw	r20,16(sp)
    461c:	dcc00317 	ldw	r19,12(sp)
    4620:	dc800217 	ldw	r18,8(sp)
    4624:	dc400117 	ldw	r17,4(sp)
    4628:	dc000017 	ldw	r16,0(sp)
    462c:	dec00904 	addi	sp,sp,36
    4630:	f800283a 	ret
    4634:	002f883a 	mov	r23,zero
    4638:	003ff206 	br	4604 <__alt_mem_Flash_flash_data+0xf4004604>

0000463c <__smakebuf_r>:
    463c:	2880030b 	ldhu	r2,12(r5)
    4640:	10c0008c 	andi	r3,r2,2
    4644:	1800401e 	bne	r3,zero,4748 <__smakebuf_r+0x10c>
    4648:	deffec04 	addi	sp,sp,-80
    464c:	dc000f15 	stw	r16,60(sp)
    4650:	2821883a 	mov	r16,r5
    4654:	2940038f 	ldh	r5,14(r5)
    4658:	dc401015 	stw	r17,64(sp)
    465c:	dfc01315 	stw	ra,76(sp)
    4660:	dcc01215 	stw	r19,72(sp)
    4664:	dc801115 	stw	r18,68(sp)
    4668:	2023883a 	mov	r17,r4
    466c:	28001b16 	blt	r5,zero,46dc <__smakebuf_r+0xa0>
    4670:	d80d883a 	mov	r6,sp
    4674:	00054040 	call	5404 <_fstat_r>
    4678:	10001716 	blt	r2,zero,46d8 <__smakebuf_r+0x9c>
    467c:	d8800117 	ldw	r2,4(sp)
    4680:	00e00014 	movui	r3,32768
    4684:	10bc000c 	andi	r2,r2,61440
    4688:	10c03726 	beq	r2,r3,4768 <__smakebuf_r+0x12c>
    468c:	80c0030b 	ldhu	r3,12(r16)
    4690:	18c20014 	ori	r3,r3,2048
    4694:	80c0030d 	sth	r3,12(r16)
    4698:	00c80004 	movi	r3,8192
    469c:	10c03c1e 	bne	r2,r3,4790 <__smakebuf_r+0x154>
    46a0:	8140038f 	ldh	r5,14(r16)
    46a4:	8809883a 	mov	r4,r17
    46a8:	000545c0 	call	545c <_isatty_r>
    46ac:	10004e26 	beq	r2,zero,47e8 <__smakebuf_r+0x1ac>
    46b0:	8080030b 	ldhu	r2,12(r16)
    46b4:	04c00044 	movi	r19,1
    46b8:	80c010c4 	addi	r3,r16,67
    46bc:	14c4b03a 	or	r2,r2,r19
    46c0:	8080030d 	sth	r2,12(r16)
    46c4:	80c00015 	stw	r3,0(r16)
    46c8:	80c00415 	stw	r3,16(r16)
    46cc:	84c00515 	stw	r19,20(r16)
    46d0:	04810004 	movi	r18,1024
    46d4:	00000706 	br	46f4 <__smakebuf_r+0xb8>
    46d8:	8080030b 	ldhu	r2,12(r16)
    46dc:	10c0200c 	andi	r3,r2,128
    46e0:	18001f1e 	bne	r3,zero,4760 <__smakebuf_r+0x124>
    46e4:	04810004 	movi	r18,1024
    46e8:	10820014 	ori	r2,r2,2048
    46ec:	8080030d 	sth	r2,12(r16)
    46f0:	0027883a 	mov	r19,zero
    46f4:	8809883a 	mov	r4,r17
    46f8:	900b883a 	mov	r5,r18
    46fc:	00047f40 	call	47f4 <_malloc_r>
    4700:	10002e26 	beq	r2,zero,47bc <__smakebuf_r+0x180>
    4704:	80c0030b 	ldhu	r3,12(r16)
    4708:	01000034 	movhi	r4,0
    470c:	210f4404 	addi	r4,r4,15632
    4710:	89000f15 	stw	r4,60(r17)
    4714:	18c02014 	ori	r3,r3,128
    4718:	80c0030d 	sth	r3,12(r16)
    471c:	80800015 	stw	r2,0(r16)
    4720:	80800415 	stw	r2,16(r16)
    4724:	84800515 	stw	r18,20(r16)
    4728:	98001c1e 	bne	r19,zero,479c <__smakebuf_r+0x160>
    472c:	dfc01317 	ldw	ra,76(sp)
    4730:	dcc01217 	ldw	r19,72(sp)
    4734:	dc801117 	ldw	r18,68(sp)
    4738:	dc401017 	ldw	r17,64(sp)
    473c:	dc000f17 	ldw	r16,60(sp)
    4740:	dec01404 	addi	sp,sp,80
    4744:	f800283a 	ret
    4748:	288010c4 	addi	r2,r5,67
    474c:	28800015 	stw	r2,0(r5)
    4750:	28800415 	stw	r2,16(r5)
    4754:	00800044 	movi	r2,1
    4758:	28800515 	stw	r2,20(r5)
    475c:	f800283a 	ret
    4760:	04801004 	movi	r18,64
    4764:	003fe006 	br	46e8 <__alt_mem_Flash_flash_data+0xf40046e8>
    4768:	81000a17 	ldw	r4,40(r16)
    476c:	00c00034 	movhi	r3,0
    4770:	18d47b04 	addi	r3,r3,20972
    4774:	20ffc51e 	bne	r4,r3,468c <__alt_mem_Flash_flash_data+0xf400468c>
    4778:	80c0030b 	ldhu	r3,12(r16)
    477c:	01010004 	movi	r4,1024
    4780:	81001315 	stw	r4,76(r16)
    4784:	1906b03a 	or	r3,r3,r4
    4788:	80c0030d 	sth	r3,12(r16)
    478c:	003fc206 	br	4698 <__alt_mem_Flash_flash_data+0xf4004698>
    4790:	0027883a 	mov	r19,zero
    4794:	04810004 	movi	r18,1024
    4798:	003fd606 	br	46f4 <__alt_mem_Flash_flash_data+0xf40046f4>
    479c:	8140038f 	ldh	r5,14(r16)
    47a0:	8809883a 	mov	r4,r17
    47a4:	000545c0 	call	545c <_isatty_r>
    47a8:	103fe026 	beq	r2,zero,472c <__alt_mem_Flash_flash_data+0xf400472c>
    47ac:	8080030b 	ldhu	r2,12(r16)
    47b0:	10800054 	ori	r2,r2,1
    47b4:	8080030d 	sth	r2,12(r16)
    47b8:	003fdc06 	br	472c <__alt_mem_Flash_flash_data+0xf400472c>
    47bc:	8080030b 	ldhu	r2,12(r16)
    47c0:	10c0800c 	andi	r3,r2,512
    47c4:	183fd91e 	bne	r3,zero,472c <__alt_mem_Flash_flash_data+0xf400472c>
    47c8:	10800094 	ori	r2,r2,2
    47cc:	80c010c4 	addi	r3,r16,67
    47d0:	8080030d 	sth	r2,12(r16)
    47d4:	00800044 	movi	r2,1
    47d8:	80c00015 	stw	r3,0(r16)
    47dc:	80c00415 	stw	r3,16(r16)
    47e0:	80800515 	stw	r2,20(r16)
    47e4:	003fd106 	br	472c <__alt_mem_Flash_flash_data+0xf400472c>
    47e8:	04c00044 	movi	r19,1
    47ec:	04810004 	movi	r18,1024
    47f0:	003fc006 	br	46f4 <__alt_mem_Flash_flash_data+0xf40046f4>

000047f4 <_malloc_r>:
    47f4:	defff504 	addi	sp,sp,-44
    47f8:	dc800315 	stw	r18,12(sp)
    47fc:	dfc00a15 	stw	ra,40(sp)
    4800:	df000915 	stw	fp,36(sp)
    4804:	ddc00815 	stw	r23,32(sp)
    4808:	dd800715 	stw	r22,28(sp)
    480c:	dd400615 	stw	r21,24(sp)
    4810:	dd000515 	stw	r20,20(sp)
    4814:	dcc00415 	stw	r19,16(sp)
    4818:	dc400215 	stw	r17,8(sp)
    481c:	dc000115 	stw	r16,4(sp)
    4820:	288002c4 	addi	r2,r5,11
    4824:	00c00584 	movi	r3,22
    4828:	2025883a 	mov	r18,r4
    482c:	18802a2e 	bgeu	r3,r2,48d8 <_malloc_r+0xe4>
    4830:	047ffe04 	movi	r17,-8
    4834:	1462703a 	and	r17,r2,r17
    4838:	88009e16 	blt	r17,zero,4ab4 <_malloc_r+0x2c0>
    483c:	89409d36 	bltu	r17,r5,4ab4 <_malloc_r+0x2c0>
    4840:	00057280 	call	5728 <__malloc_lock>
    4844:	00807dc4 	movi	r2,503
    4848:	14402736 	bltu	r2,r17,48e8 <_malloc_r+0xf4>
    484c:	8806d0fa 	srli	r3,r17,3
    4850:	04c00034 	movhi	r19,0
    4854:	9cdd5b04 	addi	r19,r19,30060
    4858:	18c5883a 	add	r2,r3,r3
    485c:	1085883a 	add	r2,r2,r2
    4860:	1085883a 	add	r2,r2,r2
    4864:	9885883a 	add	r2,r19,r2
    4868:	14000317 	ldw	r16,12(r2)
    486c:	80814a26 	beq	r16,r2,4d98 <_malloc_r+0x5a4>
    4870:	80c00117 	ldw	r3,4(r16)
    4874:	81000317 	ldw	r4,12(r16)
    4878:	00bfff04 	movi	r2,-4
    487c:	1884703a 	and	r2,r3,r2
    4880:	81400217 	ldw	r5,8(r16)
    4884:	8085883a 	add	r2,r16,r2
    4888:	10c00117 	ldw	r3,4(r2)
    488c:	29000315 	stw	r4,12(r5)
    4890:	21400215 	stw	r5,8(r4)
    4894:	18c00054 	ori	r3,r3,1
    4898:	10c00115 	stw	r3,4(r2)
    489c:	9009883a 	mov	r4,r18
    48a0:	000572c0 	call	572c <__malloc_unlock>
    48a4:	80800204 	addi	r2,r16,8
    48a8:	dfc00a17 	ldw	ra,40(sp)
    48ac:	df000917 	ldw	fp,36(sp)
    48b0:	ddc00817 	ldw	r23,32(sp)
    48b4:	dd800717 	ldw	r22,28(sp)
    48b8:	dd400617 	ldw	r21,24(sp)
    48bc:	dd000517 	ldw	r20,20(sp)
    48c0:	dcc00417 	ldw	r19,16(sp)
    48c4:	dc800317 	ldw	r18,12(sp)
    48c8:	dc400217 	ldw	r17,8(sp)
    48cc:	dc000117 	ldw	r16,4(sp)
    48d0:	dec00b04 	addi	sp,sp,44
    48d4:	f800283a 	ret
    48d8:	04400404 	movi	r17,16
    48dc:	89407536 	bltu	r17,r5,4ab4 <_malloc_r+0x2c0>
    48e0:	00057280 	call	5728 <__malloc_lock>
    48e4:	003fd906 	br	484c <__alt_mem_Flash_flash_data+0xf400484c>
    48e8:	8806d27a 	srli	r3,r17,9
    48ec:	18007526 	beq	r3,zero,4ac4 <_malloc_r+0x2d0>
    48f0:	00800104 	movi	r2,4
    48f4:	10c0ef36 	bltu	r2,r3,4cb4 <_malloc_r+0x4c0>
    48f8:	8806d1ba 	srli	r3,r17,6
    48fc:	19c00e04 	addi	r7,r3,56
    4900:	39cb883a 	add	r5,r7,r7
    4904:	04c00034 	movhi	r19,0
    4908:	294b883a 	add	r5,r5,r5
    490c:	9cdd5b04 	addi	r19,r19,30060
    4910:	294b883a 	add	r5,r5,r5
    4914:	994b883a 	add	r5,r19,r5
    4918:	2c000317 	ldw	r16,12(r5)
    491c:	2c000e26 	beq	r5,r16,4958 <_malloc_r+0x164>
    4920:	80800117 	ldw	r2,4(r16)
    4924:	01bfff04 	movi	r6,-4
    4928:	010003c4 	movi	r4,15
    492c:	1184703a 	and	r2,r2,r6
    4930:	1447c83a 	sub	r3,r2,r17
    4934:	20c00716 	blt	r4,r3,4954 <_malloc_r+0x160>
    4938:	1800650e 	bge	r3,zero,4ad0 <_malloc_r+0x2dc>
    493c:	84000317 	ldw	r16,12(r16)
    4940:	2c000526 	beq	r5,r16,4958 <_malloc_r+0x164>
    4944:	80800117 	ldw	r2,4(r16)
    4948:	1184703a 	and	r2,r2,r6
    494c:	1447c83a 	sub	r3,r2,r17
    4950:	20fff90e 	bge	r4,r3,4938 <__alt_mem_Flash_flash_data+0xf4004938>
    4954:	39ffffc4 	addi	r7,r7,-1
    4958:	38c00044 	addi	r3,r7,1
    495c:	01800034 	movhi	r6,0
    4960:	9c000417 	ldw	r16,16(r19)
    4964:	319d5b04 	addi	r6,r6,30060
    4968:	32400204 	addi	r9,r6,8
    496c:	82410326 	beq	r16,r9,4d7c <_malloc_r+0x588>
    4970:	81000117 	ldw	r4,4(r16)
    4974:	00bfff04 	movi	r2,-4
    4978:	208e703a 	and	r7,r4,r2
    497c:	3c45c83a 	sub	r2,r7,r17
    4980:	010003c4 	movi	r4,15
    4984:	2080ee16 	blt	r4,r2,4d40 <_malloc_r+0x54c>
    4988:	32400515 	stw	r9,20(r6)
    498c:	32400415 	stw	r9,16(r6)
    4990:	1000510e 	bge	r2,zero,4ad8 <_malloc_r+0x2e4>
    4994:	00807fc4 	movi	r2,511
    4998:	11c0ce36 	bltu	r2,r7,4cd4 <_malloc_r+0x4e0>
    499c:	3808d0fa 	srli	r4,r7,3
    49a0:	01c00044 	movi	r7,1
    49a4:	30800117 	ldw	r2,4(r6)
    49a8:	210b883a 	add	r5,r4,r4
    49ac:	294b883a 	add	r5,r5,r5
    49b0:	2009d0ba 	srai	r4,r4,2
    49b4:	294b883a 	add	r5,r5,r5
    49b8:	298b883a 	add	r5,r5,r6
    49bc:	2a000217 	ldw	r8,8(r5)
    49c0:	3908983a 	sll	r4,r7,r4
    49c4:	81400315 	stw	r5,12(r16)
    49c8:	82000215 	stw	r8,8(r16)
    49cc:	2088b03a 	or	r4,r4,r2
    49d0:	2c000215 	stw	r16,8(r5)
    49d4:	31000115 	stw	r4,4(r6)
    49d8:	44000315 	stw	r16,12(r8)
    49dc:	1805d0ba 	srai	r2,r3,2
    49e0:	01400044 	movi	r5,1
    49e4:	288a983a 	sll	r5,r5,r2
    49e8:	21404336 	bltu	r4,r5,4af8 <_malloc_r+0x304>
    49ec:	2144703a 	and	r2,r4,r5
    49f0:	10000a1e 	bne	r2,zero,4a1c <_malloc_r+0x228>
    49f4:	00bfff04 	movi	r2,-4
    49f8:	294b883a 	add	r5,r5,r5
    49fc:	1886703a 	and	r3,r3,r2
    4a00:	2144703a 	and	r2,r4,r5
    4a04:	18c00104 	addi	r3,r3,4
    4a08:	1000041e 	bne	r2,zero,4a1c <_malloc_r+0x228>
    4a0c:	294b883a 	add	r5,r5,r5
    4a10:	2144703a 	and	r2,r4,r5
    4a14:	18c00104 	addi	r3,r3,4
    4a18:	103ffc26 	beq	r2,zero,4a0c <__alt_mem_Flash_flash_data+0xf4004a0c>
    4a1c:	023fff04 	movi	r8,-4
    4a20:	01c003c4 	movi	r7,15
    4a24:	18c5883a 	add	r2,r3,r3
    4a28:	1085883a 	add	r2,r2,r2
    4a2c:	1085883a 	add	r2,r2,r2
    4a30:	9895883a 	add	r10,r19,r2
    4a34:	52c00304 	addi	r11,r10,12
    4a38:	1819883a 	mov	r12,r3
    4a3c:	5c000017 	ldw	r16,0(r11)
    4a40:	59bffd04 	addi	r6,r11,-12
    4a44:	8180041e 	bne	r16,r6,4a58 <_malloc_r+0x264>
    4a48:	0000ce06 	br	4d84 <_malloc_r+0x590>
    4a4c:	2000d70e 	bge	r4,zero,4dac <_malloc_r+0x5b8>
    4a50:	84000317 	ldw	r16,12(r16)
    4a54:	8180cb26 	beq	r16,r6,4d84 <_malloc_r+0x590>
    4a58:	80800117 	ldw	r2,4(r16)
    4a5c:	1204703a 	and	r2,r2,r8
    4a60:	1449c83a 	sub	r4,r2,r17
    4a64:	393ff90e 	bge	r7,r4,4a4c <__alt_mem_Flash_flash_data+0xf4004a4c>
    4a68:	80800317 	ldw	r2,12(r16)
    4a6c:	80c00217 	ldw	r3,8(r16)
    4a70:	89400054 	ori	r5,r17,1
    4a74:	81400115 	stw	r5,4(r16)
    4a78:	18800315 	stw	r2,12(r3)
    4a7c:	10c00215 	stw	r3,8(r2)
    4a80:	8463883a 	add	r17,r16,r17
    4a84:	9c400515 	stw	r17,20(r19)
    4a88:	9c400415 	stw	r17,16(r19)
    4a8c:	20800054 	ori	r2,r4,1
    4a90:	88800115 	stw	r2,4(r17)
    4a94:	8a400315 	stw	r9,12(r17)
    4a98:	8a400215 	stw	r9,8(r17)
    4a9c:	8923883a 	add	r17,r17,r4
    4aa0:	89000015 	stw	r4,0(r17)
    4aa4:	9009883a 	mov	r4,r18
    4aa8:	000572c0 	call	572c <__malloc_unlock>
    4aac:	80800204 	addi	r2,r16,8
    4ab0:	003f7d06 	br	48a8 <__alt_mem_Flash_flash_data+0xf40048a8>
    4ab4:	00800304 	movi	r2,12
    4ab8:	90800015 	stw	r2,0(r18)
    4abc:	0005883a 	mov	r2,zero
    4ac0:	003f7906 	br	48a8 <__alt_mem_Flash_flash_data+0xf40048a8>
    4ac4:	01401f84 	movi	r5,126
    4ac8:	01c00fc4 	movi	r7,63
    4acc:	003f8d06 	br	4904 <__alt_mem_Flash_flash_data+0xf4004904>
    4ad0:	81000317 	ldw	r4,12(r16)
    4ad4:	003f6a06 	br	4880 <__alt_mem_Flash_flash_data+0xf4004880>
    4ad8:	81c5883a 	add	r2,r16,r7
    4adc:	10c00117 	ldw	r3,4(r2)
    4ae0:	9009883a 	mov	r4,r18
    4ae4:	18c00054 	ori	r3,r3,1
    4ae8:	10c00115 	stw	r3,4(r2)
    4aec:	000572c0 	call	572c <__malloc_unlock>
    4af0:	80800204 	addi	r2,r16,8
    4af4:	003f6c06 	br	48a8 <__alt_mem_Flash_flash_data+0xf40048a8>
    4af8:	9c000217 	ldw	r16,8(r19)
    4afc:	00bfff04 	movi	r2,-4
    4b00:	85800117 	ldw	r22,4(r16)
    4b04:	b0ac703a 	and	r22,r22,r2
    4b08:	b4400336 	bltu	r22,r17,4b18 <_malloc_r+0x324>
    4b0c:	b445c83a 	sub	r2,r22,r17
    4b10:	00c003c4 	movi	r3,15
    4b14:	18805d16 	blt	r3,r2,4c8c <_malloc_r+0x498>
    4b18:	05c00034 	movhi	r23,0
    4b1c:	00800074 	movhi	r2,1
    4b20:	bdde6804 	addi	r23,r23,31136
    4b24:	10a5e304 	addi	r2,r2,-26740
    4b28:	15400017 	ldw	r21,0(r2)
    4b2c:	b9000017 	ldw	r4,0(r23)
    4b30:	00ffffc4 	movi	r3,-1
    4b34:	858d883a 	add	r6,r16,r22
    4b38:	8d6b883a 	add	r21,r17,r21
    4b3c:	20c0e426 	beq	r4,r3,4ed0 <_malloc_r+0x6dc>
    4b40:	ad4403c4 	addi	r21,r21,4111
    4b44:	00fc0004 	movi	r3,-4096
    4b48:	a8ea703a 	and	r21,r21,r3
    4b4c:	9009883a 	mov	r4,r18
    4b50:	a80b883a 	mov	r5,r21
    4b54:	d9800015 	stw	r6,0(sp)
    4b58:	00050c00 	call	50c0 <_sbrk_r>
    4b5c:	00ffffc4 	movi	r3,-1
    4b60:	1029883a 	mov	r20,r2
    4b64:	d9800017 	ldw	r6,0(sp)
    4b68:	10c0a426 	beq	r2,r3,4dfc <_malloc_r+0x608>
    4b6c:	1180a236 	bltu	r2,r6,4df8 <_malloc_r+0x604>
    4b70:	07000074 	movhi	fp,1
    4b74:	e725e404 	addi	fp,fp,-26736
    4b78:	e0c00017 	ldw	r3,0(fp)
    4b7c:	a8c7883a 	add	r3,r21,r3
    4b80:	e0c00015 	stw	r3,0(fp)
    4b84:	3500da26 	beq	r6,r20,4ef0 <_malloc_r+0x6fc>
    4b88:	b9000017 	ldw	r4,0(r23)
    4b8c:	00bfffc4 	movi	r2,-1
    4b90:	2080e426 	beq	r4,r2,4f24 <_malloc_r+0x730>
    4b94:	a185c83a 	sub	r2,r20,r6
    4b98:	1885883a 	add	r2,r3,r2
    4b9c:	e0800015 	stw	r2,0(fp)
    4ba0:	a0c001cc 	andi	r3,r20,7
    4ba4:	1800b526 	beq	r3,zero,4e7c <_malloc_r+0x688>
    4ba8:	a0e9c83a 	sub	r20,r20,r3
    4bac:	00840204 	movi	r2,4104
    4bb0:	a5000204 	addi	r20,r20,8
    4bb4:	10c7c83a 	sub	r3,r2,r3
    4bb8:	a545883a 	add	r2,r20,r21
    4bbc:	1083ffcc 	andi	r2,r2,4095
    4bc0:	18abc83a 	sub	r21,r3,r2
    4bc4:	9009883a 	mov	r4,r18
    4bc8:	a80b883a 	mov	r5,r21
    4bcc:	00050c00 	call	50c0 <_sbrk_r>
    4bd0:	00ffffc4 	movi	r3,-1
    4bd4:	10c0d026 	beq	r2,r3,4f18 <_malloc_r+0x724>
    4bd8:	1507c83a 	sub	r3,r2,r20
    4bdc:	a8c7883a 	add	r3,r21,r3
    4be0:	18c00054 	ori	r3,r3,1
    4be4:	e0800017 	ldw	r2,0(fp)
    4be8:	9d000215 	stw	r20,8(r19)
    4bec:	a0c00115 	stw	r3,4(r20)
    4bf0:	a887883a 	add	r3,r21,r2
    4bf4:	e0c00015 	stw	r3,0(fp)
    4bf8:	84c00e26 	beq	r16,r19,4c34 <_malloc_r+0x440>
    4bfc:	018003c4 	movi	r6,15
    4c00:	3580a02e 	bgeu	r6,r22,4e84 <_malloc_r+0x690>
    4c04:	81400117 	ldw	r5,4(r16)
    4c08:	013ffe04 	movi	r4,-8
    4c0c:	b0bffd04 	addi	r2,r22,-12
    4c10:	1104703a 	and	r2,r2,r4
    4c14:	2900004c 	andi	r4,r5,1
    4c18:	1108b03a 	or	r4,r2,r4
    4c1c:	81000115 	stw	r4,4(r16)
    4c20:	01400144 	movi	r5,5
    4c24:	8089883a 	add	r4,r16,r2
    4c28:	21400115 	stw	r5,4(r4)
    4c2c:	21400215 	stw	r5,8(r4)
    4c30:	3080c036 	bltu	r6,r2,4f34 <_malloc_r+0x740>
    4c34:	00800074 	movhi	r2,1
    4c38:	10a5e204 	addi	r2,r2,-26744
    4c3c:	11000017 	ldw	r4,0(r2)
    4c40:	20c0012e 	bgeu	r4,r3,4c48 <_malloc_r+0x454>
    4c44:	10c00015 	stw	r3,0(r2)
    4c48:	00800074 	movhi	r2,1
    4c4c:	10a5e104 	addi	r2,r2,-26748
    4c50:	11000017 	ldw	r4,0(r2)
    4c54:	9c000217 	ldw	r16,8(r19)
    4c58:	20c0012e 	bgeu	r4,r3,4c60 <_malloc_r+0x46c>
    4c5c:	10c00015 	stw	r3,0(r2)
    4c60:	80c00117 	ldw	r3,4(r16)
    4c64:	00bfff04 	movi	r2,-4
    4c68:	1886703a 	and	r3,r3,r2
    4c6c:	1c45c83a 	sub	r2,r3,r17
    4c70:	1c400236 	bltu	r3,r17,4c7c <_malloc_r+0x488>
    4c74:	00c003c4 	movi	r3,15
    4c78:	18800416 	blt	r3,r2,4c8c <_malloc_r+0x498>
    4c7c:	9009883a 	mov	r4,r18
    4c80:	000572c0 	call	572c <__malloc_unlock>
    4c84:	0005883a 	mov	r2,zero
    4c88:	003f0706 	br	48a8 <__alt_mem_Flash_flash_data+0xf40048a8>
    4c8c:	88c00054 	ori	r3,r17,1
    4c90:	80c00115 	stw	r3,4(r16)
    4c94:	8463883a 	add	r17,r16,r17
    4c98:	10800054 	ori	r2,r2,1
    4c9c:	9c400215 	stw	r17,8(r19)
    4ca0:	88800115 	stw	r2,4(r17)
    4ca4:	9009883a 	mov	r4,r18
    4ca8:	000572c0 	call	572c <__malloc_unlock>
    4cac:	80800204 	addi	r2,r16,8
    4cb0:	003efd06 	br	48a8 <__alt_mem_Flash_flash_data+0xf40048a8>
    4cb4:	00800504 	movi	r2,20
    4cb8:	10c0482e 	bgeu	r2,r3,4ddc <_malloc_r+0x5e8>
    4cbc:	00801504 	movi	r2,84
    4cc0:	10c06836 	bltu	r2,r3,4e64 <_malloc_r+0x670>
    4cc4:	8806d33a 	srli	r3,r17,12
    4cc8:	19c01b84 	addi	r7,r3,110
    4ccc:	39cb883a 	add	r5,r7,r7
    4cd0:	003f0c06 	br	4904 <__alt_mem_Flash_flash_data+0xf4004904>
    4cd4:	3804d27a 	srli	r2,r7,9
    4cd8:	01000104 	movi	r4,4
    4cdc:	2080422e 	bgeu	r4,r2,4de8 <_malloc_r+0x5f4>
    4ce0:	01000504 	movi	r4,20
    4ce4:	20807c36 	bltu	r4,r2,4ed8 <_malloc_r+0x6e4>
    4ce8:	110016c4 	addi	r4,r2,91
    4cec:	210b883a 	add	r5,r4,r4
    4cf0:	294b883a 	add	r5,r5,r5
    4cf4:	294b883a 	add	r5,r5,r5
    4cf8:	994b883a 	add	r5,r19,r5
    4cfc:	28800217 	ldw	r2,8(r5)
    4d00:	02000034 	movhi	r8,0
    4d04:	421d5b04 	addi	r8,r8,30060
    4d08:	11406326 	beq	r2,r5,4e98 <_malloc_r+0x6a4>
    4d0c:	01bfff04 	movi	r6,-4
    4d10:	11000117 	ldw	r4,4(r2)
    4d14:	2188703a 	and	r4,r4,r6
    4d18:	3900022e 	bgeu	r7,r4,4d24 <_malloc_r+0x530>
    4d1c:	10800217 	ldw	r2,8(r2)
    4d20:	28bffb1e 	bne	r5,r2,4d10 <__alt_mem_Flash_flash_data+0xf4004d10>
    4d24:	11800317 	ldw	r6,12(r2)
    4d28:	99000117 	ldw	r4,4(r19)
    4d2c:	81800315 	stw	r6,12(r16)
    4d30:	80800215 	stw	r2,8(r16)
    4d34:	34000215 	stw	r16,8(r6)
    4d38:	14000315 	stw	r16,12(r2)
    4d3c:	003f2706 	br	49dc <__alt_mem_Flash_flash_data+0xf40049dc>
    4d40:	88c00054 	ori	r3,r17,1
    4d44:	80c00115 	stw	r3,4(r16)
    4d48:	8463883a 	add	r17,r16,r17
    4d4c:	34400515 	stw	r17,20(r6)
    4d50:	34400415 	stw	r17,16(r6)
    4d54:	10c00054 	ori	r3,r2,1
    4d58:	8a400315 	stw	r9,12(r17)
    4d5c:	8a400215 	stw	r9,8(r17)
    4d60:	88c00115 	stw	r3,4(r17)
    4d64:	88a3883a 	add	r17,r17,r2
    4d68:	88800015 	stw	r2,0(r17)
    4d6c:	9009883a 	mov	r4,r18
    4d70:	000572c0 	call	572c <__malloc_unlock>
    4d74:	80800204 	addi	r2,r16,8
    4d78:	003ecb06 	br	48a8 <__alt_mem_Flash_flash_data+0xf40048a8>
    4d7c:	31000117 	ldw	r4,4(r6)
    4d80:	003f1606 	br	49dc <__alt_mem_Flash_flash_data+0xf40049dc>
    4d84:	63000044 	addi	r12,r12,1
    4d88:	608000cc 	andi	r2,r12,3
    4d8c:	5ac00204 	addi	r11,r11,8
    4d90:	103f2a1e 	bne	r2,zero,4a3c <__alt_mem_Flash_flash_data+0xf4004a3c>
    4d94:	00002106 	br	4e1c <_malloc_r+0x628>
    4d98:	80800204 	addi	r2,r16,8
    4d9c:	84000517 	ldw	r16,20(r16)
    4da0:	143eb31e 	bne	r2,r16,4870 <__alt_mem_Flash_flash_data+0xf4004870>
    4da4:	18c00084 	addi	r3,r3,2
    4da8:	003eec06 	br	495c <__alt_mem_Flash_flash_data+0xf400495c>
    4dac:	8085883a 	add	r2,r16,r2
    4db0:	10c00117 	ldw	r3,4(r2)
    4db4:	81000317 	ldw	r4,12(r16)
    4db8:	81400217 	ldw	r5,8(r16)
    4dbc:	18c00054 	ori	r3,r3,1
    4dc0:	10c00115 	stw	r3,4(r2)
    4dc4:	29000315 	stw	r4,12(r5)
    4dc8:	21400215 	stw	r5,8(r4)
    4dcc:	9009883a 	mov	r4,r18
    4dd0:	000572c0 	call	572c <__malloc_unlock>
    4dd4:	80800204 	addi	r2,r16,8
    4dd8:	003eb306 	br	48a8 <__alt_mem_Flash_flash_data+0xf40048a8>
    4ddc:	19c016c4 	addi	r7,r3,91
    4de0:	39cb883a 	add	r5,r7,r7
    4de4:	003ec706 	br	4904 <__alt_mem_Flash_flash_data+0xf4004904>
    4de8:	3804d1ba 	srli	r2,r7,6
    4dec:	11000e04 	addi	r4,r2,56
    4df0:	210b883a 	add	r5,r4,r4
    4df4:	003fbe06 	br	4cf0 <__alt_mem_Flash_flash_data+0xf4004cf0>
    4df8:	84ff5d26 	beq	r16,r19,4b70 <__alt_mem_Flash_flash_data+0xf4004b70>
    4dfc:	9c000217 	ldw	r16,8(r19)
    4e00:	00bfff04 	movi	r2,-4
    4e04:	80c00117 	ldw	r3,4(r16)
    4e08:	1886703a 	and	r3,r3,r2
    4e0c:	003f9706 	br	4c6c <__alt_mem_Flash_flash_data+0xf4004c6c>
    4e10:	52800017 	ldw	r10,0(r10)
    4e14:	18ffffc4 	addi	r3,r3,-1
    4e18:	50805c1e 	bne	r10,r2,4f8c <_malloc_r+0x798>
    4e1c:	190000cc 	andi	r4,r3,3
    4e20:	50bffe04 	addi	r2,r10,-8
    4e24:	203ffa1e 	bne	r4,zero,4e10 <__alt_mem_Flash_flash_data+0xf4004e10>
    4e28:	98800117 	ldw	r2,4(r19)
    4e2c:	0146303a 	nor	r3,zero,r5
    4e30:	1884703a 	and	r2,r3,r2
    4e34:	98800115 	stw	r2,4(r19)
    4e38:	294b883a 	add	r5,r5,r5
    4e3c:	117f2e36 	bltu	r2,r5,4af8 <__alt_mem_Flash_flash_data+0xf4004af8>
    4e40:	283f2d26 	beq	r5,zero,4af8 <__alt_mem_Flash_flash_data+0xf4004af8>
    4e44:	1146703a 	and	r3,r2,r5
    4e48:	1800521e 	bne	r3,zero,4f94 <_malloc_r+0x7a0>
    4e4c:	6007883a 	mov	r3,r12
    4e50:	294b883a 	add	r5,r5,r5
    4e54:	1148703a 	and	r4,r2,r5
    4e58:	18c00104 	addi	r3,r3,4
    4e5c:	203ffc26 	beq	r4,zero,4e50 <__alt_mem_Flash_flash_data+0xf4004e50>
    4e60:	003ef006 	br	4a24 <__alt_mem_Flash_flash_data+0xf4004a24>
    4e64:	00805504 	movi	r2,340
    4e68:	10c01336 	bltu	r2,r3,4eb8 <_malloc_r+0x6c4>
    4e6c:	8806d3fa 	srli	r3,r17,15
    4e70:	19c01dc4 	addi	r7,r3,119
    4e74:	39cb883a 	add	r5,r7,r7
    4e78:	003ea206 	br	4904 <__alt_mem_Flash_flash_data+0xf4004904>
    4e7c:	00c40004 	movi	r3,4096
    4e80:	003f4d06 	br	4bb8 <__alt_mem_Flash_flash_data+0xf4004bb8>
    4e84:	00800044 	movi	r2,1
    4e88:	a0800115 	stw	r2,4(r20)
    4e8c:	a021883a 	mov	r16,r20
    4e90:	0007883a 	mov	r3,zero
    4e94:	003f7506 	br	4c6c <__alt_mem_Flash_flash_data+0xf4004c6c>
    4e98:	200bd0ba 	srai	r5,r4,2
    4e9c:	01800044 	movi	r6,1
    4ea0:	41000117 	ldw	r4,4(r8)
    4ea4:	314a983a 	sll	r5,r6,r5
    4ea8:	100d883a 	mov	r6,r2
    4eac:	2908b03a 	or	r4,r5,r4
    4eb0:	41000115 	stw	r4,4(r8)
    4eb4:	003f9d06 	br	4d2c <__alt_mem_Flash_flash_data+0xf4004d2c>
    4eb8:	00815504 	movi	r2,1364
    4ebc:	10c01336 	bltu	r2,r3,4f0c <_malloc_r+0x718>
    4ec0:	8806d4ba 	srli	r3,r17,18
    4ec4:	19c01f04 	addi	r7,r3,124
    4ec8:	39cb883a 	add	r5,r7,r7
    4ecc:	003e8d06 	br	4904 <__alt_mem_Flash_flash_data+0xf4004904>
    4ed0:	ad400404 	addi	r21,r21,16
    4ed4:	003f1d06 	br	4b4c <__alt_mem_Flash_flash_data+0xf4004b4c>
    4ed8:	01001504 	movi	r4,84
    4edc:	20801c36 	bltu	r4,r2,4f50 <_malloc_r+0x75c>
    4ee0:	3804d33a 	srli	r2,r7,12
    4ee4:	11001b84 	addi	r4,r2,110
    4ee8:	210b883a 	add	r5,r4,r4
    4eec:	003f8006 	br	4cf0 <__alt_mem_Flash_flash_data+0xf4004cf0>
    4ef0:	3083ffcc 	andi	r2,r6,4095
    4ef4:	103f241e 	bne	r2,zero,4b88 <__alt_mem_Flash_flash_data+0xf4004b88>
    4ef8:	99000217 	ldw	r4,8(r19)
    4efc:	ad85883a 	add	r2,r21,r22
    4f00:	10800054 	ori	r2,r2,1
    4f04:	20800115 	stw	r2,4(r4)
    4f08:	003f4a06 	br	4c34 <__alt_mem_Flash_flash_data+0xf4004c34>
    4f0c:	01403f04 	movi	r5,252
    4f10:	01c01f84 	movi	r7,126
    4f14:	003e7b06 	br	4904 <__alt_mem_Flash_flash_data+0xf4004904>
    4f18:	00c00044 	movi	r3,1
    4f1c:	002b883a 	mov	r21,zero
    4f20:	003f3006 	br	4be4 <__alt_mem_Flash_flash_data+0xf4004be4>
    4f24:	00800034 	movhi	r2,0
    4f28:	109e6804 	addi	r2,r2,31136
    4f2c:	15000015 	stw	r20,0(r2)
    4f30:	003f1b06 	br	4ba0 <__alt_mem_Flash_flash_data+0xf4004ba0>
    4f34:	9009883a 	mov	r4,r18
    4f38:	81400204 	addi	r5,r16,8
    4f3c:	00041c40 	call	41c4 <_free_r>
    4f40:	00800074 	movhi	r2,1
    4f44:	10a5e404 	addi	r2,r2,-26736
    4f48:	10c00017 	ldw	r3,0(r2)
    4f4c:	003f3906 	br	4c34 <__alt_mem_Flash_flash_data+0xf4004c34>
    4f50:	01005504 	movi	r4,340
    4f54:	20800436 	bltu	r4,r2,4f68 <_malloc_r+0x774>
    4f58:	3804d3fa 	srli	r2,r7,15
    4f5c:	11001dc4 	addi	r4,r2,119
    4f60:	210b883a 	add	r5,r4,r4
    4f64:	003f6206 	br	4cf0 <__alt_mem_Flash_flash_data+0xf4004cf0>
    4f68:	01015504 	movi	r4,1364
    4f6c:	20800436 	bltu	r4,r2,4f80 <_malloc_r+0x78c>
    4f70:	3804d4ba 	srli	r2,r7,18
    4f74:	11001f04 	addi	r4,r2,124
    4f78:	210b883a 	add	r5,r4,r4
    4f7c:	003f5c06 	br	4cf0 <__alt_mem_Flash_flash_data+0xf4004cf0>
    4f80:	01403f04 	movi	r5,252
    4f84:	01001f84 	movi	r4,126
    4f88:	003f5906 	br	4cf0 <__alt_mem_Flash_flash_data+0xf4004cf0>
    4f8c:	98800117 	ldw	r2,4(r19)
    4f90:	003fa906 	br	4e38 <__alt_mem_Flash_flash_data+0xf4004e38>
    4f94:	6007883a 	mov	r3,r12
    4f98:	003ea206 	br	4a24 <__alt_mem_Flash_flash_data+0xf4004a24>

00004f9c <memset>:
    4f9c:	20c000cc 	andi	r3,r4,3
    4fa0:	2005883a 	mov	r2,r4
    4fa4:	18004326 	beq	r3,zero,50b4 <memset+0x118>
    4fa8:	31ffffc4 	addi	r7,r6,-1
    4fac:	30004026 	beq	r6,zero,50b0 <memset+0x114>
    4fb0:	2813883a 	mov	r9,r5
    4fb4:	200d883a 	mov	r6,r4
    4fb8:	2007883a 	mov	r3,r4
    4fbc:	00000406 	br	4fd0 <memset+0x34>
    4fc0:	3a3fffc4 	addi	r8,r7,-1
    4fc4:	31800044 	addi	r6,r6,1
    4fc8:	38003926 	beq	r7,zero,50b0 <memset+0x114>
    4fcc:	400f883a 	mov	r7,r8
    4fd0:	18c00044 	addi	r3,r3,1
    4fd4:	32400005 	stb	r9,0(r6)
    4fd8:	1a0000cc 	andi	r8,r3,3
    4fdc:	403ff81e 	bne	r8,zero,4fc0 <__alt_mem_Flash_flash_data+0xf4004fc0>
    4fe0:	010000c4 	movi	r4,3
    4fe4:	21c02d2e 	bgeu	r4,r7,509c <memset+0x100>
    4fe8:	29803fcc 	andi	r6,r5,255
    4fec:	3008923a 	slli	r4,r6,8
    4ff0:	218cb03a 	or	r6,r4,r6
    4ff4:	3008943a 	slli	r4,r6,16
    4ff8:	218cb03a 	or	r6,r4,r6
    4ffc:	010003c4 	movi	r4,15
    5000:	21c0182e 	bgeu	r4,r7,5064 <memset+0xc8>
    5004:	3b3ffc04 	addi	r12,r7,-16
    5008:	6018d13a 	srli	r12,r12,4
    500c:	1a000104 	addi	r8,r3,4
    5010:	1ac00204 	addi	r11,r3,8
    5014:	6008913a 	slli	r4,r12,4
    5018:	1a800304 	addi	r10,r3,12
    501c:	1813883a 	mov	r9,r3
    5020:	21000504 	addi	r4,r4,20
    5024:	1909883a 	add	r4,r3,r4
    5028:	49800015 	stw	r6,0(r9)
    502c:	41800015 	stw	r6,0(r8)
    5030:	59800015 	stw	r6,0(r11)
    5034:	51800015 	stw	r6,0(r10)
    5038:	42000404 	addi	r8,r8,16
    503c:	4a400404 	addi	r9,r9,16
    5040:	5ac00404 	addi	r11,r11,16
    5044:	52800404 	addi	r10,r10,16
    5048:	413ff71e 	bne	r8,r4,5028 <__alt_mem_Flash_flash_data+0xf4005028>
    504c:	63000044 	addi	r12,r12,1
    5050:	6018913a 	slli	r12,r12,4
    5054:	39c003cc 	andi	r7,r7,15
    5058:	010000c4 	movi	r4,3
    505c:	1b07883a 	add	r3,r3,r12
    5060:	21c00e2e 	bgeu	r4,r7,509c <memset+0x100>
    5064:	1813883a 	mov	r9,r3
    5068:	3811883a 	mov	r8,r7
    506c:	010000c4 	movi	r4,3
    5070:	49800015 	stw	r6,0(r9)
    5074:	423fff04 	addi	r8,r8,-4
    5078:	4a400104 	addi	r9,r9,4
    507c:	223ffc36 	bltu	r4,r8,5070 <__alt_mem_Flash_flash_data+0xf4005070>
    5080:	393fff04 	addi	r4,r7,-4
    5084:	2008d0ba 	srli	r4,r4,2
    5088:	39c000cc 	andi	r7,r7,3
    508c:	21000044 	addi	r4,r4,1
    5090:	2109883a 	add	r4,r4,r4
    5094:	2109883a 	add	r4,r4,r4
    5098:	1907883a 	add	r3,r3,r4
    509c:	38000426 	beq	r7,zero,50b0 <memset+0x114>
    50a0:	19cf883a 	add	r7,r3,r7
    50a4:	19400005 	stb	r5,0(r3)
    50a8:	18c00044 	addi	r3,r3,1
    50ac:	19fffd1e 	bne	r3,r7,50a4 <__alt_mem_Flash_flash_data+0xf40050a4>
    50b0:	f800283a 	ret
    50b4:	2007883a 	mov	r3,r4
    50b8:	300f883a 	mov	r7,r6
    50bc:	003fc806 	br	4fe0 <__alt_mem_Flash_flash_data+0xf4004fe0>

000050c0 <_sbrk_r>:
    50c0:	defffd04 	addi	sp,sp,-12
    50c4:	dc000015 	stw	r16,0(sp)
    50c8:	04000074 	movhi	r16,1
    50cc:	dc400115 	stw	r17,4(sp)
    50d0:	8425e004 	addi	r16,r16,-26752
    50d4:	2023883a 	mov	r17,r4
    50d8:	2809883a 	mov	r4,r5
    50dc:	dfc00215 	stw	ra,8(sp)
    50e0:	80000015 	stw	zero,0(r16)
    50e4:	000582c0 	call	582c <sbrk>
    50e8:	00ffffc4 	movi	r3,-1
    50ec:	10c00526 	beq	r2,r3,5104 <_sbrk_r+0x44>
    50f0:	dfc00217 	ldw	ra,8(sp)
    50f4:	dc400117 	ldw	r17,4(sp)
    50f8:	dc000017 	ldw	r16,0(sp)
    50fc:	dec00304 	addi	sp,sp,12
    5100:	f800283a 	ret
    5104:	80c00017 	ldw	r3,0(r16)
    5108:	183ff926 	beq	r3,zero,50f0 <__alt_mem_Flash_flash_data+0xf40050f0>
    510c:	88c00015 	stw	r3,0(r17)
    5110:	003ff706 	br	50f0 <__alt_mem_Flash_flash_data+0xf40050f0>

00005114 <__sread>:
    5114:	defffe04 	addi	sp,sp,-8
    5118:	dc000015 	stw	r16,0(sp)
    511c:	2821883a 	mov	r16,r5
    5120:	2940038f 	ldh	r5,14(r5)
    5124:	dfc00115 	stw	ra,4(sp)
    5128:	000550c0 	call	550c <_read_r>
    512c:	10000716 	blt	r2,zero,514c <__sread+0x38>
    5130:	80c01417 	ldw	r3,80(r16)
    5134:	1887883a 	add	r3,r3,r2
    5138:	80c01415 	stw	r3,80(r16)
    513c:	dfc00117 	ldw	ra,4(sp)
    5140:	dc000017 	ldw	r16,0(sp)
    5144:	dec00204 	addi	sp,sp,8
    5148:	f800283a 	ret
    514c:	80c0030b 	ldhu	r3,12(r16)
    5150:	18fbffcc 	andi	r3,r3,61439
    5154:	80c0030d 	sth	r3,12(r16)
    5158:	dfc00117 	ldw	ra,4(sp)
    515c:	dc000017 	ldw	r16,0(sp)
    5160:	dec00204 	addi	sp,sp,8
    5164:	f800283a 	ret

00005168 <__seofread>:
    5168:	0005883a 	mov	r2,zero
    516c:	f800283a 	ret

00005170 <__swrite>:
    5170:	2880030b 	ldhu	r2,12(r5)
    5174:	defffb04 	addi	sp,sp,-20
    5178:	dcc00315 	stw	r19,12(sp)
    517c:	dc800215 	stw	r18,8(sp)
    5180:	dc400115 	stw	r17,4(sp)
    5184:	dc000015 	stw	r16,0(sp)
    5188:	dfc00415 	stw	ra,16(sp)
    518c:	10c0400c 	andi	r3,r2,256
    5190:	2821883a 	mov	r16,r5
    5194:	2027883a 	mov	r19,r4
    5198:	3025883a 	mov	r18,r6
    519c:	3823883a 	mov	r17,r7
    51a0:	18000526 	beq	r3,zero,51b8 <__swrite+0x48>
    51a4:	2940038f 	ldh	r5,14(r5)
    51a8:	000d883a 	mov	r6,zero
    51ac:	01c00084 	movi	r7,2
    51b0:	00054b00 	call	54b0 <_lseek_r>
    51b4:	8080030b 	ldhu	r2,12(r16)
    51b8:	8140038f 	ldh	r5,14(r16)
    51bc:	10bbffcc 	andi	r2,r2,61439
    51c0:	9809883a 	mov	r4,r19
    51c4:	900d883a 	mov	r6,r18
    51c8:	880f883a 	mov	r7,r17
    51cc:	8080030d 	sth	r2,12(r16)
    51d0:	dfc00417 	ldw	ra,16(sp)
    51d4:	dcc00317 	ldw	r19,12(sp)
    51d8:	dc800217 	ldw	r18,8(sp)
    51dc:	dc400117 	ldw	r17,4(sp)
    51e0:	dc000017 	ldw	r16,0(sp)
    51e4:	dec00504 	addi	sp,sp,20
    51e8:	00052501 	jmpi	5250 <_write_r>

000051ec <__sseek>:
    51ec:	defffe04 	addi	sp,sp,-8
    51f0:	dc000015 	stw	r16,0(sp)
    51f4:	2821883a 	mov	r16,r5
    51f8:	2940038f 	ldh	r5,14(r5)
    51fc:	dfc00115 	stw	ra,4(sp)
    5200:	00054b00 	call	54b0 <_lseek_r>
    5204:	00ffffc4 	movi	r3,-1
    5208:	10c00826 	beq	r2,r3,522c <__sseek+0x40>
    520c:	80c0030b 	ldhu	r3,12(r16)
    5210:	80801415 	stw	r2,80(r16)
    5214:	18c40014 	ori	r3,r3,4096
    5218:	80c0030d 	sth	r3,12(r16)
    521c:	dfc00117 	ldw	ra,4(sp)
    5220:	dc000017 	ldw	r16,0(sp)
    5224:	dec00204 	addi	sp,sp,8
    5228:	f800283a 	ret
    522c:	80c0030b 	ldhu	r3,12(r16)
    5230:	18fbffcc 	andi	r3,r3,61439
    5234:	80c0030d 	sth	r3,12(r16)
    5238:	dfc00117 	ldw	ra,4(sp)
    523c:	dc000017 	ldw	r16,0(sp)
    5240:	dec00204 	addi	sp,sp,8
    5244:	f800283a 	ret

00005248 <__sclose>:
    5248:	2940038f 	ldh	r5,14(r5)
    524c:	00052ac1 	jmpi	52ac <_close_r>

00005250 <_write_r>:
    5250:	defffd04 	addi	sp,sp,-12
    5254:	dc000015 	stw	r16,0(sp)
    5258:	04000074 	movhi	r16,1
    525c:	dc400115 	stw	r17,4(sp)
    5260:	8425e004 	addi	r16,r16,-26752
    5264:	2023883a 	mov	r17,r4
    5268:	2809883a 	mov	r4,r5
    526c:	300b883a 	mov	r5,r6
    5270:	380d883a 	mov	r6,r7
    5274:	dfc00215 	stw	ra,8(sp)
    5278:	80000015 	stw	zero,0(r16)
    527c:	00058780 	call	5878 <write>
    5280:	00ffffc4 	movi	r3,-1
    5284:	10c00526 	beq	r2,r3,529c <_write_r+0x4c>
    5288:	dfc00217 	ldw	ra,8(sp)
    528c:	dc400117 	ldw	r17,4(sp)
    5290:	dc000017 	ldw	r16,0(sp)
    5294:	dec00304 	addi	sp,sp,12
    5298:	f800283a 	ret
    529c:	80c00017 	ldw	r3,0(r16)
    52a0:	183ff926 	beq	r3,zero,5288 <__alt_mem_Flash_flash_data+0xf4005288>
    52a4:	88c00015 	stw	r3,0(r17)
    52a8:	003ff706 	br	5288 <__alt_mem_Flash_flash_data+0xf4005288>

000052ac <_close_r>:
    52ac:	defffd04 	addi	sp,sp,-12
    52b0:	dc000015 	stw	r16,0(sp)
    52b4:	04000074 	movhi	r16,1
    52b8:	dc400115 	stw	r17,4(sp)
    52bc:	8425e004 	addi	r16,r16,-26752
    52c0:	2023883a 	mov	r17,r4
    52c4:	2809883a 	mov	r4,r5
    52c8:	dfc00215 	stw	ra,8(sp)
    52cc:	80000015 	stw	zero,0(r16)
    52d0:	00029600 	call	2960 <close>
    52d4:	00ffffc4 	movi	r3,-1
    52d8:	10c00526 	beq	r2,r3,52f0 <_close_r+0x44>
    52dc:	dfc00217 	ldw	ra,8(sp)
    52e0:	dc400117 	ldw	r17,4(sp)
    52e4:	dc000017 	ldw	r16,0(sp)
    52e8:	dec00304 	addi	sp,sp,12
    52ec:	f800283a 	ret
    52f0:	80c00017 	ldw	r3,0(r16)
    52f4:	183ff926 	beq	r3,zero,52dc <__alt_mem_Flash_flash_data+0xf40052dc>
    52f8:	88c00015 	stw	r3,0(r17)
    52fc:	003ff706 	br	52dc <__alt_mem_Flash_flash_data+0xf40052dc>

00005300 <_fclose_r>:
    5300:	28003926 	beq	r5,zero,53e8 <_fclose_r+0xe8>
    5304:	defffc04 	addi	sp,sp,-16
    5308:	dc400115 	stw	r17,4(sp)
    530c:	dc000015 	stw	r16,0(sp)
    5310:	dfc00315 	stw	ra,12(sp)
    5314:	dc800215 	stw	r18,8(sp)
    5318:	2023883a 	mov	r17,r4
    531c:	2821883a 	mov	r16,r5
    5320:	20000226 	beq	r4,zero,532c <_fclose_r+0x2c>
    5324:	20800e17 	ldw	r2,56(r4)
    5328:	10002726 	beq	r2,zero,53c8 <_fclose_r+0xc8>
    532c:	8080030f 	ldh	r2,12(r16)
    5330:	1000071e 	bne	r2,zero,5350 <_fclose_r+0x50>
    5334:	0005883a 	mov	r2,zero
    5338:	dfc00317 	ldw	ra,12(sp)
    533c:	dc800217 	ldw	r18,8(sp)
    5340:	dc400117 	ldw	r17,4(sp)
    5344:	dc000017 	ldw	r16,0(sp)
    5348:	dec00404 	addi	sp,sp,16
    534c:	f800283a 	ret
    5350:	8809883a 	mov	r4,r17
    5354:	800b883a 	mov	r5,r16
    5358:	0003a6c0 	call	3a6c <__sflush_r>
    535c:	1025883a 	mov	r18,r2
    5360:	80800b17 	ldw	r2,44(r16)
    5364:	10000426 	beq	r2,zero,5378 <_fclose_r+0x78>
    5368:	81400717 	ldw	r5,28(r16)
    536c:	8809883a 	mov	r4,r17
    5370:	103ee83a 	callr	r2
    5374:	10001616 	blt	r2,zero,53d0 <_fclose_r+0xd0>
    5378:	8080030b 	ldhu	r2,12(r16)
    537c:	1080200c 	andi	r2,r2,128
    5380:	1000151e 	bne	r2,zero,53d8 <_fclose_r+0xd8>
    5384:	81400c17 	ldw	r5,48(r16)
    5388:	28000526 	beq	r5,zero,53a0 <_fclose_r+0xa0>
    538c:	80801004 	addi	r2,r16,64
    5390:	28800226 	beq	r5,r2,539c <_fclose_r+0x9c>
    5394:	8809883a 	mov	r4,r17
    5398:	00041c40 	call	41c4 <_free_r>
    539c:	80000c15 	stw	zero,48(r16)
    53a0:	81401117 	ldw	r5,68(r16)
    53a4:	28000326 	beq	r5,zero,53b4 <_fclose_r+0xb4>
    53a8:	8809883a 	mov	r4,r17
    53ac:	00041c40 	call	41c4 <_free_r>
    53b0:	80001115 	stw	zero,68(r16)
    53b4:	00040600 	call	4060 <__sfp_lock_acquire>
    53b8:	8000030d 	sth	zero,12(r16)
    53bc:	00040640 	call	4064 <__sfp_lock_release>
    53c0:	9005883a 	mov	r2,r18
    53c4:	003fdc06 	br	5338 <__alt_mem_Flash_flash_data+0xf4005338>
    53c8:	00040500 	call	4050 <__sinit>
    53cc:	003fd706 	br	532c <__alt_mem_Flash_flash_data+0xf400532c>
    53d0:	04bfffc4 	movi	r18,-1
    53d4:	003fe806 	br	5378 <__alt_mem_Flash_flash_data+0xf4005378>
    53d8:	81400417 	ldw	r5,16(r16)
    53dc:	8809883a 	mov	r4,r17
    53e0:	00041c40 	call	41c4 <_free_r>
    53e4:	003fe706 	br	5384 <__alt_mem_Flash_flash_data+0xf4005384>
    53e8:	0005883a 	mov	r2,zero
    53ec:	f800283a 	ret

000053f0 <fclose>:
    53f0:	00800034 	movhi	r2,0
    53f4:	109e6704 	addi	r2,r2,31132
    53f8:	200b883a 	mov	r5,r4
    53fc:	11000017 	ldw	r4,0(r2)
    5400:	00053001 	jmpi	5300 <_fclose_r>

00005404 <_fstat_r>:
    5404:	defffd04 	addi	sp,sp,-12
    5408:	dc000015 	stw	r16,0(sp)
    540c:	04000074 	movhi	r16,1
    5410:	dc400115 	stw	r17,4(sp)
    5414:	8425e004 	addi	r16,r16,-26752
    5418:	2023883a 	mov	r17,r4
    541c:	2809883a 	mov	r4,r5
    5420:	300b883a 	mov	r5,r6
    5424:	dfc00215 	stw	ra,8(sp)
    5428:	80000015 	stw	zero,0(r16)
    542c:	000557c0 	call	557c <fstat>
    5430:	00ffffc4 	movi	r3,-1
    5434:	10c00526 	beq	r2,r3,544c <_fstat_r+0x48>
    5438:	dfc00217 	ldw	ra,8(sp)
    543c:	dc400117 	ldw	r17,4(sp)
    5440:	dc000017 	ldw	r16,0(sp)
    5444:	dec00304 	addi	sp,sp,12
    5448:	f800283a 	ret
    544c:	80c00017 	ldw	r3,0(r16)
    5450:	183ff926 	beq	r3,zero,5438 <__alt_mem_Flash_flash_data+0xf4005438>
    5454:	88c00015 	stw	r3,0(r17)
    5458:	003ff706 	br	5438 <__alt_mem_Flash_flash_data+0xf4005438>

0000545c <_isatty_r>:
    545c:	defffd04 	addi	sp,sp,-12
    5460:	dc000015 	stw	r16,0(sp)
    5464:	04000074 	movhi	r16,1
    5468:	dc400115 	stw	r17,4(sp)
    546c:	8425e004 	addi	r16,r16,-26752
    5470:	2023883a 	mov	r17,r4
    5474:	2809883a 	mov	r4,r5
    5478:	dfc00215 	stw	ra,8(sp)
    547c:	80000015 	stw	zero,0(r16)
    5480:	00055fc0 	call	55fc <isatty>
    5484:	00ffffc4 	movi	r3,-1
    5488:	10c00526 	beq	r2,r3,54a0 <_isatty_r+0x44>
    548c:	dfc00217 	ldw	ra,8(sp)
    5490:	dc400117 	ldw	r17,4(sp)
    5494:	dc000017 	ldw	r16,0(sp)
    5498:	dec00304 	addi	sp,sp,12
    549c:	f800283a 	ret
    54a0:	80c00017 	ldw	r3,0(r16)
    54a4:	183ff926 	beq	r3,zero,548c <__alt_mem_Flash_flash_data+0xf400548c>
    54a8:	88c00015 	stw	r3,0(r17)
    54ac:	003ff706 	br	548c <__alt_mem_Flash_flash_data+0xf400548c>

000054b0 <_lseek_r>:
    54b0:	defffd04 	addi	sp,sp,-12
    54b4:	dc000015 	stw	r16,0(sp)
    54b8:	04000074 	movhi	r16,1
    54bc:	dc400115 	stw	r17,4(sp)
    54c0:	8425e004 	addi	r16,r16,-26752
    54c4:	2023883a 	mov	r17,r4
    54c8:	2809883a 	mov	r4,r5
    54cc:	300b883a 	mov	r5,r6
    54d0:	380d883a 	mov	r6,r7
    54d4:	dfc00215 	stw	ra,8(sp)
    54d8:	80000015 	stw	zero,0(r16)
    54dc:	000568c0 	call	568c <lseek>
    54e0:	00ffffc4 	movi	r3,-1
    54e4:	10c00526 	beq	r2,r3,54fc <_lseek_r+0x4c>
    54e8:	dfc00217 	ldw	ra,8(sp)
    54ec:	dc400117 	ldw	r17,4(sp)
    54f0:	dc000017 	ldw	r16,0(sp)
    54f4:	dec00304 	addi	sp,sp,12
    54f8:	f800283a 	ret
    54fc:	80c00017 	ldw	r3,0(r16)
    5500:	183ff926 	beq	r3,zero,54e8 <__alt_mem_Flash_flash_data+0xf40054e8>
    5504:	88c00015 	stw	r3,0(r17)
    5508:	003ff706 	br	54e8 <__alt_mem_Flash_flash_data+0xf40054e8>

0000550c <_read_r>:
    550c:	defffd04 	addi	sp,sp,-12
    5510:	dc000015 	stw	r16,0(sp)
    5514:	04000074 	movhi	r16,1
    5518:	dc400115 	stw	r17,4(sp)
    551c:	8425e004 	addi	r16,r16,-26752
    5520:	2023883a 	mov	r17,r4
    5524:	2809883a 	mov	r4,r5
    5528:	300b883a 	mov	r5,r6
    552c:	380d883a 	mov	r6,r7
    5530:	dfc00215 	stw	ra,8(sp)
    5534:	80000015 	stw	zero,0(r16)
    5538:	00057300 	call	5730 <read>
    553c:	00ffffc4 	movi	r3,-1
    5540:	10c00526 	beq	r2,r3,5558 <_read_r+0x4c>
    5544:	dfc00217 	ldw	ra,8(sp)
    5548:	dc400117 	ldw	r17,4(sp)
    554c:	dc000017 	ldw	r16,0(sp)
    5550:	dec00304 	addi	sp,sp,12
    5554:	f800283a 	ret
    5558:	80c00017 	ldw	r3,0(r16)
    555c:	183ff926 	beq	r3,zero,5544 <__alt_mem_Flash_flash_data+0xf4005544>
    5560:	88c00015 	stw	r3,0(r17)
    5564:	003ff706 	br	5544 <__alt_mem_Flash_flash_data+0xf4005544>

00005568 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    5568:	20000226 	beq	r4,zero,5574 <_exit+0xc>
    ALT_SIM_FAIL();
    556c:	002af070 	cmpltui	zero,zero,43969
    5570:	00000106 	br	5578 <_exit+0x10>
  } else {
    ALT_SIM_PASS();
    5574:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    5578:	003fff06 	br	5578 <__alt_mem_Flash_flash_data+0xf4005578>

0000557c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    557c:	deffff04 	addi	sp,sp,-4
    5580:	dfc00015 	stw	ra,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5584:	20000f16 	blt	r4,zero,55c4 <fstat+0x48>
    5588:	20c00324 	muli	r3,r4,12
    558c:	00800034 	movhi	r2,0
    5590:	109be804 	addi	r2,r2,28576
    5594:	1887883a 	add	r3,r3,r2
  
  if (fd)
    5598:	18000a26 	beq	r3,zero,55c4 <fstat+0x48>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    559c:	18800017 	ldw	r2,0(r3)
    55a0:	10800817 	ldw	r2,32(r2)
    55a4:	10000326 	beq	r2,zero,55b4 <fstat+0x38>
    {
      return fd->dev->fstat(fd, st);
    55a8:	1809883a 	mov	r4,r3
    55ac:	103ee83a 	callr	r2
    55b0:	00000f06 	br	55f0 <fstat+0x74>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    55b4:	00880004 	movi	r2,8192
    55b8:	28800115 	stw	r2,4(r5)
      return 0;
    55bc:	0005883a 	mov	r2,zero
    55c0:	00000b06 	br	55f0 <fstat+0x74>
    55c4:	00800034 	movhi	r2,0
    55c8:	109e6204 	addi	r2,r2,31112
    55cc:	10800017 	ldw	r2,0(r2)
    55d0:	10000226 	beq	r2,zero,55dc <fstat+0x60>
    55d4:	103ee83a 	callr	r2
    55d8:	00000206 	br	55e4 <fstat+0x68>
    55dc:	00800074 	movhi	r2,1
    55e0:	10a5e004 	addi	r2,r2,-26752
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    55e4:	00c01444 	movi	r3,81
    55e8:	10c00015 	stw	r3,0(r2)
    return -1;
    55ec:	00bfffc4 	movi	r2,-1
  }
}
    55f0:	dfc00017 	ldw	ra,0(sp)
    55f4:	dec00104 	addi	sp,sp,4
    55f8:	f800283a 	ret

000055fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    55fc:	defff004 	addi	sp,sp,-64
    5600:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5604:	20001116 	blt	r4,zero,564c <isatty+0x50>
    5608:	20c00324 	muli	r3,r4,12
    560c:	00800034 	movhi	r2,0
    5610:	109be804 	addi	r2,r2,28576
    5614:	1885883a 	add	r2,r3,r2
  
  if (fd)
    5618:	10000c26 	beq	r2,zero,564c <isatty+0x50>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    561c:	1805883a 	mov	r2,r3
    5620:	00c00034 	movhi	r3,0
    5624:	18dbe804 	addi	r3,r3,28576
    5628:	1885883a 	add	r2,r3,r2
    562c:	10800017 	ldw	r2,0(r2)
    5630:	10800817 	ldw	r2,32(r2)
    5634:	10001126 	beq	r2,zero,567c <isatty+0x80>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    5638:	d80b883a 	mov	r5,sp
    563c:	000557c0 	call	557c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    5640:	d8800117 	ldw	r2,4(sp)
    5644:	10880020 	cmpeqi	r2,r2,8192
    5648:	00000d06 	br	5680 <isatty+0x84>
    564c:	00800034 	movhi	r2,0
    5650:	109e6204 	addi	r2,r2,31112
    5654:	10800017 	ldw	r2,0(r2)
    5658:	10000226 	beq	r2,zero,5664 <isatty+0x68>
    565c:	103ee83a 	callr	r2
    5660:	00000206 	br	566c <isatty+0x70>
    5664:	00800074 	movhi	r2,1
    5668:	10a5e004 	addi	r2,r2,-26752
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    566c:	00c01444 	movi	r3,81
    5670:	10c00015 	stw	r3,0(r2)
    return 0;
    5674:	0005883a 	mov	r2,zero
    5678:	00000106 	br	5680 <isatty+0x84>
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
    567c:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
    5680:	dfc00f17 	ldw	ra,60(sp)
    5684:	dec01004 	addi	sp,sp,64
    5688:	f800283a 	ret

0000568c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    568c:	defffe04 	addi	sp,sp,-8
    5690:	dfc00115 	stw	ra,4(sp)
    5694:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5698:	20000d16 	blt	r4,zero,56d0 <lseek+0x44>
    569c:	20c00324 	muli	r3,r4,12
    56a0:	00800034 	movhi	r2,0
    56a4:	109be804 	addi	r2,r2,28576
    56a8:	1887883a 	add	r3,r3,r2
  
  if (fd) 
    56ac:	18001526 	beq	r3,zero,5704 <lseek+0x78>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    56b0:	18800017 	ldw	r2,0(r3)
    56b4:	10800717 	ldw	r2,28(r2)
    56b8:	10001426 	beq	r2,zero,570c <lseek+0x80>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    56bc:	1809883a 	mov	r4,r3
    56c0:	103ee83a 	callr	r2
    56c4:	1021883a 	mov	r16,r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
    56c8:	1000120e 	bge	r2,zero,5714 <lseek+0x88>
    56cc:	00000106 	br	56d4 <lseek+0x48>
      rc = -ENOTSUP;
    }
  }
  else  
  {
    rc = -EBADFD;
    56d0:	043febc4 	movi	r16,-81
    56d4:	00800034 	movhi	r2,0
    56d8:	109e6204 	addi	r2,r2,31112
    56dc:	10800017 	ldw	r2,0(r2)
    56e0:	10000226 	beq	r2,zero,56ec <lseek+0x60>
    56e4:	103ee83a 	callr	r2
    56e8:	00000206 	br	56f4 <lseek+0x68>
    56ec:	00800074 	movhi	r2,1
    56f0:	10a5e004 	addi	r2,r2,-26752
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
    56f4:	0421c83a 	sub	r16,zero,r16
    56f8:	14000015 	stw	r16,0(r2)
    rc = -1;
    56fc:	043fffc4 	movi	r16,-1
    5700:	00000406 	br	5714 <lseek+0x88>
      rc = -ENOTSUP;
    }
  }
  else  
  {
    rc = -EBADFD;
    5704:	043febc4 	movi	r16,-81
    5708:	003ff206 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    570c:	043fde84 	movi	r16,-134
    5710:	003ff006 	br	56d4 <__alt_mem_Flash_flash_data+0xf40056d4>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
    5714:	8005883a 	mov	r2,r16
    5718:	dfc00117 	ldw	ra,4(sp)
    571c:	dc000017 	ldw	r16,0(sp)
    5720:	dec00204 	addi	sp,sp,8
    5724:	f800283a 	ret

00005728 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    5728:	f800283a 	ret

0000572c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    572c:	f800283a 	ret

00005730 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    5730:	defffe04 	addi	sp,sp,-8
    5734:	dfc00115 	stw	ra,4(sp)
    5738:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    573c:	20002c16 	blt	r4,zero,57f0 <read+0xc0>
    5740:	21c00324 	muli	r7,r4,12
    5744:	00800034 	movhi	r2,0
    5748:	109be804 	addi	r2,r2,28576
    574c:	388f883a 	add	r7,r7,r2
  
  if (fd)
    5750:	38002726 	beq	r7,zero,57f0 <read+0xc0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    5754:	20800324 	muli	r2,r4,12
    5758:	00c00034 	movhi	r3,0
    575c:	18dbea04 	addi	r3,r3,28584
    5760:	10c5883a 	add	r2,r2,r3
    5764:	10800017 	ldw	r2,0(r2)
    5768:	108000cc 	andi	r2,r2,3
    576c:	00c00044 	movi	r3,1
    5770:	10c01326 	beq	r2,r3,57c0 <read+0x90>
        (fd->dev->read))
    5774:	38800017 	ldw	r2,0(r7)
    5778:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    577c:	10001026 	beq	r2,zero,57c0 <read+0x90>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    5780:	3809883a 	mov	r4,r7
    5784:	103ee83a 	callr	r2
    5788:	1021883a 	mov	r16,r2
    578c:	8000230e 	bge	r16,zero,581c <read+0xec>
    5790:	00800034 	movhi	r2,0
    5794:	109e6204 	addi	r2,r2,31112
    5798:	10800017 	ldw	r2,0(r2)
    579c:	10000226 	beq	r2,zero,57a8 <read+0x78>
    57a0:	103ee83a 	callr	r2
    57a4:	00000206 	br	57b0 <read+0x80>
    57a8:	00800074 	movhi	r2,1
    57ac:	10a5e004 	addi	r2,r2,-26752
        {
          ALT_ERRNO = -rval;
    57b0:	0421c83a 	sub	r16,zero,r16
    57b4:	14000015 	stw	r16,0(r2)
          return -1;
    57b8:	00bfffc4 	movi	r2,-1
    57bc:	00001706 	br	581c <read+0xec>
    57c0:	00800034 	movhi	r2,0
    57c4:	109e6204 	addi	r2,r2,31112
    57c8:	10800017 	ldw	r2,0(r2)
    57cc:	10000226 	beq	r2,zero,57d8 <read+0xa8>
    57d0:	103ee83a 	callr	r2
    57d4:	00000206 	br	57e0 <read+0xb0>
    57d8:	00800074 	movhi	r2,1
    57dc:	10a5e004 	addi	r2,r2,-26752
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
    57e0:	00c00344 	movi	r3,13
    57e4:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    57e8:	00bfffc4 	movi	r2,-1
    57ec:	00000b06 	br	581c <read+0xec>
    57f0:	00800034 	movhi	r2,0
    57f4:	109e6204 	addi	r2,r2,31112
    57f8:	10800017 	ldw	r2,0(r2)
    57fc:	10000226 	beq	r2,zero,5808 <read+0xd8>
    5800:	103ee83a 	callr	r2
    5804:	00000206 	br	5810 <read+0xe0>
    5808:	00800074 	movhi	r2,1
    580c:	10a5e004 	addi	r2,r2,-26752
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    5810:	00c01444 	movi	r3,81
    5814:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    5818:	00bfffc4 	movi	r2,-1
}
    581c:	dfc00117 	ldw	ra,4(sp)
    5820:	dc000017 	ldw	r16,0(sp)
    5824:	dec00204 	addi	sp,sp,8
    5828:	f800283a 	ret

0000582c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    582c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5830:	00bfff84 	movi	r2,-2
    5834:	2884703a 	and	r2,r5,r2
    5838:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    583c:	d0a00d17 	ldw	r2,-32716(gp)
    5840:	108000c4 	addi	r2,r2,3
    5844:	00ffff04 	movi	r3,-4
    5848:	10c4703a 	and	r2,r2,r3
    584c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    5850:	1109883a 	add	r4,r2,r4
    5854:	00c20034 	movhi	r3,2048
    5858:	18c00004 	addi	r3,r3,0
    585c:	1900032e 	bgeu	r3,r4,586c <sbrk+0x40>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5860:	2801703a 	wrctl	status,r5
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    5864:	00bfffc4 	movi	r2,-1
    5868:	f800283a 	ret
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
    586c:	d1200d15 	stw	r4,-32716(gp)
    5870:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
    5874:	f800283a 	ret

00005878 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5878:	defffe04 	addi	sp,sp,-8
    587c:	dfc00115 	stw	ra,4(sp)
    5880:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    5884:	20002b16 	blt	r4,zero,5934 <write+0xbc>
    5888:	21c00324 	muli	r7,r4,12
    588c:	00800034 	movhi	r2,0
    5890:	109be804 	addi	r2,r2,28576
    5894:	388f883a 	add	r7,r7,r2
  
  if (fd)
    5898:	38002626 	beq	r7,zero,5934 <write+0xbc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    589c:	20800324 	muli	r2,r4,12
    58a0:	00c00034 	movhi	r3,0
    58a4:	18dbea04 	addi	r3,r3,28584
    58a8:	10c5883a 	add	r2,r2,r3
    58ac:	10800017 	ldw	r2,0(r2)
    58b0:	108000cc 	andi	r2,r2,3
    58b4:	10001326 	beq	r2,zero,5904 <write+0x8c>
    58b8:	38800017 	ldw	r2,0(r7)
    58bc:	10800617 	ldw	r2,24(r2)
    58c0:	10001026 	beq	r2,zero,5904 <write+0x8c>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    58c4:	3809883a 	mov	r4,r7
    58c8:	103ee83a 	callr	r2
    58cc:	1021883a 	mov	r16,r2
    58d0:	8000230e 	bge	r16,zero,5960 <write+0xe8>
    58d4:	00800034 	movhi	r2,0
    58d8:	109e6204 	addi	r2,r2,31112
    58dc:	10800017 	ldw	r2,0(r2)
    58e0:	10000226 	beq	r2,zero,58ec <write+0x74>
    58e4:	103ee83a 	callr	r2
    58e8:	00000206 	br	58f4 <write+0x7c>
    58ec:	00800074 	movhi	r2,1
    58f0:	10a5e004 	addi	r2,r2,-26752
      {
        ALT_ERRNO = -rval;
    58f4:	0421c83a 	sub	r16,zero,r16
    58f8:	14000015 	stw	r16,0(r2)
        return -1;
    58fc:	00bfffc4 	movi	r2,-1
    5900:	00001706 	br	5960 <write+0xe8>
    5904:	00800034 	movhi	r2,0
    5908:	109e6204 	addi	r2,r2,31112
    590c:	10800017 	ldw	r2,0(r2)
    5910:	10000226 	beq	r2,zero,591c <write+0xa4>
    5914:	103ee83a 	callr	r2
    5918:	00000206 	br	5924 <write+0xac>
    591c:	00800074 	movhi	r2,1
    5920:	10a5e004 	addi	r2,r2,-26752
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
    5924:	00c00344 	movi	r3,13
    5928:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
    592c:	00bfffc4 	movi	r2,-1
    5930:	00000b06 	br	5960 <write+0xe8>
    5934:	00800034 	movhi	r2,0
    5938:	109e6204 	addi	r2,r2,31112
    593c:	10800017 	ldw	r2,0(r2)
    5940:	10000226 	beq	r2,zero,594c <write+0xd4>
    5944:	103ee83a 	callr	r2
    5948:	00000206 	br	5954 <write+0xdc>
    594c:	00800074 	movhi	r2,1
    5950:	10a5e004 	addi	r2,r2,-26752
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    5954:	00c01444 	movi	r3,81
    5958:	10c00015 	stw	r3,0(r2)
  }
  return -1;
    595c:	00bfffc4 	movi	r2,-1
}
    5960:	dfc00117 	ldw	ra,4(sp)
    5964:	dc000017 	ldw	r16,0(sp)
    5968:	dec00204 	addi	sp,sp,8
    596c:	f800283a 	ret
